
Step_Driver_V3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a4  0800c7a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7a4  0800c7a4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7a4  0800c7a4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a8  0800c7a8  0001c7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800c7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000007d4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000083c  2000083c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001922f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003109  00000000  00000000  0003930a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001520  00000000  00000000  0003c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010a4  00000000  00000000  0003d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020b0e  00000000  00000000  0003e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c4a0  00000000  00000000  0005f4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8579  00000000  00000000  0007b98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005eb8  00000000  00000000  00143f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00149dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c678 	.word	0x0800c678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800c678 	.word	0x0800c678

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800028e:	2303      	movs	r3, #3
 8000290:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <ADC_Select_CH1+0x34>)
 8000298:	f003 ff8e 	bl	80041b8 <HAL_ADC_ConfigChannel>
	     }
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000124 	.word	0x20000124

080002a8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 80002be:	230c      	movs	r3, #12
 80002c0:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <ADC_Select_CH12+0x34>)
 80002d0:	f003 ff72 	bl	80041b8 <HAL_ADC_ConfigChannel>
	     }
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000124 	.word	0x20000124

080002e0 <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 80002e4:	f7ff ffc4 	bl	8000270 <ADC_Select_CH1>
	current[1]=0;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <ADC_read_1+0x38>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <ADC_read_1+0x3c>)
 80002f0:	f003 f808 	bl	8003304 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <ADC_read_1+0x3c>)
 80002f8:	f003 f950 	bl	800359c <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <ADC_read_1+0x3c>)
 80002fe:	f003 fbcd 	bl	8003a9c <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <ADC_read_1+0x38>)
 8000308:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <ADC_read_1+0x3c>)
 800030c:	f003 f910 	bl	8003530 <HAL_ADC_Stop>


	 		  return current[1];
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <ADC_read_1+0x38>)
 8000312:	885b      	ldrh	r3, [r3, #2]
	  }
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200004f4 	.word	0x200004f4
 800031c:	20000124 	.word	0x20000124

08000320 <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000324:	f7ff ffc0 	bl	80002a8 <ADC_Select_CH12>
	current[0]=0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <ADC_read_12+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <ADC_read_12+0x3c>)
 8000330:	f002 ffe8 	bl	8003304 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <ADC_read_12+0x3c>)
 8000338:	f003 f930 	bl	800359c <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <ADC_read_12+0x3c>)
 800033e:	f003 fbad 	bl	8003a9c <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_read_12+0x38>)
 8000348:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ADC_read_12+0x3c>)
 800034c:	f003 f8f0 	bl	8003530 <HAL_ADC_Stop>


	 		  return current[0];
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <ADC_read_12+0x38>)
 8000352:	881b      	ldrh	r3, [r3, #0]
	  }
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200004f4 	.word	0x200004f4
 800035c:	20000124 	.word	0x20000124

08000360 <PWM_correction>:


void PWM_correction(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	e070      	b.n	800044e <PWM_correction+0xee>


	pwm[i]=pwm_cmd;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a45      	ldr	r2, [pc, #276]	; (8000484 <PWM_correction+0x124>)
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	b291      	uxth	r1, r2
 8000374:	4a44      	ldr	r2, [pc, #272]	; (8000488 <PWM_correction+0x128>)
 8000376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if((hall_sens[i]>=limit)&&(pwm[i]>=10)){
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4a43      	ldr	r2, [pc, #268]	; (800048c <PWM_correction+0x12c>)
 800037e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000382:	4b43      	ldr	r3, [pc, #268]	; (8000490 <PWM_correction+0x130>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d314      	bcc.n	80003b4 <PWM_correction+0x54>
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a3e      	ldr	r2, [pc, #248]	; (8000488 <PWM_correction+0x128>)
 800038e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000392:	2b09      	cmp	r3, #9
 8000394:	d90e      	bls.n	80003b4 <PWM_correction+0x54>
	pwm[i]=pwm[i]-10;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a3b      	ldr	r2, [pc, #236]	; (8000488 <PWM_correction+0x128>)
 800039a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3a0a      	subs	r2, #10
 80003a2:	b291      	uxth	r1, r2
 80003a4:	4a38      	ldr	r2, [pc, #224]	; (8000488 <PWM_correction+0x128>)
 80003a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    LED_2_ON;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	4839      	ldr	r0, [pc, #228]	; (8000494 <PWM_correction+0x134>)
 80003b0:	f005 f99e 	bl	80056f0 <HAL_GPIO_WritePin>
	}


	if(hall_sens[i]>=3800){
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a35      	ldr	r2, [pc, #212]	; (800048c <PWM_correction+0x12c>)
 80003b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003bc:	f640 62d7 	movw	r2, #3799	; 0xed7
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d930      	bls.n	8000426 <PWM_correction+0xc6>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003c4:	2100      	movs	r1, #0
 80003c6:	4834      	ldr	r0, [pc, #208]	; (8000498 <PWM_correction+0x138>)
 80003c8:	f008 fc6a 	bl	8008ca0 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003cc:	2104      	movs	r1, #4
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <PWM_correction+0x138>)
 80003d0:	f008 fc66 	bl	8008ca0 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80003d4:	2100      	movs	r1, #0
 80003d6:	4831      	ldr	r0, [pc, #196]	; (800049c <PWM_correction+0x13c>)
 80003d8:	f008 fc62 	bl	8008ca0 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4830      	ldr	r0, [pc, #192]	; (80004a0 <PWM_correction+0x140>)
 80003e0:	f008 fc5e 	bl	8008ca0 <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80003e4:	2100      	movs	r1, #0
 80003e6:	482c      	ldr	r0, [pc, #176]	; (8000498 <PWM_correction+0x138>)
 80003e8:	f00a f892 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80003ec:	2104      	movs	r1, #4
 80003ee:	482a      	ldr	r0, [pc, #168]	; (8000498 <PWM_correction+0x138>)
 80003f0:	f00a f88e 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	4829      	ldr	r0, [pc, #164]	; (800049c <PWM_correction+0x13c>)
 80003f8:	f00a f88a 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 80003fc:	2100      	movs	r1, #0
 80003fe:	4828      	ldr	r0, [pc, #160]	; (80004a0 <PWM_correction+0x140>)
 8000400:	f00a f886 	bl	800a510 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <PWM_correction+0x128>)
 8000406:	220a      	movs	r2, #10
 8000408:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <PWM_correction+0x128>)
 800040c:	220a      	movs	r2, #10
 800040e:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <PWM_correction+0x128>)
 8000412:	220a      	movs	r2, #10
 8000414:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <PWM_correction+0x128>)
 8000418:	220a      	movs	r2, #10
 800041a:	80da      	strh	r2, [r3, #6]

		            LED_2_ON;}
 800041c:	2201      	movs	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	481c      	ldr	r0, [pc, #112]	; (8000494 <PWM_correction+0x134>)
 8000422:	f005 f965 	bl	80056f0 <HAL_GPIO_WritePin>

	if((pwm[i]>=10)&&(hall_sens[i]<=10)){LED_2_OFF;}
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <PWM_correction+0x128>)
 800042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d90a      	bls.n	8000448 <PWM_correction+0xe8>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <PWM_correction+0x12c>)
 8000436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043a:	2b0a      	cmp	r3, #10
 800043c:	d804      	bhi.n	8000448 <PWM_correction+0xe8>
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <PWM_correction+0x134>)
 8000444:	f005 f954 	bl	80056f0 <HAL_GPIO_WritePin>
for(uint8_t i=0;i<4;i++){
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	3301      	adds	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d98b      	bls.n	800036c <PWM_correction+0xc>

}
pwm_n=(pwm[0]+pwm[1]+pwm[2]+pwm[3])/4;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <PWM_correction+0x128>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <PWM_correction+0x128>)
 800045c:	885b      	ldrh	r3, [r3, #2]
 800045e:	4413      	add	r3, r2
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <PWM_correction+0x128>)
 8000462:	8892      	ldrh	r2, [r2, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <PWM_correction+0x128>)
 8000468:	88d2      	ldrh	r2, [r2, #6]
 800046a:	4413      	add	r3, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	da00      	bge.n	8000472 <PWM_correction+0x112>
 8000470:	3303      	adds	r3, #3
 8000472:	109b      	asrs	r3, r3, #2
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <PWM_correction+0x144>)
 8000478:	801a      	strh	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000050a 	.word	0x2000050a
 8000488:	20000000 	.word	0x20000000
 800048c:	200004fc 	.word	0x200004fc
 8000490:	20000008 	.word	0x20000008
 8000494:	48001400 	.word	0x48001400
 8000498:	2000022c 	.word	0x2000022c
 800049c:	200002c4 	.word	0x200002c4
 80004a0:	20000310 	.word	0x20000310
 80004a4:	20000508 	.word	0x20000508

080004a8 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	79bb      	ldrb	r3, [r7, #6]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <lcd_write_nibble+0x7c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80004e8:	f107 020f 	add.w	r2, r7, #15
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	214e      	movs	r1, #78	; 0x4e
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <lcd_write_nibble+0x80>)
 80004f6:	f005 f9d5 	bl	80058a4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f002 fce0 	bl	8002ec0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	b2db      	uxtb	r3, r3
 8000508:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800050a:	f107 020f 	add.w	r2, r7, #15
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	214e      	movs	r1, #78	; 0x4e
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <lcd_write_nibble+0x80>)
 8000518:	f005 f9c4 	bl	80058a4 <HAL_I2C_Master_Transmit>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000000a 	.word	0x2000000a
 8000528:	200001b8 	.word	0x200001b8

0800052c <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 030f 	and.w	r3, r3, #15
 8000542:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffad 	bl	80004a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ffa8 	bl	80004a8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d002      	beq.n	8000564 <lcd_send_cmd+0x38>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d102      	bne.n	800056a <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000564:	2002      	movs	r0, #2
 8000566:	f002 fcab 	bl	8002ec0 <HAL_Delay>
  }
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	4603      	mov	r3, r0
 800057a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff8a 	bl	80004a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff85 	bl	80004a8 <lcd_write_nibble>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	; 0x32
 80005ac:	f002 fc88 	bl	8002ec0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2003      	movs	r0, #3
 80005b4:	f7ff ff78 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(5);
 80005b8:	2005      	movs	r0, #5
 80005ba:	f002 fc81 	bl	8002ec0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005be:	2100      	movs	r1, #0
 80005c0:	2003      	movs	r0, #3
 80005c2:	f7ff ff71 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f002 fc7a 	bl	8002ec0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2003      	movs	r0, #3
 80005d0:	f7ff ff6a 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f002 fc73 	bl	8002ec0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2002      	movs	r0, #2
 80005de:	f7ff ff63 	bl	80004a8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80005e2:	2028      	movs	r0, #40	; 0x28
 80005e4:	f7ff ffa2 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80005e8:	200c      	movs	r0, #12
 80005ea:	f7ff ff9f 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80005ee:	2006      	movs	r0, #6
 80005f0:	f7ff ff9c 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ff99 	bl	800052c <lcd_send_cmd>
  HAL_Delay(2);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f002 fc60 	bl	8002ec0 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  while (*str) {
 800060c:	e006      	b.n	800061c <lcd_write_string+0x18>
    lcd_send_data(*str++);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffab 	bl	8000572 <lcd_send_data>
  while (*str) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f4      	bne.n	800060e <lcd_write_string+0xa>
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3b01      	subs	r3, #1
 8000644:	2b03      	cmp	r3, #3
 8000646:	d817      	bhi.n	8000678 <lcd_set_cursor+0x48>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <lcd_set_cursor+0x20>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000661 	.word	0x08000661
 8000654:	08000667 	.word	0x08000667
 8000658:	0800066d 	.word	0x0800066d
 800065c:	08000673 	.word	0x08000673
        case 1:
            address = 0x80;
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	73fb      	strb	r3, [r7, #15]
            break;
 8000664:	e00a      	b.n	800067c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000666:	23c0      	movs	r3, #192	; 0xc0
 8000668:	73fb      	strb	r3, [r7, #15]
            break;
 800066a:	e007      	b.n	800067c <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 800066c:	2394      	movs	r3, #148	; 0x94
 800066e:	73fb      	strb	r3, [r7, #15]
            break;
 8000670:	e004      	b.n	800067c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000672:	23d4      	movs	r3, #212	; 0xd4
 8000674:	73fb      	strb	r3, [r7, #15]
            break;
 8000676:	e001      	b.n	800067c <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	4413      	add	r3, r2
 8000682:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff4d 	bl	800052c <lcd_send_cmd>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop

0800069c <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff43 	bl	800052c <lcd_send_cmd>
    HAL_Delay(2);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f002 fc0a 	bl	8002ec0 <HAL_Delay>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <HAL_UARTEx_RxEventCallback>:
//////////////////////////////////////////////////////////////////////////////////////////////



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <HAL_UARTEx_RxEventCallback+0x104>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d172      	bne.n	80007ac <HAL_UARTEx_RxEventCallback+0xfc>
	{

				 if (rxFrame[0] == SLAVE_ID) {
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <HAL_UARTEx_RxEventCallback+0x108>)
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <HAL_UARTEx_RxEventCallback+0x10c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d15f      	bne.n	8000792 <HAL_UARTEx_RxEventCallback+0xe2>

					//if( (calcCRC16ModBus(rxFrame, sizeof(rxFrame)))==   )
					  			 		uint8_t opCode = rxFrame[1];
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <HAL_UARTEx_RxEventCallback+0x108>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	73fb      	strb	r3, [r7, #15]
					  			     switch (opCode) {
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	3b02      	subs	r3, #2
 80006dc:	2b0e      	cmp	r3, #14
 80006de:	d857      	bhi.n	8000790 <HAL_UARTEx_RxEventCallback+0xe0>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000725 	.word	0x08000725
 80006ec:	08000791 	.word	0x08000791
 80006f0:	0800072f 	.word	0x0800072f
 80006f4:	08000791 	.word	0x08000791
 80006f8:	08000739 	.word	0x08000739
 80006fc:	08000791 	.word	0x08000791
 8000700:	08000791 	.word	0x08000791
 8000704:	08000791 	.word	0x08000791
 8000708:	08000791 	.word	0x08000791
 800070c:	08000791 	.word	0x08000791
 8000710:	08000791 	.word	0x08000791
 8000714:	08000791 	.word	0x08000791
 8000718:	08000791 	.word	0x08000791
 800071c:	08000791 	.word	0x08000791
 8000720:	0800074b 	.word	0x0800074b

					  			   case   READ_DISC_INPUTs:


					  				handleReadInputRegs(&huart2,0xFF);
 8000724:	21ff      	movs	r1, #255	; 0xff
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000728:	f001 fd40 	bl	80021ac <handleReadInputRegs>
								   break;
 800072c:	e031      	b.n	8000792 <HAL_UARTEx_RxEventCallback+0xe2>

					  			      // case READ_COILs:

					  			    	 break;
					  			       case  READ_INPUT_REGs:
					  			    	 handleReadHoldingRegs(&huart2,data_reg);
 800072e:	4925      	ldr	r1, [pc, #148]	; (80007c4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000732:	f001 fcbd 	bl	80020b0 <handleReadHoldingRegs>


					  			    	   break;
 8000736:	e02c      	b.n	8000792 <HAL_UARTEx_RxEventCallback+0xe2>
					  			     case WRITE_SINGLE_REG:

					  			   					  			    //	 handleWriteSingleHandlingRegister (&huart2,data_reg);
					  			   					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8000738:	4923      	ldr	r1, [pc, #140]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 800073a:	4821      	ldr	r0, [pc, #132]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x110>)
 800073c:	f001 fdae 	bl	800229c <handleWriteMulyipleHandlingRegister>
					  			                                              pwm_cmd=rcv_data_reg[1];
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000742:	885a      	ldrh	r2, [r3, #2]
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000746:	801a      	strh	r2, [r3, #0]

					  			                                               break;
 8000748:	e023      	b.n	8000792 <HAL_UARTEx_RxEventCallback+0xe2>

					  			       case WRITE_HOLDING_REGs:


					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800074a:	491f      	ldr	r1, [pc, #124]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 800074c:	481c      	ldr	r0, [pc, #112]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x110>)
 800074e:	f001 fda5 	bl	800229c <handleWriteMulyipleHandlingRegister>
					  			    	 pwm_cmd=rcv_data_reg[1];
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000754:	885a      	ldrh	r2, [r3, #2]
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000758:	801a      	strh	r2, [r3, #0]
					  			    	 limit=rcv_data_reg[2];
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 800075c:	889a      	ldrh	r2, [r3, #4]
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000760:	801a      	strh	r2, [r3, #0]

					  		sTime.Hours=(rcv_data_reg[3]>>8) & 0xff;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000764:	88db      	ldrh	r3, [r3, #6]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 800076e:	701a      	strb	r2, [r3, #0]
					  		sTime.Minutes= rcv_data_reg[3] & 0xff;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000772:	88db      	ldrh	r3, [r3, #6]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000778:	705a      	strb	r2, [r3, #1]
					  		sTime.Seconds=rcv_data_reg[4];
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 800077c:	891b      	ldrh	r3, [r3, #8]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000782:	709a      	strb	r2, [r3, #2]
					  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000784:	2201      	movs	r2, #1
 8000786:	4913      	ldr	r1, [pc, #76]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 800078a:	f007 fe48 	bl	800841e <HAL_RTC_SetTime>



                                            break;
 800078e:	e000      	b.n	8000792 <HAL_UARTEx_RxEventCallback+0xe2>


					  			       default:
					  			 				break;
 8000790:	bf00      	nop

					  			 }



		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxFrame,sizeof(rxFrame));
 8000792:	221c      	movs	r2, #28
 8000794:	4908      	ldr	r1, [pc, #32]	; (80007b8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000798:	f00b fa75 	bl	800bc86 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 0204 	bic.w	r2, r2, #4
 80007aa:	601a      	str	r2, [r3, #0]

	}
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	20000550 	.word	0x20000550
 80007bc:	2000000b 	.word	0x2000000b
 80007c0:	200003e4 	.word	0x200003e4
 80007c4:	2000066c 	.word	0x2000066c
 80007c8:	200006ac 	.word	0x200006ac
 80007cc:	2000050a 	.word	0x2000050a
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200006d0 	.word	0x200006d0
 80007d8:	2000020c 	.word	0x2000020c
 80007dc:	200004b0 	.word	0x200004b0

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f002 fb05 	bl	8002df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 fb73 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f001 f911 	bl	8001a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f2:	f001 f8d5 	bl	80019a0 <MX_DMA_Init>
  MX_ADC2_Init();
 80007f6:	f000 fc49 	bl	800108c <MX_ADC2_Init>
  MX_TIM1_Init();
 80007fa:	f000 fde7 	bl	80013cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80007fe:	f000 fe9d 	bl	800153c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000802:	f001 f86d 	bl	80018e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000806:	f001 f89b 	bl	8001940 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800080a:	f000 ff19 	bl	8001640 <MX_TIM8_Init>
  MX_I2C1_Init();
 800080e:	f000 fd43 	bl	8001298 <MX_I2C1_Init>
  MX_RTC_Init();
 8000812:	f000 fd81 	bl	8001318 <MX_RTC_Init>
  MX_TIM15_Init();
 8000816:	f000 ffbf 	bl	8001798 <MX_TIM15_Init>
  MX_ADC1_Init();
 800081a:	f000 fbc7 	bl	8000fac <MX_ADC1_Init>
  MX_ADC3_Init();
 800081e:	f000 fccb 	bl	80011b8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  LED_2_ON;
 8000822:	2201      	movs	r2, #1
 8000824:	2101      	movs	r1, #1
 8000826:	4892      	ldr	r0, [pc, #584]	; (8000a70 <main+0x290>)
 8000828:	f004 ff62 	bl	80056f0 <HAL_GPIO_WritePin>
	TX_2;
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f004 ff5b 	bl	80056f0 <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 800083a:	4b8e      	ldr	r3, [pc, #568]	; (8000a74 <main+0x294>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	4b8e      	ldr	r3, [pc, #568]	; (8000a78 <main+0x298>)
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 8000842:	4b8c      	ldr	r3, [pc, #560]	; (8000a74 <main+0x294>)
 8000844:	885a      	ldrh	r2, [r3, #2]
 8000846:	4b8c      	ldr	r3, [pc, #560]	; (8000a78 <main+0x298>)
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 800084a:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <main+0x294>)
 800084c:	889a      	ldrh	r2, [r3, #4]
 800084e:	4b8b      	ldr	r3, [pc, #556]	; (8000a7c <main+0x29c>)
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 8000852:	4b88      	ldr	r3, [pc, #544]	; (8000a74 <main+0x294>)
 8000854:	88da      	ldrh	r2, [r3, #6]
 8000856:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <main+0x2a0>)
 8000858:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800085a:	2100      	movs	r1, #0
 800085c:	4889      	ldr	r0, [pc, #548]	; (8000a84 <main+0x2a4>)
 800085e:	f008 f91f 	bl	8008aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000862:	2104      	movs	r1, #4
 8000864:	4887      	ldr	r0, [pc, #540]	; (8000a84 <main+0x2a4>)
 8000866:	f008 f91b 	bl	8008aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800086a:	2100      	movs	r1, #0
 800086c:	4886      	ldr	r0, [pc, #536]	; (8000a88 <main+0x2a8>)
 800086e:	f008 f917 	bl	8008aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	4885      	ldr	r0, [pc, #532]	; (8000a8c <main+0x2ac>)
 8000876:	f008 f913 	bl	8008aa0 <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	4884      	ldr	r0, [pc, #528]	; (8000a90 <main+0x2b0>)
 800087e:	f008 fb07 	bl	8008e90 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	4882      	ldr	r0, [pc, #520]	; (8000a90 <main+0x2b0>)
 8000886:	f008 fb03 	bl	8008e90 <HAL_TIM_IC_Start_IT>

  PORT1_ON;
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000890:	4880      	ldr	r0, [pc, #512]	; (8000a94 <main+0x2b4>)
 8000892:	f004 ff2d 	bl	80056f0 <HAL_GPIO_WritePin>
  PORT2_ON;
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	487d      	ldr	r0, [pc, #500]	; (8000a94 <main+0x2b4>)
 800089e:	f004 ff27 	bl	80056f0 <HAL_GPIO_WritePin>
  PORT3_ON;
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a8:	487a      	ldr	r0, [pc, #488]	; (8000a94 <main+0x2b4>)
 80008aa:	f004 ff21 	bl	80056f0 <HAL_GPIO_WritePin>
  PORT4_ON;
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b4:	4877      	ldr	r0, [pc, #476]	; (8000a94 <main+0x2b4>)
 80008b6:	f004 ff1b 	bl	80056f0 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 80008ba:	2105      	movs	r1, #5
 80008bc:	4876      	ldr	r0, [pc, #472]	; (8000a98 <main+0x2b8>)
 80008be:	f003 fbe1 	bl	8004084 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 80008c2:	2104      	movs	r1, #4
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <main+0x2bc>)
 80008c6:	f003 fbdd 	bl	8004084 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 80008ca:	2102      	movs	r1, #2
 80008cc:	4874      	ldr	r0, [pc, #464]	; (8000aa0 <main+0x2c0>)
 80008ce:	f003 fbd9 	bl	8004084 <HAL_ADCEx_Calibration_Start>

  flag=1;
 80008d2:	4b74      	ldr	r3, [pc, #464]	; (8000aa4 <main+0x2c4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f002 faf1 	bl	8002ec0 <HAL_Delay>

    char *text = " ";
 80008de:	4b72      	ldr	r3, [pc, #456]	; (8000aa8 <main+0x2c8>)
 80008e0:	613b      	str	r3, [r7, #16]
    char int_to_str[10];



     HAL_ADC_Start_DMA(&hadc2,hall_sens, 5);
 80008e2:	2205      	movs	r2, #5
 80008e4:	4971      	ldr	r1, [pc, #452]	; (8000aac <main+0x2cc>)
 80008e6:	486c      	ldr	r0, [pc, #432]	; (8000a98 <main+0x2b8>)
 80008e8:	f002 ff5a 	bl	80037a0 <HAL_ADC_Start_DMA>

     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, 16);
 80008ec:	2210      	movs	r2, #16
 80008ee:	4970      	ldr	r1, [pc, #448]	; (8000ab0 <main+0x2d0>)
 80008f0:	4870      	ldr	r0, [pc, #448]	; (8000ab4 <main+0x2d4>)
 80008f2:	f00b f9c8 	bl	800bc86 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008f6:	4b70      	ldr	r3, [pc, #448]	; (8000ab8 <main+0x2d8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <main+0x2d8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 0204 	bic.w	r2, r2, #4
 8000904:	601a      	str	r2, [r3, #0]

      LED_2_OFF;
 8000906:	2200      	movs	r2, #0
 8000908:	2101      	movs	r1, #1
 800090a:	4859      	ldr	r0, [pc, #356]	; (8000a70 <main+0x290>)
 800090c:	f004 fef0 	bl	80056f0 <HAL_GPIO_WritePin>
  RX_2;
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f004 fee9 	bl	80056f0 <HAL_GPIO_WritePin>
  while (1)
  {



	  if(flag==1){
 800091e:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <main+0x2c4>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b01      	cmp	r3, #1
 8000926:	d1fa      	bne.n	800091e <main+0x13e>
		  HAL_ADC_Stop_DMA(&hadc2);
 8000928:	485b      	ldr	r0, [pc, #364]	; (8000a98 <main+0x2b8>)
 800092a:	f003 f855 	bl	80039d8 <HAL_ADC_Stop_DMA>
		  HAL_ADC_Start(&hadc1);
 800092e:	485b      	ldr	r0, [pc, #364]	; (8000a9c <main+0x2bc>)
 8000930:	f002 fce8 	bl	8003304 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	4859      	ldr	r0, [pc, #356]	; (8000a9c <main+0x2bc>)
 8000938:	f002 fe30 	bl	800359c <HAL_ADC_PollForConversion>
		  current[3]=0;
 800093c:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <main+0x2dc>)
 800093e:	2200      	movs	r2, #0
 8000940:	80da      	strh	r2, [r3, #6]
		  current[3]=HAL_ADC_GetValue(&hadc1);
 8000942:	4856      	ldr	r0, [pc, #344]	; (8000a9c <main+0x2bc>)
 8000944:	f003 f8aa 	bl	8003a9c <HAL_ADC_GetValue>
 8000948:	4603      	mov	r3, r0
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b5b      	ldr	r3, [pc, #364]	; (8000abc <main+0x2dc>)
 800094e:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8000950:	4852      	ldr	r0, [pc, #328]	; (8000a9c <main+0x2bc>)
 8000952:	f002 fded 	bl	8003530 <HAL_ADC_Stop>

		 	  		  ADC_read_1();
 8000956:	f7ff fcc3 	bl	80002e0 <ADC_read_1>
		 	  		  ADC_read_12();
 800095a:	f7ff fce1 	bl	8000320 <ADC_read_12>
		 	  		 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800095e:	2200      	movs	r2, #0
 8000960:	4957      	ldr	r1, [pc, #348]	; (8000ac0 <main+0x2e0>)
 8000962:	4858      	ldr	r0, [pc, #352]	; (8000ac4 <main+0x2e4>)
 8000964:	f007 fdf5 	bl	8008552 <HAL_RTC_GetTime>

		      data_reg[0]=hall_sens[0];
 8000968:	4b50      	ldr	r3, [pc, #320]	; (8000aac <main+0x2cc>)
 800096a:	881a      	ldrh	r2, [r3, #0]
 800096c:	4b56      	ldr	r3, [pc, #344]	; (8000ac8 <main+0x2e8>)
 800096e:	801a      	strh	r2, [r3, #0]
		 	  data_reg[1]=hall_sens[1];
 8000970:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <main+0x2cc>)
 8000972:	885a      	ldrh	r2, [r3, #2]
 8000974:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <main+0x2e8>)
 8000976:	805a      	strh	r2, [r3, #2]
		 	  data_reg[2]=hall_sens[2];
 8000978:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <main+0x2cc>)
 800097a:	889a      	ldrh	r2, [r3, #4]
 800097c:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <main+0x2e8>)
 800097e:	809a      	strh	r2, [r3, #4]
		 	  data_reg[3]=hall_sens[3];
 8000980:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <main+0x2cc>)
 8000982:	88da      	ldrh	r2, [r3, #6]
 8000984:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <main+0x2e8>)
 8000986:	80da      	strh	r2, [r3, #6]
		 	  data_reg[4]=pwm[0];
 8000988:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <main+0x294>)
 800098a:	881a      	ldrh	r2, [r3, #0]
 800098c:	4b4e      	ldr	r3, [pc, #312]	; (8000ac8 <main+0x2e8>)
 800098e:	811a      	strh	r2, [r3, #8]
		 	  data_reg[5]=pwm[1];
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <main+0x294>)
 8000992:	885a      	ldrh	r2, [r3, #2]
 8000994:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <main+0x2e8>)
 8000996:	815a      	strh	r2, [r3, #10]
		 	  data_reg[6]=pwm[2];
 8000998:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <main+0x294>)
 800099a:	889a      	ldrh	r2, [r3, #4]
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <main+0x2e8>)
 800099e:	819a      	strh	r2, [r3, #12]
		 	  data_reg[7]=pwm[3];
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <main+0x294>)
 80009a2:	88da      	ldrh	r2, [r3, #6]
 80009a4:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <main+0x2e8>)
 80009a6:	81da      	strh	r2, [r3, #14]
		 	  data_reg[8]=rpm;
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <main+0x2ec>)
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <main+0x2e8>)
 80009ae:	821a      	strh	r2, [r3, #16]
		 	  data_reg[9]=f;
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <main+0x2f0>)
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <main+0x2e8>)
 80009b6:	825a      	strh	r2, [r3, #18]
		 	  data_reg[10]=limit;
 80009b8:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <main+0x2f4>)
 80009ba:	881a      	ldrh	r2, [r3, #0]
 80009bc:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <main+0x2e8>)
 80009be:	829a      	strh	r2, [r3, #20]
		 	  data_reg[11]=SLAVE_ID;
 80009c0:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <main+0x2f8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <main+0x2e8>)
 80009c8:	82da      	strh	r2, [r3, #22]
		 	  data_reg[12]=current[3];
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <main+0x2dc>)
 80009cc:	88da      	ldrh	r2, [r3, #6]
 80009ce:	4b3e      	ldr	r3, [pc, #248]	; (8000ac8 <main+0x2e8>)
 80009d0:	831a      	strh	r2, [r3, #24]
		 	  data_reg[13]=hall_sens[4];
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <main+0x2cc>)
 80009d4:	891a      	ldrh	r2, [r3, #8]
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <main+0x2e8>)
 80009d8:	835a      	strh	r2, [r3, #26]
		 	  data_reg[14]=(sTime.Hours<<8)|(sTime.Minutes);
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <main+0x2e0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <main+0x2e0>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <main+0x2e8>)
 80009f0:	839a      	strh	r2, [r3, #28]
		      data_reg[15]=sTime.Seconds;
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <main+0x2e0>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <main+0x2e8>)
 80009fa:	83da      	strh	r2, [r3, #30]





                if(flt<=19){
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <main+0x2fc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b13      	cmp	r3, #19
 8000a02:	f200 8082 	bhi.w	8000b0a <main+0x32a>
                adc_filter[flt]=current[0];
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <main+0x2fc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <main+0x2dc>)
 8000a0e:	8819      	ldrh	r1, [r3, #0]
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <main+0x300>)
 8000a12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                flt++;
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x2fc>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <main+0x2fc>)
 8000a20:	701a      	strb	r2, [r3, #0]
                for(uint8_t n=0; n<flt+1; ){
 8000a22:	2300      	movs	r3, #0
 8000a24:	75fb      	strb	r3, [r7, #23]
 8000a26:	e00c      	b.n	8000a42 <main+0x262>

                filter=filter+adc_filter[n];
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <main+0x300>)
 8000a2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <main+0x304>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <main+0x304>)
 8000a3a:	801a      	strh	r2, [r3, #0]
                 n++;
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	75fb      	strb	r3, [r7, #23]
                for(uint8_t n=0; n<flt+1; ){
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <main+0x2fc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	7dfa      	ldrb	r2, [r7, #23]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d9ed      	bls.n	8000a28 <main+0x248>

                }

                filter=filter/flt;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <main+0x304>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <main+0x2fc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <main+0x304>)
 8000a5e:	801a      	strh	r2, [r3, #0]

                  if(flt==19){
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <main+0x2fc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b13      	cmp	r3, #19
 8000a66:	d150      	bne.n	8000b0a <main+0x32a>
                	 for(uint8_t n=1;n==flt;){
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e045      	b.n	8000afa <main+0x31a>
 8000a6e:	bf00      	nop
 8000a70:	48001400 	.word	0x48001400
 8000a74:	20000000 	.word	0x20000000
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40013400 	.word	0x40013400
 8000a80:	40014000 	.word	0x40014000
 8000a84:	2000022c 	.word	0x2000022c
 8000a88:	200002c4 	.word	0x200002c4
 8000a8c:	20000310 	.word	0x20000310
 8000a90:	20000278 	.word	0x20000278
 8000a94:	48000400 	.word	0x48000400
 8000a98:	200000d4 	.word	0x200000d4
 8000a9c:	20000084 	.word	0x20000084
 8000aa0:	20000124 	.word	0x20000124
 8000aa4:	2000050d 	.word	0x2000050d
 8000aa8:	0800c690 	.word	0x0800c690
 8000aac:	200004fc 	.word	0x200004fc
 8000ab0:	20000550 	.word	0x20000550
 8000ab4:	200003e4 	.word	0x200003e4
 8000ab8:	200004b0 	.word	0x200004b0
 8000abc:	200004f4 	.word	0x200004f4
 8000ac0:	200006d0 	.word	0x200006d0
 8000ac4:	2000020c 	.word	0x2000020c
 8000ac8:	2000066c 	.word	0x2000066c
 8000acc:	20000516 	.word	0x20000516
 8000ad0:	20000518 	.word	0x20000518
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	2000000b 	.word	0x2000000b
 8000adc:	20000544 	.word	0x20000544
 8000ae0:	2000051c 	.word	0x2000051c
 8000ae4:	20000546 	.word	0x20000546

                		adc_filter[n-1]=adc_filter[n];  }
 8000ae8:	7bfa      	ldrb	r2, [r7, #15]
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	49b6      	ldr	r1, [pc, #728]	; (8000dc8 <main+0x5e8>)
 8000af0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000af4:	4ab4      	ldr	r2, [pc, #720]	; (8000dc8 <main+0x5e8>)
 8000af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	 for(uint8_t n=1;n==flt;){
 8000afa:	4bb4      	ldr	r3, [pc, #720]	; (8000dcc <main+0x5ec>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d0f1      	beq.n	8000ae8 <main+0x308>

                     flt=0;
 8000b04:	4bb1      	ldr	r3, [pc, #708]	; (8000dcc <main+0x5ec>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
                }




		 	  	  if((lcd_status==0)&&(lcd_update==1)){lcd_init();HAL_Delay(100);lcd_clear();lcd_update=0;}
 8000b0a:	4bb1      	ldr	r3, [pc, #708]	; (8000dd0 <main+0x5f0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <main+0x354>
 8000b18:	4bae      	ldr	r3, [pc, #696]	; (8000dd4 <main+0x5f4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <main+0x354>
 8000b20:	f7ff fd41 	bl	80005a6 <lcd_init>
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f002 f9cb 	bl	8002ec0 <HAL_Delay>
 8000b2a:	f7ff fdb7 	bl	800069c <lcd_clear>
 8000b2e:	4ba9      	ldr	r3, [pc, #676]	; (8000dd4 <main+0x5f4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
		 	  	  if((lcd_status==1)&&(lcd_update==1)){lcd_init();lcd_clear();lcd_update=0;}
 8000b34:	4ba6      	ldr	r3, [pc, #664]	; (8000dd0 <main+0x5f0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00a      	beq.n	8000b52 <main+0x372>
 8000b3c:	4ba5      	ldr	r3, [pc, #660]	; (8000dd4 <main+0x5f4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <main+0x372>
 8000b44:	f7ff fd2f 	bl	80005a6 <lcd_init>
 8000b48:	f7ff fda8 	bl	800069c <lcd_clear>
 8000b4c:	4ba1      	ldr	r3, [pc, #644]	; (8000dd4 <main+0x5f4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]

		 	  	  if(lcd_status==1){
 8000b52:	4b9f      	ldr	r3, [pc, #636]	; (8000dd0 <main+0x5f0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 818f 	beq.w	8000e7a <main+0x69a>
		 	  		 adc_count++;
 8000b5c:	4b9e      	ldr	r3, [pc, #632]	; (8000dd8 <main+0x5f8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b9c      	ldr	r3, [pc, #624]	; (8000dd8 <main+0x5f8>)
 8000b66:	701a      	strb	r2, [r3, #0]

		 	  if(page_flag==1){lcd_clear();page_flag=0;}
 8000b68:	4b9c      	ldr	r3, [pc, #624]	; (8000ddc <main+0x5fc>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d104      	bne.n	8000b7a <main+0x39a>
 8000b70:	f7ff fd94 	bl	800069c <lcd_clear>
 8000b74:	4b99      	ldr	r3, [pc, #612]	; (8000ddc <main+0x5fc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
		 	  	  if((page_num==0)&&(adc_count==20)){
 8000b7a:	4b99      	ldr	r3, [pc, #612]	; (8000de0 <main+0x600>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14a      	bne.n	8000c18 <main+0x438>
 8000b82:	4b95      	ldr	r3, [pc, #596]	; (8000dd8 <main+0x5f8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b14      	cmp	r3, #20
 8000b88:	d146      	bne.n	8000c18 <main+0x438>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000b8a:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <main+0x604>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4995      	ldr	r1, [pc, #596]	; (8000de8 <main+0x608>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00b f8cb 	bl	800bd30 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fd47 	bl	8000630 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd2d 	bl	8000604 <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_n,pwm_n/20);
 8000baa:	4b90      	ldr	r3, [pc, #576]	; (8000dec <main+0x60c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4b8e      	ldr	r3, [pc, #568]	; (8000dec <main+0x60c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	4a8e      	ldr	r2, [pc, #568]	; (8000df0 <main+0x610>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	1d38      	adds	r0, r7, #4
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	498c      	ldr	r1, [pc, #560]	; (8000df4 <main+0x614>)
 8000bc4:	f00b f8b4 	bl	800bd30 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff fd30 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fd16 	bl	8000604 <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8000bd8:	4b87      	ldr	r3, [pc, #540]	; (8000df8 <main+0x618>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4986      	ldr	r1, [pc, #536]	; (8000dfc <main+0x61c>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f00b f8a4 	bl	800bd30 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff fd20 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd06 	bl	8000604 <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8000bf8:	4b81      	ldr	r3, [pc, #516]	; (8000e00 <main+0x620>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4980      	ldr	r1, [pc, #512]	; (8000e04 <main+0x624>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00b f894 	bl	800bd30 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff fd10 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);	  }
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fcf6 	bl	8000604 <lcd_write_string>

		 	  	  if((page_num==2)&&(adc_count==22)){
 8000c18:	4b71      	ldr	r3, [pc, #452]	; (8000de0 <main+0x600>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d149      	bne.n	8000cb4 <main+0x4d4>
 8000c20:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <main+0x5f8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b16      	cmp	r3, #22
 8000c26:	d145      	bne.n	8000cb4 <main+0x4d4>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4977      	ldr	r1, [pc, #476]	; (8000e08 <main+0x628>)
 8000c2c:	4877      	ldr	r0, [pc, #476]	; (8000e0c <main+0x62c>)
 8000c2e:	f007 fc90 	bl	8008552 <HAL_RTC_GetTime>
		 	  	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c32:	2200      	movs	r2, #0
 8000c34:	4976      	ldr	r1, [pc, #472]	; (8000e10 <main+0x630>)
 8000c36:	4875      	ldr	r0, [pc, #468]	; (8000e0c <main+0x62c>)
 8000c38:	f007 fd6d 	bl	8008716 <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8000c3c:	4b75      	ldr	r3, [pc, #468]	; (8000e14 <main+0x634>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b75      	ldr	r3, [pc, #468]	; (8000e18 <main+0x638>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4b74      	ldr	r3, [pc, #464]	; (8000e1c <main+0x63c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	1d38      	adds	r0, r7, #4
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	460b      	mov	r3, r1
 8000c52:	4973      	ldr	r1, [pc, #460]	; (8000e20 <main+0x640>)
 8000c54:	f00b f86c 	bl	800bd30 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fce8 	bl	8000630 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fcce 	bl	8000604 <lcd_write_string>

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000c68:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <main+0x628>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <main+0x628>)
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b64      	ldr	r3, [pc, #400]	; (8000e08 <main+0x628>)
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	1d38      	adds	r0, r7, #4
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4969      	ldr	r1, [pc, #420]	; (8000e24 <main+0x644>)
 8000c80:	f00b f856 	bl	800bd30 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fcd2 	bl	8000630 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcb8 	bl	8000604 <lcd_write_string>


		 	  					 	  		sprintf(int_to_str, "ADC_filter:%02d",adc_filter[0]);
 8000c94:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <main+0x5e8>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4962      	ldr	r1, [pc, #392]	; (8000e28 <main+0x648>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00b f846 	bl	800bd30 <siprintf>
		 	  					 	  		lcd_set_cursor(3, 0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f7ff fcc2 	bl	8000630 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str); }
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fca8 	bl	8000604 <lcd_write_string>



		 	  	  if(page_num==1){
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <main+0x600>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	f040 80de 	bne.w	8000e7a <main+0x69a>
		 	  	                 	if(adc_count==18){
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <main+0x5f8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d157      	bne.n	8000d76 <main+0x596>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8000cc6:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <main+0x64c>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <main+0x610>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <main+0x64c>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	1d38      	adds	r0, r7, #4
 8000cdc:	4954      	ldr	r1, [pc, #336]	; (8000e30 <main+0x650>)
 8000cde:	f00b f827 	bl	800bd30 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fca3 	bl	8000630 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc89 	bl	8000604 <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8000cf2:	4b4e      	ldr	r3, [pc, #312]	; (8000e2c <main+0x64c>)
 8000cf4:	885b      	ldrh	r3, [r3, #2]
 8000cf6:	4a3e      	ldr	r2, [pc, #248]	; (8000df0 <main+0x610>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <main+0x64c>)
 8000d04:	885b      	ldrh	r3, [r3, #2]
 8000d06:	1d38      	adds	r0, r7, #4
 8000d08:	4949      	ldr	r1, [pc, #292]	; (8000e30 <main+0x650>)
 8000d0a:	f00b f811 	bl	800bd30 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fc8d 	bl	8000630 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc73 	bl	8000604 <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <main+0x64c>)
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <main+0x610>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <main+0x64c>)
 8000d30:	889b      	ldrh	r3, [r3, #4]
 8000d32:	1d38      	adds	r0, r7, #4
 8000d34:	493e      	ldr	r1, [pc, #248]	; (8000e30 <main+0x650>)
 8000d36:	f00a fffb 	bl	800bd30 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff fc77 	bl	8000630 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc5d 	bl	8000604 <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <main+0x64c>)
 8000d4c:	88db      	ldrh	r3, [r3, #6]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <main+0x610>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <main+0x64c>)
 8000d5c:	88db      	ldrh	r3, [r3, #6]
 8000d5e:	1d38      	adds	r0, r7, #4
 8000d60:	4933      	ldr	r1, [pc, #204]	; (8000e30 <main+0x650>)
 8000d62:	f00a ffe5 	bl	800bd30 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f7ff fc61 	bl	8000630 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc47 	bl	8000604 <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count>=180){
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <main+0x5f8>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2bb3      	cmp	r3, #179	; 0xb3
 8000d7c:	d97d      	bls.n	8000e7a <main+0x69a>


		 	  			sprintf(int_to_str, "Adc-%03d",hall_sens[0]);
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <main+0x654>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	492c      	ldr	r1, [pc, #176]	; (8000e38 <main+0x658>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00a ffd1 	bl	800bd30 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8000d8e:	210d      	movs	r1, #13
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fc4d 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc33 	bl	8000604 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",hall_sens[1]);
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <main+0x654>)
 8000da0:	885b      	ldrh	r3, [r3, #2]
 8000da2:	461a      	mov	r2, r3
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4924      	ldr	r1, [pc, #144]	; (8000e38 <main+0x658>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00a ffc1 	bl	800bd30 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8000dae:	210d      	movs	r1, #13
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff fc3d 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fc23 	bl	8000604 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",hall_sens[2]);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <main+0x654>)
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	e039      	b.n	8000e3c <main+0x65c>
 8000dc8:	2000051c 	.word	0x2000051c
 8000dcc:	20000544 	.word	0x20000544
 8000dd0:	20000506 	.word	0x20000506
 8000dd4:	20000507 	.word	0x20000507
 8000dd8:	2000051a 	.word	0x2000051a
 8000ddc:	20000549 	.word	0x20000549
 8000de0:	20000548 	.word	0x20000548
 8000de4:	20000516 	.word	0x20000516
 8000de8:	0800c694 	.word	0x0800c694
 8000dec:	20000508 	.word	0x20000508
 8000df0:	cccccccd 	.word	0xcccccccd
 8000df4:	0800c6a8 	.word	0x0800c6a8
 8000df8:	2000054a 	.word	0x2000054a
 8000dfc:	0800c6c0 	.word	0x0800c6c0
 8000e00:	20000518 	.word	0x20000518
 8000e04:	0800c6d0 	.word	0x0800c6d0
 8000e08:	200006d0 	.word	0x200006d0
 8000e0c:	2000020c 	.word	0x2000020c
 8000e10:	200006e4 	.word	0x200006e4
 8000e14:	2000054d 	.word	0x2000054d
 8000e18:	2000054c 	.word	0x2000054c
 8000e1c:	2000054e 	.word	0x2000054e
 8000e20:	0800c6dc 	.word	0x0800c6dc
 8000e24:	0800c6f8 	.word	0x0800c6f8
 8000e28:	0800c70c 	.word	0x0800c70c
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	0800c71c 	.word	0x0800c71c
 8000e34:	200004fc 	.word	0x200004fc
 8000e38:	0800c72c 	.word	0x0800c72c
 8000e3c:	491c      	ldr	r1, [pc, #112]	; (8000eb0 <main+0x6d0>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00a ff76 	bl	800bd30 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 8000e44:	210d      	movs	r1, #13
 8000e46:	2003      	movs	r0, #3
 8000e48:	f7ff fbf2 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fbd8 	bl	8000604 <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc-%03d",hall_sens   [3]);
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <main+0x6d4>)
 8000e56:	88db      	ldrh	r3, [r3, #6]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <main+0x6d0>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00a ff66 	bl	800bd30 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 8000e64:	210d      	movs	r1, #13
 8000e66:	2004      	movs	r0, #4
 8000e68:	f7ff fbe2 	bl	8000630 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fbc8 	bl	8000604 <lcd_write_string>

		 	  	    adc_count=0;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <main+0x6d8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]





	     PWM_correction();
 8000e7a:	f7ff fa71 	bl	8000360 <PWM_correction>
	  	 TIM1->CCR1=pwm[0];
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <main+0x6dc>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <main+0x6e0>)
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <main+0x6dc>)
 8000e88:	885a      	ldrh	r2, [r3, #2]
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <main+0x6e0>)
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <main+0x6dc>)
 8000e90:	889a      	ldrh	r2, [r3, #4]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <main+0x6e4>)
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <main+0x6dc>)
 8000e98:	88da      	ldrh	r2, [r3, #6]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <main+0x6e8>)
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
	  	 flag=0;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <main+0x6ec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	  	 HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	4903      	ldr	r1, [pc, #12]	; (8000eb4 <main+0x6d4>)
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <main+0x6f0>)
 8000eaa:	f002 fc79 	bl	80037a0 <HAL_ADC_Start_DMA>
	  if(flag==1){
 8000eae:	e536      	b.n	800091e <main+0x13e>
 8000eb0:	0800c72c 	.word	0x0800c72c
 8000eb4:	200004fc 	.word	0x200004fc
 8000eb8:	2000051a 	.word	0x2000051a
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40013400 	.word	0x40013400
 8000ec8:	40014000 	.word	0x40014000
 8000ecc:	2000050d 	.word	0x2000050d
 8000ed0:	200000d4 	.word	0x200000d4

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09e      	sub	sp, #120	; 0x78
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ede:	2228      	movs	r2, #40	; 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00a ff44 	bl	800bd70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	223c      	movs	r2, #60	; 0x3c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a ff36 	bl	800bd70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f04:	230a      	movs	r3, #10
 8000f06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	2302      	movs	r3, #2
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f1c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f20:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fdd2 	bl	8006ad0 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f32:	f001 f837 	bl	8001fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 fdfa 	bl	8007b4c <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f5e:	f001 f821 	bl	8001fa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SystemClock_Config+0xd4>)
 8000f64:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f007 f812 	bl	8007fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f9a:	f001 f803 	bl	8001fa4 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3778      	adds	r7, #120	; 0x78
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	000131a3 	.word	0x000131a3

08000fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_ADC1_Init+0xdc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_ADC1_Init+0xdc>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001018:	2204      	movs	r2, #4
 800101a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_ADC1_Init+0xdc>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001024:	2200      	movs	r2, #0
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <MX_ADC1_Init+0xdc>)
 800102a:	f001 ff8b 	bl	8002f44 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 ffb6 	bl	8001fa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001044:	f003 fba2 	bl	800478c <HAL_ADCEx_MultiModeConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800104e:	f000 ffa9 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001052:	2304      	movs	r3, #4
 8001054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2301      	movs	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800105e:	2302      	movs	r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_ADC1_Init+0xdc>)
 8001070:	f003 f8a2 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800107a:	f000 ff93 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000084 	.word	0x20000084

0800108c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010a2:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <MX_ADC2_Init+0x128>)
 80010a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010a8:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010bc:	2200      	movs	r2, #0
 80010be:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010dc:	2205      	movs	r2, #5
 80010de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <MX_ADC2_Init+0x124>)
 80010fc:	f001 ff22 	bl	8002f44 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001106:	f000 ff4d 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110a:	2301      	movs	r3, #1
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_ADC2_Init+0x124>)
 8001128:	f003 f846 	bl	80041b8 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001132:	f000 ff37 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001136:	2302      	movs	r3, #2
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800113a:	2302      	movs	r3, #2
 800113c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <MX_ADC2_Init+0x124>)
 8001144:	f003 f838 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800114e:	f000 ff29 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001152:	2303      	movs	r3, #3
 8001154:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001156:	2303      	movs	r3, #3
 8001158:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_ADC2_Init+0x124>)
 8001160:	f003 f82a 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800116a:	f000 ff1b 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800116e:	2304      	movs	r3, #4
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001172:	2304      	movs	r3, #4
 8001174:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_ADC2_Init+0x124>)
 800117c:	f003 f81c 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8001186:	f000 ff0d 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800118a:	230c      	movs	r3, #12
 800118c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800118e:	2305      	movs	r3, #5
 8001190:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_ADC2_Init+0x124>)
 8001198:	f003 f80e 	bl	80041b8 <HAL_ADC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 80011a2:	f000 feff 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000d4 	.word	0x200000d4
 80011b4:	50000100 	.word	0x50000100

080011b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <MX_ADC3_Init+0xdc>)
 80011de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_ADC3_Init+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001208:	2201      	movs	r2, #1
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_ADC3_Init+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001214:	2201      	movs	r2, #1
 8001216:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ADC3_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001222:	2204      	movs	r2, #4
 8001224:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC3_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001232:	4817      	ldr	r0, [pc, #92]	; (8001290 <MX_ADC3_Init+0xd8>)
 8001234:	f001 fe86 	bl	8002f44 <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 feb1 	bl	8001fa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <MX_ADC3_Init+0xd8>)
 800124e:	f003 fa9d 	bl	800478c <HAL_ADCEx_MultiModeConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001258:	f000 fea4 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001268:	2302      	movs	r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_ADC3_Init+0xd8>)
 800127a:	f002 ff9d 	bl	80041b8 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001284:	f000 fe8e 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000124 	.word	0x20000124
 8001294:	50000400 	.word	0x50000400

08001298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_I2C1_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_I2C1_Init+0x74>)
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_I2C1_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_I2C1_Init+0x74>)
 80012d4:	f004 fa56 	bl	8005784 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 fe61 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_I2C1_Init+0x74>)
 80012e6:	f005 fb5b 	bl	80069a0 <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 fe58 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_I2C1_Init+0x74>)
 80012f8:	f005 fb9d 	bl	8006a36 <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 fe4f 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001b8 	.word	0x200001b8
 8001310:	40005400 	.word	0x40005400
 8001314:	2000090e 	.word	0x2000090e

08001318 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_RTC_Init+0xac>)
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <MX_RTC_Init+0xb0>)
 8001334:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_RTC_Init+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_RTC_Init+0xac>)
 800133e:	227f      	movs	r2, #127	; 0x7f
 8001340:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_RTC_Init+0xac>)
 8001344:	f240 1237 	movw	r2, #311	; 0x137
 8001348:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_RTC_Init+0xac>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_RTC_Init+0xac>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_RTC_Init+0xac>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <MX_RTC_Init+0xac>)
 800135e:	f006 ffdb 	bl	8008318 <HAL_RTC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001368:	f000 fe1c 	bl	8001fa4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 800136c:	2309      	movs	r3, #9
 800136e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001370:	2300      	movs	r3, #0
 8001372:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001374:	2300      	movs	r3, #0
 8001376:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_RTC_Init+0xac>)
 8001388:	f007 f849 	bl	800841e <HAL_RTC_SetTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001392:	f000 fe07 	bl	8001fa4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001396:	2301      	movs	r3, #1
 8001398:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 800139a:	2306      	movs	r3, #6
 800139c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800139e:	2301      	movs	r3, #1
 80013a0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_RTC_Init+0xac>)
 80013ae:	f007 f92e 	bl	800860e <HAL_RTC_SetDate>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80013b8:	f000 fdf4 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000020c 	.word	0x2000020c
 80013c8:	40002800 	.word	0x40002800

080013cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09a      	sub	sp, #104	; 0x68
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	222c      	movs	r2, #44	; 0x2c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00a fcb2 	bl	800bd70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140c:	4b49      	ldr	r3, [pc, #292]	; (8001534 <MX_TIM1_Init+0x168>)
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <MX_TIM1_Init+0x16c>)
 8001410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <MX_TIM1_Init+0x168>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b46      	ldr	r3, [pc, #280]	; (8001534 <MX_TIM1_Init+0x168>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <MX_TIM1_Init+0x168>)
 8001420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <MX_TIM1_Init+0x168>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142c:	4b41      	ldr	r3, [pc, #260]	; (8001534 <MX_TIM1_Init+0x168>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <MX_TIM1_Init+0x168>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001438:	483e      	ldr	r0, [pc, #248]	; (8001534 <MX_TIM1_Init+0x168>)
 800143a:	f007 fa79 	bl	8008930 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 fdae 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001452:	4619      	mov	r1, r3
 8001454:	4837      	ldr	r0, [pc, #220]	; (8001534 <MX_TIM1_Init+0x168>)
 8001456:	f008 f92d 	bl	80096b4 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 fda0 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <MX_TIM1_Init+0x168>)
 8001466:	f007 faba 	bl	80089de <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001470:	f000 fd98 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001480:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	482b      	ldr	r0, [pc, #172]	; (8001534 <MX_TIM1_Init+0x168>)
 8001488:	f009 f8a0 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001492:	f000 fd87 	bl	8001fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014a6:	2304      	movs	r3, #4
 80014a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	481e      	ldr	r0, [pc, #120]	; (8001534 <MX_TIM1_Init+0x168>)
 80014bc:	f007 ffe6 	bl	800948c <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014c6:	f000 fd6d 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ce:	2204      	movs	r2, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4818      	ldr	r0, [pc, #96]	; (8001534 <MX_TIM1_Init+0x168>)
 80014d4:	f007 ffda 	bl	800948c <HAL_TIM_PWM_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80014de:	f000 fd61 	bl	8001fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_TIM1_Init+0x168>)
 8001518:	f009 f8d8 	bl	800a6cc <HAL_TIMEx_ConfigBreakDeadTime>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001522:	f000 fd3f 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <MX_TIM1_Init+0x168>)
 8001528:	f001 f99a 	bl	8002860 <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3768      	adds	r7, #104	; 0x68
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000022c 	.word	0x2000022c
 8001538:	40012c00 	.word	0x40012c00

0800153c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001568:	4b33      	ldr	r3, [pc, #204]	; (8001638 <MX_TIM2_Init+0xfc>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <MX_TIM2_Init+0xfc>)
 800157e:	4a2f      	ldr	r2, [pc, #188]	; (800163c <MX_TIM2_Init+0x100>)
 8001580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <MX_TIM2_Init+0xfc>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001590:	f007 f9ce 	bl	8008930 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fd03 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	4619      	mov	r1, r3
 80015aa:	4823      	ldr	r0, [pc, #140]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015ac:	f008 f882 	bl	80096b4 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015b6:	f000 fcf5 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015bc:	f007 fc06 	bl	8008dcc <HAL_TIM_IC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015c6:	f000 fced 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4817      	ldr	r0, [pc, #92]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015da:	f008 fff7 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80015e4:	f000 fcde 	bl	8001fa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 80015f4:	230c      	movs	r3, #12
 80015f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001600:	f007 fea7 	bl	8009352 <HAL_TIM_IC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800160a:	f000 fccb 	bl	8001fa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800160e:	2302      	movs	r3, #2
 8001610:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001612:	2302      	movs	r3, #2
 8001614:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001622:	f007 fe96 	bl	8009352 <HAL_TIM_IC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800162c:	f000 fcba 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3730      	adds	r7, #48	; 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000278 	.word	0x20000278
 800163c:	03d09000 	.word	0x03d09000

08001640 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09a      	sub	sp, #104	; 0x68
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	222c      	movs	r2, #44	; 0x2c
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00a fb78 	bl	800bd70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <MX_TIM8_Init+0x150>)
 8001682:	4a44      	ldr	r2, [pc, #272]	; (8001794 <MX_TIM8_Init+0x154>)
 8001684:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <MX_TIM8_Init+0x150>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <MX_TIM8_Init+0x150>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <MX_TIM8_Init+0x150>)
 8001694:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001698:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <MX_TIM8_Init+0x150>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <MX_TIM8_Init+0x150>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <MX_TIM8_Init+0x150>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <MX_TIM8_Init+0x150>)
 80016ae:	f007 f93f 	bl	8008930 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 fc74 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c6:	4619      	mov	r1, r3
 80016c8:	4831      	ldr	r0, [pc, #196]	; (8001790 <MX_TIM8_Init+0x150>)
 80016ca:	f007 fff3 	bl	80096b4 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016d4:	f000 fc66 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016d8:	482d      	ldr	r0, [pc, #180]	; (8001790 <MX_TIM8_Init+0x150>)
 80016da:	f007 f980 	bl	80089de <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016e4:	f000 fc5e 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f8:	4619      	mov	r1, r3
 80016fa:	4825      	ldr	r0, [pc, #148]	; (8001790 <MX_TIM8_Init+0x150>)
 80016fc:	f008 ff66 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001706:	f000 fc4d 	bl	8001fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	; 0x60
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_TIM8_Init+0x150>)
 8001730:	f007 feac 	bl	800948c <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800173a:	f000 fc33 	bl	8001fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001756:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_TIM8_Init+0x150>)
 8001774:	f008 ffaa 	bl	800a6cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800177e:	f000 fc11 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <MX_TIM8_Init+0x150>)
 8001784:	f001 f86c 	bl	8002860 <HAL_TIM_MspPostInit>

}
 8001788:	bf00      	nop
 800178a:	3768      	adds	r7, #104	; 0x68
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200002c4 	.word	0x200002c4
 8001794:	40013400 	.word	0x40013400

08001798 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09a      	sub	sp, #104	; 0x68
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	222c      	movs	r2, #44	; 0x2c
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a facc 	bl	800bd70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017d8:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017da:	4a40      	ldr	r2, [pc, #256]	; (80018dc <MX_TIM15_Init+0x144>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017f8:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <MX_TIM15_Init+0x140>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001804:	4834      	ldr	r0, [pc, #208]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001806:	f007 f893 	bl	8008930 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001810:	f000 fbc8 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800181e:	4619      	mov	r1, r3
 8001820:	482d      	ldr	r0, [pc, #180]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001822:	f007 ff47 	bl	80096b4 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800182c:	f000 fbba 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001830:	4829      	ldr	r0, [pc, #164]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001832:	f007 f8d4 	bl	80089de <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800183c:	f000 fbb2 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184c:	4619      	mov	r1, r3
 800184e:	4822      	ldr	r0, [pc, #136]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001850:	f008 febc 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800185a:	f000 fba3 	bl	8001fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <MX_TIM15_Init+0x140>)
 8001884:	f007 fe02 	bl	800948c <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800188e:	f000 fb89 	bl	8001fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM15_Init+0x140>)
 80018ba:	f008 ff07 	bl	800a6cc <HAL_TIMEx_ConfigBreakDeadTime>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80018c4:	f000 fb6e 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM15_Init+0x140>)
 80018ca:	f000 ffc9 	bl	8002860 <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3768      	adds	r7, #104	; 0x68
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000310 	.word	0x20000310
 80018dc:	40014000 	.word	0x40014000

080018e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART1_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART1_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART1_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART1_UART_Init+0x58>)
 8001924:	f008 ff93 	bl	800a84e <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f000 fb39 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000035c 	.word	0x2000035c
 800193c:	40013800 	.word	0x40013800

08001940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <MX_USART2_UART_Init+0x5c>)
 8001948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800194c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001984:	f008 ff63 	bl	800a84e <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800198e:	f000 fb09 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200003e4 	.word	0x200003e4
 800199c:	40004400 	.word	0x40004400

080019a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_DMA_Init+0x70>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <MX_DMA_Init+0x70>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_DMA_Init+0x70>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_DMA_Init+0x70>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <MX_DMA_Init+0x70>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6153      	str	r3, [r2, #20]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_DMA_Init+0x70>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2010      	movs	r0, #16
 80019dc:	f003 fa89 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019e0:	2010      	movs	r0, #16
 80019e2:	f003 faa2 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2011      	movs	r0, #17
 80019ec:	f003 fa81 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80019f0:	2011      	movs	r0, #17
 80019f2:	f003 fa9a 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 4, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2104      	movs	r1, #4
 80019fa:	2038      	movs	r0, #56	; 0x38
 80019fc:	f003 fa79 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001a00:	2038      	movs	r0, #56	; 0x38
 8001a02:	f003 fa92 	bl	8004f2a <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a4c:	6153      	str	r3, [r2, #20]
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6153      	str	r3, [r2, #20]
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <MX_GPIO_Init+0x1a8>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a90:	484b      	ldr	r0, [pc, #300]	; (8001bc0 <MX_GPIO_Init+0x1ac>)
 8001a92:	f003 fe2d 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2103      	movs	r1, #3
 8001a9a:	484a      	ldr	r0, [pc, #296]	; (8001bc4 <MX_GPIO_Init+0x1b0>)
 8001a9c:	f003 fe28 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001aa6:	4848      	ldr	r0, [pc, #288]	; (8001bc8 <MX_GPIO_Init+0x1b4>)
 8001aa8:	f003 fe22 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f003 fe1b 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8001aba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ac0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	483b      	ldr	r0, [pc, #236]	; (8001bc0 <MX_GPIO_Init+0x1ac>)
 8001ad2:	f003 fc7b 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8001ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4834      	ldr	r0, [pc, #208]	; (8001bc0 <MX_GPIO_Init+0x1ac>)
 8001af0:	f003 fc6c 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001af4:	2303      	movs	r3, #3
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482e      	ldr	r0, [pc, #184]	; (8001bc4 <MX_GPIO_Init+0x1b0>)
 8001b0c:	f003 fc5e 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001b10:	2302      	movs	r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b14:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b28:	f003 fc50 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8001b2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4820      	ldr	r0, [pc, #128]	; (8001bc8 <MX_GPIO_Init+0x1b4>)
 8001b46:	f003 fc41 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f003 fc31 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <MX_GPIO_Init+0x1b4>)
 8001b80:	f003 fc24 	bl	80053cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2007      	movs	r0, #7
 8001b8a:	f003 f9b2 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b8e:	2007      	movs	r0, #7
 8001b90:	f003 f9cb 	bl	8004f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2017      	movs	r0, #23
 8001b9a:	f003 f9aa 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9e:	2017      	movs	r0, #23
 8001ba0:	f003 f9c3 	bl	8004f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	2028      	movs	r0, #40	; 0x28
 8001baa:	f003 f9a2 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bae:	2028      	movs	r0, #40	; 0x28
 8001bb0:	f003 f9bb 	bl	8004f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	48000800 	.word	0x48000800
 8001bc4:	48001400 	.word	0x48001400
 8001bc8:	48000400 	.word	0x48000400

08001bcc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d173      	bne.n	8001cc6 <HAL_TIM_IC_CaptureCallback+0xfa>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7f1b      	ldrb	r3, [r3, #28]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d146      	bne.n	8001c74 <HAL_TIM_IC_CaptureCallback+0xa8>
        {

        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001be6:	2100      	movs	r1, #0
 8001be8:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001bea:	f007 f859 	bl	8008ca0 <HAL_TIM_PWM_Stop>
        	// HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4837      	ldr	r0, [pc, #220]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001bf2:	f007 f855 	bl	8008ca0 <HAL_TIM_PWM_Stop>
        	// HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
        	 HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4836      	ldr	r0, [pc, #216]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001bfa:	f007 f851 	bl	8008ca0 <HAL_TIM_PWM_Stop>
        	// HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
        	 HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4835      	ldr	r0, [pc, #212]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c02:	f007 f84d 	bl	8008ca0 <HAL_TIM_PWM_Stop>
        	// HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

        	 period = 0;
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

            TIM2->CNT = 0;
 8001c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001c14:	2100      	movs	r1, #0
 8001c16:	4832      	ldr	r0, [pc, #200]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c18:	f007 fe16 	bl	8009848 <HAL_TIM_ReadCapturedValue>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c22:	601a      	str	r2, [r3, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001c24:	2104      	movs	r1, #4
 8001c26:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c28:	f007 fe0e 	bl	8009848 <HAL_TIM_ReadCapturedValue>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001c32:	801a      	strh	r2, [r3, #0]

            rpm= 480000000/period;
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x120>)
 8001c42:	801a      	strh	r2, [r3, #0]
            f=32000000/period;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c52:	801a      	strh	r2, [r3, #0]


            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c54:	2100      	movs	r1, #0
 8001c56:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001c58:	f008 fba6 	bl	800a3a8 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001c60:	f008 fba2 	bl	800a3a8 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001c64:	2100      	movs	r1, #0
 8001c66:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c68:	f008 fb9e 	bl	800a3a8 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	481a      	ldr	r0, [pc, #104]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c70:	f008 fb9a 	bl	800a3a8 <HAL_TIMEx_PWMN_Start>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7f1b      	ldrb	r3, [r3, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d124      	bne.n	8001cc6 <HAL_TIM_IC_CaptureCallback+0xfa>
             {

        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001c80:	f008 fc46 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
        	//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001c84:	2104      	movs	r1, #4
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001c88:	f008 fc42 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
        	//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
        	  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c90:	f008 fc3e 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
        	//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
        	  HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8001c94:	2100      	movs	r1, #0
 8001c96:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c98:	f008 fc3a 	bl	800a510 <HAL_TIMEx_PWMN_Stop>
        	//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);

        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001ca2:	f003 fd3d 	bl	8005720 <HAL_GPIO_TogglePin>
        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001caa:	f006 fef9 	bl	8008aa0 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001cae:	2104      	movs	r1, #4
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001cb2:	f006 fef5 	bl	8008aa0 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001cba:	f006 fef1 	bl	8008aa0 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001cc2:	f006 feed 	bl	8008aa0 <HAL_TIM_PWM_Start>

                                                         }

    }
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000022c 	.word	0x2000022c
 8001cd4:	200002c4 	.word	0x200002c4
 8001cd8:	20000310 	.word	0x20000310
 8001cdc:	20000510 	.word	0x20000510
 8001ce0:	20000278 	.word	0x20000278
 8001ce4:	20000514 	.word	0x20000514
 8001ce8:	1c9c3800 	.word	0x1c9c3800
 8001cec:	20000516 	.word	0x20000516
 8001cf0:	01e84800 	.word	0x01e84800
 8001cf4:	20000518 	.word	0x20000518
 8001cf8:	48000800 	.word	0x48000800

08001cfc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0c:	d149      	bne.n	8001da2 <HAL_GPIO_EXTI_Callback+0xa6>
   {
      // Переключение в противоположное состояние ножки
      // выхода для управления светодиодом (LED):
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d12:	487c      	ldr	r0, [pc, #496]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x208>)
 8001d14:	f003 fd04 	bl	8005720 <HAL_GPIO_TogglePin>
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8001d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1c:	4879      	ldr	r0, [pc, #484]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x208>)
 8001d1e:	f003 fccf 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13c      	bne.n	8001da2 <HAL_GPIO_EXTI_Callback+0xa6>



            if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 8001d28:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b13      	cmp	r3, #19
 8001d34:	d81c      	bhi.n	8001d70 <HAL_GPIO_EXTI_Callback+0x74>
 8001d36:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x210>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_GPIO_EXTI_Callback+0x74>

            	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4973      	ldr	r1, [pc, #460]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x214>)
 8001d42:	4874      	ldr	r0, [pc, #464]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x218>)
 8001d44:	f006 fc05 	bl	8008552 <HAL_RTC_GetTime>
            	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4973      	ldr	r1, [pc, #460]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001d4c:	4871      	ldr	r0, [pc, #452]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x218>)
 8001d4e:	f006 fce2 	bl	8008716 <HAL_RTC_GetDate>

            	hour=sTime.Hours;
 8001d52:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x214>)
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x220>)
 8001d58:	701a      	strb	r2, [r3, #0]
            	min=sTime.Minutes;
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x214>)
 8001d5c:	785a      	ldrb	r2, [r3, #1]
 8001d5e:	4b70      	ldr	r3, [pc, #448]	; (8001f20 <HAL_GPIO_EXTI_Callback+0x224>)
 8001d60:	701a      	strb	r2, [r3, #0]
            	sec=sTime.Seconds;
 8001d62:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x214>)
 8001d64:	789a      	ldrb	r2, [r3, #2]
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_GPIO_EXTI_Callback+0x228>)
 8001d68:	701a      	strb	r2, [r3, #0]

            	status=1;
 8001d6a:	4b68      	ldr	r3, [pc, #416]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x210>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
            }

        		   pwm_cmd=pwm_cmd+10;
 8001d70:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	330a      	adds	r3, #10
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d7c:	801a      	strh	r2, [r3, #0]
        		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d903      	bls.n	8001d94 <HAL_GPIO_EXTI_Callback+0x98>
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001d8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d92:	801a      	strh	r2, [r3, #0]
        		   pwm_tgr=4;
 8001d94:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	701a      	strb	r2, [r3, #0]

        		   EXTI->PR = EXTI_PR_PR13;
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x230>)
 8001d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da0:	615a      	str	r2, [r3, #20]


   }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da8:	d149      	bne.n	8001e3e <HAL_GPIO_EXTI_Callback+0x142>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dae:	4855      	ldr	r0, [pc, #340]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x208>)
 8001db0:	f003 fc86 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d104      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>
        // Переключение в противоположное состояние ножки
        // выхода для управления светодиодом (LED):
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);}
 8001dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dbe:	4851      	ldr	r0, [pc, #324]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x208>)
 8001dc0:	f003 fcae 	bl	8005720 <HAL_GPIO_TogglePin>
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc8:	484e      	ldr	r0, [pc, #312]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x208>)
 8001dca:	f003 fc79 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d134      	bne.n	8001e3e <HAL_GPIO_EXTI_Callback+0x142>

		   if((pwm_cmd==0)&&(status==1)){
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_GPIO_EXTI_Callback+0x102>
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x210>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10b      	bne.n	8001dfe <HAL_GPIO_EXTI_Callback+0x102>
		              	status=0;
 8001de6:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x210>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]

		              	hour=0;
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x220>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
		              	min=0;
 8001df2:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_GPIO_EXTI_Callback+0x224>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
		              	sec=0;
 8001df8:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <HAL_GPIO_EXTI_Callback+0x228>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		              }


		   pwm_cmd=pwm_cmd-10;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b0a      	subs	r3, #10
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e0a:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd>=2100){pwm_cmd=0;}
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f640 0233 	movw	r2, #2099	; 0x833
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d902      	bls.n	8001e20 <HAL_GPIO_EXTI_Callback+0x124>
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd<=1){pwm_cmd=0;}
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d802      	bhi.n	8001e30 <HAL_GPIO_EXTI_Callback+0x134>
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
		   pwm_tgr=4;
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001e32:	2204      	movs	r2, #4
 8001e34:	701a      	strb	r2, [r3, #0]
		   EXTI->PR = EXTI_PR_PR14;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x230>)
 8001e38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3c:	615a      	str	r2, [r3, #20]


     }


   if(GPIO_Pin == GPIO_PIN_5) // если прерывание поступило от ножки PB_5
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d15a      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x1fe>
      {
	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8001e44:	2120      	movs	r1, #32
 8001e46:	483a      	ldr	r0, [pc, #232]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x234>)
 8001e48:	f003 fc3a 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d12a      	bne.n	8001ea8 <HAL_GPIO_EXTI_Callback+0x1ac>
	             LED_3_OFF;
 8001e52:	2200      	movs	r2, #0
 8001e54:	2102      	movs	r1, #2
 8001e56:	4837      	ldr	r0, [pc, #220]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x238>)
 8001e58:	f003 fc4a 	bl	80056f0 <HAL_GPIO_WritePin>

	   			// if(page_num>2){page_num=0;}
	   			// page_flag=0;

	             if((HAL_GetTick()-timing)>=3000){
 8001e5c:	f001 f824 	bl	8002ea8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d918      	bls.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x1a6>
	            	 if(lcd_status==0){lcd_update=1;}
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_GPIO_EXTI_Callback+0x240>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f083 0301 	eor.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_GPIO_EXTI_Callback+0x188>
 8001e7e:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_GPIO_EXTI_Callback+0x244>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
	            	 lcd_status=!lcd_status;}
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_GPIO_EXTI_Callback+0x240>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_GPIO_EXTI_Callback+0x240>)
 8001ea0:	701a      	strb	r2, [r3, #0]
	   		         EXTI->PR = EXTI_PR_PR5;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x230>)
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	615a      	str	r2, [r3, #20]
      }

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	4821      	ldr	r0, [pc, #132]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x234>)
 8001eac:	f003 fc08 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d121      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x1fe>

    	         LED_3_ON;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2102      	movs	r1, #2
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x238>)
 8001ebc:	f003 fc18 	bl	80056f0 <HAL_GPIO_WritePin>
    	 	     page_flag=1;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x248>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
    	         page_num++;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001ed0:	701a      	strb	r2, [r3, #0]
    	         if(page_num>2){page_num=0;}
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x1e4>
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
    	         timing=HAL_GetTick();
 8001ee0:	f000 ffe2 	bl	8002ea8 <HAL_GetTick>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001ee8:	6013      	str	r3, [r2, #0]
    	         EXTI->PR = EXTI_PR_PR5;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x230>)
 8001eec:	2220      	movs	r2, #32
 8001eee:	615a      	str	r2, [r3, #20]
    	         timing=HAL_GetTick();
 8001ef0:	f000 ffda 	bl	8002ea8 <HAL_GetTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001ef8:	6013      	str	r3, [r2, #0]
     }



}
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	48000800 	.word	0x48000800
 8001f08:	2000050a 	.word	0x2000050a
 8001f0c:	2000054f 	.word	0x2000054f
 8001f10:	200006d0 	.word	0x200006d0
 8001f14:	2000020c 	.word	0x2000020c
 8001f18:	200006e4 	.word	0x200006e4
 8001f1c:	2000054d 	.word	0x2000054d
 8001f20:	2000054c 	.word	0x2000054c
 8001f24:	2000054e 	.word	0x2000054e
 8001f28:	2000050c 	.word	0x2000050c
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48001400 	.word	0x48001400
 8001f38:	200006cc 	.word	0x200006cc
 8001f3c:	20000506 	.word	0x20000506
 8001f40:	20000507 	.word	0x20000507
 8001f44:	20000549 	.word	0x20000549
 8001f48:	20000548 	.word	0x20000548

08001f4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

RX_2;
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f003 fbc7 	bl	80056f0 <HAL_GPIO_WritePin>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d107      	bne.n	8001f8e <HAL_ADC_ConvCpltCallback+0x22>
    {
        flag = 1;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_ADC_ConvCpltCallback+0x30>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f8a:	f003 fbc9 	bl	8005720 <HAL_GPIO_TogglePin>
    }
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	50000100 	.word	0x50000100
 8001f9c:	2000050d 	.word	0x2000050d
 8001fa0:	48000800 	.word	0x48000800

08001fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i
}
 8001faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fac:	e7fe      	b.n	8001fac <Error_Handler+0x8>

08001fae <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001fae:	b480      	push	{r7}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8001fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbe:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	74fb      	strb	r3, [r7, #19]
 8001fc4:	e023      	b.n	800200e <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4053      	eors	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	74bb      	strb	r3, [r7, #18]
 8001fda:	e012      	b.n	8002002 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
			if (flag)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001ffc:	7cbb      	ldrb	r3, [r7, #18]
 8001ffe:	3301      	adds	r3, #1
 8002000:	74bb      	strb	r3, [r7, #18]
 8002002:	7cbb      	ldrb	r3, [r7, #18]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d9e9      	bls.n	8001fdc <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	3301      	adds	r3, #1
 800200c:	74fb      	strb	r3, [r7, #19]
 800200e:	7cfa      	ldrb	r2, [r7, #19]
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	429a      	cmp	r2, r3
 8002014:	d3d7      	bcc.n	8001fc6 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	b29b      	uxth	r3, r3
 800202a:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	b29b      	uxth	r3, r3

}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4619      	mov	r1, r3
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f7ff ffad 	bl	8001fae <calcCRC16ModBus>
 8002054:	4603      	mov	r3, r0
 8002056:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	3301      	adds	r3, #1
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4413      	add	r3, r2
 8002060:	8afa      	ldrh	r2, [r7, #22]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b299      	uxth	r1, r3
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f003 fb36 	bl	80056f0 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_DMA(huart, frame, len+2);
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	b29b      	uxth	r3, r3
 8002088:	3302      	adds	r3, #2
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f008 fc2b 	bl	800a8ec <HAL_UART_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2102      	movs	r1, #2
 800209a:	4804      	ldr	r0, [pc, #16]	; (80020ac <sendModBusRequest+0x70>)
 800209c:	f003 fb28 	bl	80056f0 <HAL_GPIO_WritePin>
//	else{

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
	//	return MODBUS_ERROR;
	//}
}
 80020a0:	bf00      	nop
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	48001400 	.word	0x48001400

080020b0 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <handleReadHoldingRegs+0xf0>)
 80020bc:	789b      	ldrb	r3, [r3, #2]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <handleReadHoldingRegs+0xf0>)
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <handleReadHoldingRegs+0xf0>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <handleReadHoldingRegs+0xf0>)
 80020d8:	795b      	ldrb	r3, [r3, #5]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 80020e2:	8afb      	ldrh	r3, [r7, #22]
 80020e4:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80020e8:	3b31      	subs	r3, #49	; 0x31
 80020ea:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 80020ec:	8afa      	ldrh	r2, [r7, #22]
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	2b7d      	cmp	r3, #125	; 0x7d
 80020fc:	d905      	bls.n	800210a <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80020fe:	2103      	movs	r1, #3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f94b 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 8002106:	2300      	movs	r3, #0
 8002108:	e045      	b.n	8002196 <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800210a:	893b      	ldrh	r3, [r7, #8]
 800210c:	2b1e      	cmp	r3, #30
 800210e:	d905      	bls.n	800211c <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8002110:	2102      	movs	r1, #2
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f942 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 8002118:	2300      	movs	r3, #0
 800211a:	e03c      	b.n	8002196 <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <handleReadHoldingRegs+0xf4>)
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 8002122:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <handleReadHoldingRegs+0xf0>)
 8002126:	785a      	ldrb	r2, [r3, #1]
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 800212a:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800212c:	897b      	ldrh	r3, [r7, #10]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 8002136:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8002138:	2303      	movs	r3, #3
 800213a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e01d      	b.n	800217e <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b299      	uxth	r1, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	613a      	str	r2, [r7, #16]
 8002156:	b2c9      	uxtb	r1, r1
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 800215a:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	8819      	ldrh	r1, [r3, #0]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	613a      	str	r2, [r7, #16]
 800216c:	b2c9      	uxtb	r1, r1
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 8002170:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	3301      	adds	r3, #1
 8002176:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbdd      	blt.n	8002142 <handleReadHoldingRegs+0x92>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4906      	ldr	r1, [pc, #24]	; (80021a8 <handleReadHoldingRegs+0xf8>)
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff54 	bl	800203c <sendModBusRequest>
	return 1;
 8002194:	2301      	movs	r3, #1

}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000550 	.word	0x20000550
 80021a4:	2000000b 	.word	0x2000000b
 80021a8:	2000056c 	.word	0x2000056c

080021ac <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <handleReadInputRegs+0xe4>)
 80021b8:	789b      	ldrb	r3, [r3, #2]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	b21a      	sxth	r2, r3
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <handleReadInputRegs+0xe4>)
 80021c0:	78db      	ldrb	r3, [r3, #3]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <handleReadInputRegs+0xe4>)
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <handleReadInputRegs+0xe4>)
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 80021de:	8afa      	ldrh	r2, [r7, #22]
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	2b7d      	cmp	r3, #125	; 0x7d
 80021ee:	d905      	bls.n	80021fc <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80021f0:	2103      	movs	r1, #3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8d2 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e045      	b.n	8002288 <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80021fc:	893b      	ldrh	r3, [r7, #8]
 80021fe:	2b1e      	cmp	r3, #30
 8002200:	d905      	bls.n	800220e <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8002202:	2102      	movs	r1, #2
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8c9 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 800220a:	2300      	movs	r3, #0
 800220c:	e03c      	b.n	8002288 <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <handleReadInputRegs+0xe8>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <handleReadInputRegs+0xec>)
 8002214:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <handleReadInputRegs+0xe4>)
 8002218:	785a      	ldrb	r2, [r3, #1]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <handleReadInputRegs+0xec>)
 800221c:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <handleReadInputRegs+0xec>)
 8002228:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800222a:	2303      	movs	r3, #3
 800222c:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e01d      	b.n	8002270 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	b299      	uxth	r1, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	613a      	str	r2, [r7, #16]
 8002248:	b2c9      	uxtb	r1, r1
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <handleReadInputRegs+0xec>)
 800224c:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800224e:	8afb      	ldrh	r3, [r7, #22]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	8819      	ldrh	r1, [r3, #0]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	613a      	str	r2, [r7, #16]
 800225e:	b2c9      	uxtb	r1, r1
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <handleReadInputRegs+0xec>)
 8002262:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8002264:	8afb      	ldrh	r3, [r7, #22]
 8002266:	3301      	adds	r3, #1
 8002268:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3301      	adds	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbdd      	blt.n	8002234 <handleReadInputRegs+0x88>
	}


	sendModBusRequest(huart,txFrame,byteCursor);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4906      	ldr	r1, [pc, #24]	; (8002298 <handleReadInputRegs+0xec>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fedb 	bl	800203c <sendModBusRequest>
	return 1;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000550 	.word	0x20000550
 8002294:	2000000b 	.word	0x2000000b
 8002298:	2000056c 	.word	0x2000056c

0800229c <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 80022bc:	791b      	ldrb	r3, [r3, #4]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	4b33      	ldr	r3, [pc, #204]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 80022c4:	795b      	ldrb	r3, [r3, #5]
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <handleWriteMulyipleHandlingRegister+0x3e>
 80022d4:	897b      	ldrh	r3, [r7, #10]
 80022d6:	2b7b      	cmp	r3, #123	; 0x7b
 80022d8:	d905      	bls.n	80022e6 <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80022da:	2103      	movs	r1, #3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f85d 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e04f      	b.n	8002386 <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80022e6:	8afa      	ldrh	r2, [r7, #22]
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	4413      	add	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	2b1e      	cmp	r3, #30
 80022f6:	d905      	bls.n	8002304 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80022f8:	2102      	movs	r1, #2
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f84e 	bl	800239c <sendModbusException>
		return MODBUS_ERROR;
 8002300:	2300      	movs	r3, #0
 8002302:	e040      	b.n	8002386 <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8002304:	2307      	movs	r3, #7
 8002306:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e019      	b.n	8002342 <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	613a      	str	r2, [r7, #16]
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	6139      	str	r1, [r7, #16]
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b219      	sxth	r1, r3
 800232c:	8afb      	ldrh	r3, [r7, #22]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	82fa      	strh	r2, [r7, #22]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	b28a      	uxth	r2, r1
 800233a:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3301      	adds	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbe1      	blt.n	800230e <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <handleWriteMulyipleHandlingRegister+0xf8>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002350:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002354:	785a      	ldrb	r2, [r3, #1]
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002358:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 800235c:	789a      	ldrb	r2, [r3, #2]
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002360:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002364:	78da      	ldrb	r2, [r3, #3]
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002368:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 800236c:	791a      	ldrb	r2, [r3, #4]
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002370:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002374:	795a      	ldrb	r2, [r3, #5]
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002378:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 800237a:	2206      	movs	r2, #6
 800237c:	4906      	ldr	r1, [pc, #24]	; (8002398 <handleWriteMulyipleHandlingRegister+0xfc>)
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe5c 	bl	800203c <sendModBusRequest>
	return 1;   // success
 8002384:	2301      	movs	r3, #1

}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000550 	.word	0x20000550
 8002394:	2000000b 	.word	0x2000000b
 8002398:	2000056c 	.word	0x2000056c

0800239c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <sendModbusException+0x3c>)
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <sendModbusException+0x40>)
 80023ae:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <sendModbusException+0x3c>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <sendModbusException+0x40>)
 80023bc:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <sendModbusException+0x40>)
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 80023c4:	2203      	movs	r2, #3
 80023c6:	4905      	ldr	r1, [pc, #20]	; (80023dc <sendModbusException+0x40>)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff fe37 	bl	800203c <sendModBusRequest>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000550 	.word	0x20000550
 80023dc:	2000056c 	.word	0x2000056c

080023e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_MspInit+0x50>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_MspInit+0x50>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6193      	str	r3, [r2, #24]
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x50>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x50>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_MspInit+0x50>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_MspInit+0x50>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2005      	movs	r0, #5
 800241c:	f002 fd69 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002420:	2005      	movs	r0, #5
 8002422:	f002 fd82 	bl	8004f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002454:	d136      	bne.n	80024c4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002456:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 800245e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002460:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10b      	bne.n	8002480 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002468:	4b6c      	ldr	r3, [pc, #432]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4a6b      	ldr	r2, [pc, #428]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6153      	str	r3, [r2, #20]
 8002474:	4b69      	ldr	r3, [pc, #420]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b66      	ldr	r3, [pc, #408]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248a:	6153      	str	r3, [r2, #20]
 800248c:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = U_in_volt_Pin;
 8002498:	2308      	movs	r3, #8
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(U_in_volt_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ae:	f002 ff8d 	bl	80053cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2012      	movs	r0, #18
 80024b8:	f002 fd1b 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024bc:	2012      	movs	r0, #18
 80024be:	f002 fd34 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024c2:	e0a4      	b.n	800260e <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a55      	ldr	r2, [pc, #340]	; (8002620 <HAL_ADC_MspInit+0x1ec>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d176      	bne.n	80025bc <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 80024d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <HAL_ADC_MspInit+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10b      	bne.n	80024f8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024e0:	4b4e      	ldr	r3, [pc, #312]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6153      	str	r3, [r2, #20]
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80024fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002502:	6153      	str	r3, [r2, #20]
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	4a41      	ldr	r2, [pc, #260]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 8002516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251a:	6153      	str	r3, [r2, #20]
 800251c:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin|SENS_3_Pin|SENS_4_Pin;
 8002528:	23f0      	movs	r3, #240	; 0xf0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252c:	2303      	movs	r3, #3
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f002 ff45 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Current_Pin;
 8002542:	2304      	movs	r3, #4
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Current_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	4619      	mov	r1, r3
 8002554:	4833      	ldr	r0, [pc, #204]	; (8002624 <HAL_ADC_MspInit+0x1f0>)
 8002556:	f002 ff39 	bl	80053cc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 800255c:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_ADC_MspInit+0x1f8>)
 800255e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 8002574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002578:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 800257c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002580:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800258e:	4826      	ldr	r0, [pc, #152]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 8002590:	f002 fce5 	bl	8004f5e <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800259a:	f7ff fd03 	bl	8001fa4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_ADC_MspInit+0x1f4>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2012      	movs	r0, #18
 80025b0:	f002 fc9f 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025b4:	2012      	movs	r0, #18
 80025b6:	f002 fcb8 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 80025ba:	e028      	b.n	800260e <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_ADC_MspInit+0x1fc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d123      	bne.n	800260e <HAL_ADC_MspInit+0x1da>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025d0:	6153      	str	r3, [r2, #20]
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6153      	str	r3, [r2, #20]
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_ADC_MspInit+0x1e8>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin;
 80025f6:	2303      	movs	r3, #3
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fa:	2303      	movs	r3, #3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4806      	ldr	r0, [pc, #24]	; (8002624 <HAL_ADC_MspInit+0x1f0>)
 800260a:	f002 fedf 	bl	80053cc <HAL_GPIO_Init>
}
 800260e:	bf00      	nop
 8002610:	3738      	adds	r7, #56	; 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200006e8 	.word	0x200006e8
 800261c:	40021000 	.word	0x40021000
 8002620:	50000100 	.word	0x50000100
 8002624:	48000400 	.word	0x48000400
 8002628:	20000174 	.word	0x20000174
 800262c:	40020408 	.word	0x40020408
 8002630:	50000400 	.word	0x50000400

08002634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_I2C_MspInit+0x9c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d138      	bne.n	80026c8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	6153      	str	r3, [r2, #20]
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800266e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002680:	2304      	movs	r3, #4
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4813      	ldr	r0, [pc, #76]	; (80026d8 <HAL_I2C_MspInit+0xa4>)
 800268c:	f002 fe9e 	bl	80053cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 8002696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_I2C_MspInit+0xa0>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	201f      	movs	r0, #31
 80026ae:	f002 fc20 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026b2:	201f      	movs	r0, #31
 80026b4:	f002 fc39 	bl	8004f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2020      	movs	r0, #32
 80026be:	f002 fc18 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026c2:	2020      	movs	r0, #32
 80026c4:	f002 fc31 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026c8:	bf00      	nop
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40005400 	.word	0x40005400
 80026d4:	40021000 	.word	0x40021000
 80026d8:	48000400 	.word	0x48000400

080026dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_RTC_MspInit+0x44>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d111      	bne.n	8002712 <HAL_RTC_MspInit+0x36>
 80026ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026fc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_RTC_MspInit+0x48>)
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	2301      	movs	r3, #1
 8002710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40002800 	.word	0x40002800
 8002724:	10908100 	.word	0x10908100

08002728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_TIM_Base_MspInit+0x128>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d114      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a41      	ldr	r2, [pc, #260]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2018      	movs	r0, #24
 8002768:	f002 fbc3 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800276c:	2018      	movs	r0, #24
 800276e:	f002 fbdc 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002772:	e069      	b.n	8002848 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d131      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277e:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4a2e      	ldr	r2, [pc, #184]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	6153      	str	r3, [r2, #20]
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027be:	2301      	movs	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f002 fdfe 	bl	80053cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	201c      	movs	r0, #28
 80027d6:	f002 fb8c 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027da:	201c      	movs	r0, #28
 80027dc:	f002 fba5 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 80027e0:	e032      	b.n	8002848 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_TIM_Base_MspInit+0x130>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d114      	bne.n	8002816 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 80027f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	202b      	movs	r0, #43	; 0x2b
 800280a:	f002 fb72 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 800280e:	202b      	movs	r0, #43	; 0x2b
 8002810:	f002 fb8b 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8002814:	e018      	b.n	8002848 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM15)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_TIM_Base_MspInit+0x134>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d113      	bne.n	8002848 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_TIM_Base_MspInit+0x12c>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	2018      	movs	r0, #24
 800283e:	f002 fb58 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002842:	2018      	movs	r0, #24
 8002844:	f002 fb71 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	; 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40013400 	.word	0x40013400
 800285c:	40014000 	.word	0x40014000

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_TIM_MspPostInit+0x150>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11e      	bne.n	80028c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6153      	str	r3, [r2, #20]
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800289a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028ac:	2306      	movs	r3, #6
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f002 fd87 	bl	80053cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028be:	e072      	b.n	80029a6 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <HAL_TIM_MspPostInit+0x158>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d13a      	bne.n	8002940 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	6153      	str	r3, [r2, #20]
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4a33      	ldr	r2, [pc, #204]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6153      	str	r3, [r2, #20]
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800290c:	2302      	movs	r3, #2
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291a:	f002 fd57 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800291e:	2308      	movs	r3, #8
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800292e:	2304      	movs	r3, #4
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4820      	ldr	r0, [pc, #128]	; (80029bc <HAL_TIM_MspPostInit+0x15c>)
 800293a:	f002 fd47 	bl	80053cc <HAL_GPIO_Init>
}
 800293e:	e032      	b.n	80029a6 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_TIM_MspPostInit+0x160>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12d      	bne.n	80029a6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6153      	str	r3, [r2, #20]
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_TIM_MspPostInit+0x154>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002974:	2301      	movs	r3, #1
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	480f      	ldr	r0, [pc, #60]	; (80029bc <HAL_TIM_MspPostInit+0x15c>)
 8002980:	f002 fd24 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4806      	ldr	r0, [pc, #24]	; (80029bc <HAL_TIM_MspPostInit+0x15c>)
 80029a2:	f002 fd13 	bl	80053cc <HAL_GPIO_Init>
}
 80029a6:	bf00      	nop
 80029a8:	3730      	adds	r7, #48	; 0x30
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013400 	.word	0x40013400
 80029bc:	48000400 	.word	0x48000400
 80029c0:	40014000 	.word	0x40014000

080029c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_UART_MspInit+0x1bc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d128      	bne.n	8002a38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6193      	str	r3, [r2, #24]
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4a60      	ldr	r2, [pc, #384]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6153      	str	r3, [r2, #20]
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a26:	2307      	movs	r3, #7
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4855      	ldr	r0, [pc, #340]	; (8002b88 <HAL_UART_MspInit+0x1c4>)
 8002a32:	f002 fccb 	bl	80053cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a36:	e09f      	b.n	8002b78 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a53      	ldr	r2, [pc, #332]	; (8002b8c <HAL_UART_MspInit+0x1c8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 809a 	bne.w	8002b78 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	61d3      	str	r3, [r2, #28]
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	4a48      	ldr	r2, [pc, #288]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	6153      	str	r3, [r2, #20]
 8002a68:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	4b43      	ldr	r3, [pc, #268]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a42      	ldr	r2, [pc, #264]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	6153      	str	r3, [r2, #20]
 8002a80:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_UART_MspInit+0x1c0>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aaa:	f002 fc8f 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aae:	2310      	movs	r3, #16
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002abe:	2307      	movs	r3, #7
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482f      	ldr	r0, [pc, #188]	; (8002b88 <HAL_UART_MspInit+0x1c4>)
 8002aca:	f002 fc7f 	bl	80053cc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002ad0:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <HAL_UART_MspInit+0x1d0>)
 8002ad2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002afe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b00:	4823      	ldr	r0, [pc, #140]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002b02:	f002 fa2c 	bl	8004f5e <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002b0c:	f7ff fa4a 	bl	8001fa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002b14:	671a      	str	r2, [r3, #112]	; 0x70
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_UART_MspInit+0x1cc>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_UART_MspInit+0x1d8>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b4c:	4812      	ldr	r0, [pc, #72]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b4e:	f002 fa06 	bl	8004f5e <HAL_DMA_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002b58:	f7ff fa24 	bl	8001fa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b60:	675a      	str	r2, [r3, #116]	; 0x74
 8002b62:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <HAL_UART_MspInit+0x1d4>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	2026      	movs	r0, #38	; 0x26
 8002b6e:	f002 f9c0 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b72:	2026      	movs	r0, #38	; 0x26
 8002b74:	f002 f9d9 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8002b78:	bf00      	nop
 8002b7a:	3730      	adds	r7, #48	; 0x30
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	2000046c 	.word	0x2000046c
 8002b94:	40020080 	.word	0x40020080
 8002b98:	200004b0 	.word	0x200004b0
 8002b9c:	4002006c 	.word	0x4002006c

08002ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <NMI_Handler+0x4>

08002ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bec:	f000 f948 	bl	8002e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002c06:	2002      	movs	r0, #2
 8002c08:	f002 fda4 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Channel6_IRQHandler+0x10>)
 8002c16:	f002 fabf 	bl	8005198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200004b0 	.word	0x200004b0

08002c24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <DMA1_Channel7_IRQHandler+0x10>)
 8002c2a:	f002 fab5 	bl	8005198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000046c 	.word	0x2000046c

08002c38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <ADC1_2_IRQHandler+0x14>)
 8002c3e:	f000 ff3b 	bl	8003ab8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002c42:	4803      	ldr	r0, [pc, #12]	; (8002c50 <ADC1_2_IRQHandler+0x18>)
 8002c44:	f000 ff38 	bl	8003ab8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000084 	.word	0x20000084
 8002c50:	200000d4 	.word	0x200000d4

08002c54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c58:	2020      	movs	r0, #32
 8002c5a:	f002 fd7b 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002c6a:	f006 fa53 	bl	8009114 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002c6e:	4803      	ldr	r0, [pc, #12]	; (8002c7c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002c70:	f006 fa50 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000022c 	.word	0x2000022c
 8002c7c:	20000310 	.word	0x20000310

08002c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM2_IRQHandler+0x10>)
 8002c86:	f006 fa45 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000278 	.word	0x20000278

08002c94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <I2C1_EV_IRQHandler+0x10>)
 8002c9a:	f002 fef7 	bl	8005a8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200001b8 	.word	0x200001b8

08002ca8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <I2C1_ER_IRQHandler+0x10>)
 8002cae:	f002 ff07 	bl	8005ac0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200001b8 	.word	0x200001b8

08002cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <USART2_IRQHandler+0x10>)
 8002cc2:	f007 fe8f 	bl	800a9e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200003e4 	.word	0x200003e4

08002cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8002cd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cd8:	f002 fd3c 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 8002cdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ce0:	f002 fd38 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM8_BRK_IRQHandler+0x10>)
 8002cee:	f006 fa11 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200002c4 	.word	0x200002c4

08002cfc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <DMA2_Channel1_IRQHandler+0x10>)
 8002d02:	f002 fa49 	bl	8005198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000174 	.word	0x20000174

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f009 f81e 	bl	800bd80 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <_sbrk+0x64>)
 8002d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000a000 	.word	0x2000a000
 8002d70:	00000400 	.word	0x00000400
 8002d74:	200006ec 	.word	0x200006ec
 8002d78:	20000840 	.word	0x20000840

08002d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <SystemInit+0x20>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <SystemInit+0x20>)
 8002d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002da4:	f7ff ffea 	bl	8002d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <LoopForever+0xe>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <LoopForever+0x16>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dce:	f008 ffdd 	bl	800bd8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dd2:	f7fd fd05 	bl	80007e0 <main>

08002dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd6:	e7fe      	b.n	8002dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dd8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002de4:	0800c7ac 	.word	0x0800c7ac
  ldr r2, =_sbss
 8002de8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002dec:	2000083c 	.word	0x2000083c

08002df0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC3_IRQHandler>
	...

08002df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_Init+0x28>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_Init+0x28>)
 8002dfe:	f043 0310 	orr.w	r3, r3, #16
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e04:	2003      	movs	r0, #3
 8002e06:	f002 f869 	bl	8004edc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e0a:	200f      	movs	r0, #15
 8002e0c:	f000 f808 	bl	8002e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e10:	f7ff fae6 	bl	80023e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x54>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_InitTick+0x58>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 f881 	bl	8004f46 <HAL_SYSTICK_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00e      	b.n	8002e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d80a      	bhi.n	8002e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e54:	2200      	movs	r2, #0
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f002 f849 	bl	8004ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <HAL_InitTick+0x5c>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	20000014 	.word	0x20000014
 8002e7c:	20000010 	.word	0x20000010

08002e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	200006f0 	.word	0x200006f0

08002ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200006f0 	.word	0x200006f0

08002ec0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_Delay+0x44>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000014 	.word	0x20000014

08002f08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b09a      	sub	sp, #104	; 0x68
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e1c9      	b.n	80032f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d176      	bne.n	8003064 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d152      	bne.n	8003024 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fa4b 	bl	8002434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13b      	bne.n	8003024 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f001 fda9 	bl	8004b04 <ADC_Disable>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d12f      	bne.n	8003024 <HAL_ADC_Init+0xe0>
 8002fc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d12b      	bne.n	8003024 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fd4:	f023 0302 	bic.w	r3, r3, #2
 8002fd8:	f043 0202 	orr.w	r2, r3, #2
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ffe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003000:	4b86      	ldr	r3, [pc, #536]	; (800321c <HAL_ADC_Init+0x2d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a86      	ldr	r2, [pc, #536]	; (8003220 <HAL_ADC_Init+0x2dc>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003016:	e002      	b.n	800301e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3b01      	subs	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800303c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003040:	d110      	bne.n	8003064 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f023 0312 	bic.w	r3, r3, #18
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8136 	bne.w	80032de <HAL_ADC_Init+0x39a>
 8003072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 8131 	bne.w	80032de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8129 	bne.w	80032de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003094:	f043 0202 	orr.w	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a4:	d004      	beq.n	80030b0 <HAL_ADC_Init+0x16c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5e      	ldr	r2, [pc, #376]	; (8003224 <HAL_ADC_Init+0x2e0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_Init+0x170>
 80030b0:	4b5d      	ldr	r3, [pc, #372]	; (8003228 <HAL_ADC_Init+0x2e4>)
 80030b2:	e000      	b.n	80030b6 <HAL_ADC_Init+0x172>
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_ADC_Init+0x2e8>)
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d102      	bne.n	80030c8 <HAL_ADC_Init+0x184>
 80030c2:	4b58      	ldr	r3, [pc, #352]	; (8003224 <HAL_ADC_Init+0x2e0>)
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e01a      	b.n	80030fe <HAL_ADC_Init+0x1ba>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a55      	ldr	r2, [pc, #340]	; (8003224 <HAL_ADC_Init+0x2e0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d103      	bne.n	80030da <HAL_ADC_Init+0x196>
 80030d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e011      	b.n	80030fe <HAL_ADC_Init+0x1ba>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a54      	ldr	r2, [pc, #336]	; (8003230 <HAL_ADC_Init+0x2ec>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <HAL_ADC_Init+0x1a6>
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_ADC_Init+0x2f0>)
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e009      	b.n	80030fe <HAL_ADC_Init+0x1ba>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_ADC_Init+0x2f0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d102      	bne.n	80030fa <HAL_ADC_Init+0x1b6>
 80030f4:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_ADC_Init+0x2ec>)
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e001      	b.n	80030fe <HAL_ADC_Init+0x1ba>
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_ADC_Init+0x1da>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADC_Init+0x1da>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_ADC_Init+0x1dc>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d11c      	bne.n	800315e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003124:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_ADC_Init+0x202>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Init+0x202>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_ADC_Init+0x204>
 8003146:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003148:	2b00      	cmp	r3, #0
 800314a:	d108      	bne.n	800315e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7e5b      	ldrb	r3, [r3, #25]
 8003162:	035b      	lsls	r3, r3, #13
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003168:	2a01      	cmp	r2, #1
 800316a:	d002      	beq.n	8003172 <HAL_ADC_Init+0x22e>
 800316c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003170:	e000      	b.n	8003174 <HAL_ADC_Init+0x230>
 8003172:	2200      	movs	r2, #0
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003184:	4313      	orrs	r3, r2
 8003186:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d11b      	bne.n	80031ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7e5b      	ldrb	r3, [r3, #25]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	3b01      	subs	r3, #1
 80031a0:	045a      	lsls	r2, r3, #17
 80031a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	663b      	str	r3, [r7, #96]	; 0x60
 80031ac:	e00d      	b.n	80031ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d03a      	beq.n	8003248 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_ADC_Init+0x2ec>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x2a2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_ADC_Init+0x2f0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d128      	bne.n	8003238 <HAL_ADC_Init+0x2f4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80031ee:	d012      	beq.n	8003216 <HAL_ADC_Init+0x2d2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f8:	d00a      	beq.n	8003210 <HAL_ADC_Init+0x2cc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003202:	d002      	beq.n	800320a <HAL_ADC_Init+0x2c6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	e018      	b.n	800323c <HAL_ADC_Init+0x2f8>
 800320a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320e:	e015      	b.n	800323c <HAL_ADC_Init+0x2f8>
 8003210:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003214:	e012      	b.n	800323c <HAL_ADC_Init+0x2f8>
 8003216:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800321a:	e00f      	b.n	800323c <HAL_ADC_Init+0x2f8>
 800321c:	2000000c 	.word	0x2000000c
 8003220:	431bde83 	.word	0x431bde83
 8003224:	50000100 	.word	0x50000100
 8003228:	50000300 	.word	0x50000300
 800322c:	50000700 	.word	0x50000700
 8003230:	50000400 	.word	0x50000400
 8003234:	50000500 	.word	0x50000500
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003240:	4313      	orrs	r3, r2
 8003242:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003244:	4313      	orrs	r3, r2
 8003246:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d114      	bne.n	8003280 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003264:	f023 0302 	bic.w	r3, r3, #2
 8003268:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7e1b      	ldrb	r3, [r3, #24]
 800326e:	039a      	lsls	r2, r3, #14
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4313      	orrs	r3, r2
 800327a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800327c:	4313      	orrs	r3, r2
 800327e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_ADC_Init+0x3bc>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003290:	430b      	orrs	r3, r1
 8003292:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10c      	bne.n	80032b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f023 010f 	bic.w	r1, r3, #15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
 80032b4:	e007      	b.n	80032c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 020f 	bic.w	r2, r2, #15
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f023 0303 	bic.w	r3, r3, #3
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
 80032dc:	e00a      	b.n	80032f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f023 0312 	bic.w	r3, r3, #18
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80032f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3768      	adds	r7, #104	; 0x68
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	fff0c007 	.word	0xfff0c007

08003304 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 80f9 	bne.w	8003512 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_ADC_Start+0x2a>
 800332a:	2302      	movs	r3, #2
 800332c:	e0f4      	b.n	8003518 <HAL_ADC_Start+0x214>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f001 fb80 	bl	8004a3c <ADC_Enable>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80e0 	bne.w	8003508 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003364:	d004      	beq.n	8003370 <HAL_ADC_Start+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6d      	ldr	r2, [pc, #436]	; (8003520 <HAL_ADC_Start+0x21c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d106      	bne.n	800337e <HAL_ADC_Start+0x7a>
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_ADC_Start+0x220>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_ADC_Start+0x9a>
 800337c:	e005      	b.n	800338a <HAL_ADC_Start+0x86>
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_ADC_Start+0x224>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_ADC_Start+0x9a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003392:	d004      	beq.n	800339e <HAL_ADC_Start+0x9a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a64      	ldr	r2, [pc, #400]	; (800352c <HAL_ADC_Start+0x228>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d115      	bne.n	80033ca <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d036      	beq.n	8003426 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80033c8:	e02d      	b.n	8003426 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033de:	d004      	beq.n	80033ea <HAL_ADC_Start+0xe6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <HAL_ADC_Start+0x21c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_Start+0xfc>
 80033ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_ADC_Start+0x10e>
 8003400:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_ADC_Start+0x228>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800341e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d106      	bne.n	8003442 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f023 0206 	bic.w	r2, r3, #6
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
 8003440:	e002      	b.n	8003448 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	221c      	movs	r2, #28
 8003456:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d004      	beq.n	800346c <HAL_ADC_Start+0x168>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <HAL_ADC_Start+0x21c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d106      	bne.n	800347a <HAL_ADC_Start+0x176>
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_ADC_Start+0x220>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03e      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 8003478:	e005      	b.n	8003486 <HAL_ADC_Start+0x182>
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_ADC_Start+0x224>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2b00      	cmp	r3, #0
 8003484:	d037      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348e:	d004      	beq.n	800349a <HAL_ADC_Start+0x196>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <HAL_ADC_Start+0x21c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d106      	bne.n	80034a8 <HAL_ADC_Start+0x1a4>
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_ADC_Start+0x220>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d027      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 80034a6:	e005      	b.n	80034b4 <HAL_ADC_Start+0x1b0>
 80034a8:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <HAL_ADC_Start+0x224>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d020      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_Start+0x1c4>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_ADC_Start+0x21c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d106      	bne.n	80034d6 <HAL_ADC_Start+0x1d2>
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_ADC_Start+0x220>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d010      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 80034d4:	e005      	b.n	80034e2 <HAL_ADC_Start+0x1de>
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_ADC_Start+0x224>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2b09      	cmp	r3, #9
 80034e0:	d009      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ea:	d004      	beq.n	80034f6 <HAL_ADC_Start+0x1f2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0e      	ldr	r2, [pc, #56]	; (800352c <HAL_ADC_Start+0x228>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10f      	bne.n	8003516 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0204 	orr.w	r2, r2, #4
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	e006      	b.n	8003516 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003510:	e001      	b.n	8003516 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	50000100 	.word	0x50000100
 8003524:	50000300 	.word	0x50000300
 8003528:	50000700 	.word	0x50000700
 800352c:	50000400 	.word	0x50000400

08003530 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Stop+0x1a>
 8003546:	2302      	movs	r3, #2
 8003548:	e023      	b.n	8003592 <HAL_ADC_Stop+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003552:	216c      	movs	r1, #108	; 0x6c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f001 fb3b 	bl	8004bd0 <ADC_ConversionStop>
 800355a:	4603      	mov	r3, r0
 800355c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f001 facd 	bl	8004b04 <ADC_Disable>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d102      	bne.n	80035b8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80035b2:	2308      	movs	r3, #8
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e03a      	b.n	800362e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c0:	d004      	beq.n	80035cc <HAL_ADC_PollForConversion+0x30>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a72      	ldr	r2, [pc, #456]	; (8003790 <HAL_ADC_PollForConversion+0x1f4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_PollForConversion+0x34>
 80035cc:	4b71      	ldr	r3, [pc, #452]	; (8003794 <HAL_ADC_PollForConversion+0x1f8>)
 80035ce:	e000      	b.n	80035d2 <HAL_ADC_PollForConversion+0x36>
 80035d0:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_ADC_PollForConversion+0x1fc>)
 80035d2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d112      	bne.n	8003606 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d11d      	bne.n	800362a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0bf      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0ad      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800362a:	230c      	movs	r3, #12
 800362c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003636:	d004      	beq.n	8003642 <HAL_ADC_PollForConversion+0xa6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a54      	ldr	r2, [pc, #336]	; (8003790 <HAL_ADC_PollForConversion+0x1f4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d106      	bne.n	8003650 <HAL_ADC_PollForConversion+0xb4>
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_ADC_PollForConversion+0x1f8>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_ADC_PollForConversion+0xd4>
 800364e:	e005      	b.n	800365c <HAL_ADC_PollForConversion+0xc0>
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_ADC_PollForConversion+0x1fc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_ADC_PollForConversion+0xd4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003664:	d004      	beq.n	8003670 <HAL_ADC_PollForConversion+0xd4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4c      	ldr	r2, [pc, #304]	; (800379c <HAL_ADC_PollForConversion+0x200>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d104      	bne.n	800367a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	e00f      	b.n	800369a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003682:	d004      	beq.n	800368e <HAL_ADC_PollForConversion+0xf2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a41      	ldr	r2, [pc, #260]	; (8003790 <HAL_ADC_PollForConversion+0x1f4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <HAL_ADC_PollForConversion+0xf8>
 800368e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003692:	e000      	b.n	8003696 <HAL_ADC_PollForConversion+0xfa>
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_ADC_PollForConversion+0x200>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800369a:	f7ff fc05 	bl	8002ea8 <HAL_GetTick>
 800369e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036a0:	e021      	b.n	80036e6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d01d      	beq.n	80036e6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_ADC_PollForConversion+0x124>
 80036b0:	f7ff fbfa 	bl	8002ea8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d212      	bcs.n	80036e6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e04f      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0d6      	beq.n	80036a2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800370a:	2b00      	cmp	r3, #0
 800370c:	d131      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003714:	2b00      	cmp	r3, #0
 8003716:	d12c      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	d125      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d112      	bne.n	800375a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d112      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
 8003758:	e00b      	b.n	8003772 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	50000100 	.word	0x50000100
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700
 800379c:	50000400 	.word	0x50000400

080037a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 80f7 	bne.w	80039ae <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_Start_DMA+0x2e>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e0f2      	b.n	80039b4 <HAL_ADC_Start_DMA+0x214>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037de:	d004      	beq.n	80037ea <HAL_ADC_Start_DMA+0x4a>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a75      	ldr	r2, [pc, #468]	; (80039bc <HAL_ADC_Start_DMA+0x21c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d109      	bne.n	80037fe <HAL_ADC_Start_DMA+0x5e>
 80037ea:	4b75      	ldr	r3, [pc, #468]	; (80039c0 <HAL_ADC_Start_DMA+0x220>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e008      	b.n	8003810 <HAL_ADC_Start_DMA+0x70>
 80037fe:	4b71      	ldr	r3, [pc, #452]	; (80039c4 <HAL_ADC_Start_DMA+0x224>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80c5 	beq.w	80039a0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f001 f910 	bl	8004a3c <ADC_Enable>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 80b7 	bne.w	8003996 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003844:	d004      	beq.n	8003850 <HAL_ADC_Start_DMA+0xb0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5c      	ldr	r2, [pc, #368]	; (80039bc <HAL_ADC_Start_DMA+0x21c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d106      	bne.n	800385e <HAL_ADC_Start_DMA+0xbe>
 8003850:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_ADC_Start_DMA+0x220>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_ADC_Start_DMA+0xde>
 800385c:	e005      	b.n	800386a <HAL_ADC_Start_DMA+0xca>
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_ADC_Start_DMA+0x224>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_ADC_Start_DMA+0xde>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003872:	d004      	beq.n	800387e <HAL_ADC_Start_DMA+0xde>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a53      	ldr	r2, [pc, #332]	; (80039c8 <HAL_ADC_Start_DMA+0x228>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d115      	bne.n	80038aa <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d036      	beq.n	8003906 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80038a8:	e02d      	b.n	8003906 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038be:	d004      	beq.n	80038ca <HAL_ADC_Start_DMA+0x12a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <HAL_ADC_Start_DMA+0x21c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10a      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x140>
 80038ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e008      	b.n	80038f2 <HAL_ADC_Start_DMA+0x152>
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_ADC_Start_DMA+0x228>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d106      	bne.n	8003922 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f023 0206 	bic.w	r2, r3, #6
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
 8003920:	e002      	b.n	8003928 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_ADC_Start_DMA+0x22c>)
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <HAL_ADC_Start_DMA+0x230>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_ADC_Start_DMA+0x234>)
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	221c      	movs	r2, #28
 800394e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0210 	orr.w	r2, r2, #16
 800395e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3340      	adds	r3, #64	; 0x40
 800397a:	4619      	mov	r1, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f001 fb34 	bl	8004fec <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0204 	orr.w	r2, r2, #4
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e00d      	b.n	80039b2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800399e:	e008      	b.n	80039b2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039ac:	e001      	b.n	80039b2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000300 	.word	0x50000300
 80039c4:	50000700 	.word	0x50000700
 80039c8:	50000400 	.word	0x50000400
 80039cc:	08004971 	.word	0x08004971
 80039d0:	080049eb 	.word	0x080049eb
 80039d4:	08004a07 	.word	0x08004a07

080039d8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Stop_DMA+0x1a>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e050      	b.n	8003a94 <HAL_ADC_Stop_DMA+0xbc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039fa:	216c      	movs	r1, #108	; 0x6c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f001 f8e7 	bl	8004bd0 <ADC_ConversionStop>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d13e      	bne.n	8003a8a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d10f      	bne.n	8003a48 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fb3c 	bl	80050aa <HAL_DMA_Abort>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0210 	bic.w	r2, r2, #16
 8003a56:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f001 f850 	bl	8004b04 <ADC_Disable>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e002      	b.n	8003a70 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f001 f84a 	bl	8004b04 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x38>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80bc 	beq.w	8003c74 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80b6 	beq.w	8003c74 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_IRQHandler+0x7c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a90      	ldr	r2, [pc, #576]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d106      	bne.n	8003b42 <HAL_ADC_IRQHandler+0x8a>
 8003b34:	4b8f      	ldr	r3, [pc, #572]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d03e      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003b40:	e005      	b.n	8003b4e <HAL_ADC_IRQHandler+0x96>
 8003b42:	4b8d      	ldr	r3, [pc, #564]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d037      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b56:	d004      	beq.n	8003b62 <HAL_ADC_IRQHandler+0xaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a84      	ldr	r2, [pc, #528]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d106      	bne.n	8003b70 <HAL_ADC_IRQHandler+0xb8>
 8003b62:	4b84      	ldr	r3, [pc, #528]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d027      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003b6e:	e005      	b.n	8003b7c <HAL_ADC_IRQHandler+0xc4>
 8003b70:	4b81      	ldr	r3, [pc, #516]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d020      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b84:	d004      	beq.n	8003b90 <HAL_ADC_IRQHandler+0xd8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d106      	bne.n	8003b9e <HAL_ADC_IRQHandler+0xe6>
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	d010      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003b9c:	e005      	b.n	8003baa <HAL_ADC_IRQHandler+0xf2>
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d009      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb2:	d004      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x106>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_ADC_IRQHandler+0x2c4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d104      	bne.n	8003bc8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e00f      	b.n	8003be8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x124>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a66      	ldr	r2, [pc, #408]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d102      	bne.n	8003be2 <HAL_ADC_IRQHandler+0x12a>
 8003bdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003be0:	e000      	b.n	8003be4 <HAL_ADC_IRQHandler+0x12c>
 8003be2:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_ADC_IRQHandler+0x2c4>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d137      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d132      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02d      	beq.n	8003c66 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11a      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020c 	bic.w	r2, r2, #12
 8003c26:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d112      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c4c:	e00b      	b.n	8003c66 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0210 	orr.w	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe f980 	bl	8001f6c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	220c      	movs	r2, #12
 8003c72:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_ADC_IRQHandler+0x1d0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8138 	beq.w	8003f04 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8132 	beq.w	8003f04 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x208>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2d      	ldr	r2, [pc, #180]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d106      	bne.n	8003cce <HAL_ADC_IRQHandler+0x216>
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03e      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003ccc:	e005      	b.n	8003cda <HAL_ADC_IRQHandler+0x222>
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d037      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce2:	d004      	beq.n	8003cee <HAL_ADC_IRQHandler+0x236>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d106      	bne.n	8003cfc <HAL_ADC_IRQHandler+0x244>
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d027      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003cfa:	e005      	b.n	8003d08 <HAL_ADC_IRQHandler+0x250>
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d020      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x264>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d106      	bne.n	8003d2a <HAL_ADC_IRQHandler+0x272>
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_ADC_IRQHandler+0x2bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	d010      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003d28:	e005      	b.n	8003d36 <HAL_ADC_IRQHandler+0x27e>
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_ADC_IRQHandler+0x2c0>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2b09      	cmp	r3, #9
 8003d34:	d009      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3e:	d004      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x292>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_ADC_IRQHandler+0x2c4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d104      	bne.n	8003d54 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e018      	b.n	8003d86 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_IRQHandler+0x2b0>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <HAL_ADC_IRQHandler+0x2b8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10b      	bne.n	8003d80 <HAL_ADC_IRQHandler+0x2c8>
 8003d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d6c:	e009      	b.n	8003d82 <HAL_ADC_IRQHandler+0x2ca>
 8003d6e:	bf00      	nop
 8003d70:	50000100 	.word	0x50000100
 8003d74:	50000300 	.word	0x50000300
 8003d78:	50000700 	.word	0x50000700
 8003d7c:	50000400 	.word	0x50000400
 8003d80:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <HAL_ADC_IRQHandler+0x514>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 80b0 	bne.w	8003ef6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 80a3 	bne.w	8003ef6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 809d 	bne.w	8003ef6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8097 	beq.w	8003ef6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADC_IRQHandler+0x324>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7e      	ldr	r2, [pc, #504]	; (8003fd0 <HAL_ADC_IRQHandler+0x518>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d106      	bne.n	8003dea <HAL_ADC_IRQHandler+0x332>
 8003ddc:	4b7d      	ldr	r3, [pc, #500]	; (8003fd4 <HAL_ADC_IRQHandler+0x51c>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d03e      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003de8:	e005      	b.n	8003df6 <HAL_ADC_IRQHandler+0x33e>
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <HAL_ADC_IRQHandler+0x520>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d037      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dfe:	d004      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x352>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <HAL_ADC_IRQHandler+0x518>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d106      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x360>
 8003e0a:	4b72      	ldr	r3, [pc, #456]	; (8003fd4 <HAL_ADC_IRQHandler+0x51c>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d027      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003e16:	e005      	b.n	8003e24 <HAL_ADC_IRQHandler+0x36c>
 8003e18:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <HAL_ADC_IRQHandler+0x520>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d020      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2c:	d004      	beq.n	8003e38 <HAL_ADC_IRQHandler+0x380>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_ADC_IRQHandler+0x518>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d106      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x38e>
 8003e38:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_ADC_IRQHandler+0x51c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2b07      	cmp	r3, #7
 8003e42:	d010      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003e44:	e005      	b.n	8003e52 <HAL_ADC_IRQHandler+0x39a>
 8003e46:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_ADC_IRQHandler+0x520>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2b07      	cmp	r3, #7
 8003e50:	d009      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5a:	d004      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x3ae>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5a      	ldr	r2, [pc, #360]	; (8003fcc <HAL_ADC_IRQHandler+0x514>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d104      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e00f      	b.n	8003e90 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x3cc>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_ADC_IRQHandler+0x518>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d102      	bne.n	8003e8a <HAL_ADC_IRQHandler+0x3d2>
 8003e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e88:	e000      	b.n	8003e8c <HAL_ADC_IRQHandler+0x3d4>
 8003e8a:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_ADC_IRQHandler+0x514>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d12d      	bne.n	8003ef6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11a      	bne.n	8003ede <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eb6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d112      	bne.n	8003ef6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
 8003edc:	e00b      	b.n	8003ef6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f936 	bl	8004168 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2260      	movs	r2, #96	; 0x60
 8003f02:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x47a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fe fff9 	bl	8002f1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <HAL_ADC_IRQHandler+0x4aa>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f91c 	bl	8004190 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f60:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d012      	beq.n	8003f92 <HAL_ADC_IRQHandler+0x4da>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f90e 	bl	80041a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d04f      	beq.n	800403c <HAL_ADC_IRQHandler+0x584>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04a      	beq.n	800403c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e02d      	b.n	8004010 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbc:	d004      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x510>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <HAL_ADC_IRQHandler+0x518>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d109      	bne.n	8003fdc <HAL_ADC_IRQHandler+0x524>
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <HAL_ADC_IRQHandler+0x51c>)
 8003fca:	e008      	b.n	8003fde <HAL_ADC_IRQHandler+0x526>
 8003fcc:	50000400 	.word	0x50000400
 8003fd0:	50000100 	.word	0x50000100
 8003fd4:	50000300 	.word	0x50000300
 8003fd8:	50000700 	.word	0x50000700
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <HAL_ADC_IRQHandler+0x5c8>)
 8003fde:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10a      	bne.n	8004010 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e007      	b.n	8004010 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800400c:	2301      	movs	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10e      	bne.n	8004034 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe ff7e 	bl	8002f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2210      	movs	r2, #16
 800403a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <HAL_ADC_IRQHandler+0x5c0>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f043 0208 	orr.w	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f882 	bl	800417c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	50000700 	.word	0x50000700

08004084 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800409c:	2302      	movs	r3, #2
 800409e:	e05f      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0xdc>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fd2b 	bl	8004b04 <ADC_Disable>
 80040ae:	4603      	mov	r3, r0
 80040b0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d14e      	bne.n	8004156 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80040cc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040e2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040f2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80040f4:	f7fe fed8 	bl	8002ea8 <HAL_GetTick>
 80040f8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80040fa:	e01c      	b.n	8004136 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80040fc:	f7fe fed4 	bl	8002ea8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b0a      	cmp	r3, #10
 8004108:	d915      	bls.n	8004136 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004118:	d10d      	bne.n	8004136 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f023 0312 	bic.w	r3, r3, #18
 8004122:	f043 0210 	orr.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e014      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d0da      	beq.n	80040fc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b09b      	sub	sp, #108	; 0x6c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x22>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e2c8      	b.n	800476c <HAL_ADC_ConfigChannel+0x5b4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 82ac 	bne.w	800474a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d81c      	bhi.n	8004234 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	461a      	mov	r2, r3
 800420e:	231f      	movs	r3, #31
 8004210:	4093      	lsls	r3, r2
 8004212:	43db      	mvns	r3, r3
 8004214:	4019      	ands	r1, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fa00 f203 	lsl.w	r2, r0, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
 8004232:	e063      	b.n	80042fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b09      	cmp	r3, #9
 800423a:	d81e      	bhi.n	800427a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	3b1e      	subs	r3, #30
 8004250:	221f      	movs	r2, #31
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	4019      	ands	r1, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	3b1e      	subs	r3, #30
 800426c:	fa00 f203 	lsl.w	r2, r0, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	635a      	str	r2, [r3, #52]	; 0x34
 8004278:	e040      	b.n	80042fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b0e      	cmp	r3, #14
 8004280:	d81e      	bhi.n	80042c0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	3b3c      	subs	r3, #60	; 0x3c
 8004296:	221f      	movs	r2, #31
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	4019      	ands	r1, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	3b3c      	subs	r3, #60	; 0x3c
 80042b2:	fa00 f203 	lsl.w	r2, r0, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
 80042be:	e01d      	b.n	80042fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	3b5a      	subs	r3, #90	; 0x5a
 80042d4:	221f      	movs	r2, #31
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	4019      	ands	r1, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	3b5a      	subs	r3, #90	; 0x5a
 80042f0:	fa00 f203 	lsl.w	r2, r0, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 80e5 	bne.w	80044d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d91c      	bls.n	800434e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6999      	ldr	r1, [r3, #24]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	3b1e      	subs	r3, #30
 8004326:	2207      	movs	r2, #7
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	4019      	ands	r1, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6898      	ldr	r0, [r3, #8]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	3b1e      	subs	r3, #30
 8004340:	fa00 f203 	lsl.w	r2, r0, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
 800434c:	e019      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6959      	ldr	r1, [r3, #20]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	2207      	movs	r2, #7
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	4019      	ands	r1, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6898      	ldr	r0, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	fa00 f203 	lsl.w	r2, r0, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	3b01      	subs	r3, #1
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d84f      	bhi.n	8004444 <HAL_ADC_ConfigChannel+0x28c>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_ADC_ConfigChannel+0x1f4>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043df 	.word	0x080043df
 80043b4:	08004401 	.word	0x08004401
 80043b8:	08004423 	.word	0x08004423
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043c2:	4b99      	ldr	r3, [pc, #612]	; (8004628 <HAL_ADC_ConfigChannel+0x470>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	0691      	lsls	r1, r2, #26
 80043cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ce:	430a      	orrs	r2, r1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043dc:	e07b      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043e4:	4b90      	ldr	r3, [pc, #576]	; (8004628 <HAL_ADC_ConfigChannel+0x470>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	0691      	lsls	r1, r2, #26
 80043ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043f0:	430a      	orrs	r2, r1
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043fc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043fe:	e06a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_ADC_ConfigChannel+0x470>)
 8004408:	4013      	ands	r3, r2
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	0691      	lsls	r1, r2, #26
 8004410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004412:	430a      	orrs	r2, r1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800441e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004420:	e059      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004428:	4b7f      	ldr	r3, [pc, #508]	; (8004628 <HAL_ADC_ConfigChannel+0x470>)
 800442a:	4013      	ands	r3, r2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	0691      	lsls	r1, r2, #26
 8004432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004434:	430a      	orrs	r2, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004440:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004442:	e048      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	429a      	cmp	r2, r3
 8004456:	d107      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004466:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	069b      	lsls	r3, r3, #26
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800448a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	069b      	lsls	r3, r3, #26
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044ae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	069b      	lsls	r3, r3, #26
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80044d4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d108      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x33e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x33e>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x340>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 8131 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d00f      	beq.n	8004526 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43da      	mvns	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	400a      	ands	r2, r1
 8004520:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004524:	e049      	b.n	80045ba <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b09      	cmp	r3, #9
 8004546:	d91c      	bls.n	8004582 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	3b1b      	subs	r3, #27
 800455a:	2207      	movs	r2, #7
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	4019      	ands	r1, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6898      	ldr	r0, [r3, #8]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	3b1b      	subs	r3, #27
 8004574:	fa00 f203 	lsl.w	r2, r0, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	619a      	str	r2, [r3, #24]
 8004580:	e01b      	b.n	80045ba <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6959      	ldr	r1, [r3, #20]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	2207      	movs	r2, #7
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	4019      	ands	r1, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6898      	ldr	r0, [r3, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	fa00 f203 	lsl.w	r2, r0, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c2:	d004      	beq.n	80045ce <HAL_ADC_ConfigChannel+0x416>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_ADC_ConfigChannel+0x474>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x41a>
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_ADC_ConfigChannel+0x478>)
 80045d0:	e000      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x41c>
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_ADC_ConfigChannel+0x47c>)
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d105      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80045de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d015      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80045ee:	2b11      	cmp	r3, #17
 80045f0:	d105      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80045f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004602:	2b12      	cmp	r3, #18
 8004604:	f040 80ac 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 80a5 	bne.w	8004760 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461e:	d10b      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x480>
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <HAL_ADC_ConfigChannel+0x474>)
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e023      	b.n	800466e <HAL_ADC_ConfigChannel+0x4b6>
 8004626:	bf00      	nop
 8004628:	83fff000 	.word	0x83fff000
 800462c:	50000100 	.word	0x50000100
 8004630:	50000300 	.word	0x50000300
 8004634:	50000700 	.word	0x50000700
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a4e      	ldr	r2, [pc, #312]	; (8004778 <HAL_ADC_ConfigChannel+0x5c0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d103      	bne.n	800464a <HAL_ADC_ConfigChannel+0x492>
 8004642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e011      	b.n	800466e <HAL_ADC_ConfigChannel+0x4b6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4b      	ldr	r2, [pc, #300]	; (800477c <HAL_ADC_ConfigChannel+0x5c4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d102      	bne.n	800465a <HAL_ADC_ConfigChannel+0x4a2>
 8004654:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_ADC_ConfigChannel+0x5c8>)
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e009      	b.n	800466e <HAL_ADC_ConfigChannel+0x4b6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a48      	ldr	r2, [pc, #288]	; (8004780 <HAL_ADC_ConfigChannel+0x5c8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <HAL_ADC_ConfigChannel+0x4b2>
 8004664:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_ADC_ConfigChannel+0x5c4>)
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e001      	b.n	800466e <HAL_ADC_ConfigChannel+0x4b6>
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_ADC_ConfigChannel+0x4d6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADC_ConfigChannel+0x4d6>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_ADC_ConfigChannel+0x4d8>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d150      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004694:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x4fe>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x4fe>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x500>
 80046b6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d13c      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d11d      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x548>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046cc:	d118      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_ADC_ConfigChannel+0x5cc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_ADC_ConfigChannel+0x5d0>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9a      	lsrs	r2, r3, #18
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046f0:	e002      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046fe:	e02e      	b.n	800475e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b11      	cmp	r3, #17
 8004706:	d10b      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x568>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004710:	d106      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800471a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800471e:	e01e      	b.n	800475e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b12      	cmp	r3, #18
 8004726:	d11a      	bne.n	800475e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004732:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004734:	e013      	b.n	800475e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004748:	e00a      	b.n	8004760 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800475c:	e000      	b.n	8004760 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800475e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004768:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800476c:	4618      	mov	r0, r3
 800476e:	376c      	adds	r7, #108	; 0x6c
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	50000100 	.word	0x50000100
 800477c:	50000400 	.word	0x50000400
 8004780:	50000500 	.word	0x50000500
 8004784:	2000000c 	.word	0x2000000c
 8004788:	431bde83 	.word	0x431bde83

0800478c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800478c:	b480      	push	{r7}
 800478e:	b099      	sub	sp, #100	; 0x64
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a4:	d102      	bne.n	80047ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80047a6:	4b6d      	ldr	r3, [pc, #436]	; (800495c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	e01a      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6a      	ldr	r2, [pc, #424]	; (800495c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d103      	bne.n	80047be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80047b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e011      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d102      	bne.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047c8:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	e009      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a64      	ldr	r2, [pc, #400]	; (8004964 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d102      	bne.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	e001      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b0      	b.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0a9      	b.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 808d 	bne.w	800492c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 8086 	bne.w	800492c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004828:	d004      	beq.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a4b      	ldr	r2, [pc, #300]	; (800495c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004834:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004836:	e000      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004838:	4b4c      	ldr	r3, [pc, #304]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800483a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d040      	beq.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004856:	035b      	lsls	r3, r3, #13
 8004858:	430b      	orrs	r3, r1
 800485a:	431a      	orrs	r2, r3
 800485c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d108      	bne.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d15c      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d107      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80048a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d14b      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80048a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048b0:	f023 030f 	bic.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	6811      	ldr	r1, [r2, #0]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	430a      	orrs	r2, r1
 80048be:	431a      	orrs	r2, r3
 80048c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80048c4:	e03c      	b.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d108      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d123      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004914:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004916:	2b00      	cmp	r3, #0
 8004918:	d112      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800491a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004922:	f023 030f 	bic.w	r3, r3, #15
 8004926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004928:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800492a:	e009      	b.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f043 0220 	orr.w	r2, r3, #32
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800493e:	e000      	b.n	8004942 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004940:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800494a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800494e:	4618      	mov	r0, r3
 8004950:	3764      	adds	r7, #100	; 0x64
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	50000100 	.word	0x50000100
 8004960:	50000400 	.word	0x50000400
 8004964:	50000500 	.word	0x50000500
 8004968:	50000300 	.word	0x50000300
 800496c:	50000700 	.word	0x50000700

08004970 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004986:	2b00      	cmp	r3, #0
 8004988:	d126      	bne.n	80049d8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d115      	bne.n	80049d0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d111      	bne.n	80049d0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7fd facb 	bl	8001f6c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80049d6:	e004      	b.n	80049e2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7fe fa85 	bl	8002f08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7fe fa7f 	bl	8002f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <ADC_Enable+0x2c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <ADC_Enable+0x2c>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <ADC_Enable+0x2e>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d143      	bne.n	8004af6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <ADC_Enable+0xc4>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e02f      	b.n	8004af8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004aa8:	f7fe f9fe 	bl	8002ea8 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004aae:	e01b      	b.n	8004ae8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ab0:	f7fe f9fa 	bl	8002ea8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d914      	bls.n	8004ae8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00d      	beq.n	8004ae8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f043 0210 	orr.w	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d1dc      	bne.n	8004ab0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	8000003f 	.word	0x8000003f

08004b04 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d108      	bne.n	8004b30 <ADC_Disable+0x2c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <ADC_Disable+0x2c>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <ADC_Disable+0x2e>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d047      	beq.n	8004bc6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030d 	and.w	r3, r3, #13
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10f      	bne.n	8004b64 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0202 	orr.w	r2, r2, #2
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004b5c:	f7fe f9a4 	bl	8002ea8 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b62:	e029      	b.n	8004bb8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e023      	b.n	8004bc8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b80:	f7fe f992 	bl	8002ea8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d914      	bls.n	8004bb8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10d      	bne.n	8004bb8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0210 	orr.w	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e007      	b.n	8004bc8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d0dc      	beq.n	8004b80 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 809b 	beq.w	8004d2c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c04:	d12a      	bne.n	8004c5c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d126      	bne.n	8004c5c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d122      	bne.n	8004c5c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004c16:	230c      	movs	r3, #12
 8004c18:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c1a:	e014      	b.n	8004c46 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4a46      	ldr	r2, [pc, #280]	; (8004d38 <ADC_ConversionStop+0x168>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d90d      	bls.n	8004c40 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0210 	orr.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f043 0201 	orr.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e076      	b.n	8004d2e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3301      	adds	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d1e3      	bne.n	8004c1c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2240      	movs	r2, #64	; 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b60      	cmp	r3, #96	; 0x60
 8004c60:	d015      	beq.n	8004c8e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d10e      	bne.n	8004c8e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0210 	orr.w	r2, r2, #16
 8004c8c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b0c      	cmp	r3, #12
 8004c92:	d015      	beq.n	8004cc0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d10e      	bne.n	8004cc0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0220 	orr.w	r2, r2, #32
 8004cbe:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	d005      	beq.n	8004cd2 <ADC_ConversionStop+0x102>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b6c      	cmp	r3, #108	; 0x6c
 8004cca:	d105      	bne.n	8004cd8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ccc:	230c      	movs	r3, #12
 8004cce:	617b      	str	r3, [r7, #20]
        break;
 8004cd0:	e005      	b.n	8004cde <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	617b      	str	r3, [r7, #20]
        break;
 8004cd6:	e002      	b.n	8004cde <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cd8:	2304      	movs	r3, #4
 8004cda:	617b      	str	r3, [r7, #20]
        break;
 8004cdc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cde:	f7fe f8e3 	bl	8002ea8 <HAL_GetTick>
 8004ce2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004ce4:	e01b      	b.n	8004d1e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ce6:	f7fe f8df 	bl	8002ea8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b0b      	cmp	r3, #11
 8004cf2:	d914      	bls.n	8004d1e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0210 	orr.w	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e007      	b.n	8004d2e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1dc      	bne.n	8004ce6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	000993ff 	.word	0x000993ff

08004d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	60d3      	str	r3, [r2, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <__NVIC_GetPriorityGrouping+0x18>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 0307 	and.w	r3, r3, #7
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db0b      	blt.n	8004dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <__NVIC_EnableIRQ+0x38>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db0a      	blt.n	8004e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	490c      	ldr	r1, [pc, #48]	; (8004e28 <__NVIC_SetPriority+0x4c>)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	0112      	lsls	r2, r2, #4
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e04:	e00a      	b.n	8004e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4908      	ldr	r1, [pc, #32]	; (8004e2c <__NVIC_SetPriority+0x50>)
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3b04      	subs	r3, #4
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	440b      	add	r3, r1
 8004e1a:	761a      	strb	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f1c3 0307 	rsb	r3, r3, #7
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf28      	it	cs
 8004e4e:	2304      	movcs	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d902      	bls.n	8004e60 <NVIC_EncodePriority+0x30>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3b03      	subs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <NVIC_EncodePriority+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	401a      	ands	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	4313      	orrs	r3, r2
         );
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea8:	d301      	bcc.n	8004eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <SysTick_Config+0x40>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb6:	210f      	movs	r1, #15
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	f7ff ff8e 	bl	8004ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec8:	2207      	movs	r2, #7
 8004eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000e010 	.word	0xe000e010

08004edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ff29 	bl	8004d3c <__NVIC_SetPriorityGrouping>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f04:	f7ff ff3e 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 8004f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f7ff ff8e 	bl	8004e30 <NVIC_EncodePriority>
 8004f14:	4602      	mov	r2, r0
 8004f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff5d 	bl	8004ddc <__NVIC_SetPriority>
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4603      	mov	r3, r0
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff31 	bl	8004da0 <__NVIC_EnableIRQ>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ffa2 	bl	8004e98 <SysTick_Config>
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e037      	b.n	8004fe4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9c4 	bl	8005354 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}  
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_DMA_Start_IT+0x20>
 8005008:	2302      	movs	r3, #2
 800500a:	e04a      	b.n	80050a2 <HAL_DMA_Start_IT+0xb6>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800501a:	2b01      	cmp	r3, #1
 800501c:	d13a      	bne.n	8005094 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f958 	bl	80052f8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 020e 	orr.w	r2, r2, #14
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e00f      	b.n	8005082 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 020a 	orr.w	r2, r2, #10
 8005070:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0204 	bic.w	r2, r2, #4
 8005080:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e005      	b.n	80050a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800509c:	2302      	movs	r3, #2
 800509e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d008      	beq.n	80050ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e020      	b.n	8005110 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 020e 	bic.w	r2, r2, #14
 80050dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	2101      	movs	r1, #1
 80050f8:	fa01 f202 	lsl.w	r2, r1, r2
 80050fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800512e:	2b02      	cmp	r3, #2
 8005130:	d005      	beq.n	800513e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e027      	b.n	800518e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 020e 	bic.w	r2, r2, #14
 800514c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
    } 
  }
  return status;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2204      	movs	r2, #4
 80051b6:	409a      	lsls	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d024      	beq.n	800520a <HAL_DMA_IRQHandler+0x72>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01f      	beq.n	800520a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d107      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0204 	bic.w	r2, r2, #4
 80051e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	2104      	movs	r1, #4
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d06a      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005208:	e065      	b.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2202      	movs	r2, #2
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02c      	beq.n	8005274 <HAL_DMA_IRQHandler+0xdc>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d027      	beq.n	8005274 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 020a 	bic.w	r2, r2, #10
 8005240:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	2102      	movs	r1, #2
 8005254:	fa01 f202 	lsl.w	r2, r1, r2
 8005258:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d035      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005272:	e030      	b.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	2208      	movs	r2, #8
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d028      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d023      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 020e 	bic.w	r2, r2, #14
 800529c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
    }
  }
}  
 80052d4:	e7ff      	b.n	80052d6 <HAL_DMA_IRQHandler+0x13e>
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	2101      	movs	r1, #1
 8005310:	fa01 f202 	lsl.w	r2, r1, r2
 8005314:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b10      	cmp	r3, #16
 8005324:	d108      	bne.n	8005338 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005336:	e007      	b.n	8005348 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <DMA_CalcBaseAndBitshift+0x60>)
 8005364:	429a      	cmp	r2, r3
 8005366:	d80f      	bhi.n	8005388 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005370:	4413      	add	r3, r2
 8005372:	4a12      	ldr	r2, [pc, #72]	; (80053bc <DMA_CalcBaseAndBitshift+0x68>)
 8005374:	fba2 2303 	umull	r2, r3, r2, r3
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	009a      	lsls	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8005384:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005386:	e00e      	b.n	80053a6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <DMA_CalcBaseAndBitshift+0x70>)
 8005390:	4413      	add	r3, r2
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <DMA_CalcBaseAndBitshift+0x68>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	009a      	lsls	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <DMA_CalcBaseAndBitshift+0x74>)
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40020407 	.word	0x40020407
 80053b8:	bffdfff8 	.word	0xbffdfff8
 80053bc:	cccccccd 	.word	0xcccccccd
 80053c0:	40020000 	.word	0x40020000
 80053c4:	bffdfbf8 	.word	0xbffdfbf8
 80053c8:	40020400 	.word	0x40020400

080053cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053da:	e154      	b.n	8005686 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	4013      	ands	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8146 	beq.w	8005680 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d005      	beq.n	800540c <HAL_GPIO_Init+0x40>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d130      	bne.n	800546e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2203      	movs	r2, #3
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005442:	2201      	movs	r2, #1
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0201 	and.w	r2, r3, #1
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b03      	cmp	r3, #3
 8005478:	d017      	beq.n	80054aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2203      	movs	r2, #3
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4013      	ands	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d123      	bne.n	80054fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	08da      	lsrs	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3208      	adds	r2, #8
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	220f      	movs	r2, #15
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	08da      	lsrs	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3208      	adds	r2, #8
 80054f8:	6939      	ldr	r1, [r7, #16]
 80054fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2203      	movs	r2, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0203 	and.w	r2, r3, #3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a0 	beq.w	8005680 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005540:	4b58      	ldr	r3, [pc, #352]	; (80056a4 <HAL_GPIO_Init+0x2d8>)
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	4a57      	ldr	r2, [pc, #348]	; (80056a4 <HAL_GPIO_Init+0x2d8>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6193      	str	r3, [r2, #24]
 800554c:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <HAL_GPIO_Init+0x2d8>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005558:	4a53      	ldr	r2, [pc, #332]	; (80056a8 <HAL_GPIO_Init+0x2dc>)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	220f      	movs	r2, #15
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005582:	d019      	beq.n	80055b8 <HAL_GPIO_Init+0x1ec>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a49      	ldr	r2, [pc, #292]	; (80056ac <HAL_GPIO_Init+0x2e0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <HAL_GPIO_Init+0x1e8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a48      	ldr	r2, [pc, #288]	; (80056b0 <HAL_GPIO_Init+0x2e4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00d      	beq.n	80055b0 <HAL_GPIO_Init+0x1e4>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a47      	ldr	r2, [pc, #284]	; (80056b4 <HAL_GPIO_Init+0x2e8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <HAL_GPIO_Init+0x1e0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a46      	ldr	r2, [pc, #280]	; (80056b8 <HAL_GPIO_Init+0x2ec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_GPIO_Init+0x1dc>
 80055a4:	2304      	movs	r3, #4
 80055a6:	e008      	b.n	80055ba <HAL_GPIO_Init+0x1ee>
 80055a8:	2305      	movs	r3, #5
 80055aa:	e006      	b.n	80055ba <HAL_GPIO_Init+0x1ee>
 80055ac:	2303      	movs	r3, #3
 80055ae:	e004      	b.n	80055ba <HAL_GPIO_Init+0x1ee>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e002      	b.n	80055ba <HAL_GPIO_Init+0x1ee>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_GPIO_Init+0x1ee>
 80055b8:	2300      	movs	r3, #0
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	f002 0203 	and.w	r2, r2, #3
 80055c0:	0092      	lsls	r2, r2, #2
 80055c2:	4093      	lsls	r3, r2
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055ca:	4937      	ldr	r1, [pc, #220]	; (80056a8 <HAL_GPIO_Init+0x2dc>)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	3302      	adds	r3, #2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055d8:	4b38      	ldr	r3, [pc, #224]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80055fc:	4a2f      	ldr	r2, [pc, #188]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005602:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	43db      	mvns	r3, r3
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4013      	ands	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800562c:	4b23      	ldr	r3, [pc, #140]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	43db      	mvns	r3, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005650:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005656:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800567a:	4a10      	ldr	r2, [pc, #64]	; (80056bc <HAL_GPIO_Init+0x2f0>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3301      	adds	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f aea3 	bne.w	80053dc <HAL_GPIO_Init+0x10>
  }
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40010000 	.word	0x40010000
 80056ac:	48000400 	.word	0x48000400
 80056b0:	48000800 	.word	0x48000800
 80056b4:	48000c00 	.word	0x48000c00
 80056b8:	48001000 	.word	0x48001000
 80056bc:	40010400 	.word	0x40010400

080056c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e001      	b.n	80056e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800570c:	e002      	b.n	8005714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4013      	ands	r3, r2
 8005738:	041a      	lsls	r2, r3, #16
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43d9      	mvns	r1, r3
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	400b      	ands	r3, r1
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	619a      	str	r2, [r3, #24]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800576a:	4a05      	ldr	r2, [pc, #20]	; (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc fac2 	bl	8001cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40010400 	.word	0x40010400

08005784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e081      	b.n	800589a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc ff42 	bl	8002634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d107      	bne.n	80057fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	e006      	b.n	800580c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800580a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d104      	bne.n	800581e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800581c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69d9      	ldr	r1, [r3, #28]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	461a      	mov	r2, r3
 80058b0:	460b      	mov	r3, r1
 80058b2:	817b      	strh	r3, [r7, #10]
 80058b4:	4613      	mov	r3, r2
 80058b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	f040 80da 	bne.w	8005a7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2C_Master_Transmit+0x30>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0d3      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058dc:	f7fd fae4 	bl	8002ea8 <HAL_GetTick>
 80058e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2319      	movs	r3, #25
 80058e8:	2201      	movs	r2, #1
 80058ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fe0d 	bl	800650e <I2C_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0be      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2221      	movs	r2, #33	; 0x21
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2210      	movs	r2, #16
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	893a      	ldrh	r2, [r7, #8]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2bff      	cmp	r3, #255	; 0xff
 800592e:	d90e      	bls.n	800594e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	b2da      	uxtb	r2, r3
 800593c:	8979      	ldrh	r1, [r7, #10]
 800593e:	4b51      	ldr	r3, [pc, #324]	; (8005a84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 ff9a 	bl	8006880 <I2C_TransferConfig>
 800594c:	e06c      	b.n	8005a28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	b2da      	uxtb	r2, r3
 800595e:	8979      	ldrh	r1, [r7, #10]
 8005960:	4b48      	ldr	r3, [pc, #288]	; (8005a84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 ff89 	bl	8006880 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800596e:	e05b      	b.n	8005a28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	6a39      	ldr	r1, [r7, #32]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fe19 	bl	80065ac <I2C_WaitOnTXISFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e07b      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d034      	beq.n	8005a28 <HAL_I2C_Master_Transmit+0x184>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d130      	bne.n	8005a28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fd9c 	bl	800650e <I2C_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e04d      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2bff      	cmp	r3, #255	; 0xff
 80059e8:	d90e      	bls.n	8005a08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	8979      	ldrh	r1, [r7, #10]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 ff3d 	bl	8006880 <I2C_TransferConfig>
 8005a06:	e00f      	b.n	8005a28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 ff2c 	bl	8006880 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d19e      	bne.n	8005970 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fdff 	bl	800663a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e01a      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_I2C_Master_Transmit+0x1e4>)
 8005a5a:	400b      	ands	r3, r1
 8005a5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	80002000 	.word	0x80002000
 8005a88:	fe00e800 	.word	0xfe00e800

08005a8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4798      	blx	r3
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00f      	beq.n	8005b02 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b2a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00f      	beq.n	8005b56 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	f043 0202 	orr.w	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 030b 	and.w	r3, r3, #11
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fb77 	bl	800625c <I2C_ITError>
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
 8005baa:	4613      	mov	r3, r2
 8005bac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <I2C_Slave_ISR_IT+0x24>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e0e1      	b.n	8005dde <I2C_Slave_ISR_IT+0x1e8>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c36:	6939      	ldr	r1, [r7, #16]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f9b5 	bl	8005fa8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d04b      	beq.n	8005ce0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d046      	beq.n	8005ce0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d128      	bne.n	8005cae <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b28      	cmp	r3, #40	; 0x28
 8005c66:	d108      	bne.n	8005c7a <I2C_Slave_ISR_IT+0x84>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6e:	d104      	bne.n	8005c7a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c70:	6939      	ldr	r1, [r7, #16]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa9e 	bl	80061b4 <I2C_ITListenCplt>
 8005c78:	e031      	b.n	8005cde <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b29      	cmp	r3, #41	; 0x29
 8005c84:	d10e      	bne.n	8005ca4 <I2C_Slave_ISR_IT+0xae>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c8c:	d00a      	beq.n	8005ca4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2210      	movs	r2, #16
 8005c94:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fbf7 	bl	800648a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f926 	bl	8005eee <I2C_ITSlaveSeqCplt>
 8005ca2:	e01c      	b.n	8005cde <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005cac:	e08f      	b.n	8005dce <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	f043 0204 	orr.w	r2, r3, #4
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <I2C_Slave_ISR_IT+0xda>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cce:	d17e      	bne.n	8005dce <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fac0 	bl	800625c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cdc:	e077      	b.n	8005dce <I2C_Slave_ISR_IT+0x1d8>
 8005cde:	e076      	b.n	8005dce <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d02f      	beq.n	8005d4a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02a      	beq.n	8005d4a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d14b      	bne.n	8005dd2 <I2C_Slave_ISR_IT+0x1dc>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d40:	d047      	beq.n	8005dd2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f8d3 	bl	8005eee <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d48:	e043      	b.n	8005dd2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f840 	bl	8005de6 <I2C_ITAddrCplt>
 8005d66:	e035      	b.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d030      	beq.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d02b      	beq.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	; 0x28
 8005db6:	e00d      	b.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dbe:	d002      	beq.n	8005dc6 <I2C_Slave_ISR_IT+0x1d0>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f891 	bl	8005eee <I2C_ITSlaveSeqCplt>
 8005dcc:	e002      	b.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005dd2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dfc:	2b28      	cmp	r3, #40	; 0x28
 8005dfe:	d16a      	bne.n	8005ed6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005e1e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005e3a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d138      	bne.n	8005eb6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005e44:	897b      	ldrh	r3, [r7, #10]
 8005e46:	09db      	lsrs	r3, r3, #7
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	89bb      	ldrh	r3, [r7, #12]
 8005e4c:	4053      	eors	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f003 0306 	and.w	r3, r3, #6
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11c      	bne.n	8005e92 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d13b      	bne.n	8005ee6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e84:	89ba      	ldrh	r2, [r7, #12]
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fe87 	bl	8005b9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e90:	e029      	b.n	8005ee6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e92:	893b      	ldrh	r3, [r7, #8]
 8005e94:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fd22 	bl	80068e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ea8:	89ba      	ldrh	r2, [r7, #12]
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fe75 	bl	8005b9e <HAL_I2C_AddrCallback>
}
 8005eb4:	e017      	b.n	8005ee6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fd12 	bl	80068e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ec8:	89ba      	ldrh	r2, [r7, #12]
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fe65 	bl	8005b9e <HAL_I2C_AddrCallback>
}
 8005ed4:	e007      	b.n	8005ee6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2208      	movs	r2, #8
 8005edc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e00c      	b.n	8005f3c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f3a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b29      	cmp	r3, #41	; 0x29
 8005f46:	d112      	bne.n	8005f6e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2228      	movs	r2, #40	; 0x28
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2221      	movs	r2, #33	; 0x21
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f56:	2101      	movs	r1, #1
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fcc3 	bl	80068e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fe05 	bl	8005b76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f6c:	e017      	b.n	8005f9e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d111      	bne.n	8005f9e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2228      	movs	r2, #40	; 0x28
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2222      	movs	r2, #34	; 0x22
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f88:	2102      	movs	r1, #2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fcaa 	bl	80068e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fdf6 	bl	8005b8a <HAL_I2C_SlaveRxCpltCallback>
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b21      	cmp	r3, #33	; 0x21
 8005fd2:	d002      	beq.n	8005fda <I2C_ITSlaveCplt+0x32>
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b29      	cmp	r3, #41	; 0x29
 8005fd8:	d108      	bne.n	8005fec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005fda:	f248 0101 	movw	r1, #32769	; 0x8001
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc80 	bl	80068e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2221      	movs	r2, #33	; 0x21
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8005fea:	e00d      	b.n	8006008 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b22      	cmp	r3, #34	; 0x22
 8005ff0:	d002      	beq.n	8005ff8 <I2C_ITSlaveCplt+0x50>
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff6:	d107      	bne.n	8006008 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005ff8:	f248 0102 	movw	r1, #32770	; 0x8002
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fc71 	bl	80068e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2222      	movs	r2, #34	; 0x22
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006016:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b62      	ldr	r3, [pc, #392]	; (80061ac <I2C_ITSlaveCplt+0x204>)
 8006024:	400b      	ands	r3, r1
 8006026:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa2e 	bl	800648a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006046:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01f      	beq.n	8006090 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800605e:	e017      	b.n	8006090 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d012      	beq.n	8006090 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006078:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d020      	beq.n	80060dc <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 0304 	bic.w	r3, r3, #4
 80060a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	2b00      	cmp	r3, #0
 8006106:	d010      	beq.n	800612a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8a4 	bl	800625c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b28      	cmp	r3, #40	; 0x28
 800611e:	d141      	bne.n	80061a4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f846 	bl	80061b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006128:	e03c      	b.n	80061a4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006132:	d014      	beq.n	800615e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff feda 	bl	8005eee <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <I2C_ITSlaveCplt+0x208>)
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fd2f 	bl	8005bba <HAL_I2C_ListenCpltCallback>
}
 800615c:	e022      	b.n	80061a4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b22      	cmp	r3, #34	; 0x22
 8006168:	d10e      	bne.n	8006188 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fd02 	bl	8005b8a <HAL_I2C_SlaveRxCpltCallback>
}
 8006186:	e00d      	b.n	80061a4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fce9 	bl	8005b76 <HAL_I2C_SlaveTxCpltCallback>
}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	fe00e800 	.word	0xfe00e800
 80061b0:	ffff0000 	.word	0xffff0000

080061b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <I2C_ITListenCplt+0xa4>)
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d022      	beq.n	8006230 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006230:	f248 0103 	movw	r1, #32771	; 0x8003
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fb55 	bl	80068e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2210      	movs	r2, #16
 8006240:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fcb5 	bl	8005bba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	ffff0000 	.word	0xffff0000

0800625c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a6d      	ldr	r2, [pc, #436]	; (8006430 <I2C_ITError+0x1d4>)
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b28      	cmp	r3, #40	; 0x28
 8006292:	d005      	beq.n	80062a0 <I2C_ITError+0x44>
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b29      	cmp	r3, #41	; 0x29
 8006298:	d002      	beq.n	80062a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	2b2a      	cmp	r3, #42	; 0x2a
 800629e:	d10b      	bne.n	80062b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062a0:	2103      	movs	r1, #3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb1e 	bl	80068e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2228      	movs	r2, #40	; 0x28
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a60      	ldr	r2, [pc, #384]	; (8006434 <I2C_ITError+0x1d8>)
 80062b4:	635a      	str	r2, [r3, #52]	; 0x34
 80062b6:	e030      	b.n	800631a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fb11 	bl	80068e4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8e1 	bl	800648a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d01f      	beq.n	8006314 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d114      	bne.n	8006314 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d109      	bne.n	800630c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2210      	movs	r2, #16
 80062fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f043 0204 	orr.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2220      	movs	r2, #32
 8006312:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d039      	beq.n	800639c <I2C_ITError+0x140>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b11      	cmp	r3, #17
 800632c:	d002      	beq.n	8006334 <I2C_ITError+0xd8>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b21      	cmp	r3, #33	; 0x21
 8006332:	d133      	bne.n	800639c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006342:	d107      	bne.n	8006354 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006352:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe ffc0 	bl	80052de <HAL_DMA_GetState>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d017      	beq.n	8006394 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	4a33      	ldr	r2, [pc, #204]	; (8006438 <I2C_ITError+0x1dc>)
 800636a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe fecf 	bl	800511c <HAL_DMA_Abort_IT>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d04d      	beq.n	8006420 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800638e:	4610      	mov	r0, r2
 8006390:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006392:	e045      	b.n	8006420 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f851 	bl	800643c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800639a:	e041      	b.n	8006420 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d039      	beq.n	8006418 <I2C_ITError+0x1bc>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b12      	cmp	r3, #18
 80063a8:	d002      	beq.n	80063b0 <I2C_ITError+0x154>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b22      	cmp	r3, #34	; 0x22
 80063ae:	d133      	bne.n	8006418 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063be:	d107      	bne.n	80063d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe ff82 	bl	80052de <HAL_DMA_GetState>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d017      	beq.n	8006410 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <I2C_ITError+0x1dc>)
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe fe91 	bl	800511c <HAL_DMA_Abort_IT>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d011      	beq.n	8006424 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800640a:	4610      	mov	r0, r2
 800640c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800640e:	e009      	b.n	8006424 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f813 	bl	800643c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006416:	e005      	b.n	8006424 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f80f 	bl	800643c <I2C_TreatErrorCallback>
  }
}
 800641e:	e002      	b.n	8006426 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006424:	bf00      	nop
}
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	ffff0000 	.word	0xffff0000
 8006434:	08005bf7 	.word	0x08005bf7
 8006438:	080064d3 	.word	0x080064d3

0800643c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d10e      	bne.n	800646e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fbbb 	bl	8005be2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800646c:	e009      	b.n	8006482 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fba6 	bl	8005bce <HAL_I2C_ErrorCallback>
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d103      	bne.n	80064a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d007      	beq.n	80064c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	619a      	str	r2, [r3, #24]
  }
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	2200      	movs	r2, #0
 80064ee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	2200      	movs	r2, #0
 80064fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ff9b 	bl	800643c <I2C_TreatErrorCallback>
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800651e:	e031      	b.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d02d      	beq.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006528:	f7fc fcbe 	bl	8002ea8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d122      	bne.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d113      	bne.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006560:	f043 0220 	orr.w	r2, r3, #32
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e00f      	b.n	80065a4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4013      	ands	r3, r2
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	429a      	cmp	r2, r3
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d0be      	beq.n	8006520 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065b8:	e033      	b.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f87e 	bl	80066c0 <I2C_IsErrorOccurred>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e031      	b.n	8006632 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d025      	beq.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fc fc67 	bl	8002ea8 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11a      	bne.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d013      	beq.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e007      	b.n	8006632 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d1c4      	bne.n	80065ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006646:	e02f      	b.n	80066a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f837 	bl	80066c0 <I2C_IsErrorOccurred>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e02d      	b.n	80066b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665c:	f7fc fc24 	bl	8002ea8 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11a      	bne.n	80066a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	d013      	beq.n	80066a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e007      	b.n	80066b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d1c8      	bne.n	8006648 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d068      	beq.n	80067be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2210      	movs	r2, #16
 80066f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066f4:	e049      	b.n	800678a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d045      	beq.n	800678a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066fe:	f7fc fbd3 	bl	8002ea8 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <I2C_IsErrorOccurred+0x54>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d13a      	bne.n	800678a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006736:	d121      	bne.n	800677c <I2C_IsErrorOccurred+0xbc>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673e:	d01d      	beq.n	800677c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	2b20      	cmp	r3, #32
 8006744:	d01a      	beq.n	800677c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006754:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006756:	f7fc fba7 	bl	8002ea8 <HAL_GetTick>
 800675a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675c:	e00e      	b.n	800677c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800675e:	f7fc fba3 	bl	8002ea8 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b19      	cmp	r3, #25
 800676a:	d907      	bls.n	800677c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	f043 0320 	orr.w	r3, r3, #32
 8006772:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800677a:	e006      	b.n	800678a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b20      	cmp	r3, #32
 8006788:	d1e9      	bne.n	800675e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b20      	cmp	r3, #32
 8006796:	d003      	beq.n	80067a0 <I2C_IsErrorOccurred+0xe0>
 8006798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0aa      	beq.n	80066f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80067a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2220      	movs	r2, #32
 80067ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f043 0304 	orr.w	r3, r3, #4
 80067b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	f043 0308 	orr.w	r3, r3, #8
 80067f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f043 0302 	orr.w	r3, r3, #2
 800681a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006824:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800682c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff fe28 	bl	800648a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6859      	ldr	r1, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <I2C_IsErrorOccurred+0x1bc>)
 8006846:	400b      	ands	r3, r1
 8006848:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	431a      	orrs	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800686e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006872:	4618      	mov	r0, r3
 8006874:	3728      	adds	r7, #40	; 0x28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	fe00e800 	.word	0xfe00e800

08006880 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	817b      	strh	r3, [r7, #10]
 800688e:	4613      	mov	r3, r2
 8006890:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006892:	897b      	ldrh	r3, [r7, #10]
 8006894:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006898:	7a7b      	ldrb	r3, [r7, #9]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	0d5b      	lsrs	r3, r3, #21
 80068ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80068be:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <I2C_TransferConfig+0x60>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	43db      	mvns	r3, r3
 80068c4:	ea02 0103 	and.w	r1, r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	03ff63ff 	.word	0x03ff63ff

080068e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80068f4:	887b      	ldrh	r3, [r7, #2]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00f      	beq.n	800691e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006904:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006912:	2b28      	cmp	r3, #40	; 0x28
 8006914:	d003      	beq.n	800691e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800691c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800691e:	887b      	ldrh	r3, [r7, #2]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00f      	beq.n	8006948 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800692e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800693c:	2b28      	cmp	r3, #40	; 0x28
 800693e:	d003      	beq.n	8006948 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006946:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800694c:	2b00      	cmp	r3, #0
 800694e:	da03      	bge.n	8006958 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006956:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	2b10      	cmp	r3, #16
 800695c:	d103      	bne.n	8006966 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006964:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	2b20      	cmp	r3, #32
 800696a:	d103      	bne.n	8006974 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f043 0320 	orr.w	r3, r3, #32
 8006972:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d103      	bne.n	8006982 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6819      	ldr	r1, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	43da      	mvns	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	400a      	ands	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d138      	bne.n	8006a28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e032      	b.n	8006a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	; 0x24
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0201 	bic.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d139      	bne.n	8006ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e033      	b.n	8006ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2224      	movs	r2, #36	; 0x24
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e000      	b.n	8006ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ae0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f001 b823 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 817d 	beq.w	8006e06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006b0c:	4bbc      	ldr	r3, [pc, #752]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d00c      	beq.n	8006b32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b18:	4bb9      	ldr	r3, [pc, #740]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d15c      	bne.n	8006bde <HAL_RCC_OscConfig+0x10e>
 8006b24:	4bb6      	ldr	r3, [pc, #728]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b30:	d155      	bne.n	8006bde <HAL_RCC_OscConfig+0x10e>
 8006b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006b3e:	fa93 f3a3 	rbit	r3, r3
 8006b42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006b46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4a:	fab3 f383 	clz	r3, r3
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d102      	bne.n	8006b64 <HAL_RCC_OscConfig+0x94>
 8006b5e:	4ba8      	ldr	r3, [pc, #672]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	e015      	b.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006b70:	fa93 f3a3 	rbit	r3, r3
 8006b74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006b80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006b84:	fa93 f3a3 	rbit	r3, r3
 8006b88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006b8c:	4b9c      	ldr	r3, [pc, #624]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006b98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006b9c:	fa92 f2a2 	rbit	r2, r2
 8006ba0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006ba4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006ba8:	fab2 f282 	clz	r2, r2
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	f042 0220 	orr.w	r2, r2, #32
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	f002 021f 	and.w	r2, r2, #31
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f202 	lsl.w	r2, r1, r2
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 811f 	beq.w	8006e04 <HAL_RCC_OscConfig+0x334>
 8006bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 8116 	bne.w	8006e04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f000 bfaf 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bee:	d106      	bne.n	8006bfe <HAL_RCC_OscConfig+0x12e>
 8006bf0:	4b83      	ldr	r3, [pc, #524]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a82      	ldr	r2, [pc, #520]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e036      	b.n	8006c6c <HAL_RCC_OscConfig+0x19c>
 8006bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x158>
 8006c0e:	4b7c      	ldr	r3, [pc, #496]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7b      	ldr	r2, [pc, #492]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b79      	ldr	r3, [pc, #484]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a78      	ldr	r2, [pc, #480]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e021      	b.n	8006c6c <HAL_RCC_OscConfig+0x19c>
 8006c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0x184>
 8006c3a:	4b71      	ldr	r3, [pc, #452]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a70      	ldr	r2, [pc, #448]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4b6e      	ldr	r3, [pc, #440]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6d      	ldr	r2, [pc, #436]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e00b      	b.n	8006c6c <HAL_RCC_OscConfig+0x19c>
 8006c54:	4b6a      	ldr	r3, [pc, #424]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a69      	ldr	r2, [pc, #420]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b67      	ldr	r3, [pc, #412]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a66      	ldr	r2, [pc, #408]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c6c:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	f023 020f 	bic.w	r2, r3, #15
 8006c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	495f      	ldr	r1, [pc, #380]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d059      	beq.n	8006d4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c96:	f7fc f907 	bl	8002ea8 <HAL_GetTick>
 8006c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca0:	f7fc f902 	bl	8002ea8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b64      	cmp	r3, #100	; 0x64
 8006cae:	d902      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	f000 bf43 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8006cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006cca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	fab3 f383 	clz	r3, r3
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d102      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x218>
 8006ce2:	4b47      	ldr	r3, [pc, #284]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	e015      	b.n	8006d14 <HAL_RCC_OscConfig+0x244>
 8006ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006cf4:	fa93 f3a3 	rbit	r3, r3
 8006cf8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006d04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006d08:	fa93 f3a3 	rbit	r3, r3
 8006d0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006d10:	4b3b      	ldr	r3, [pc, #236]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006d1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006d20:	fa92 f2a2 	rbit	r2, r2
 8006d24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006d28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006d2c:	fab2 f282 	clz	r2, r2
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	f042 0220 	orr.w	r2, r2, #32
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	f002 021f 	and.w	r2, r2, #31
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ab      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x1d0>
 8006d48:	e05d      	b.n	8006e06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4a:	f7fc f8ad 	bl	8002ea8 <HAL_GetTick>
 8006d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d52:	e00a      	b.n	8006d6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d54:	f7fc f8a8 	bl	8002ea8 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b64      	cmp	r3, #100	; 0x64
 8006d62:	d902      	bls.n	8006d6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	f000 bee9 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8006d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006d7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d82:	fab3 f383 	clz	r3, r3
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d102      	bne.n	8006d9c <HAL_RCC_OscConfig+0x2cc>
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	e015      	b.n	8006dc8 <HAL_RCC_OscConfig+0x2f8>
 8006d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006da8:	fa93 f3a3 	rbit	r3, r3
 8006dac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006db4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006db8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006dbc:	fa93 f3a3 	rbit	r3, r3
 8006dc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dcc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006dd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006dd4:	fa92 f2a2 	rbit	r2, r2
 8006dd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006ddc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006de0:	fab2 f282 	clz	r2, r2
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	f042 0220 	orr.w	r2, r2, #32
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	f002 021f 	and.w	r2, r2, #31
 8006df0:	2101      	movs	r1, #1
 8006df2:	fa01 f202 	lsl.w	r2, r1, r2
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ab      	bne.n	8006d54 <HAL_RCC_OscConfig+0x284>
 8006dfc:	e003      	b.n	8006e06 <HAL_RCC_OscConfig+0x336>
 8006dfe:	bf00      	nop
 8006e00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 817d 	beq.w	8007116 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006e1c:	4ba6      	ldr	r3, [pc, #664]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 030c 	and.w	r3, r3, #12
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006e28:	4ba3      	ldr	r3, [pc, #652]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 030c 	and.w	r3, r3, #12
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d172      	bne.n	8006f1a <HAL_RCC_OscConfig+0x44a>
 8006e34:	4ba0      	ldr	r3, [pc, #640]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d16c      	bne.n	8006f1a <HAL_RCC_OscConfig+0x44a>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006e4a:	fa93 f3a3 	rbit	r3, r3
 8006e4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006e52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e56:	fab3 f383 	clz	r3, r3
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d102      	bne.n	8006e70 <HAL_RCC_OscConfig+0x3a0>
 8006e6a:	4b93      	ldr	r3, [pc, #588]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	e013      	b.n	8006e98 <HAL_RCC_OscConfig+0x3c8>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006e7a:	fa93 f3a3 	rbit	r3, r3
 8006e7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006e82:	2302      	movs	r3, #2
 8006e84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006e88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006e8c:	fa93 f3a3 	rbit	r3, r3
 8006e90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006e94:	4b88      	ldr	r3, [pc, #544]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006e9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006ea2:	fa92 f2a2 	rbit	r2, r2
 8006ea6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006eaa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006eae:	fab2 f282 	clz	r2, r2
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	f042 0220 	orr.w	r2, r2, #32
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	f002 021f 	and.w	r2, r2, #31
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x410>
 8006eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d002      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f000 be2e 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	21f8      	movs	r1, #248	; 0xf8
 8006ef6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006efe:	fa91 f1a1 	rbit	r1, r1
 8006f02:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006f06:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006f0a:	fab1 f181 	clz	r1, r1
 8006f0e:	b2c9      	uxtb	r1, r1
 8006f10:	408b      	lsls	r3, r1
 8006f12:	4969      	ldr	r1, [pc, #420]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f18:	e0fd      	b.n	8007116 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8088 	beq.w	800703c <HAL_RCC_OscConfig+0x56c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006f3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f42:	fab3 f383 	clz	r3, r3
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	461a      	mov	r2, r3
 8006f54:	2301      	movs	r3, #1
 8006f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fb ffa6 	bl	8002ea8 <HAL_GetTick>
 8006f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f60:	e00a      	b.n	8006f78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f62:	f7fb ffa1 	bl	8002ea8 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d902      	bls.n	8006f78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	f000 bde2 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f82:	fa93 f3a3 	rbit	r3, r3
 8006f86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006f8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8e:	fab3 f383 	clz	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f043 0301 	orr.w	r3, r3, #1
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x4d8>
 8006fa2:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	e013      	b.n	8006fd0 <HAL_RCC_OscConfig+0x500>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006fb2:	fa93 f3a3 	rbit	r3, r3
 8006fb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006fba:	2302      	movs	r3, #2
 8006fbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006fc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006fc4:	fa93 f3a3 	rbit	r3, r3
 8006fc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006fcc:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006fd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006fda:	fa92 f2a2 	rbit	r2, r2
 8006fde:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006fe2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006fe6:	fab2 f282 	clz	r2, r2
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	f042 0220 	orr.w	r2, r2, #32
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	f002 021f 	and.w	r2, r2, #31
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0af      	beq.n	8006f62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007002:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800700e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	21f8      	movs	r1, #248	; 0xf8
 8007018:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007020:	fa91 f1a1 	rbit	r1, r1
 8007024:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007028:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800702c:	fab1 f181 	clz	r1, r1
 8007030:	b2c9      	uxtb	r1, r1
 8007032:	408b      	lsls	r3, r1
 8007034:	4920      	ldr	r1, [pc, #128]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]
 800703a:	e06c      	b.n	8007116 <HAL_RCC_OscConfig+0x646>
 800703c:	2301      	movs	r3, #1
 800703e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007042:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007046:	fa93 f3a3 	rbit	r3, r3
 800704a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800704e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007052:	fab3 f383 	clz	r3, r3
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800705c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	461a      	mov	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fb ff1e 	bl	8002ea8 <HAL_GetTick>
 800706c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007070:	e00a      	b.n	8007088 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007072:	f7fb ff19 	bl	8002ea8 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d902      	bls.n	8007088 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	f000 bd5a 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8007088:	2302      	movs	r3, #2
 800708a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007092:	fa93 f3a3 	rbit	r3, r3
 8007096:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800709e:	fab3 f383 	clz	r3, r3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d104      	bne.n	80070bc <HAL_RCC_OscConfig+0x5ec>
 80070b2:	4b01      	ldr	r3, [pc, #4]	; (80070b8 <HAL_RCC_OscConfig+0x5e8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	e015      	b.n	80070e4 <HAL_RCC_OscConfig+0x614>
 80070b8:	40021000 	.word	0x40021000
 80070bc:	2302      	movs	r3, #2
 80070be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070ce:	2302      	movs	r3, #2
 80070d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070d8:	fa93 f3a3 	rbit	r3, r3
 80070dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070e0:	4bc8      	ldr	r3, [pc, #800]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2202      	movs	r2, #2
 80070e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80070ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070ee:	fa92 f2a2 	rbit	r2, r2
 80070f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80070f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80070fa:	fab2 f282 	clz	r2, r2
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	f042 0220 	orr.w	r2, r2, #32
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	f002 021f 	and.w	r2, r2, #31
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f202 	lsl.w	r2, r1, r2
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ad      	bne.n	8007072 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800711a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8110 	beq.w	800734c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800712c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007130:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d079      	beq.n	8007230 <HAL_RCC_OscConfig+0x760>
 800713c:	2301      	movs	r3, #1
 800713e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800714e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007152:	fab3 f383 	clz	r3, r3
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	4bab      	ldr	r3, [pc, #684]	; (8007408 <HAL_RCC_OscConfig+0x938>)
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	461a      	mov	r2, r3
 8007162:	2301      	movs	r3, #1
 8007164:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007166:	f7fb fe9f 	bl	8002ea8 <HAL_GetTick>
 800716a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716e:	e00a      	b.n	8007186 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007170:	f7fb fe9a 	bl	8002ea8 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d902      	bls.n	8007186 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	f000 bcdb 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8007186:	2302      	movs	r3, #2
 8007188:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007190:	fa93 f3a3 	rbit	r3, r3
 8007194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800719c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071a0:	2202      	movs	r2, #2
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	fa93 f2a3 	rbit	r2, r3
 80071b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c4:	2202      	movs	r2, #2
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	fa93 f2a3 	rbit	r2, r3
 80071d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e0:	4b88      	ldr	r3, [pc, #544]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 80071e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80071ec:	2102      	movs	r1, #2
 80071ee:	6019      	str	r1, [r3, #0]
 80071f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	fa93 f1a3 	rbit	r1, r3
 80071fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007202:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007206:	6019      	str	r1, [r3, #0]
  return result;
 8007208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800720c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	fab3 f383 	clz	r3, r3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2101      	movs	r1, #1
 8007224:	fa01 f303 	lsl.w	r3, r1, r3
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0a0      	beq.n	8007170 <HAL_RCC_OscConfig+0x6a0>
 800722e:	e08d      	b.n	800734c <HAL_RCC_OscConfig+0x87c>
 8007230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007234:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007238:	2201      	movs	r2, #1
 800723a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007240:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	fa93 f2a3 	rbit	r2, r3
 800724a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800724e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007252:	601a      	str	r2, [r3, #0]
  return result;
 8007254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007258:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800725c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725e:	fab3 f383 	clz	r3, r3
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	4b68      	ldr	r3, [pc, #416]	; (8007408 <HAL_RCC_OscConfig+0x938>)
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007272:	f7fb fe19 	bl	8002ea8 <HAL_GetTick>
 8007276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800727a:	e00a      	b.n	8007292 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800727c:	f7fb fe14 	bl	8002ea8 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d902      	bls.n	8007292 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	f000 bc55 	b.w	8007b3c <HAL_RCC_OscConfig+0x106c>
 8007292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007296:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800729a:	2202      	movs	r2, #2
 800729c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	fa93 f2a3 	rbit	r2, r3
 80072ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80072be:	2202      	movs	r2, #2
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	fa93 f2a3 	rbit	r2, r3
 80072d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	2202      	movs	r2, #2
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fa93 f2a3 	rbit	r2, r3
 80072f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80072fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072fe:	4b41      	ldr	r3, [pc, #260]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 8007300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007306:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800730a:	2102      	movs	r1, #2
 800730c:	6019      	str	r1, [r3, #0]
 800730e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007312:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	fa93 f1a3 	rbit	r1, r3
 800731c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007320:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007324:	6019      	str	r1, [r3, #0]
  return result;
 8007326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800732a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	fab3 f383 	clz	r3, r3
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	4013      	ands	r3, r2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d197      	bne.n	800727c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800734c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 81a1 	beq.w	80076a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007362:	2300      	movs	r3, #0
 8007364:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007368:	4b26      	ldr	r3, [pc, #152]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d116      	bne.n	80073a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007374:	4b23      	ldr	r3, [pc, #140]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	4a22      	ldr	r2, [pc, #136]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	61d3      	str	r3, [r2, #28]
 8007380:	4b20      	ldr	r3, [pc, #128]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800738c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007396:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800739a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <HAL_RCC_OscConfig+0x93c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d11a      	bne.n	80073e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <HAL_RCC_OscConfig+0x93c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <HAL_RCC_OscConfig+0x93c>)
 80073b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ba:	f7fb fd75 	bl	8002ea8 <HAL_GetTick>
 80073be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c2:	e009      	b.n	80073d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c4:	f7fb fd70 	bl	8002ea8 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b64      	cmp	r3, #100	; 0x64
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e3b1      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <HAL_RCC_OscConfig+0x93c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ef      	beq.n	80073c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10d      	bne.n	8007410 <HAL_RCC_OscConfig+0x940>
 80073f4:	4b03      	ldr	r3, [pc, #12]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	4a02      	ldr	r2, [pc, #8]	; (8007404 <HAL_RCC_OscConfig+0x934>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6213      	str	r3, [r2, #32]
 8007400:	e03c      	b.n	800747c <HAL_RCC_OscConfig+0x9ac>
 8007402:	bf00      	nop
 8007404:	40021000 	.word	0x40021000
 8007408:	10908120 	.word	0x10908120
 800740c:	40007000 	.word	0x40007000
 8007410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10c      	bne.n	800743a <HAL_RCC_OscConfig+0x96a>
 8007420:	4bc1      	ldr	r3, [pc, #772]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	4ac0      	ldr	r2, [pc, #768]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	6213      	str	r3, [r2, #32]
 800742c:	4bbe      	ldr	r3, [pc, #760]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	4abd      	ldr	r2, [pc, #756]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007432:	f023 0304 	bic.w	r3, r3, #4
 8007436:	6213      	str	r3, [r2, #32]
 8007438:	e020      	b.n	800747c <HAL_RCC_OscConfig+0x9ac>
 800743a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800743e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b05      	cmp	r3, #5
 8007448:	d10c      	bne.n	8007464 <HAL_RCC_OscConfig+0x994>
 800744a:	4bb7      	ldr	r3, [pc, #732]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	4ab6      	ldr	r2, [pc, #728]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007450:	f043 0304 	orr.w	r3, r3, #4
 8007454:	6213      	str	r3, [r2, #32]
 8007456:	4bb4      	ldr	r3, [pc, #720]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	4ab3      	ldr	r2, [pc, #716]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	6213      	str	r3, [r2, #32]
 8007462:	e00b      	b.n	800747c <HAL_RCC_OscConfig+0x9ac>
 8007464:	4bb0      	ldr	r3, [pc, #704]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	4aaf      	ldr	r2, [pc, #700]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6213      	str	r3, [r2, #32]
 8007470:	4bad      	ldr	r3, [pc, #692]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	4aac      	ldr	r2, [pc, #688]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007476:	f023 0304 	bic.w	r3, r3, #4
 800747a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800747c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8081 	beq.w	8007590 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748e:	f7fb fd0b 	bl	8002ea8 <HAL_GetTick>
 8007492:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	e00b      	b.n	80074b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007498:	f7fb fd06 	bl	8002ea8 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e345      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
 80074b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80074b8:	2202      	movs	r2, #2
 80074ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	fa93 f2a3 	rbit	r2, r3
 80074ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80074dc:	2202      	movs	r2, #2
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	fa93 f2a3 	rbit	r2, r3
 80074ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80074f6:	601a      	str	r2, [r3, #0]
  return result;
 80074f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007500:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007502:	fab3 f383 	clz	r3, r3
 8007506:	b2db      	uxtb	r3, r3
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d102      	bne.n	800751c <HAL_RCC_OscConfig+0xa4c>
 8007516:	4b84      	ldr	r3, [pc, #528]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	e013      	b.n	8007544 <HAL_RCC_OscConfig+0xa74>
 800751c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007520:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007524:	2202      	movs	r2, #2
 8007526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	fa93 f2a3 	rbit	r2, r3
 8007536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	4b79      	ldr	r3, [pc, #484]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007548:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800754c:	2102      	movs	r1, #2
 800754e:	6011      	str	r1, [r2, #0]
 8007550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007554:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	fa92 f1a2 	rbit	r1, r2
 800755e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007562:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007566:	6011      	str	r1, [r2, #0]
  return result;
 8007568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800756c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	fab2 f282 	clz	r2, r2
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	f002 021f 	and.w	r2, r2, #31
 8007582:	2101      	movs	r1, #1
 8007584:	fa01 f202 	lsl.w	r2, r1, r2
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d084      	beq.n	8007498 <HAL_RCC_OscConfig+0x9c8>
 800758e:	e07f      	b.n	8007690 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007590:	f7fb fc8a 	bl	8002ea8 <HAL_GetTick>
 8007594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007598:	e00b      	b.n	80075b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759a:	f7fb fc85 	bl	8002ea8 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e2c4      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
 80075b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80075ba:	2202      	movs	r2, #2
 80075bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	fa93 f2a3 	rbit	r2, r3
 80075cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80075de:	2202      	movs	r2, #2
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	fa93 f2a3 	rbit	r2, r3
 80075f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80075f8:	601a      	str	r2, [r3, #0]
  return result;
 80075fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007602:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007604:	fab3 f383 	clz	r3, r3
 8007608:	b2db      	uxtb	r3, r3
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f043 0302 	orr.w	r3, r3, #2
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d102      	bne.n	800761e <HAL_RCC_OscConfig+0xb4e>
 8007618:	4b43      	ldr	r3, [pc, #268]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	e013      	b.n	8007646 <HAL_RCC_OscConfig+0xb76>
 800761e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007622:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007626:	2202      	movs	r2, #2
 8007628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	fa93 f2a3 	rbit	r2, r3
 8007638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4b39      	ldr	r3, [pc, #228]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800764a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800764e:	2102      	movs	r1, #2
 8007650:	6011      	str	r1, [r2, #0]
 8007652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007656:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	fa92 f1a2 	rbit	r1, r2
 8007660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007664:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007668:	6011      	str	r1, [r2, #0]
  return result;
 800766a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800766e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	fab2 f282 	clz	r2, r2
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	f002 021f 	and.w	r2, r2, #31
 8007684:	2101      	movs	r1, #1
 8007686:	fa01 f202 	lsl.w	r2, r1, r2
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d184      	bne.n	800759a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007690:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007694:	2b01      	cmp	r3, #1
 8007696:	d105      	bne.n	80076a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007698:	4b23      	ldr	r3, [pc, #140]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 800769e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8242 	beq.w	8007b3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076b6:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <HAL_RCC_OscConfig+0xc58>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	2b08      	cmp	r3, #8
 80076c0:	f000 8213 	beq.w	8007aea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	f040 8162 	bne.w	800799a <HAL_RCC_OscConfig+0xeca>
 80076d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80076de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	fa93 f2a3 	rbit	r2, r3
 80076f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80076fa:	601a      	str	r2, [r3, #0]
  return result;
 80076fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007700:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007704:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007706:	fab3 f383 	clz	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007710:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	461a      	mov	r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fb fbc4 	bl	8002ea8 <HAL_GetTick>
 8007720:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007724:	e00c      	b.n	8007740 <HAL_RCC_OscConfig+0xc70>
 8007726:	bf00      	nop
 8007728:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772c:	f7fb fbbc 	bl	8002ea8 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e1fd      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
 8007740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007744:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800774c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007752:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	fa93 f2a3 	rbit	r2, r3
 800775c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007760:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007764:	601a      	str	r2, [r3, #0]
  return result;
 8007766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800776e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007770:	fab3 f383 	clz	r3, r3
 8007774:	b2db      	uxtb	r3, r3
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f043 0301 	orr.w	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	d102      	bne.n	800778a <HAL_RCC_OscConfig+0xcba>
 8007784:	4bb0      	ldr	r3, [pc, #704]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	e027      	b.n	80077da <HAL_RCC_OscConfig+0xd0a>
 800778a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800778e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007792:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800779c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	fa93 f2a3 	rbit	r2, r3
 80077a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80077b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	fa93 f2a3 	rbit	r2, r3
 80077cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	4b9c      	ldr	r3, [pc, #624]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80077e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80077e6:	6011      	str	r1, [r2, #0]
 80077e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	fa92 f1a2 	rbit	r1, r2
 80077f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80077fe:	6011      	str	r1, [r2, #0]
  return result;
 8007800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007804:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	fab2 f282 	clz	r2, r2
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	f042 0220 	orr.w	r2, r2, #32
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	f002 021f 	and.w	r2, r2, #31
 800781a:	2101      	movs	r1, #1
 800781c:	fa01 f202 	lsl.w	r2, r1, r2
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d182      	bne.n	800772c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007826:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800782e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800783a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	430b      	orrs	r3, r1
 8007848:	497f      	ldr	r1, [pc, #508]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 800784a:	4313      	orrs	r3, r2
 800784c:	604b      	str	r3, [r1, #4]
 800784e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007852:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007856:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800785a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007860:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	fa93 f2a3 	rbit	r2, r3
 800786a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007872:	601a      	str	r2, [r3, #0]
  return result;
 8007874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007878:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800787c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800787e:	fab3 f383 	clz	r3, r3
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	461a      	mov	r2, r3
 8007890:	2301      	movs	r3, #1
 8007892:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007894:	f7fb fb08 	bl	8002ea8 <HAL_GetTick>
 8007898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800789c:	e009      	b.n	80078b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800789e:	f7fb fb03 	bl	8002ea8 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e144      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
 80078b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80078ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	fa93 f2a3 	rbit	r2, r3
 80078ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80078d6:	601a      	str	r2, [r3, #0]
  return result;
 80078d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80078e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078e2:	fab3 f383 	clz	r3, r3
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d102      	bne.n	80078fc <HAL_RCC_OscConfig+0xe2c>
 80078f6:	4b54      	ldr	r3, [pc, #336]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	e027      	b.n	800794c <HAL_RCC_OscConfig+0xe7c>
 80078fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007900:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800790e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	fa93 f2a3 	rbit	r2, r3
 8007918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800791c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007926:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800792a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007934:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	fa93 f2a3 	rbit	r2, r3
 800793e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007942:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	4b3f      	ldr	r3, [pc, #252]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007950:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007954:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007958:	6011      	str	r1, [r2, #0]
 800795a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800795e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	fa92 f1a2 	rbit	r1, r2
 8007968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800796c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007970:	6011      	str	r1, [r2, #0]
  return result;
 8007972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007976:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	fab2 f282 	clz	r2, r2
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	f042 0220 	orr.w	r2, r2, #32
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	f002 021f 	and.w	r2, r2, #31
 800798c:	2101      	movs	r1, #1
 800798e:	fa01 f202 	lsl.w	r2, r1, r2
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d082      	beq.n	800789e <HAL_RCC_OscConfig+0xdce>
 8007998:	e0cf      	b.n	8007b3a <HAL_RCC_OscConfig+0x106a>
 800799a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800799e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80079a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	fa93 f2a3 	rbit	r2, r3
 80079b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80079be:	601a      	str	r2, [r3, #0]
  return result;
 80079c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80079c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ca:	fab3 f383 	clz	r3, r3
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80079d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fb fa62 	bl	8002ea8 <HAL_GetTick>
 80079e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e8:	e009      	b.n	80079fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ea:	f7fb fa5d 	bl	8002ea8 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e09e      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
 80079fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	fa93 f2a3 	rbit	r2, r3
 8007a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007a22:	601a      	str	r2, [r3, #0]
  return result;
 8007a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007a2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a2e:	fab3 f383 	clz	r3, r3
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d104      	bne.n	8007a4c <HAL_RCC_OscConfig+0xf7c>
 8007a42:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <HAL_RCC_OscConfig+0xf78>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	e029      	b.n	8007a9c <HAL_RCC_OscConfig+0xfcc>
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	fa93 f2a3 	rbit	r2, r3
 8007a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	fa93 f2a3 	rbit	r2, r3
 8007a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <HAL_RCC_OscConfig+0x1078>)
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aa0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007aa8:	6011      	str	r1, [r2, #0]
 8007aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	fa92 f1a2 	rbit	r1, r2
 8007ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007abc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007ac0:	6011      	str	r1, [r2, #0]
  return result;
 8007ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ac6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	fab2 f282 	clz	r2, r2
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	f042 0220 	orr.w	r2, r2, #32
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	f002 021f 	and.w	r2, r2, #31
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f202 	lsl.w	r2, r1, r2
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d180      	bne.n	80079ea <HAL_RCC_OscConfig+0xf1a>
 8007ae8:	e027      	b.n	8007b3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e01e      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <HAL_RCC_OscConfig+0x1078>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007b06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007b0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d10b      	bne.n	8007b36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007b1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d001      	beq.n	8007b3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40021000 	.word	0x40021000

08007b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b09e      	sub	sp, #120	; 0x78
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e162      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b64:	4b90      	ldr	r3, [pc, #576]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d910      	bls.n	8007b94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b72:	4b8d      	ldr	r3, [pc, #564]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f023 0207 	bic.w	r2, r3, #7
 8007b7a:	498b      	ldr	r1, [pc, #556]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b82:	4b89      	ldr	r3, [pc, #548]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d001      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e14a      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d008      	beq.n	8007bb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba0:	4b82      	ldr	r3, [pc, #520]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	497f      	ldr	r1, [pc, #508]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80dc 	beq.w	8007d78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d13c      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xf6>
 8007bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bd0:	fa93 f3a3 	rbit	r3, r3
 8007bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd8:	fab3 f383 	clz	r3, r3
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xa6>
 8007bec:	4b6f      	ldr	r3, [pc, #444]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	e00f      	b.n	8007c12 <HAL_RCC_ClockConfig+0xc6>
 8007bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bfa:	fa93 f3a3 	rbit	r3, r3
 8007bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8007c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c04:	663b      	str	r3, [r7, #96]	; 0x60
 8007c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c08:	fa93 f3a3 	rbit	r3, r3
 8007c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c0e:	4b67      	ldr	r3, [pc, #412]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c16:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c1a:	fa92 f2a2 	rbit	r2, r2
 8007c1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c22:	fab2 f282 	clz	r2, r2
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	f042 0220 	orr.w	r2, r2, #32
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	f002 021f 	and.w	r2, r2, #31
 8007c32:	2101      	movs	r1, #1
 8007c34:	fa01 f202 	lsl.w	r2, r1, r2
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d17b      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e0f3      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d13c      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x178>
 8007c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c52:	fa93 f3a3 	rbit	r3, r3
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c5a:	fab3 f383 	clz	r3, r3
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d102      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x128>
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	e00f      	b.n	8007c94 <HAL_RCC_ClockConfig+0x148>
 8007c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7c:	fa93 f3a3 	rbit	r3, r3
 8007c80:	647b      	str	r3, [r7, #68]	; 0x44
 8007c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c86:	643b      	str	r3, [r7, #64]	; 0x40
 8007c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8a:	fa93 f3a3 	rbit	r3, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c90:	4b46      	ldr	r3, [pc, #280]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c98:	63ba      	str	r2, [r7, #56]	; 0x38
 8007c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c9c:	fa92 f2a2 	rbit	r2, r2
 8007ca0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca4:	fab2 f282 	clz	r2, r2
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	f042 0220 	orr.w	r2, r2, #32
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	f002 021f 	and.w	r2, r2, #31
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d13a      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0b2      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	fa93 f3a3 	rbit	r3, r3
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cd2:	fab3 f383 	clz	r3, r3
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d102      	bne.n	8007cec <HAL_RCC_ClockConfig+0x1a0>
 8007ce6:	4b31      	ldr	r3, [pc, #196]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	e00d      	b.n	8007d08 <HAL_RCC_ClockConfig+0x1bc>
 8007cec:	2302      	movs	r3, #2
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	fa93 f3a3 	rbit	r3, r3
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	fa93 f3a3 	rbit	r3, r3
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	4b29      	ldr	r3, [pc, #164]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2202      	movs	r2, #2
 8007d0a:	61ba      	str	r2, [r7, #24]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	fa92 f2a2 	rbit	r2, r2
 8007d12:	617a      	str	r2, [r7, #20]
  return result;
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	fab2 f282 	clz	r2, r2
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	f042 0220 	orr.w	r2, r2, #32
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	f002 021f 	and.w	r2, r2, #31
 8007d26:	2101      	movs	r1, #1
 8007d28:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e079      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d36:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f023 0203 	bic.w	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	491a      	ldr	r1, [pc, #104]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d48:	f7fb f8ae 	bl	8002ea8 <HAL_GetTick>
 8007d4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4e:	e00a      	b.n	8007d66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d50:	f7fb f8aa 	bl	8002ea8 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e061      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d66:	4b11      	ldr	r3, [pc, #68]	; (8007dac <HAL_RCC_ClockConfig+0x260>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f003 020c 	and.w	r2, r3, #12
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d1eb      	bne.n	8007d50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d214      	bcs.n	8007db0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d86:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f023 0207 	bic.w	r2, r3, #7
 8007d8e:	4906      	ldr	r1, [pc, #24]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <HAL_RCC_ClockConfig+0x25c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d005      	beq.n	8007db0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e040      	b.n	8007e2a <HAL_RCC_ClockConfig+0x2de>
 8007da8:	40022000 	.word	0x40022000
 8007dac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d008      	beq.n	8007dce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dbc:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <HAL_RCC_ClockConfig+0x2e8>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	491a      	ldr	r1, [pc, #104]	; (8007e34 <HAL_RCC_ClockConfig+0x2e8>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <HAL_RCC_ClockConfig+0x2e8>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4912      	ldr	r1, [pc, #72]	; (8007e34 <HAL_RCC_ClockConfig+0x2e8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007dee:	f000 f829 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <HAL_RCC_ClockConfig+0x2e8>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dfc:	22f0      	movs	r2, #240	; 0xf0
 8007dfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	fa92 f2a2 	rbit	r2, r2
 8007e06:	60fa      	str	r2, [r7, #12]
  return result;
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	fab2 f282 	clz	r2, r2
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	40d3      	lsrs	r3, r2
 8007e12:	4a09      	ldr	r2, [pc, #36]	; (8007e38 <HAL_RCC_ClockConfig+0x2ec>)
 8007e14:	5cd3      	ldrb	r3, [r2, r3]
 8007e16:	fa21 f303 	lsr.w	r3, r1, r3
 8007e1a:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <HAL_RCC_ClockConfig+0x2f0>)
 8007e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007e1e:	4b08      	ldr	r3, [pc, #32]	; (8007e40 <HAL_RCC_ClockConfig+0x2f4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fa fffc 	bl	8002e20 <HAL_InitTick>
  
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3778      	adds	r7, #120	; 0x78
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40021000 	.word	0x40021000
 8007e38:	0800c738 	.word	0x0800c738
 8007e3c:	2000000c 	.word	0x2000000c
 8007e40:	20000010 	.word	0x20000010

08007e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b08b      	sub	sp, #44	; 0x2c
 8007e48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	2300      	movs	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007e5e:	4b29      	ldr	r3, [pc, #164]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 030c 	and.w	r3, r3, #12
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d002      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x30>
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	d003      	beq.n	8007e7a <HAL_RCC_GetSysClockFreq+0x36>
 8007e72:	e03c      	b.n	8007eee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007e76:	623b      	str	r3, [r7, #32]
      break;
 8007e78:	e03c      	b.n	8007ef4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007e80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007e84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	fa92 f2a2 	rbit	r2, r2
 8007e8c:	607a      	str	r2, [r7, #4]
  return result;
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	fab2 f282 	clz	r2, r2
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	40d3      	lsrs	r3, r2
 8007e98:	4a1c      	ldr	r2, [pc, #112]	; (8007f0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007e9a:	5cd3      	ldrb	r3, [r2, r3]
 8007e9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	220f      	movs	r2, #15
 8007ea8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	fa92 f2a2 	rbit	r2, r2
 8007eb0:	60fa      	str	r2, [r7, #12]
  return result;
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	fab2 f282 	clz	r2, r2
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	40d3      	lsrs	r3, r2
 8007ebc:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ebe:	5cd3      	ldrb	r3, [r2, r3]
 8007ec0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
 8007edc:	e004      	b.n	8007ee8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4a0c      	ldr	r2, [pc, #48]	; (8007f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	623b      	str	r3, [r7, #32]
      break;
 8007eec:	e002      	b.n	8007ef4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ef0:	623b      	str	r3, [r7, #32]
      break;
 8007ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	372c      	adds	r7, #44	; 0x2c
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
 8007f08:	007a1200 	.word	0x007a1200
 8007f0c:	0800c750 	.word	0x0800c750
 8007f10:	0800c760 	.word	0x0800c760
 8007f14:	003d0900 	.word	0x003d0900

08007f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2000000c 	.word	0x2000000c

08007f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007f36:	f7ff ffef 	bl	8007f18 <HAL_RCC_GetHCLKFreq>
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007f48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	fa92 f2a2 	rbit	r2, r2
 8007f50:	603a      	str	r2, [r7, #0]
  return result;
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	fab2 f282 	clz	r2, r2
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	40d3      	lsrs	r3, r2
 8007f5c:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007f5e:	5cd3      	ldrb	r3, [r2, r3]
 8007f60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	0800c748 	.word	0x0800c748

08007f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007f7a:	f7ff ffcd 	bl	8007f18 <HAL_RCC_GetHCLKFreq>
 8007f7e:	4601      	mov	r1, r0
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007f88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	fa92 f2a2 	rbit	r2, r2
 8007f94:	603a      	str	r2, [r7, #0]
  return result;
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	fab2 f282 	clz	r2, r2
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	40d3      	lsrs	r3, r2
 8007fa0:	4a04      	ldr	r2, [pc, #16]	; (8007fb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007fa2:	5cd3      	ldrb	r3, [r2, r3]
 8007fa4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	0800c748 	.word	0x0800c748

08007fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b092      	sub	sp, #72	; 0x48
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 80d4 	beq.w	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fdc:	4b4e      	ldr	r3, [pc, #312]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10e      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fe8:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	4a4a      	ldr	r2, [pc, #296]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	61d3      	str	r3, [r2, #28]
 8007ff4:	4b48      	ldr	r3, [pc, #288]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008006:	4b45      	ldr	r3, [pc, #276]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	2b00      	cmp	r3, #0
 8008010:	d118      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008012:	4b42      	ldr	r3, [pc, #264]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a41      	ldr	r2, [pc, #260]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800801e:	f7fa ff43 	bl	8002ea8 <HAL_GetTick>
 8008022:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008024:	e008      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008026:	f7fa ff3f 	bl	8002ea8 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b64      	cmp	r3, #100	; 0x64
 8008032:	d901      	bls.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e169      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008038:	4b38      	ldr	r3, [pc, #224]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800804e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8084 	beq.w	800815e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008060:	429a      	cmp	r2, r3
 8008062:	d07c      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008064:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008072:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	fa93 f3a3 	rbit	r3, r3
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800807e:	fab3 f383 	clz	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	4b26      	ldr	r3, [pc, #152]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	461a      	mov	r2, r3
 800808e:	2301      	movs	r3, #1
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	fa93 f3a3 	rbit	r3, r3
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080a2:	fab3 f383 	clz	r3, r3
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	461a      	mov	r2, r3
 80080b2:	2300      	movs	r3, #0
 80080b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80080bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d04b      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c6:	f7fa feef 	bl	8002ea8 <HAL_GetTick>
 80080ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080cc:	e00a      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ce:	f7fa feeb 	bl	8002ea8 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080dc:	4293      	cmp	r3, r2
 80080de:	d901      	bls.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e113      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80080e4:	2302      	movs	r3, #2
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	fa93 f3a3 	rbit	r3, r3
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
 80080f0:	2302      	movs	r3, #2
 80080f2:	623b      	str	r3, [r7, #32]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	fa93 f3a3 	rbit	r3, r3
 80080fa:	61fb      	str	r3, [r7, #28]
  return result;
 80080fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fe:	fab3 f383 	clz	r3, r3
 8008102:	b2db      	uxtb	r3, r3
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d108      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008112:	4b01      	ldr	r3, [pc, #4]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	e00d      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008118:	40021000 	.word	0x40021000
 800811c:	40007000 	.word	0x40007000
 8008120:	10908100 	.word	0x10908100
 8008124:	2302      	movs	r3, #2
 8008126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	fa93 f3a3 	rbit	r3, r3
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	4b78      	ldr	r3, [pc, #480]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2202      	movs	r2, #2
 8008136:	613a      	str	r2, [r7, #16]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	fa92 f2a2 	rbit	r2, r2
 800813e:	60fa      	str	r2, [r7, #12]
  return result;
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	fab2 f282 	clz	r2, r2
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	f002 021f 	and.w	r2, r2, #31
 8008152:	2101      	movs	r1, #1
 8008154:	fa01 f202 	lsl.w	r2, r1, r2
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0b7      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800815e:	4b6d      	ldr	r3, [pc, #436]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	496a      	ldr	r1, [pc, #424]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008174:	2b01      	cmp	r3, #1
 8008176:	d105      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008178:	4b66      	ldr	r3, [pc, #408]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	4a65      	ldr	r2, [pc, #404]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800817e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008182:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008190:	4b60      	ldr	r3, [pc, #384]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	f023 0203 	bic.w	r2, r3, #3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	495d      	ldr	r1, [pc, #372]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081ae:	4b59      	ldr	r3, [pc, #356]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	4956      	ldr	r1, [pc, #344]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081cc:	4b51      	ldr	r3, [pc, #324]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	494e      	ldr	r1, [pc, #312]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081ea:	4b4a      	ldr	r3, [pc, #296]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	f023 0210 	bic.w	r2, r3, #16
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	4947      	ldr	r1, [pc, #284]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008208:	4b42      	ldr	r3, [pc, #264]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	493f      	ldr	r1, [pc, #252]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008216:	4313      	orrs	r3, r2
 8008218:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008226:	4b3b      	ldr	r3, [pc, #236]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	f023 0220 	bic.w	r2, r3, #32
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	4938      	ldr	r1, [pc, #224]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008244:	4b33      	ldr	r3, [pc, #204]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	4930      	ldr	r1, [pc, #192]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008252:	4313      	orrs	r3, r2
 8008254:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b00      	cmp	r3, #0
 8008260:	d008      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008262:	4b2c      	ldr	r3, [pc, #176]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	4929      	ldr	r1, [pc, #164]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008270:	4313      	orrs	r3, r2
 8008272:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008280:	4b24      	ldr	r3, [pc, #144]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4921      	ldr	r1, [pc, #132]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800829e:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	491a      	ldr	r1, [pc, #104]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80082bc:	4b15      	ldr	r3, [pc, #84]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	4912      	ldr	r1, [pc, #72]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d008      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	490b      	ldr	r1, [pc, #44]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	4903      	ldr	r1, [pc, #12]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008306:	4313      	orrs	r3, r2
 8008308:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3748      	adds	r7, #72	; 0x48
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40021000 	.word	0x40021000

08008318 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e073      	b.n	8008416 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7f5b      	ldrb	r3, [r3, #29]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fa f9cc 	bl	80026dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b10      	cmp	r3, #16
 8008356:	d055      	beq.n	8008404 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	22ca      	movs	r2, #202	; 0xca
 800835e:	625a      	str	r2, [r3, #36]	; 0x24
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2253      	movs	r2, #83	; 0x53
 8008366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa49 	bl	8008800 <RTC_EnterInitMode>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d12c      	bne.n	80083d2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800838a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6899      	ldr	r1, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	68d2      	ldr	r2, [r2, #12]
 80083b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6919      	ldr	r1, [r3, #16]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	041a      	lsls	r2, r3, #16
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa50 	bl	800886e <RTC_ExitInitMode>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d110      	bne.n	80083fa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	22ff      	movs	r2, #255	; 0xff
 8008400:	625a      	str	r2, [r3, #36]	; 0x24
 8008402:	e001      	b.n	8008408 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800841e:	b590      	push	{r4, r7, lr}
 8008420:	b087      	sub	sp, #28
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	7f1b      	ldrb	r3, [r3, #28]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <HAL_RTC_SetTime+0x1c>
 8008436:	2302      	movs	r3, #2
 8008438:	e087      	b.n	800854a <HAL_RTC_SetTime+0x12c>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2202      	movs	r2, #2
 8008444:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d126      	bne.n	800849a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2200      	movs	r2, #0
 800845e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fa27 	bl	80088b8 <RTC_ByteToBcd2>
 800846a:	4603      	mov	r3, r0
 800846c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fa20 	bl	80088b8 <RTC_ByteToBcd2>
 8008478:	4603      	mov	r3, r0
 800847a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800847c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	789b      	ldrb	r3, [r3, #2]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fa18 	bl	80088b8 <RTC_ByteToBcd2>
 8008488:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800848a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	78db      	ldrb	r3, [r3, #3]
 8008492:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e018      	b.n	80084cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084ba:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80084c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	78db      	ldrb	r3, [r3, #3]
 80084c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	22ca      	movs	r2, #202	; 0xca
 80084d2:	625a      	str	r2, [r3, #36]	; 0x24
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2253      	movs	r2, #83	; 0x53
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f98f 	bl	8008800 <RTC_EnterInitMode>
 80084e2:	4603      	mov	r3, r0
 80084e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80084e6:	7cfb      	ldrb	r3, [r7, #19]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d120      	bne.n	800852e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800850a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6899      	ldr	r1, [r3, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f9a2 	bl	800886e <RTC_ExitInitMode>
 800852a:	4603      	mov	r3, r0
 800852c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800852e:	7cfb      	ldrb	r3, [r7, #19]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]

  return status;
 8008548:	7cfb      	ldrb	r3, [r7, #19]
}
 800854a:	4618      	mov	r0, r3
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}

08008552 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008584:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008588:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	0c1b      	lsrs	r3, r3, #16
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008594:	b2da      	uxtb	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	0d9b      	lsrs	r3, r3, #22
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11a      	bne.n	8008604 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f98e 	bl	80088f4 <RTC_Bcd2ToByte>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f985 	bl	80088f4 <RTC_Bcd2ToByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	789b      	ldrb	r3, [r3, #2]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f97c 	bl	80088f4 <RTC_Bcd2ToByte>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800860e:	b590      	push	{r4, r7, lr}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	7f1b      	ldrb	r3, [r3, #28]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_RTC_SetDate+0x1c>
 8008626:	2302      	movs	r3, #2
 8008628:	e071      	b.n	800870e <HAL_RTC_SetDate+0x100>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2202      	movs	r2, #2
 8008634:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10e      	bne.n	800865a <HAL_RTC_SetDate+0x4c>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d008      	beq.n	800865a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	f023 0310 	bic.w	r3, r3, #16
 8008650:	b2db      	uxtb	r3, r3
 8008652:	330a      	adds	r3, #10
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11c      	bne.n	800869a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	78db      	ldrb	r3, [r3, #3]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f927 	bl	80088b8 <RTC_ByteToBcd2>
 800866a:	4603      	mov	r3, r0
 800866c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f920 	bl	80088b8 <RTC_ByteToBcd2>
 8008678:	4603      	mov	r3, r0
 800867a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800867c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	789b      	ldrb	r3, [r3, #2]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f918 	bl	80088b8 <RTC_ByteToBcd2>
 8008688:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800868a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e00e      	b.n	80086b8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	78db      	ldrb	r3, [r3, #3]
 800869e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80086a6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80086ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	22ca      	movs	r2, #202	; 0xca
 80086be:	625a      	str	r2, [r3, #36]	; 0x24
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2253      	movs	r2, #83	; 0x53
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f899 	bl	8008800 <RTC_EnterInitMode>
 80086ce:	4603      	mov	r3, r0
 80086d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80086d2:	7cfb      	ldrb	r3, [r7, #19]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10c      	bne.n	80086f2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f8c0 	bl	800886e <RTC_ExitInitMode>
 80086ee:	4603      	mov	r3, r0
 80086f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80086f2:	7cfb      	ldrb	r3, [r7, #19]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]

  return status;
 800870c:	7cfb      	ldrb	r3, [r7, #19]
}
 800870e:	4618      	mov	r0, r3
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd90      	pop	{r4, r7, pc}

08008716 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008730:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008734:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	b2da      	uxtb	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	b2da      	uxtb	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008758:	b2da      	uxtb	r2, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	0b5b      	lsrs	r3, r3, #13
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	b2da      	uxtb	r2, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11a      	bne.n	80087aa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	78db      	ldrb	r3, [r3, #3]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f8bb 	bl	80088f4 <RTC_Bcd2ToByte>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f8b2 	bl	80088f4 <RTC_Bcd2ToByte>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	789b      	ldrb	r3, [r3, #2]
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f8a9 	bl	80088f4 <RTC_Bcd2ToByte>
 80087a2:	4603      	mov	r3, r0
 80087a4:	461a      	mov	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a0d      	ldr	r2, [pc, #52]	; (80087fc <HAL_RTC_WaitForSynchro+0x48>)
 80087c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c8:	f7fa fb6e 	bl	8002ea8 <HAL_GetTick>
 80087cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087d0:	f7fa fb6a 	bl	8002ea8 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087de:	d901      	bls.n	80087e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e007      	b.n	80087f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ee      	beq.n	80087d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	0001ff5f 	.word	0x0001ff5f

08008800 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d122      	bne.n	8008864 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800882c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800882e:	f7fa fb3b 	bl	8002ea8 <HAL_GetTick>
 8008832:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008834:	e00c      	b.n	8008850 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008836:	f7fa fb37 	bl	8002ea8 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008844:	d904      	bls.n	8008850 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2204      	movs	r2, #4
 800884a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <RTC_EnterInitMode+0x64>
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d1e8      	bne.n	8008836 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008888:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff ff8b 	bl	80087b4 <HAL_RTC_WaitForSynchro>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80088c6:	e005      	b.n	80088d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	3b0a      	subs	r3, #10
 80088d2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d8f6      	bhi.n	80088c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b2db      	uxtb	r3, r3
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	091b      	lsrs	r3, r3, #4
 8008906:	b2db      	uxtb	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	b2db      	uxtb	r3, r3
 8008920:	4413      	add	r3, r2
 8008922:	b2db      	uxtb	r3, r3
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e049      	b.n	80089d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7f9 fee6 	bl	8002728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3304      	adds	r3, #4
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f000 ffd6 	bl	8009920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e049      	b.n	8008a84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f841 	bl	8008a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f000 ff7f 	bl	8009920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_TIM_PWM_Start+0x24>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	bf14      	ite	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	e03c      	b.n	8008b3e <HAL_TIM_PWM_Start+0x9e>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d109      	bne.n	8008ade <HAL_TIM_PWM_Start+0x3e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	bf14      	ite	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	2300      	moveq	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	e02f      	b.n	8008b3e <HAL_TIM_PWM_Start+0x9e>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d109      	bne.n	8008af8 <HAL_TIM_PWM_Start+0x58>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	bf14      	ite	ne
 8008af0:	2301      	movne	r3, #1
 8008af2:	2300      	moveq	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	e022      	b.n	8008b3e <HAL_TIM_PWM_Start+0x9e>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b0c      	cmp	r3, #12
 8008afc:	d109      	bne.n	8008b12 <HAL_TIM_PWM_Start+0x72>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	bf14      	ite	ne
 8008b0a:	2301      	movne	r3, #1
 8008b0c:	2300      	moveq	r3, #0
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	e015      	b.n	8008b3e <HAL_TIM_PWM_Start+0x9e>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d109      	bne.n	8008b2c <HAL_TIM_PWM_Start+0x8c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	bf14      	ite	ne
 8008b24:	2301      	movne	r3, #1
 8008b26:	2300      	moveq	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	e008      	b.n	8008b3e <HAL_TIM_PWM_Start+0x9e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	bf14      	ite	ne
 8008b38:	2301      	movne	r3, #1
 8008b3a:	2300      	moveq	r3, #0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e097      	b.n	8008c76 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <HAL_TIM_PWM_Start+0xb6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b54:	e023      	b.n	8008b9e <HAL_TIM_PWM_Start+0xfe>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIM_PWM_Start+0xc6>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b64:	e01b      	b.n	8008b9e <HAL_TIM_PWM_Start+0xfe>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_PWM_Start+0xd6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b74:	e013      	b.n	8008b9e <HAL_TIM_PWM_Start+0xfe>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b0c      	cmp	r3, #12
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start+0xe6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b84:	e00b      	b.n	8008b9e <HAL_TIM_PWM_Start+0xfe>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b10      	cmp	r3, #16
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_PWM_Start+0xf6>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b94:	e003      	b.n	8008b9e <HAL_TIM_PWM_Start+0xfe>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fbd8 	bl	800a35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a33      	ldr	r2, [pc, #204]	; (8008c80 <HAL_TIM_PWM_Start+0x1e0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d013      	beq.n	8008bde <HAL_TIM_PWM_Start+0x13e>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a32      	ldr	r2, [pc, #200]	; (8008c84 <HAL_TIM_PWM_Start+0x1e4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00e      	beq.n	8008bde <HAL_TIM_PWM_Start+0x13e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a30      	ldr	r2, [pc, #192]	; (8008c88 <HAL_TIM_PWM_Start+0x1e8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d009      	beq.n	8008bde <HAL_TIM_PWM_Start+0x13e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a2f      	ldr	r2, [pc, #188]	; (8008c8c <HAL_TIM_PWM_Start+0x1ec>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d004      	beq.n	8008bde <HAL_TIM_PWM_Start+0x13e>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a2d      	ldr	r2, [pc, #180]	; (8008c90 <HAL_TIM_PWM_Start+0x1f0>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d101      	bne.n	8008be2 <HAL_TIM_PWM_Start+0x142>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <HAL_TIM_PWM_Start+0x144>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <HAL_TIM_PWM_Start+0x1e0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <HAL_TIM_PWM_Start+0x194>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0a:	d013      	beq.n	8008c34 <HAL_TIM_PWM_Start+0x194>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a20      	ldr	r2, [pc, #128]	; (8008c94 <HAL_TIM_PWM_Start+0x1f4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <HAL_TIM_PWM_Start+0x194>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1f      	ldr	r2, [pc, #124]	; (8008c98 <HAL_TIM_PWM_Start+0x1f8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <HAL_TIM_PWM_Start+0x194>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <HAL_TIM_PWM_Start+0x1e4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <HAL_TIM_PWM_Start+0x194>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <HAL_TIM_PWM_Start+0x1e8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d115      	bne.n	8008c60 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <HAL_TIM_PWM_Start+0x1fc>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d015      	beq.n	8008c72 <HAL_TIM_PWM_Start+0x1d2>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4c:	d011      	beq.n	8008c72 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0201 	orr.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5e:	e008      	b.n	8008c72 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	e000      	b.n	8008c74 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40013400 	.word	0x40013400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	40000400 	.word	0x40000400
 8008c98:	40000800 	.word	0x40000800
 8008c9c:	00010007 	.word	0x00010007

08008ca0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fb52 	bl	800a35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a3e      	ldr	r2, [pc, #248]	; (8008db8 <HAL_TIM_PWM_Stop+0x118>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <HAL_TIM_PWM_Stop+0x4a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a3d      	ldr	r2, [pc, #244]	; (8008dbc <HAL_TIM_PWM_Stop+0x11c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d00e      	beq.n	8008cea <HAL_TIM_PWM_Stop+0x4a>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a3b      	ldr	r2, [pc, #236]	; (8008dc0 <HAL_TIM_PWM_Stop+0x120>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d009      	beq.n	8008cea <HAL_TIM_PWM_Stop+0x4a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a3a      	ldr	r2, [pc, #232]	; (8008dc4 <HAL_TIM_PWM_Stop+0x124>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d004      	beq.n	8008cea <HAL_TIM_PWM_Stop+0x4a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a38      	ldr	r2, [pc, #224]	; (8008dc8 <HAL_TIM_PWM_Stop+0x128>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_PWM_Stop+0x4e>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <HAL_TIM_PWM_Stop+0x50>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d017      	beq.n	8008d24 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a1a      	ldr	r2, [r3, #32]
 8008cfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10f      	bne.n	8008d24 <HAL_TIM_PWM_Stop+0x84>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6a1a      	ldr	r2, [r3, #32]
 8008d0a:	f240 4344 	movw	r3, #1092	; 0x444
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d107      	bne.n	8008d24 <HAL_TIM_PWM_Stop+0x84>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6a1a      	ldr	r2, [r3, #32]
 8008d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10f      	bne.n	8008d54 <HAL_TIM_PWM_Stop+0xb4>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d107      	bne.n	8008d54 <HAL_TIM_PWM_Stop+0xb4>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <HAL_TIM_PWM_Stop+0xc4>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d62:	e023      	b.n	8008dac <HAL_TIM_PWM_Stop+0x10c>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d104      	bne.n	8008d74 <HAL_TIM_PWM_Stop+0xd4>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d72:	e01b      	b.n	8008dac <HAL_TIM_PWM_Stop+0x10c>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d104      	bne.n	8008d84 <HAL_TIM_PWM_Stop+0xe4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d82:	e013      	b.n	8008dac <HAL_TIM_PWM_Stop+0x10c>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b0c      	cmp	r3, #12
 8008d88:	d104      	bne.n	8008d94 <HAL_TIM_PWM_Stop+0xf4>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d92:	e00b      	b.n	8008dac <HAL_TIM_PWM_Stop+0x10c>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b10      	cmp	r3, #16
 8008d98:	d104      	bne.n	8008da4 <HAL_TIM_PWM_Stop+0x104>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da2:	e003      	b.n	8008dac <HAL_TIM_PWM_Stop+0x10c>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	40012c00 	.word	0x40012c00
 8008dbc:	40013400 	.word	0x40013400
 8008dc0:	40014000 	.word	0x40014000
 8008dc4:	40014400 	.word	0x40014400
 8008dc8:	40014800 	.word	0x40014800

08008dcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e049      	b.n	8008e72 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f841 	bl	8008e7a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f000 fd88 	bl	8009920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_TIM_IC_Start_IT+0x1e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	e023      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x66>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d104      	bne.n	8008ebe <HAL_TIM_IC_Start_IT+0x2e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	e01b      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x66>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d104      	bne.n	8008ece <HAL_TIM_IC_Start_IT+0x3e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	e013      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x66>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b0c      	cmp	r3, #12
 8008ed2:	d104      	bne.n	8008ede <HAL_TIM_IC_Start_IT+0x4e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	e00b      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x66>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d104      	bne.n	8008eee <HAL_TIM_IC_Start_IT+0x5e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	e003      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x66>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d104      	bne.n	8008f08 <HAL_TIM_IC_Start_IT+0x78>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e013      	b.n	8008f30 <HAL_TIM_IC_Start_IT+0xa0>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d104      	bne.n	8008f18 <HAL_TIM_IC_Start_IT+0x88>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e00b      	b.n	8008f30 <HAL_TIM_IC_Start_IT+0xa0>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d104      	bne.n	8008f28 <HAL_TIM_IC_Start_IT+0x98>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	e003      	b.n	8008f30 <HAL_TIM_IC_Start_IT+0xa0>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d102      	bne.n	8008f3e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f38:	7b7b      	ldrb	r3, [r7, #13]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d001      	beq.n	8008f42 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e0d8      	b.n	80090f4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d104      	bne.n	8008f52 <HAL_TIM_IC_Start_IT+0xc2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f50:	e023      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x10a>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_IC_Start_IT+0xd2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f60:	e01b      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x10a>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_IC_Start_IT+0xe2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f70:	e013      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x10a>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b0c      	cmp	r3, #12
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_IC_Start_IT+0xf2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f80:	e00b      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x10a>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d104      	bne.n	8008f92 <HAL_TIM_IC_Start_IT+0x102>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f90:	e003      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x10a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_IC_Start_IT+0x11a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fa8:	e013      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x142>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_IC_Start_IT+0x12a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb8:	e00b      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x142>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d104      	bne.n	8008fca <HAL_TIM_IC_Start_IT+0x13a>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fc8:	e003      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x142>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b0c      	cmp	r3, #12
 8008fd6:	d841      	bhi.n	800905c <HAL_TIM_IC_Start_IT+0x1cc>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <HAL_TIM_IC_Start_IT+0x150>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08009015 	.word	0x08009015
 8008fe4:	0800905d 	.word	0x0800905d
 8008fe8:	0800905d 	.word	0x0800905d
 8008fec:	0800905d 	.word	0x0800905d
 8008ff0:	08009027 	.word	0x08009027
 8008ff4:	0800905d 	.word	0x0800905d
 8008ff8:	0800905d 	.word	0x0800905d
 8008ffc:	0800905d 	.word	0x0800905d
 8009000:	08009039 	.word	0x08009039
 8009004:	0800905d 	.word	0x0800905d
 8009008:	0800905d 	.word	0x0800905d
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800904b 	.word	0x0800904b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0202 	orr.w	r2, r2, #2
 8009022:	60da      	str	r2, [r3, #12]
      break;
 8009024:	e01d      	b.n	8009062 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0204 	orr.w	r2, r2, #4
 8009034:	60da      	str	r2, [r3, #12]
      break;
 8009036:	e014      	b.n	8009062 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0208 	orr.w	r2, r2, #8
 8009046:	60da      	str	r2, [r3, #12]
      break;
 8009048:	e00b      	b.n	8009062 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0210 	orr.w	r2, r2, #16
 8009058:	60da      	str	r2, [r3, #12]
      break;
 800905a:	e002      	b.n	8009062 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
      break;
 8009060:	bf00      	nop
  }

  if (status == HAL_OK)
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d144      	bne.n	80090f2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2201      	movs	r2, #1
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f973 	bl	800a35c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a20      	ldr	r2, [pc, #128]	; (80090fc <HAL_TIM_IC_Start_IT+0x26c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d018      	beq.n	80090b2 <HAL_TIM_IC_Start_IT+0x222>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009088:	d013      	beq.n	80090b2 <HAL_TIM_IC_Start_IT+0x222>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1c      	ldr	r2, [pc, #112]	; (8009100 <HAL_TIM_IC_Start_IT+0x270>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00e      	beq.n	80090b2 <HAL_TIM_IC_Start_IT+0x222>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1a      	ldr	r2, [pc, #104]	; (8009104 <HAL_TIM_IC_Start_IT+0x274>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d009      	beq.n	80090b2 <HAL_TIM_IC_Start_IT+0x222>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a19      	ldr	r2, [pc, #100]	; (8009108 <HAL_TIM_IC_Start_IT+0x278>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <HAL_TIM_IC_Start_IT+0x222>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a17      	ldr	r2, [pc, #92]	; (800910c <HAL_TIM_IC_Start_IT+0x27c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d115      	bne.n	80090de <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <HAL_TIM_IC_Start_IT+0x280>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b06      	cmp	r3, #6
 80090c2:	d015      	beq.n	80090f0 <HAL_TIM_IC_Start_IT+0x260>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ca:	d011      	beq.n	80090f0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090dc:	e008      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f042 0201 	orr.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e000      	b.n	80090f2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40012c00 	.word	0x40012c00
 8009100:	40000400 	.word	0x40000400
 8009104:	40000800 	.word	0x40000800
 8009108:	40013400 	.word	0x40013400
 800910c:	40014000 	.word	0x40014000
 8009110:	00010007 	.word	0x00010007

08009114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b02      	cmp	r3, #2
 8009128:	d122      	bne.n	8009170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b02      	cmp	r3, #2
 8009136:	d11b      	bne.n	8009170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f06f 0202 	mvn.w	r2, #2
 8009140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7f8 fd38 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 800915c:	e005      	b.n	800916a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fbc0 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbc7 	bl	80098f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b04      	cmp	r3, #4
 800917c:	d122      	bne.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b04      	cmp	r3, #4
 800918a:	d11b      	bne.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0204 	mvn.w	r2, #4
 8009194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7f8 fd0e 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 80091b0:	e005      	b.n	80091be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb96 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fb9d 	bl	80098f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0308 	and.w	r3, r3, #8
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d122      	bne.n	8009218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d11b      	bne.n	8009218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0208 	mvn.w	r2, #8
 80091e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2204      	movs	r2, #4
 80091ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7f8 fce4 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 8009204:	e005      	b.n	8009212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fb6c 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb73 	bl	80098f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f003 0310 	and.w	r3, r3, #16
 8009222:	2b10      	cmp	r3, #16
 8009224:	d122      	bne.n	800926c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f003 0310 	and.w	r3, r3, #16
 8009230:	2b10      	cmp	r3, #16
 8009232:	d11b      	bne.n	800926c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0210 	mvn.w	r2, #16
 800923c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2208      	movs	r2, #8
 8009242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f8 fcba 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 8009258:	e005      	b.n	8009266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb42 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fb49 	bl	80098f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b01      	cmp	r3, #1
 8009278:	d10e      	bne.n	8009298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b01      	cmp	r3, #1
 8009286:	d107      	bne.n	8009298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0201 	mvn.w	r2, #1
 8009290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fb1c 	bl	80098d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d10e      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b0:	2b80      	cmp	r3, #128	; 0x80
 80092b2:	d107      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fa8c 	bl	800a7dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d2:	d10e      	bne.n	80092f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092de:	2b80      	cmp	r3, #128	; 0x80
 80092e0:	d107      	bne.n	80092f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fa7f 	bl	800a7f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fc:	2b40      	cmp	r3, #64	; 0x40
 80092fe:	d10e      	bne.n	800931e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d107      	bne.n	800931e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 faf7 	bl	800990c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b20      	cmp	r3, #32
 800932a:	d10e      	bne.n	800934a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b20      	cmp	r3, #32
 8009338:	d107      	bne.n	800934a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f06f 0220 	mvn.w	r2, #32
 8009342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fa3f 	bl	800a7c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_TIM_IC_ConfigChannel+0x1e>
 800936c:	2302      	movs	r3, #2
 800936e:	e088      	b.n	8009482 <HAL_TIM_IC_ConfigChannel+0x130>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d11b      	bne.n	80093b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800938e:	f000 fe2d 	bl	8009fec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 020c 	bic.w	r2, r2, #12
 80093a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6999      	ldr	r1, [r3, #24]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	619a      	str	r2, [r3, #24]
 80093b4:	e060      	b.n	8009478 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d11c      	bne.n	80093f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80093cc:	f000 fea5 	bl	800a11a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6999      	ldr	r1, [r3, #24]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	021a      	lsls	r2, r3, #8
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	619a      	str	r2, [r3, #24]
 80093f4:	e040      	b.n	8009478 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800940c:	f000 fef2 	bl	800a1f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69da      	ldr	r2, [r3, #28]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 020c 	bic.w	r2, r2, #12
 800941e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69d9      	ldr	r1, [r3, #28]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	61da      	str	r2, [r3, #28]
 8009432:	e021      	b.n	8009478 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b0c      	cmp	r3, #12
 8009438:	d11c      	bne.n	8009474 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800944a:	f000 ff0f 	bl	800a26c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800945c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69d9      	ldr	r1, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	021a      	lsls	r2, r3, #8
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	61da      	str	r2, [r3, #28]
 8009472:	e001      	b.n	8009478 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e0ff      	b.n	80096aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b14      	cmp	r3, #20
 80094b6:	f200 80f0 	bhi.w	800969a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	08009515 	.word	0x08009515
 80094c4:	0800969b 	.word	0x0800969b
 80094c8:	0800969b 	.word	0x0800969b
 80094cc:	0800969b 	.word	0x0800969b
 80094d0:	08009555 	.word	0x08009555
 80094d4:	0800969b 	.word	0x0800969b
 80094d8:	0800969b 	.word	0x0800969b
 80094dc:	0800969b 	.word	0x0800969b
 80094e0:	08009597 	.word	0x08009597
 80094e4:	0800969b 	.word	0x0800969b
 80094e8:	0800969b 	.word	0x0800969b
 80094ec:	0800969b 	.word	0x0800969b
 80094f0:	080095d7 	.word	0x080095d7
 80094f4:	0800969b 	.word	0x0800969b
 80094f8:	0800969b 	.word	0x0800969b
 80094fc:	0800969b 	.word	0x0800969b
 8009500:	08009619 	.word	0x08009619
 8009504:	0800969b 	.word	0x0800969b
 8009508:	0800969b 	.word	0x0800969b
 800950c:	0800969b 	.word	0x0800969b
 8009510:	08009659 	.word	0x08009659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa90 	bl	8009a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0208 	orr.w	r2, r2, #8
 800952e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0204 	bic.w	r2, r2, #4
 800953e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6999      	ldr	r1, [r3, #24]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691a      	ldr	r2, [r3, #16]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	619a      	str	r2, [r3, #24]
      break;
 8009552:	e0a5      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fb00 	bl	8009b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800956e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6999      	ldr	r1, [r3, #24]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	021a      	lsls	r2, r3, #8
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	619a      	str	r2, [r3, #24]
      break;
 8009594:	e084      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fb69 	bl	8009c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0208 	orr.w	r2, r2, #8
 80095b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0204 	bic.w	r2, r2, #4
 80095c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69d9      	ldr	r1, [r3, #28]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	61da      	str	r2, [r3, #28]
      break;
 80095d4:	e064      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fbd1 	bl	8009d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	69d9      	ldr	r1, [r3, #28]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	021a      	lsls	r2, r3, #8
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	61da      	str	r2, [r3, #28]
      break;
 8009616:	e043      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fc1a 	bl	8009e58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0208 	orr.w	r2, r2, #8
 8009632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0204 	bic.w	r2, r2, #4
 8009642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009656:	e023      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fc5e 	bl	8009f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	021a      	lsls	r2, r3, #8
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009698:	e002      	b.n	80096a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	75fb      	strb	r3, [r7, #23]
      break;
 800969e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop

080096b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_TIM_ConfigClockSource+0x1c>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e0b6      	b.n	800983e <HAL_TIM_ConfigClockSource+0x18a>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970c:	d03e      	beq.n	800978c <HAL_TIM_ConfigClockSource+0xd8>
 800970e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009712:	f200 8087 	bhi.w	8009824 <HAL_TIM_ConfigClockSource+0x170>
 8009716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971a:	f000 8086 	beq.w	800982a <HAL_TIM_ConfigClockSource+0x176>
 800971e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009722:	d87f      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 8009724:	2b70      	cmp	r3, #112	; 0x70
 8009726:	d01a      	beq.n	800975e <HAL_TIM_ConfigClockSource+0xaa>
 8009728:	2b70      	cmp	r3, #112	; 0x70
 800972a:	d87b      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 800972c:	2b60      	cmp	r3, #96	; 0x60
 800972e:	d050      	beq.n	80097d2 <HAL_TIM_ConfigClockSource+0x11e>
 8009730:	2b60      	cmp	r3, #96	; 0x60
 8009732:	d877      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 8009734:	2b50      	cmp	r3, #80	; 0x50
 8009736:	d03c      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0xfe>
 8009738:	2b50      	cmp	r3, #80	; 0x50
 800973a:	d873      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d058      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x13e>
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d86f      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 8009744:	2b30      	cmp	r3, #48	; 0x30
 8009746:	d064      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15e>
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d86b      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 800974c:	2b20      	cmp	r3, #32
 800974e:	d060      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15e>
 8009750:	2b20      	cmp	r3, #32
 8009752:	d867      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d05c      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15e>
 8009758:	2b10      	cmp	r3, #16
 800975a:	d05a      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15e>
 800975c:	e062      	b.n	8009824 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800976e:	f000 fdd5 	bl	800a31c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	609a      	str	r2, [r3, #8]
      break;
 800978a:	e04f      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800979c:	f000 fdbe 	bl	800a31c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097ae:	609a      	str	r2, [r3, #8]
      break;
 80097b0:	e03c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097be:	461a      	mov	r2, r3
 80097c0:	f000 fc7c 	bl	800a0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2150      	movs	r1, #80	; 0x50
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fd8b 	bl	800a2e6 <TIM_ITRx_SetConfig>
      break;
 80097d0:	e02c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097de:	461a      	mov	r2, r3
 80097e0:	f000 fcd8 	bl	800a194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2160      	movs	r1, #96	; 0x60
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fd7b 	bl	800a2e6 <TIM_ITRx_SetConfig>
      break;
 80097f0:	e01c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fe:	461a      	mov	r2, r3
 8009800:	f000 fc5c 	bl	800a0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2140      	movs	r1, #64	; 0x40
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fd6b 	bl	800a2e6 <TIM_ITRx_SetConfig>
      break;
 8009810:	e00c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f000 fd62 	bl	800a2e6 <TIM_ITRx_SetConfig>
      break;
 8009822:	e003      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	e000      	b.n	800982c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800982a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b0c      	cmp	r3, #12
 800985a:	d831      	bhi.n	80098c0 <HAL_TIM_ReadCapturedValue+0x78>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <HAL_TIM_ReadCapturedValue+0x1c>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	08009899 	.word	0x08009899
 8009868:	080098c1 	.word	0x080098c1
 800986c:	080098c1 	.word	0x080098c1
 8009870:	080098c1 	.word	0x080098c1
 8009874:	080098a3 	.word	0x080098a3
 8009878:	080098c1 	.word	0x080098c1
 800987c:	080098c1 	.word	0x080098c1
 8009880:	080098c1 	.word	0x080098c1
 8009884:	080098ad 	.word	0x080098ad
 8009888:	080098c1 	.word	0x080098c1
 800988c:	080098c1 	.word	0x080098c1
 8009890:	080098c1 	.word	0x080098c1
 8009894:	080098b7 	.word	0x080098b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989e:	60fb      	str	r3, [r7, #12]

      break;
 80098a0:	e00f      	b.n	80098c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	60fb      	str	r3, [r7, #12]

      break;
 80098aa:	e00a      	b.n	80098c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	60fb      	str	r3, [r7, #12]

      break;
 80098b4:	e005      	b.n	80098c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	60fb      	str	r3, [r7, #12]

      break;
 80098be:	e000      	b.n	80098c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80098c0:	bf00      	nop
  }

  return tmpreg;
 80098c2:	68fb      	ldr	r3, [r7, #12]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a3c      	ldr	r2, [pc, #240]	; (8009a24 <TIM_Base_SetConfig+0x104>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00f      	beq.n	8009958 <TIM_Base_SetConfig+0x38>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d00b      	beq.n	8009958 <TIM_Base_SetConfig+0x38>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a39      	ldr	r2, [pc, #228]	; (8009a28 <TIM_Base_SetConfig+0x108>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d007      	beq.n	8009958 <TIM_Base_SetConfig+0x38>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a38      	ldr	r2, [pc, #224]	; (8009a2c <TIM_Base_SetConfig+0x10c>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d003      	beq.n	8009958 <TIM_Base_SetConfig+0x38>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a37      	ldr	r2, [pc, #220]	; (8009a30 <TIM_Base_SetConfig+0x110>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d108      	bne.n	800996a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <TIM_Base_SetConfig+0x104>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d01b      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009978:	d017      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <TIM_Base_SetConfig+0x108>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <TIM_Base_SetConfig+0x10c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00f      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <TIM_Base_SetConfig+0x110>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00b      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <TIM_Base_SetConfig+0x114>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d007      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a26      	ldr	r2, [pc, #152]	; (8009a38 <TIM_Base_SetConfig+0x118>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d003      	beq.n	80099aa <TIM_Base_SetConfig+0x8a>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a25      	ldr	r2, [pc, #148]	; (8009a3c <TIM_Base_SetConfig+0x11c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d108      	bne.n	80099bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a10      	ldr	r2, [pc, #64]	; (8009a24 <TIM_Base_SetConfig+0x104>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00f      	beq.n	8009a08 <TIM_Base_SetConfig+0xe8>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a11      	ldr	r2, [pc, #68]	; (8009a30 <TIM_Base_SetConfig+0x110>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00b      	beq.n	8009a08 <TIM_Base_SetConfig+0xe8>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a10      	ldr	r2, [pc, #64]	; (8009a34 <TIM_Base_SetConfig+0x114>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <TIM_Base_SetConfig+0xe8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a0f      	ldr	r2, [pc, #60]	; (8009a38 <TIM_Base_SetConfig+0x118>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_Base_SetConfig+0xe8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <TIM_Base_SetConfig+0x11c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d103      	bne.n	8009a10 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	615a      	str	r2, [r3, #20]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40013400 	.word	0x40013400
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800

08009a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0201 	bic.w	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f023 0302 	bic.w	r3, r3, #2
 8009a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a2c      	ldr	r2, [pc, #176]	; (8009b4c <TIM_OC1_SetConfig+0x10c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x80>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a2b      	ldr	r2, [pc, #172]	; (8009b50 <TIM_OC1_SetConfig+0x110>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x80>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a2a      	ldr	r2, [pc, #168]	; (8009b54 <TIM_OC1_SetConfig+0x114>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x80>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a29      	ldr	r2, [pc, #164]	; (8009b58 <TIM_OC1_SetConfig+0x118>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x80>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a28      	ldr	r2, [pc, #160]	; (8009b5c <TIM_OC1_SetConfig+0x11c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10c      	bne.n	8009ada <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0308 	bic.w	r3, r3, #8
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f023 0304 	bic.w	r3, r3, #4
 8009ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <TIM_OC1_SetConfig+0x10c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <TIM_OC1_SetConfig+0xc2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <TIM_OC1_SetConfig+0x110>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00b      	beq.n	8009b02 <TIM_OC1_SetConfig+0xc2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a19      	ldr	r2, [pc, #100]	; (8009b54 <TIM_OC1_SetConfig+0x114>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <TIM_OC1_SetConfig+0xc2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <TIM_OC1_SetConfig+0x118>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_OC1_SetConfig+0xc2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <TIM_OC1_SetConfig+0x11c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d111      	bne.n	8009b26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	621a      	str	r2, [r3, #32]
}
 8009b40:	bf00      	nop
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	40012c00 	.word	0x40012c00
 8009b50:	40013400 	.word	0x40013400
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40014400 	.word	0x40014400
 8009b5c:	40014800 	.word	0x40014800

08009b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f023 0210 	bic.w	r2, r3, #16
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 0320 	bic.w	r3, r3, #32
 8009bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a28      	ldr	r2, [pc, #160]	; (8009c60 <TIM_OC2_SetConfig+0x100>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d003      	beq.n	8009bcc <TIM_OC2_SetConfig+0x6c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a27      	ldr	r2, [pc, #156]	; (8009c64 <TIM_OC2_SetConfig+0x104>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d10d      	bne.n	8009be8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a1d      	ldr	r2, [pc, #116]	; (8009c60 <TIM_OC2_SetConfig+0x100>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00f      	beq.n	8009c10 <TIM_OC2_SetConfig+0xb0>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	; (8009c64 <TIM_OC2_SetConfig+0x104>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d00b      	beq.n	8009c10 <TIM_OC2_SetConfig+0xb0>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1b      	ldr	r2, [pc, #108]	; (8009c68 <TIM_OC2_SetConfig+0x108>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d007      	beq.n	8009c10 <TIM_OC2_SetConfig+0xb0>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a1a      	ldr	r2, [pc, #104]	; (8009c6c <TIM_OC2_SetConfig+0x10c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d003      	beq.n	8009c10 <TIM_OC2_SetConfig+0xb0>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a19      	ldr	r2, [pc, #100]	; (8009c70 <TIM_OC2_SetConfig+0x110>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d113      	bne.n	8009c38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40012c00 	.word	0x40012c00
 8009c64:	40013400 	.word	0x40013400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40014400 	.word	0x40014400
 8009c70:	40014800 	.word	0x40014800

08009c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a27      	ldr	r2, [pc, #156]	; (8009d70 <TIM_OC3_SetConfig+0xfc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_OC3_SetConfig+0x6a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a26      	ldr	r2, [pc, #152]	; (8009d74 <TIM_OC3_SetConfig+0x100>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d10d      	bne.n	8009cfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cf8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	; (8009d70 <TIM_OC3_SetConfig+0xfc>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00f      	beq.n	8009d22 <TIM_OC3_SetConfig+0xae>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <TIM_OC3_SetConfig+0x100>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00b      	beq.n	8009d22 <TIM_OC3_SetConfig+0xae>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a1a      	ldr	r2, [pc, #104]	; (8009d78 <TIM_OC3_SetConfig+0x104>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d007      	beq.n	8009d22 <TIM_OC3_SetConfig+0xae>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a19      	ldr	r2, [pc, #100]	; (8009d7c <TIM_OC3_SetConfig+0x108>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d003      	beq.n	8009d22 <TIM_OC3_SetConfig+0xae>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <TIM_OC3_SetConfig+0x10c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d113      	bne.n	8009d4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	621a      	str	r2, [r3, #32]
}
 8009d64:	bf00      	nop
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	40012c00 	.word	0x40012c00
 8009d74:	40013400 	.word	0x40013400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40014400 	.word	0x40014400
 8009d80:	40014800 	.word	0x40014800

08009d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	031b      	lsls	r3, r3, #12
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a18      	ldr	r2, [pc, #96]	; (8009e44 <TIM_OC4_SetConfig+0xc0>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00f      	beq.n	8009e08 <TIM_OC4_SetConfig+0x84>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a17      	ldr	r2, [pc, #92]	; (8009e48 <TIM_OC4_SetConfig+0xc4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <TIM_OC4_SetConfig+0x84>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <TIM_OC4_SetConfig+0xc8>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d007      	beq.n	8009e08 <TIM_OC4_SetConfig+0x84>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <TIM_OC4_SetConfig+0xcc>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC4_SetConfig+0x84>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <TIM_OC4_SetConfig+0xd0>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d109      	bne.n	8009e1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	019b      	lsls	r3, r3, #6
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40012c00 	.word	0x40012c00
 8009e48:	40013400 	.word	0x40013400
 8009e4c:	40014000 	.word	0x40014000
 8009e50:	40014400 	.word	0x40014400
 8009e54:	40014800 	.word	0x40014800

08009e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	041b      	lsls	r3, r3, #16
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a17      	ldr	r2, [pc, #92]	; (8009f0c <TIM_OC5_SetConfig+0xb4>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d00f      	beq.n	8009ed2 <TIM_OC5_SetConfig+0x7a>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <TIM_OC5_SetConfig+0xb8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00b      	beq.n	8009ed2 <TIM_OC5_SetConfig+0x7a>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a15      	ldr	r2, [pc, #84]	; (8009f14 <TIM_OC5_SetConfig+0xbc>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d007      	beq.n	8009ed2 <TIM_OC5_SetConfig+0x7a>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <TIM_OC5_SetConfig+0xc0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d003      	beq.n	8009ed2 <TIM_OC5_SetConfig+0x7a>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a13      	ldr	r2, [pc, #76]	; (8009f1c <TIM_OC5_SetConfig+0xc4>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d109      	bne.n	8009ee6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	021b      	lsls	r3, r3, #8
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	621a      	str	r2, [r3, #32]
}
 8009f00:	bf00      	nop
 8009f02:	371c      	adds	r7, #28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	40012c00 	.word	0x40012c00
 8009f10:	40013400 	.word	0x40013400
 8009f14:	40014000 	.word	0x40014000
 8009f18:	40014400 	.word	0x40014400
 8009f1c:	40014800 	.word	0x40014800

08009f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a18      	ldr	r2, [pc, #96]	; (8009fd8 <TIM_OC6_SetConfig+0xb8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00f      	beq.n	8009f9c <TIM_OC6_SetConfig+0x7c>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a17      	ldr	r2, [pc, #92]	; (8009fdc <TIM_OC6_SetConfig+0xbc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <TIM_OC6_SetConfig+0x7c>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <TIM_OC6_SetConfig+0xc0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d007      	beq.n	8009f9c <TIM_OC6_SetConfig+0x7c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <TIM_OC6_SetConfig+0xc4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC6_SetConfig+0x7c>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a14      	ldr	r2, [pc, #80]	; (8009fe8 <TIM_OC6_SetConfig+0xc8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d109      	bne.n	8009fb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	029b      	lsls	r3, r3, #10
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	621a      	str	r2, [r3, #32]
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	40012c00 	.word	0x40012c00
 8009fdc:	40013400 	.word	0x40013400
 8009fe0:	40014000 	.word	0x40014000
 8009fe4:	40014400 	.word	0x40014400
 8009fe8:	40014800 	.word	0x40014800

08009fec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0201 	bic.w	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a24      	ldr	r2, [pc, #144]	; (800a0a8 <TIM_TI1_SetConfig+0xbc>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d013      	beq.n	800a042 <TIM_TI1_SetConfig+0x56>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a020:	d00f      	beq.n	800a042 <TIM_TI1_SetConfig+0x56>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4a21      	ldr	r2, [pc, #132]	; (800a0ac <TIM_TI1_SetConfig+0xc0>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <TIM_TI1_SetConfig+0x56>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4a20      	ldr	r2, [pc, #128]	; (800a0b0 <TIM_TI1_SetConfig+0xc4>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <TIM_TI1_SetConfig+0x56>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4a1f      	ldr	r2, [pc, #124]	; (800a0b4 <TIM_TI1_SetConfig+0xc8>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_TI1_SetConfig+0x56>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4a1e      	ldr	r2, [pc, #120]	; (800a0b8 <TIM_TI1_SetConfig+0xcc>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d101      	bne.n	800a046 <TIM_TI1_SetConfig+0x5a>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <TIM_TI1_SetConfig+0x5c>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d008      	beq.n	800a05e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e003      	b.n	800a066 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a06c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	b2db      	uxtb	r3, r3
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4313      	orrs	r3, r2
 800a078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f023 030a 	bic.w	r3, r3, #10
 800a080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f003 030a 	and.w	r3, r3, #10
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40012c00 	.word	0x40012c00
 800a0ac:	40000400 	.word	0x40000400
 800a0b0:	40000800 	.word	0x40000800
 800a0b4:	40013400 	.word	0x40013400
 800a0b8:	40014000 	.word	0x40014000

0800a0bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f023 0201 	bic.w	r2, r3, #1
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f023 030a 	bic.w	r3, r3, #10
 800a0f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	621a      	str	r2, [r3, #32]
}
 800a10e:	bf00      	nop
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	f023 0210 	bic.w	r2, r3, #16
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	031b      	lsls	r3, r3, #12
 800a15e:	b29b      	uxth	r3, r3
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a16c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	621a      	str	r2, [r3, #32]
}
 800a188:	bf00      	nop
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	f023 0210 	bic.w	r2, r3, #16
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	031b      	lsls	r3, r3, #12
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	621a      	str	r2, [r3, #32]
}
 800a1e8:	bf00      	nop
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4313      	orrs	r3, r2
 800a228:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a230:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	b2db      	uxtb	r3, r3
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a244:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	621a      	str	r2, [r3, #32]
}
 800a260:	bf00      	nop
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	031b      	lsls	r3, r3, #12
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a2be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	031b      	lsls	r3, r3, #12
 800a2c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	621a      	str	r2, [r3, #32]
}
 800a2da:	bf00      	nop
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4313      	orrs	r3, r2
 800a304:	f043 0307 	orr.w	r3, r3, #7
 800a308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	609a      	str	r2, [r3, #8]
}
 800a310:	bf00      	nop
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	021a      	lsls	r2, r3, #8
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	431a      	orrs	r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	4313      	orrs	r3, r2
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	609a      	str	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	2201      	movs	r2, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	43db      	mvns	r3, r3
 800a37e:	401a      	ands	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	431a      	orrs	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <HAL_TIMEx_PWMN_Start+0x24>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	bf14      	ite	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	e022      	b.n	800a412 <HAL_TIMEx_PWMN_Start+0x6a>
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d109      	bne.n	800a3e6 <HAL_TIMEx_PWMN_Start+0x3e>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	bf14      	ite	ne
 800a3de:	2301      	movne	r3, #1
 800a3e0:	2300      	moveq	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	e015      	b.n	800a412 <HAL_TIMEx_PWMN_Start+0x6a>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d109      	bne.n	800a400 <HAL_TIMEx_PWMN_Start+0x58>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	bf14      	ite	ne
 800a3f8:	2301      	movne	r3, #1
 800a3fa:	2300      	moveq	r3, #0
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	e008      	b.n	800a412 <HAL_TIMEx_PWMN_Start+0x6a>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e069      	b.n	800a4ee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <HAL_TIMEx_PWMN_Start+0x82>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a428:	e013      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0xaa>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d104      	bne.n	800a43a <HAL_TIMEx_PWMN_Start+0x92>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a438:	e00b      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0xaa>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d104      	bne.n	800a44a <HAL_TIMEx_PWMN_Start+0xa2>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a448:	e003      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0xaa>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2204      	movs	r2, #4
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f9d2 	bl	800a804 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a46e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a20      	ldr	r2, [pc, #128]	; (800a4f8 <HAL_TIMEx_PWMN_Start+0x150>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d018      	beq.n	800a4ac <HAL_TIMEx_PWMN_Start+0x104>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a482:	d013      	beq.n	800a4ac <HAL_TIMEx_PWMN_Start+0x104>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a1c      	ldr	r2, [pc, #112]	; (800a4fc <HAL_TIMEx_PWMN_Start+0x154>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_TIMEx_PWMN_Start+0x104>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a1b      	ldr	r2, [pc, #108]	; (800a500 <HAL_TIMEx_PWMN_Start+0x158>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIMEx_PWMN_Start+0x104>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a19      	ldr	r2, [pc, #100]	; (800a504 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIMEx_PWMN_Start+0x104>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a18      	ldr	r2, [pc, #96]	; (800a508 <HAL_TIMEx_PWMN_Start+0x160>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d115      	bne.n	800a4d8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	4b16      	ldr	r3, [pc, #88]	; (800a50c <HAL_TIMEx_PWMN_Start+0x164>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d015      	beq.n	800a4ea <HAL_TIMEx_PWMN_Start+0x142>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c4:	d011      	beq.n	800a4ea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0201 	orr.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d6:	e008      	b.n	800a4ea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0201 	orr.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	e000      	b.n	800a4ec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	40012c00 	.word	0x40012c00
 800a4fc:	40000400 	.word	0x40000400
 800a500:	40000800 	.word	0x40000800
 800a504:	40013400 	.word	0x40013400
 800a508:	40014000 	.word	0x40014000
 800a50c:	00010007 	.word	0x00010007

0800a510 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2200      	movs	r2, #0
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f96e 	bl	800a804 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6a1a      	ldr	r2, [r3, #32]
 800a52e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a532:	4013      	ands	r3, r2
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10f      	bne.n	800a558 <HAL_TIMEx_PWMN_Stop+0x48>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6a1a      	ldr	r2, [r3, #32]
 800a53e:	f240 4344 	movw	r3, #1092	; 0x444
 800a542:	4013      	ands	r3, r2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d107      	bne.n	800a558 <HAL_TIMEx_PWMN_Stop+0x48>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a556:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6a1a      	ldr	r2, [r3, #32]
 800a55e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a562:	4013      	ands	r3, r2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10f      	bne.n	800a588 <HAL_TIMEx_PWMN_Stop+0x78>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a1a      	ldr	r2, [r3, #32]
 800a56e:	f240 4344 	movw	r3, #1092	; 0x444
 800a572:	4013      	ands	r3, r2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d107      	bne.n	800a588 <HAL_TIMEx_PWMN_Stop+0x78>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0201 	bic.w	r2, r2, #1
 800a586:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d104      	bne.n	800a598 <HAL_TIMEx_PWMN_Stop+0x88>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a596:	e013      	b.n	800a5c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d104      	bne.n	800a5a8 <HAL_TIMEx_PWMN_Stop+0x98>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5a6:	e00b      	b.n	800a5c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b08      	cmp	r3, #8
 800a5ac:	d104      	bne.n	800a5b8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5b6:	e003      	b.n	800a5c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e063      	b.n	800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a2b      	ldr	r2, [pc, #172]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d004      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a2a      	ldr	r2, [pc, #168]	; (800a6bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d108      	bne.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a61e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a1b      	ldr	r2, [pc, #108]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d018      	beq.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a656:	d013      	beq.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00e      	beq.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a17      	ldr	r2, [pc, #92]	; (800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d009      	beq.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a12      	ldr	r2, [pc, #72]	; (800a6bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d004      	beq.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a13      	ldr	r2, [pc, #76]	; (800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d10c      	bne.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	4313      	orrs	r3, r2
 800a690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	40012c00 	.word	0x40012c00
 800a6bc:	40013400 	.word	0x40013400
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800
 800a6c8:	40014000 	.word	0x40014000

0800a6cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d101      	bne.n	800a6e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e065      	b.n	800a7b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	4313      	orrs	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4313      	orrs	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	041b      	lsls	r3, r3, #16
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a16      	ldr	r2, [pc, #88]	; (800a7c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d004      	beq.n	800a776 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a14      	ldr	r2, [pc, #80]	; (800a7c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d115      	bne.n	800a7a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	051b      	lsls	r3, r3, #20
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	4313      	orrs	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	40012c00 	.word	0x40012c00
 800a7c4:	40013400 	.word	0x40013400

0800a7c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f003 031f 	and.w	r3, r3, #31
 800a816:	2204      	movs	r2, #4
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1a      	ldr	r2, [r3, #32]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	43db      	mvns	r3, r3
 800a826:	401a      	ands	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6a1a      	ldr	r2, [r3, #32]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f003 031f 	and.w	r3, r3, #31
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	fa01 f303 	lsl.w	r3, r1, r3
 800a83c:	431a      	orrs	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	621a      	str	r2, [r3, #32]
}
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e040      	b.n	800a8e2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7f8 f8a7 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2224      	movs	r2, #36	; 0x24
 800a87a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0201 	bic.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fbb7 	bl	800b000 <UART_SetConfig>
 800a892:	4603      	mov	r3, r0
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e022      	b.n	800a8e2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fd7f 	bl	800b3a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f042 0201 	orr.w	r2, r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fe06 	bl	800b4ec <UART_CheckIdleState>
 800a8e0:	4603      	mov	r3, r0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d165      	bne.n	800a9ce <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <HAL_UART_Transmit_DMA+0x22>
 800a908:	88fb      	ldrh	r3, [r7, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e05e      	b.n	800a9d0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	88fa      	ldrh	r2, [r7, #6]
 800a91c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	88fa      	ldrh	r2, [r7, #6]
 800a924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2221      	movs	r2, #33	; 0x21
 800a934:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d027      	beq.n	800a98e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a942:	4a25      	ldr	r2, [pc, #148]	; (800a9d8 <HAL_UART_Transmit_DMA+0xec>)
 800a944:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94a:	4a24      	ldr	r2, [pc, #144]	; (800a9dc <HAL_UART_Transmit_DMA+0xf0>)
 800a94c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a952:	4a23      	ldr	r2, [pc, #140]	; (800a9e0 <HAL_UART_Transmit_DMA+0xf4>)
 800a954:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95a:	2200      	movs	r2, #0
 800a95c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a966:	4619      	mov	r1, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3328      	adds	r3, #40	; 0x28
 800a96e:	461a      	mov	r2, r3
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	f7fa fb3b 	bl	8004fec <HAL_DMA_Start_IT>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d008      	beq.n	800a98e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2210      	movs	r2, #16
 800a980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2220      	movs	r2, #32
 800a988:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e020      	b.n	800a9d0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2240      	movs	r2, #64	; 0x40
 800a994:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3308      	adds	r3, #8
 800a99c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	e853 3f00 	ldrex	r3, [r3]
 800a9a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b6:	623a      	str	r2, [r7, #32]
 800a9b8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	69f9      	ldr	r1, [r7, #28]
 800a9bc:	6a3a      	ldr	r2, [r7, #32]
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e5      	bne.n	800a996 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e000      	b.n	800a9d0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a9ce:	2302      	movs	r3, #2
  }
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3728      	adds	r7, #40	; 0x28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	0800b961 	.word	0x0800b961
 800a9dc:	0800b9f5 	.word	0x0800b9f5
 800a9e0:	0800bb75 	.word	0x0800bb75

0800a9e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b0ba      	sub	sp, #232	; 0xe8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa12:	4013      	ands	r3, r2
 800aa14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d115      	bne.n	800aa4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa24:	f003 0320 	and.w	r3, r3, #32
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00f      	beq.n	800aa4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d009      	beq.n	800aa4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 82ab 	beq.w	800af98 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
      }
      return;
 800aa4a:	e2a5      	b.n	800af98 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8117 	beq.w	800ac84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa66:	4b85      	ldr	r3, [pc, #532]	; (800ac7c <HAL_UART_IRQHandler+0x298>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 810a 	beq.w	800ac84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d011      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xbc>
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa96:	f043 0201 	orr.w	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d011      	beq.n	800aad0 <HAL_UART_IRQHandler+0xec>
 800aaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2202      	movs	r2, #2
 800aabe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac6:	f043 0204 	orr.w	r2, r3, #4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d011      	beq.n	800ab00 <HAL_UART_IRQHandler+0x11c>
 800aadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2204      	movs	r2, #4
 800aaee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf6:	f043 0202 	orr.w	r2, r3, #2
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d017      	beq.n	800ab3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2208      	movs	r2, #8
 800ab2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab32:	f043 0208 	orr.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d012      	beq.n	800ab6e <HAL_UART_IRQHandler+0x18a>
 800ab48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab64:	f043 0220 	orr.w	r2, r3, #32
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8211 	beq.w	800af9c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7e:	f003 0320 	and.w	r3, r3, #32
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00d      	beq.n	800aba2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d007      	beq.n	800aba2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb6:	2b40      	cmp	r3, #64	; 0x40
 800abb8:	d005      	beq.n	800abc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d04f      	beq.n	800ac66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fe66 	bl	800b898 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd6:	2b40      	cmp	r3, #64	; 0x40
 800abd8:	d141      	bne.n	800ac5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3308      	adds	r3, #8
 800abe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800abf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1d9      	bne.n	800abda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d013      	beq.n	800ac56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac32:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <HAL_UART_IRQHandler+0x29c>)
 800ac34:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fa fa6e 	bl	800511c <HAL_DMA_Abort_IT>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d017      	beq.n	800ac76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac54:	e00f      	b.n	800ac76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f9c8 	bl	800afec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac5c:	e00b      	b.n	800ac76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f9c4 	bl	800afec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac64:	e007      	b.n	800ac76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f9c0 	bl	800afec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ac74:	e192      	b.n	800af9c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac76:	bf00      	nop
    return;
 800ac78:	e190      	b.n	800af9c <HAL_UART_IRQHandler+0x5b8>
 800ac7a:	bf00      	nop
 800ac7c:	04000120 	.word	0x04000120
 800ac80:	0800bbf3 	.word	0x0800bbf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	f040 814b 	bne.w	800af24 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac92:	f003 0310 	and.w	r3, r3, #16
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 8144 	beq.w	800af24 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 813d 	beq.w	800af24 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2210      	movs	r2, #16
 800acb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbc:	2b40      	cmp	r3, #64	; 0x40
 800acbe:	f040 80b5 	bne.w	800ae2c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800acce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 8164 	beq.w	800afa0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ace2:	429a      	cmp	r2, r3
 800ace4:	f080 815c 	bcs.w	800afa0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	f000 8086 	beq.w	800ae0a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad2c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1da      	bne.n	800acfe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3308      	adds	r3, #8
 800ad4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad52:	e853 3f00 	ldrex	r3, [r3]
 800ad56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3308      	adds	r3, #8
 800ad68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e1      	bne.n	800ad48 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3308      	adds	r3, #8
 800ada4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ada8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800adb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e3      	bne.n	800ad84 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add2:	e853 3f00 	ldrex	r3, [r3]
 800add6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800add8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adda:	f023 0310 	bic.w	r3, r3, #16
 800adde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adec:	65bb      	str	r3, [r7, #88]	; 0x58
 800adee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e4      	bne.n	800adca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fa f950 	bl	80050aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7f5 fc43 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae2a:	e0b9      	b.n	800afa0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 80ab 	beq.w	800afa4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800ae4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 80a6 	beq.w	800afa4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e4      	bne.n	800ae58 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3308      	adds	r3, #8
 800aeae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aeb2:	633a      	str	r2, [r7, #48]	; 0x30
 800aeb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e3      	bne.n	800ae8e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	e853 3f00 	ldrex	r3, [r3]
 800aee6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0310 	bic.w	r3, r3, #16
 800aeee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aefc:	61fb      	str	r3, [r7, #28]
 800aefe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	69b9      	ldr	r1, [r7, #24]
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	617b      	str	r3, [r7, #20]
   return(result);
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e4      	bne.n	800aeda <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7f5 fbc7 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af22:	e03f      	b.n	800afa4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00e      	beq.n	800af4e <HAL_UART_IRQHandler+0x56a>
 800af30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d008      	beq.n	800af4e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800af44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fe93 	bl	800bc72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af4c:	e02d      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af62:	2b00      	cmp	r3, #0
 800af64:	d008      	beq.n	800af78 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d01c      	beq.n	800afa8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
    }
    return;
 800af76:	e017      	b.n	800afa8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	d012      	beq.n	800afaa <HAL_UART_IRQHandler+0x5c6>
 800af84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00c      	beq.n	800afaa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fe44 	bl	800bc1e <UART_EndTransmit_IT>
    return;
 800af96:	e008      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
      return;
 800af98:	bf00      	nop
 800af9a:	e006      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
    return;
 800af9c:	bf00      	nop
 800af9e:	e004      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
      return;
 800afa0:	bf00      	nop
 800afa2:	e002      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
      return;
 800afa4:	bf00      	nop
 800afa6:	e000      	b.n	800afaa <HAL_UART_IRQHandler+0x5c6>
    return;
 800afa8:	bf00      	nop
  }

}
 800afaa:	37e8      	adds	r7, #232	; 0xe8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b02e:	f023 030c 	bic.w	r3, r3, #12
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6812      	ldr	r2, [r2, #0]
 800b036:	6979      	ldr	r1, [r7, #20]
 800b038:	430b      	orrs	r3, r1
 800b03a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	430a      	orrs	r2, r1
 800b074:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4aa7      	ldr	r2, [pc, #668]	; (800b318 <UART_SetConfig+0x318>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d120      	bne.n	800b0c2 <UART_SetConfig+0xc2>
 800b080:	4ba6      	ldr	r3, [pc, #664]	; (800b31c <UART_SetConfig+0x31c>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d817      	bhi.n	800b0bc <UART_SetConfig+0xbc>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <UART_SetConfig+0x94>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b7 	.word	0x0800b0b7
 800b0a0:	0800b0ab 	.word	0x0800b0ab
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	77fb      	strb	r3, [r7, #31]
 800b0a8:	e0b5      	b.n	800b216 <UART_SetConfig+0x216>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	77fb      	strb	r3, [r7, #31]
 800b0ae:	e0b2      	b.n	800b216 <UART_SetConfig+0x216>
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	77fb      	strb	r3, [r7, #31]
 800b0b4:	e0af      	b.n	800b216 <UART_SetConfig+0x216>
 800b0b6:	2308      	movs	r3, #8
 800b0b8:	77fb      	strb	r3, [r7, #31]
 800b0ba:	e0ac      	b.n	800b216 <UART_SetConfig+0x216>
 800b0bc:	2310      	movs	r3, #16
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e0a9      	b.n	800b216 <UART_SetConfig+0x216>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a96      	ldr	r2, [pc, #600]	; (800b320 <UART_SetConfig+0x320>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d124      	bne.n	800b116 <UART_SetConfig+0x116>
 800b0cc:	4b93      	ldr	r3, [pc, #588]	; (800b31c <UART_SetConfig+0x31c>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0d8:	d011      	beq.n	800b0fe <UART_SetConfig+0xfe>
 800b0da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0de:	d817      	bhi.n	800b110 <UART_SetConfig+0x110>
 800b0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e4:	d011      	beq.n	800b10a <UART_SetConfig+0x10a>
 800b0e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ea:	d811      	bhi.n	800b110 <UART_SetConfig+0x110>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <UART_SetConfig+0xf8>
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d006      	beq.n	800b104 <UART_SetConfig+0x104>
 800b0f6:	e00b      	b.n	800b110 <UART_SetConfig+0x110>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e08b      	b.n	800b216 <UART_SetConfig+0x216>
 800b0fe:	2302      	movs	r3, #2
 800b100:	77fb      	strb	r3, [r7, #31]
 800b102:	e088      	b.n	800b216 <UART_SetConfig+0x216>
 800b104:	2304      	movs	r3, #4
 800b106:	77fb      	strb	r3, [r7, #31]
 800b108:	e085      	b.n	800b216 <UART_SetConfig+0x216>
 800b10a:	2308      	movs	r3, #8
 800b10c:	77fb      	strb	r3, [r7, #31]
 800b10e:	e082      	b.n	800b216 <UART_SetConfig+0x216>
 800b110:	2310      	movs	r3, #16
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e07f      	b.n	800b216 <UART_SetConfig+0x216>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a82      	ldr	r2, [pc, #520]	; (800b324 <UART_SetConfig+0x324>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d124      	bne.n	800b16a <UART_SetConfig+0x16a>
 800b120:	4b7e      	ldr	r3, [pc, #504]	; (800b31c <UART_SetConfig+0x31c>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b128:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b12c:	d011      	beq.n	800b152 <UART_SetConfig+0x152>
 800b12e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b132:	d817      	bhi.n	800b164 <UART_SetConfig+0x164>
 800b134:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b138:	d011      	beq.n	800b15e <UART_SetConfig+0x15e>
 800b13a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b13e:	d811      	bhi.n	800b164 <UART_SetConfig+0x164>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <UART_SetConfig+0x14c>
 800b144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b148:	d006      	beq.n	800b158 <UART_SetConfig+0x158>
 800b14a:	e00b      	b.n	800b164 <UART_SetConfig+0x164>
 800b14c:	2300      	movs	r3, #0
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	e061      	b.n	800b216 <UART_SetConfig+0x216>
 800b152:	2302      	movs	r3, #2
 800b154:	77fb      	strb	r3, [r7, #31]
 800b156:	e05e      	b.n	800b216 <UART_SetConfig+0x216>
 800b158:	2304      	movs	r3, #4
 800b15a:	77fb      	strb	r3, [r7, #31]
 800b15c:	e05b      	b.n	800b216 <UART_SetConfig+0x216>
 800b15e:	2308      	movs	r3, #8
 800b160:	77fb      	strb	r3, [r7, #31]
 800b162:	e058      	b.n	800b216 <UART_SetConfig+0x216>
 800b164:	2310      	movs	r3, #16
 800b166:	77fb      	strb	r3, [r7, #31]
 800b168:	e055      	b.n	800b216 <UART_SetConfig+0x216>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a6e      	ldr	r2, [pc, #440]	; (800b328 <UART_SetConfig+0x328>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d124      	bne.n	800b1be <UART_SetConfig+0x1be>
 800b174:	4b69      	ldr	r3, [pc, #420]	; (800b31c <UART_SetConfig+0x31c>)
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b17c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b180:	d011      	beq.n	800b1a6 <UART_SetConfig+0x1a6>
 800b182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b186:	d817      	bhi.n	800b1b8 <UART_SetConfig+0x1b8>
 800b188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b18c:	d011      	beq.n	800b1b2 <UART_SetConfig+0x1b2>
 800b18e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b192:	d811      	bhi.n	800b1b8 <UART_SetConfig+0x1b8>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <UART_SetConfig+0x1a0>
 800b198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b19c:	d006      	beq.n	800b1ac <UART_SetConfig+0x1ac>
 800b19e:	e00b      	b.n	800b1b8 <UART_SetConfig+0x1b8>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e037      	b.n	800b216 <UART_SetConfig+0x216>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	77fb      	strb	r3, [r7, #31]
 800b1aa:	e034      	b.n	800b216 <UART_SetConfig+0x216>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	77fb      	strb	r3, [r7, #31]
 800b1b0:	e031      	b.n	800b216 <UART_SetConfig+0x216>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	77fb      	strb	r3, [r7, #31]
 800b1b6:	e02e      	b.n	800b216 <UART_SetConfig+0x216>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e02b      	b.n	800b216 <UART_SetConfig+0x216>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a5a      	ldr	r2, [pc, #360]	; (800b32c <UART_SetConfig+0x32c>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d124      	bne.n	800b212 <UART_SetConfig+0x212>
 800b1c8:	4b54      	ldr	r3, [pc, #336]	; (800b31c <UART_SetConfig+0x31c>)
 800b1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b1d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b1d4:	d011      	beq.n	800b1fa <UART_SetConfig+0x1fa>
 800b1d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b1da:	d817      	bhi.n	800b20c <UART_SetConfig+0x20c>
 800b1dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e0:	d011      	beq.n	800b206 <UART_SetConfig+0x206>
 800b1e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e6:	d811      	bhi.n	800b20c <UART_SetConfig+0x20c>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <UART_SetConfig+0x1f4>
 800b1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1f0:	d006      	beq.n	800b200 <UART_SetConfig+0x200>
 800b1f2:	e00b      	b.n	800b20c <UART_SetConfig+0x20c>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	77fb      	strb	r3, [r7, #31]
 800b1f8:	e00d      	b.n	800b216 <UART_SetConfig+0x216>
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	77fb      	strb	r3, [r7, #31]
 800b1fe:	e00a      	b.n	800b216 <UART_SetConfig+0x216>
 800b200:	2304      	movs	r3, #4
 800b202:	77fb      	strb	r3, [r7, #31]
 800b204:	e007      	b.n	800b216 <UART_SetConfig+0x216>
 800b206:	2308      	movs	r3, #8
 800b208:	77fb      	strb	r3, [r7, #31]
 800b20a:	e004      	b.n	800b216 <UART_SetConfig+0x216>
 800b20c:	2310      	movs	r3, #16
 800b20e:	77fb      	strb	r3, [r7, #31]
 800b210:	e001      	b.n	800b216 <UART_SetConfig+0x216>
 800b212:	2310      	movs	r3, #16
 800b214:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21e:	d15b      	bne.n	800b2d8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800b220:	7ffb      	ldrb	r3, [r7, #31]
 800b222:	2b08      	cmp	r3, #8
 800b224:	d827      	bhi.n	800b276 <UART_SetConfig+0x276>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0x22c>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	0800b277 	.word	0x0800b277
 800b23c:	0800b267 	.word	0x0800b267
 800b240:	0800b277 	.word	0x0800b277
 800b244:	0800b277 	.word	0x0800b277
 800b248:	0800b277 	.word	0x0800b277
 800b24c:	0800b26f 	.word	0x0800b26f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b250:	f7fc fe6e 	bl	8007f30 <HAL_RCC_GetPCLK1Freq>
 800b254:	61b8      	str	r0, [r7, #24]
        break;
 800b256:	e013      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b258:	f7fc fe8c 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 800b25c:	61b8      	str	r0, [r7, #24]
        break;
 800b25e:	e00f      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b260:	4b33      	ldr	r3, [pc, #204]	; (800b330 <UART_SetConfig+0x330>)
 800b262:	61bb      	str	r3, [r7, #24]
        break;
 800b264:	e00c      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b266:	f7fc fded 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 800b26a:	61b8      	str	r0, [r7, #24]
        break;
 800b26c:	e008      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b272:	61bb      	str	r3, [r7, #24]
        break;
 800b274:	e004      	b.n	800b280 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	77bb      	strb	r3, [r7, #30]
        break;
 800b27e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 8082 	beq.w	800b38c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	005a      	lsls	r2, r3, #1
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	441a      	add	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d916      	bls.n	800b2d2 <UART_SetConfig+0x2d2>
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2aa:	d212      	bcs.n	800b2d2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f023 030f 	bic.w	r3, r3, #15
 800b2b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f003 0307 	and.w	r3, r3, #7
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	89fa      	ldrh	r2, [r7, #14]
 800b2ce:	60da      	str	r2, [r3, #12]
 800b2d0:	e05c      	b.n	800b38c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	77bb      	strb	r3, [r7, #30]
 800b2d6:	e059      	b.n	800b38c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2d8:	7ffb      	ldrb	r3, [r7, #31]
 800b2da:	2b08      	cmp	r3, #8
 800b2dc:	d835      	bhi.n	800b34a <UART_SetConfig+0x34a>
 800b2de:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <UART_SetConfig+0x2e4>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b311 	.word	0x0800b311
 800b2ec:	0800b335 	.word	0x0800b335
 800b2f0:	0800b34b 	.word	0x0800b34b
 800b2f4:	0800b33b 	.word	0x0800b33b
 800b2f8:	0800b34b 	.word	0x0800b34b
 800b2fc:	0800b34b 	.word	0x0800b34b
 800b300:	0800b34b 	.word	0x0800b34b
 800b304:	0800b343 	.word	0x0800b343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b308:	f7fc fe12 	bl	8007f30 <HAL_RCC_GetPCLK1Freq>
 800b30c:	61b8      	str	r0, [r7, #24]
        break;
 800b30e:	e021      	b.n	800b354 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b310:	f7fc fe30 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 800b314:	61b8      	str	r0, [r7, #24]
        break;
 800b316:	e01d      	b.n	800b354 <UART_SetConfig+0x354>
 800b318:	40013800 	.word	0x40013800
 800b31c:	40021000 	.word	0x40021000
 800b320:	40004400 	.word	0x40004400
 800b324:	40004800 	.word	0x40004800
 800b328:	40004c00 	.word	0x40004c00
 800b32c:	40005000 	.word	0x40005000
 800b330:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b334:	4b1b      	ldr	r3, [pc, #108]	; (800b3a4 <UART_SetConfig+0x3a4>)
 800b336:	61bb      	str	r3, [r7, #24]
        break;
 800b338:	e00c      	b.n	800b354 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b33a:	f7fc fd83 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 800b33e:	61b8      	str	r0, [r7, #24]
        break;
 800b340:	e008      	b.n	800b354 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b346:	61bb      	str	r3, [r7, #24]
        break;
 800b348:	e004      	b.n	800b354 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	77bb      	strb	r3, [r7, #30]
        break;
 800b352:	bf00      	nop
    }

    if (pclk != 0U)
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d018      	beq.n	800b38c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	085a      	lsrs	r2, r3, #1
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	441a      	add	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b0f      	cmp	r3, #15
 800b372:	d909      	bls.n	800b388 <UART_SetConfig+0x388>
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b37a:	d205      	bcs.n	800b388 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	b29a      	uxth	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60da      	str	r2, [r3, #12]
 800b386:	e001      	b.n	800b38c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b398:	7fbb      	ldrb	r3, [r7, #30]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	007a1200 	.word	0x007a1200

0800b3a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	f003 0302 	and.w	r3, r3, #2
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	f003 0320 	and.w	r3, r3, #32
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d01a      	beq.n	800b4be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a6:	d10a      	bne.n	800b4be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	605a      	str	r2, [r3, #4]
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b098      	sub	sp, #96	; 0x60
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4fc:	f7f7 fcd4 	bl	8002ea8 <HAL_GetTick>
 800b500:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0308 	and.w	r3, r3, #8
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	d12e      	bne.n	800b56e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b518:	2200      	movs	r2, #0
 800b51a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f88c 	bl	800b63c <UART_WaitOnFlagUntilTimeout>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d021      	beq.n	800b56e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53e:	653b      	str	r3, [r7, #80]	; 0x50
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
 800b54a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e6      	bne.n	800b52a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e062      	b.n	800b634 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d149      	bne.n	800b610 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b57c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b584:	2200      	movs	r2, #0
 800b586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f856 	bl	800b63c <UART_WaitOnFlagUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d03c      	beq.n	800b610 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	e853 3f00 	ldrex	r3, [r3]
 800b5a2:	623b      	str	r3, [r7, #32]
   return(result);
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b4:	633b      	str	r3, [r7, #48]	; 0x30
 800b5b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5bc:	e841 2300 	strex	r3, r2, [r1]
 800b5c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e6      	bne.n	800b596 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0301 	bic.w	r3, r3, #1
 800b5de:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5e8:	61fa      	str	r2, [r7, #28]
 800b5ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	69b9      	ldr	r1, [r7, #24]
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e5      	bne.n	800b5c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2220      	movs	r2, #32
 800b600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e011      	b.n	800b634 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2220      	movs	r2, #32
 800b61a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3758      	adds	r7, #88	; 0x58
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64c:	e049      	b.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b654:	d045      	beq.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b656:	f7f7 fc27 	bl	8002ea8 <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	429a      	cmp	r2, r3
 800b664:	d302      	bcc.n	800b66c <UART_WaitOnFlagUntilTimeout+0x30>
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e048      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 0304 	and.w	r3, r3, #4
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d031      	beq.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	f003 0308 	and.w	r3, r3, #8
 800b688:	2b08      	cmp	r3, #8
 800b68a:	d110      	bne.n	800b6ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2208      	movs	r2, #8
 800b692:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 f8ff 	bl	800b898 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2208      	movs	r2, #8
 800b69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e029      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6bc:	d111      	bne.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f8e5 	bl	800b898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e00f      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69da      	ldr	r2, [r3, #28]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	bf0c      	ite	eq
 800b6f2:	2301      	moveq	r3, #1
 800b6f4:	2300      	movne	r3, #0
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d0a6      	beq.n	800b64e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b096      	sub	sp, #88	; 0x58
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	88fa      	ldrh	r2, [r7, #6]
 800b724:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2222      	movs	r2, #34	; 0x22
 800b734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d028      	beq.n	800b792 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b744:	4a3e      	ldr	r2, [pc, #248]	; (800b840 <UART_Start_Receive_DMA+0x134>)
 800b746:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b74c:	4a3d      	ldr	r2, [pc, #244]	; (800b844 <UART_Start_Receive_DMA+0x138>)
 800b74e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b754:	4a3c      	ldr	r2, [pc, #240]	; (800b848 <UART_Start_Receive_DMA+0x13c>)
 800b756:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b75c:	2200      	movs	r2, #0
 800b75e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3324      	adds	r3, #36	; 0x24
 800b76a:	4619      	mov	r1, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b770:	461a      	mov	r2, r3
 800b772:	88fb      	ldrh	r3, [r7, #6]
 800b774:	f7f9 fc3a 	bl	8004fec <HAL_DMA_Start_IT>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2210      	movs	r2, #16
 800b782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e051      	b.n	800b836 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d018      	beq.n	800b7cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	e853 3f00 	ldrex	r3, [r3]
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ae:	657b      	str	r3, [r7, #84]	; 0x54
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7c0:	e841 2300 	strex	r3, r2, [r1]
 800b7c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e6      	bne.n	800b79a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3308      	adds	r3, #8
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	e853 3f00 	ldrex	r3, [r3]
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	653b      	str	r3, [r7, #80]	; 0x50
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7ec:	637a      	str	r2, [r7, #52]	; 0x34
 800b7ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7f4:	e841 2300 	strex	r3, r2, [r1]
 800b7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e5      	bne.n	800b7cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3308      	adds	r3, #8
 800b806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	e853 3f00 	ldrex	r3, [r3]
 800b80e:	613b      	str	r3, [r7, #16]
   return(result);
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b816:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3308      	adds	r3, #8
 800b81e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b820:	623a      	str	r2, [r7, #32]
 800b822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	69f9      	ldr	r1, [r7, #28]
 800b826:	6a3a      	ldr	r2, [r7, #32]
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e5      	bne.n	800b800 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3758      	adds	r7, #88	; 0x58
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	0800ba11 	.word	0x0800ba11
 800b844:	0800bb37 	.word	0x0800bb37
 800b848:	0800bb75 	.word	0x0800bb75

0800b84c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b089      	sub	sp, #36	; 0x24
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	60bb      	str	r3, [r7, #8]
   return(result);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b868:	61fb      	str	r3, [r7, #28]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	461a      	mov	r2, r3
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	61bb      	str	r3, [r7, #24]
 800b874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6979      	ldr	r1, [r7, #20]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	613b      	str	r3, [r7, #16]
   return(result);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e6      	bne.n	800b854 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b88c:	bf00      	nop
 800b88e:	3724      	adds	r7, #36	; 0x24
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b898:	b480      	push	{r7}
 800b89a:	b095      	sub	sp, #84	; 0x54
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8c6:	e841 2300 	strex	r3, r2, [r1]
 800b8ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e6      	bne.n	800b8a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	f023 0301 	bic.w	r3, r3, #1
 800b8e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e5      	bne.n	800b8d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d118      	bne.n	800b940 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f023 0310 	bic.w	r3, r3, #16
 800b922:	647b      	str	r3, [r7, #68]	; 0x44
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	461a      	mov	r2, r3
 800b92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b92c:	61bb      	str	r3, [r7, #24]
 800b92e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	6979      	ldr	r1, [r7, #20]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	613b      	str	r3, [r7, #16]
   return(result);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e6      	bne.n	800b90e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2220      	movs	r2, #32
 800b944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b954:	bf00      	nop
 800b956:	3754      	adds	r7, #84	; 0x54
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b090      	sub	sp, #64	; 0x40
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	2b20      	cmp	r3, #32
 800b974:	d037      	beq.n	800b9e6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b978:	2200      	movs	r2, #0
 800b97a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	e853 3f00 	ldrex	r3, [r3]
 800b98c:	623b      	str	r3, [r7, #32]
   return(result);
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b994:	63bb      	str	r3, [r7, #56]	; 0x38
 800b996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3308      	adds	r3, #8
 800b99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b99e:	633a      	str	r2, [r7, #48]	; 0x30
 800b9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e5      	bne.n	800b97e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	e853 3f00 	ldrex	r3, [r3]
 800b9be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d0:	61fb      	str	r3, [r7, #28]
 800b9d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d4:	69b9      	ldr	r1, [r7, #24]
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	e841 2300 	strex	r3, r2, [r1]
 800b9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e6      	bne.n	800b9b2 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9e4:	e002      	b.n	800b9ec <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800b9e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b9e8:	f7f6 fab0 	bl	8001f4c <HAL_UART_TxCpltCallback>
}
 800b9ec:	bf00      	nop
 800b9ee:	3740      	adds	r7, #64	; 0x40
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7ff fad4 	bl	800afb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b09c      	sub	sp, #112	; 0x70
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	2b20      	cmp	r3, #32
 800ba24:	d071      	beq.n	800bb0a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800ba26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e6      	bne.n	800ba2e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3308      	adds	r3, #8
 800ba66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba72:	f023 0301 	bic.w	r3, r3, #1
 800ba76:	667b      	str	r3, [r7, #100]	; 0x64
 800ba78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3308      	adds	r3, #8
 800ba7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba80:	647a      	str	r2, [r7, #68]	; 0x44
 800ba82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e5      	bne.n	800ba60 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3308      	adds	r3, #8
 800ba9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	623b      	str	r3, [r7, #32]
   return(result);
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baaa:	663b      	str	r3, [r7, #96]	; 0x60
 800baac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3308      	adds	r3, #8
 800bab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bab4:	633a      	str	r2, [r7, #48]	; 0x30
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800baba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e5      	bne.n	800ba94 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baca:	2220      	movs	r2, #32
 800bacc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d118      	bne.n	800bb0a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f023 0310 	bic.w	r3, r3, #16
 800baec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baf6:	61fb      	str	r3, [r7, #28]
 800baf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	69b9      	ldr	r1, [r7, #24]
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	617b      	str	r3, [r7, #20]
   return(result);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e6      	bne.n	800bad8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d107      	bne.n	800bb28 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb1e:	4619      	mov	r1, r3
 800bb20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb22:	f7f4 fdc5 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb26:	e002      	b.n	800bb2e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bb28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb2a:	f7ff fa4b 	bl	800afc4 <HAL_UART_RxCpltCallback>
}
 800bb2e:	bf00      	nop
 800bb30:	3770      	adds	r7, #112	; 0x70
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d109      	bne.n	800bb66 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb58:	085b      	lsrs	r3, r3, #1
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7f4 fda6 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb64:	e002      	b.n	800bb6c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff fa36 	bl	800afd8 <HAL_UART_RxHalfCpltCallback>
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9a:	2b80      	cmp	r3, #128	; 0x80
 800bb9c:	d109      	bne.n	800bbb2 <UART_DMAError+0x3e>
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b21      	cmp	r3, #33	; 0x21
 800bba2:	d106      	bne.n	800bbb2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bbac:	6978      	ldr	r0, [r7, #20]
 800bbae:	f7ff fe4d 	bl	800b84c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbc:	2b40      	cmp	r3, #64	; 0x40
 800bbbe:	d109      	bne.n	800bbd4 <UART_DMAError+0x60>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b22      	cmp	r3, #34	; 0x22
 800bbc4:	d106      	bne.n	800bbd4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bbce:	6978      	ldr	r0, [r7, #20]
 800bbd0:	f7ff fe62 	bl	800b898 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbda:	f043 0210 	orr.w	r2, r3, #16
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbe4:	6978      	ldr	r0, [r7, #20]
 800bbe6:	f7ff fa01 	bl	800afec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbea:	bf00      	nop
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff f9eb 	bl	800afec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b088      	sub	sp, #32
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc3a:	61fb      	str	r3, [r7, #28]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	61bb      	str	r3, [r7, #24]
 800bc46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6979      	ldr	r1, [r7, #20]
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	613b      	str	r3, [r7, #16]
   return(result);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e6      	bne.n	800bc26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7f6 f971 	bl	8001f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc6a:	bf00      	nop
 800bc6c:	3720      	adds	r7, #32
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc7a:	bf00      	nop
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b08c      	sub	sp, #48	; 0x30
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d142      	bne.n	800bd24 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bca4:	88fb      	ldrh	r3, [r7, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e03b      	b.n	800bd26 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bcba:	88fb      	ldrh	r3, [r7, #6]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fd23 	bl	800b70c <UART_Start_Receive_DMA>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d124      	bne.n	800bd1e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d11d      	bne.n	800bd18 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2210      	movs	r2, #16
 800bce2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	617b      	str	r3, [r7, #20]
   return(result);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f043 0310 	orr.w	r3, r3, #16
 800bcf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
 800bd04:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	6a39      	ldr	r1, [r7, #32]
 800bd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e6      	bne.n	800bce4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bd16:	e002      	b.n	800bd1e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bd1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd22:	e000      	b.n	800bd26 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd24:	2302      	movs	r3, #2
  }
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3730      	adds	r7, #48	; 0x30
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <siprintf>:
 800bd30:	b40e      	push	{r1, r2, r3}
 800bd32:	b500      	push	{lr}
 800bd34:	b09c      	sub	sp, #112	; 0x70
 800bd36:	ab1d      	add	r3, sp, #116	; 0x74
 800bd38:	9002      	str	r0, [sp, #8]
 800bd3a:	9006      	str	r0, [sp, #24]
 800bd3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd40:	4809      	ldr	r0, [pc, #36]	; (800bd68 <siprintf+0x38>)
 800bd42:	9107      	str	r1, [sp, #28]
 800bd44:	9104      	str	r1, [sp, #16]
 800bd46:	4909      	ldr	r1, [pc, #36]	; (800bd6c <siprintf+0x3c>)
 800bd48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4c:	9105      	str	r1, [sp, #20]
 800bd4e:	6800      	ldr	r0, [r0, #0]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	a902      	add	r1, sp, #8
 800bd54:	f000 f992 	bl	800c07c <_svfiprintf_r>
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
 800bd5e:	b01c      	add	sp, #112	; 0x70
 800bd60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd64:	b003      	add	sp, #12
 800bd66:	4770      	bx	lr
 800bd68:	20000064 	.word	0x20000064
 800bd6c:	ffff0208 	.word	0xffff0208

0800bd70 <memset>:
 800bd70:	4402      	add	r2, r0
 800bd72:	4603      	mov	r3, r0
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d100      	bne.n	800bd7a <memset+0xa>
 800bd78:	4770      	bx	lr
 800bd7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd7e:	e7f9      	b.n	800bd74 <memset+0x4>

0800bd80 <__errno>:
 800bd80:	4b01      	ldr	r3, [pc, #4]	; (800bd88 <__errno+0x8>)
 800bd82:	6818      	ldr	r0, [r3, #0]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20000064 	.word	0x20000064

0800bd8c <__libc_init_array>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4d0d      	ldr	r5, [pc, #52]	; (800bdc4 <__libc_init_array+0x38>)
 800bd90:	4c0d      	ldr	r4, [pc, #52]	; (800bdc8 <__libc_init_array+0x3c>)
 800bd92:	1b64      	subs	r4, r4, r5
 800bd94:	10a4      	asrs	r4, r4, #2
 800bd96:	2600      	movs	r6, #0
 800bd98:	42a6      	cmp	r6, r4
 800bd9a:	d109      	bne.n	800bdb0 <__libc_init_array+0x24>
 800bd9c:	4d0b      	ldr	r5, [pc, #44]	; (800bdcc <__libc_init_array+0x40>)
 800bd9e:	4c0c      	ldr	r4, [pc, #48]	; (800bdd0 <__libc_init_array+0x44>)
 800bda0:	f000 fc6a 	bl	800c678 <_init>
 800bda4:	1b64      	subs	r4, r4, r5
 800bda6:	10a4      	asrs	r4, r4, #2
 800bda8:	2600      	movs	r6, #0
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	d105      	bne.n	800bdba <__libc_init_array+0x2e>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb4:	4798      	blx	r3
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	e7ee      	b.n	800bd98 <__libc_init_array+0xc>
 800bdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbe:	4798      	blx	r3
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	e7f2      	b.n	800bdaa <__libc_init_array+0x1e>
 800bdc4:	0800c7a4 	.word	0x0800c7a4
 800bdc8:	0800c7a4 	.word	0x0800c7a4
 800bdcc:	0800c7a4 	.word	0x0800c7a4
 800bdd0:	0800c7a8 	.word	0x0800c7a8

0800bdd4 <__retarget_lock_acquire_recursive>:
 800bdd4:	4770      	bx	lr

0800bdd6 <__retarget_lock_release_recursive>:
 800bdd6:	4770      	bx	lr

0800bdd8 <_free_r>:
 800bdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdda:	2900      	cmp	r1, #0
 800bddc:	d044      	beq.n	800be68 <_free_r+0x90>
 800bdde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde2:	9001      	str	r0, [sp, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f1a1 0404 	sub.w	r4, r1, #4
 800bdea:	bfb8      	it	lt
 800bdec:	18e4      	addlt	r4, r4, r3
 800bdee:	f000 f8df 	bl	800bfb0 <__malloc_lock>
 800bdf2:	4a1e      	ldr	r2, [pc, #120]	; (800be6c <_free_r+0x94>)
 800bdf4:	9801      	ldr	r0, [sp, #4]
 800bdf6:	6813      	ldr	r3, [r2, #0]
 800bdf8:	b933      	cbnz	r3, 800be08 <_free_r+0x30>
 800bdfa:	6063      	str	r3, [r4, #4]
 800bdfc:	6014      	str	r4, [r2, #0]
 800bdfe:	b003      	add	sp, #12
 800be00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be04:	f000 b8da 	b.w	800bfbc <__malloc_unlock>
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d908      	bls.n	800be1e <_free_r+0x46>
 800be0c:	6825      	ldr	r5, [r4, #0]
 800be0e:	1961      	adds	r1, r4, r5
 800be10:	428b      	cmp	r3, r1
 800be12:	bf01      	itttt	eq
 800be14:	6819      	ldreq	r1, [r3, #0]
 800be16:	685b      	ldreq	r3, [r3, #4]
 800be18:	1949      	addeq	r1, r1, r5
 800be1a:	6021      	streq	r1, [r4, #0]
 800be1c:	e7ed      	b.n	800bdfa <_free_r+0x22>
 800be1e:	461a      	mov	r2, r3
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	b10b      	cbz	r3, 800be28 <_free_r+0x50>
 800be24:	42a3      	cmp	r3, r4
 800be26:	d9fa      	bls.n	800be1e <_free_r+0x46>
 800be28:	6811      	ldr	r1, [r2, #0]
 800be2a:	1855      	adds	r5, r2, r1
 800be2c:	42a5      	cmp	r5, r4
 800be2e:	d10b      	bne.n	800be48 <_free_r+0x70>
 800be30:	6824      	ldr	r4, [r4, #0]
 800be32:	4421      	add	r1, r4
 800be34:	1854      	adds	r4, r2, r1
 800be36:	42a3      	cmp	r3, r4
 800be38:	6011      	str	r1, [r2, #0]
 800be3a:	d1e0      	bne.n	800bdfe <_free_r+0x26>
 800be3c:	681c      	ldr	r4, [r3, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	6053      	str	r3, [r2, #4]
 800be42:	440c      	add	r4, r1
 800be44:	6014      	str	r4, [r2, #0]
 800be46:	e7da      	b.n	800bdfe <_free_r+0x26>
 800be48:	d902      	bls.n	800be50 <_free_r+0x78>
 800be4a:	230c      	movs	r3, #12
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	e7d6      	b.n	800bdfe <_free_r+0x26>
 800be50:	6825      	ldr	r5, [r4, #0]
 800be52:	1961      	adds	r1, r4, r5
 800be54:	428b      	cmp	r3, r1
 800be56:	bf04      	itt	eq
 800be58:	6819      	ldreq	r1, [r3, #0]
 800be5a:	685b      	ldreq	r3, [r3, #4]
 800be5c:	6063      	str	r3, [r4, #4]
 800be5e:	bf04      	itt	eq
 800be60:	1949      	addeq	r1, r1, r5
 800be62:	6021      	streq	r1, [r4, #0]
 800be64:	6054      	str	r4, [r2, #4]
 800be66:	e7ca      	b.n	800bdfe <_free_r+0x26>
 800be68:	b003      	add	sp, #12
 800be6a:	bd30      	pop	{r4, r5, pc}
 800be6c:	20000834 	.word	0x20000834

0800be70 <sbrk_aligned>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4e0e      	ldr	r6, [pc, #56]	; (800beac <sbrk_aligned+0x3c>)
 800be74:	460c      	mov	r4, r1
 800be76:	6831      	ldr	r1, [r6, #0]
 800be78:	4605      	mov	r5, r0
 800be7a:	b911      	cbnz	r1, 800be82 <sbrk_aligned+0x12>
 800be7c:	f000 fba6 	bl	800c5cc <_sbrk_r>
 800be80:	6030      	str	r0, [r6, #0]
 800be82:	4621      	mov	r1, r4
 800be84:	4628      	mov	r0, r5
 800be86:	f000 fba1 	bl	800c5cc <_sbrk_r>
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	d00a      	beq.n	800bea4 <sbrk_aligned+0x34>
 800be8e:	1cc4      	adds	r4, r0, #3
 800be90:	f024 0403 	bic.w	r4, r4, #3
 800be94:	42a0      	cmp	r0, r4
 800be96:	d007      	beq.n	800bea8 <sbrk_aligned+0x38>
 800be98:	1a21      	subs	r1, r4, r0
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 fb96 	bl	800c5cc <_sbrk_r>
 800bea0:	3001      	adds	r0, #1
 800bea2:	d101      	bne.n	800bea8 <sbrk_aligned+0x38>
 800bea4:	f04f 34ff 	mov.w	r4, #4294967295
 800bea8:	4620      	mov	r0, r4
 800beaa:	bd70      	pop	{r4, r5, r6, pc}
 800beac:	20000838 	.word	0x20000838

0800beb0 <_malloc_r>:
 800beb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb4:	1ccd      	adds	r5, r1, #3
 800beb6:	f025 0503 	bic.w	r5, r5, #3
 800beba:	3508      	adds	r5, #8
 800bebc:	2d0c      	cmp	r5, #12
 800bebe:	bf38      	it	cc
 800bec0:	250c      	movcc	r5, #12
 800bec2:	2d00      	cmp	r5, #0
 800bec4:	4607      	mov	r7, r0
 800bec6:	db01      	blt.n	800becc <_malloc_r+0x1c>
 800bec8:	42a9      	cmp	r1, r5
 800beca:	d905      	bls.n	800bed8 <_malloc_r+0x28>
 800becc:	230c      	movs	r3, #12
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	2600      	movs	r6, #0
 800bed2:	4630      	mov	r0, r6
 800bed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bfac <_malloc_r+0xfc>
 800bedc:	f000 f868 	bl	800bfb0 <__malloc_lock>
 800bee0:	f8d8 3000 	ldr.w	r3, [r8]
 800bee4:	461c      	mov	r4, r3
 800bee6:	bb5c      	cbnz	r4, 800bf40 <_malloc_r+0x90>
 800bee8:	4629      	mov	r1, r5
 800beea:	4638      	mov	r0, r7
 800beec:	f7ff ffc0 	bl	800be70 <sbrk_aligned>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	4604      	mov	r4, r0
 800bef4:	d155      	bne.n	800bfa2 <_malloc_r+0xf2>
 800bef6:	f8d8 4000 	ldr.w	r4, [r8]
 800befa:	4626      	mov	r6, r4
 800befc:	2e00      	cmp	r6, #0
 800befe:	d145      	bne.n	800bf8c <_malloc_r+0xdc>
 800bf00:	2c00      	cmp	r4, #0
 800bf02:	d048      	beq.n	800bf96 <_malloc_r+0xe6>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	4631      	mov	r1, r6
 800bf08:	4638      	mov	r0, r7
 800bf0a:	eb04 0903 	add.w	r9, r4, r3
 800bf0e:	f000 fb5d 	bl	800c5cc <_sbrk_r>
 800bf12:	4581      	cmp	r9, r0
 800bf14:	d13f      	bne.n	800bf96 <_malloc_r+0xe6>
 800bf16:	6821      	ldr	r1, [r4, #0]
 800bf18:	1a6d      	subs	r5, r5, r1
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff ffa7 	bl	800be70 <sbrk_aligned>
 800bf22:	3001      	adds	r0, #1
 800bf24:	d037      	beq.n	800bf96 <_malloc_r+0xe6>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	442b      	add	r3, r5
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d038      	beq.n	800bfa6 <_malloc_r+0xf6>
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	42a2      	cmp	r2, r4
 800bf38:	d12b      	bne.n	800bf92 <_malloc_r+0xe2>
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	605a      	str	r2, [r3, #4]
 800bf3e:	e00f      	b.n	800bf60 <_malloc_r+0xb0>
 800bf40:	6822      	ldr	r2, [r4, #0]
 800bf42:	1b52      	subs	r2, r2, r5
 800bf44:	d41f      	bmi.n	800bf86 <_malloc_r+0xd6>
 800bf46:	2a0b      	cmp	r2, #11
 800bf48:	d917      	bls.n	800bf7a <_malloc_r+0xca>
 800bf4a:	1961      	adds	r1, r4, r5
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	6025      	str	r5, [r4, #0]
 800bf50:	bf18      	it	ne
 800bf52:	6059      	strne	r1, [r3, #4]
 800bf54:	6863      	ldr	r3, [r4, #4]
 800bf56:	bf08      	it	eq
 800bf58:	f8c8 1000 	streq.w	r1, [r8]
 800bf5c:	5162      	str	r2, [r4, r5]
 800bf5e:	604b      	str	r3, [r1, #4]
 800bf60:	4638      	mov	r0, r7
 800bf62:	f104 060b 	add.w	r6, r4, #11
 800bf66:	f000 f829 	bl	800bfbc <__malloc_unlock>
 800bf6a:	f026 0607 	bic.w	r6, r6, #7
 800bf6e:	1d23      	adds	r3, r4, #4
 800bf70:	1af2      	subs	r2, r6, r3
 800bf72:	d0ae      	beq.n	800bed2 <_malloc_r+0x22>
 800bf74:	1b9b      	subs	r3, r3, r6
 800bf76:	50a3      	str	r3, [r4, r2]
 800bf78:	e7ab      	b.n	800bed2 <_malloc_r+0x22>
 800bf7a:	42a3      	cmp	r3, r4
 800bf7c:	6862      	ldr	r2, [r4, #4]
 800bf7e:	d1dd      	bne.n	800bf3c <_malloc_r+0x8c>
 800bf80:	f8c8 2000 	str.w	r2, [r8]
 800bf84:	e7ec      	b.n	800bf60 <_malloc_r+0xb0>
 800bf86:	4623      	mov	r3, r4
 800bf88:	6864      	ldr	r4, [r4, #4]
 800bf8a:	e7ac      	b.n	800bee6 <_malloc_r+0x36>
 800bf8c:	4634      	mov	r4, r6
 800bf8e:	6876      	ldr	r6, [r6, #4]
 800bf90:	e7b4      	b.n	800befc <_malloc_r+0x4c>
 800bf92:	4613      	mov	r3, r2
 800bf94:	e7cc      	b.n	800bf30 <_malloc_r+0x80>
 800bf96:	230c      	movs	r3, #12
 800bf98:	603b      	str	r3, [r7, #0]
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f000 f80e 	bl	800bfbc <__malloc_unlock>
 800bfa0:	e797      	b.n	800bed2 <_malloc_r+0x22>
 800bfa2:	6025      	str	r5, [r4, #0]
 800bfa4:	e7dc      	b.n	800bf60 <_malloc_r+0xb0>
 800bfa6:	605b      	str	r3, [r3, #4]
 800bfa8:	deff      	udf	#255	; 0xff
 800bfaa:	bf00      	nop
 800bfac:	20000834 	.word	0x20000834

0800bfb0 <__malloc_lock>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	; (800bfb8 <__malloc_lock+0x8>)
 800bfb2:	f7ff bf0f 	b.w	800bdd4 <__retarget_lock_acquire_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	20000830 	.word	0x20000830

0800bfbc <__malloc_unlock>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__malloc_unlock+0x8>)
 800bfbe:	f7ff bf0a 	b.w	800bdd6 <__retarget_lock_release_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	20000830 	.word	0x20000830

0800bfc8 <__ssputs_r>:
 800bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	688e      	ldr	r6, [r1, #8]
 800bfce:	461f      	mov	r7, r3
 800bfd0:	42be      	cmp	r6, r7
 800bfd2:	680b      	ldr	r3, [r1, #0]
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	4690      	mov	r8, r2
 800bfda:	d82c      	bhi.n	800c036 <__ssputs_r+0x6e>
 800bfdc:	898a      	ldrh	r2, [r1, #12]
 800bfde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfe2:	d026      	beq.n	800c032 <__ssputs_r+0x6a>
 800bfe4:	6965      	ldr	r5, [r4, #20]
 800bfe6:	6909      	ldr	r1, [r1, #16]
 800bfe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfec:	eba3 0901 	sub.w	r9, r3, r1
 800bff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bff4:	1c7b      	adds	r3, r7, #1
 800bff6:	444b      	add	r3, r9
 800bff8:	106d      	asrs	r5, r5, #1
 800bffa:	429d      	cmp	r5, r3
 800bffc:	bf38      	it	cc
 800bffe:	461d      	movcc	r5, r3
 800c000:	0553      	lsls	r3, r2, #21
 800c002:	d527      	bpl.n	800c054 <__ssputs_r+0x8c>
 800c004:	4629      	mov	r1, r5
 800c006:	f7ff ff53 	bl	800beb0 <_malloc_r>
 800c00a:	4606      	mov	r6, r0
 800c00c:	b360      	cbz	r0, 800c068 <__ssputs_r+0xa0>
 800c00e:	6921      	ldr	r1, [r4, #16]
 800c010:	464a      	mov	r2, r9
 800c012:	f000 faeb 	bl	800c5ec <memcpy>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6126      	str	r6, [r4, #16]
 800c024:	6165      	str	r5, [r4, #20]
 800c026:	444e      	add	r6, r9
 800c028:	eba5 0509 	sub.w	r5, r5, r9
 800c02c:	6026      	str	r6, [r4, #0]
 800c02e:	60a5      	str	r5, [r4, #8]
 800c030:	463e      	mov	r6, r7
 800c032:	42be      	cmp	r6, r7
 800c034:	d900      	bls.n	800c038 <__ssputs_r+0x70>
 800c036:	463e      	mov	r6, r7
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	4632      	mov	r2, r6
 800c03c:	4641      	mov	r1, r8
 800c03e:	f000 faab 	bl	800c598 <memmove>
 800c042:	68a3      	ldr	r3, [r4, #8]
 800c044:	1b9b      	subs	r3, r3, r6
 800c046:	60a3      	str	r3, [r4, #8]
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	4433      	add	r3, r6
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	2000      	movs	r0, #0
 800c050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c054:	462a      	mov	r2, r5
 800c056:	f000 fad7 	bl	800c608 <_realloc_r>
 800c05a:	4606      	mov	r6, r0
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1e0      	bne.n	800c022 <__ssputs_r+0x5a>
 800c060:	6921      	ldr	r1, [r4, #16]
 800c062:	4650      	mov	r0, sl
 800c064:	f7ff feb8 	bl	800bdd8 <_free_r>
 800c068:	230c      	movs	r3, #12
 800c06a:	f8ca 3000 	str.w	r3, [sl]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	f04f 30ff 	mov.w	r0, #4294967295
 800c07a:	e7e9      	b.n	800c050 <__ssputs_r+0x88>

0800c07c <_svfiprintf_r>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	4698      	mov	r8, r3
 800c082:	898b      	ldrh	r3, [r1, #12]
 800c084:	061b      	lsls	r3, r3, #24
 800c086:	b09d      	sub	sp, #116	; 0x74
 800c088:	4607      	mov	r7, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	4614      	mov	r4, r2
 800c08e:	d50e      	bpl.n	800c0ae <_svfiprintf_r+0x32>
 800c090:	690b      	ldr	r3, [r1, #16]
 800c092:	b963      	cbnz	r3, 800c0ae <_svfiprintf_r+0x32>
 800c094:	2140      	movs	r1, #64	; 0x40
 800c096:	f7ff ff0b 	bl	800beb0 <_malloc_r>
 800c09a:	6028      	str	r0, [r5, #0]
 800c09c:	6128      	str	r0, [r5, #16]
 800c09e:	b920      	cbnz	r0, 800c0aa <_svfiprintf_r+0x2e>
 800c0a0:	230c      	movs	r3, #12
 800c0a2:	603b      	str	r3, [r7, #0]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	e0d0      	b.n	800c24c <_svfiprintf_r+0x1d0>
 800c0aa:	2340      	movs	r3, #64	; 0x40
 800c0ac:	616b      	str	r3, [r5, #20]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0b2:	2320      	movs	r3, #32
 800c0b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0bc:	2330      	movs	r3, #48	; 0x30
 800c0be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c264 <_svfiprintf_r+0x1e8>
 800c0c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0c6:	f04f 0901 	mov.w	r9, #1
 800c0ca:	4623      	mov	r3, r4
 800c0cc:	469a      	mov	sl, r3
 800c0ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0d2:	b10a      	cbz	r2, 800c0d8 <_svfiprintf_r+0x5c>
 800c0d4:	2a25      	cmp	r2, #37	; 0x25
 800c0d6:	d1f9      	bne.n	800c0cc <_svfiprintf_r+0x50>
 800c0d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c0dc:	d00b      	beq.n	800c0f6 <_svfiprintf_r+0x7a>
 800c0de:	465b      	mov	r3, fp
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff ff6f 	bl	800bfc8 <__ssputs_r>
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	f000 80a9 	beq.w	800c242 <_svfiprintf_r+0x1c6>
 800c0f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0f2:	445a      	add	r2, fp
 800c0f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 80a1 	beq.w	800c242 <_svfiprintf_r+0x1c6>
 800c100:	2300      	movs	r3, #0
 800c102:	f04f 32ff 	mov.w	r2, #4294967295
 800c106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c10a:	f10a 0a01 	add.w	sl, sl, #1
 800c10e:	9304      	str	r3, [sp, #16]
 800c110:	9307      	str	r3, [sp, #28]
 800c112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c116:	931a      	str	r3, [sp, #104]	; 0x68
 800c118:	4654      	mov	r4, sl
 800c11a:	2205      	movs	r2, #5
 800c11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c120:	4850      	ldr	r0, [pc, #320]	; (800c264 <_svfiprintf_r+0x1e8>)
 800c122:	f7f4 f855 	bl	80001d0 <memchr>
 800c126:	9a04      	ldr	r2, [sp, #16]
 800c128:	b9d8      	cbnz	r0, 800c162 <_svfiprintf_r+0xe6>
 800c12a:	06d0      	lsls	r0, r2, #27
 800c12c:	bf44      	itt	mi
 800c12e:	2320      	movmi	r3, #32
 800c130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c134:	0711      	lsls	r1, r2, #28
 800c136:	bf44      	itt	mi
 800c138:	232b      	movmi	r3, #43	; 0x2b
 800c13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c13e:	f89a 3000 	ldrb.w	r3, [sl]
 800c142:	2b2a      	cmp	r3, #42	; 0x2a
 800c144:	d015      	beq.n	800c172 <_svfiprintf_r+0xf6>
 800c146:	9a07      	ldr	r2, [sp, #28]
 800c148:	4654      	mov	r4, sl
 800c14a:	2000      	movs	r0, #0
 800c14c:	f04f 0c0a 	mov.w	ip, #10
 800c150:	4621      	mov	r1, r4
 800c152:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c156:	3b30      	subs	r3, #48	; 0x30
 800c158:	2b09      	cmp	r3, #9
 800c15a:	d94d      	bls.n	800c1f8 <_svfiprintf_r+0x17c>
 800c15c:	b1b0      	cbz	r0, 800c18c <_svfiprintf_r+0x110>
 800c15e:	9207      	str	r2, [sp, #28]
 800c160:	e014      	b.n	800c18c <_svfiprintf_r+0x110>
 800c162:	eba0 0308 	sub.w	r3, r0, r8
 800c166:	fa09 f303 	lsl.w	r3, r9, r3
 800c16a:	4313      	orrs	r3, r2
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	46a2      	mov	sl, r4
 800c170:	e7d2      	b.n	800c118 <_svfiprintf_r+0x9c>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	1d19      	adds	r1, r3, #4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	9103      	str	r1, [sp, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfbb      	ittet	lt
 800c17e:	425b      	neglt	r3, r3
 800c180:	f042 0202 	orrlt.w	r2, r2, #2
 800c184:	9307      	strge	r3, [sp, #28]
 800c186:	9307      	strlt	r3, [sp, #28]
 800c188:	bfb8      	it	lt
 800c18a:	9204      	strlt	r2, [sp, #16]
 800c18c:	7823      	ldrb	r3, [r4, #0]
 800c18e:	2b2e      	cmp	r3, #46	; 0x2e
 800c190:	d10c      	bne.n	800c1ac <_svfiprintf_r+0x130>
 800c192:	7863      	ldrb	r3, [r4, #1]
 800c194:	2b2a      	cmp	r3, #42	; 0x2a
 800c196:	d134      	bne.n	800c202 <_svfiprintf_r+0x186>
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	1d1a      	adds	r2, r3, #4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	9203      	str	r2, [sp, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	bfb8      	it	lt
 800c1a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1a8:	3402      	adds	r4, #2
 800c1aa:	9305      	str	r3, [sp, #20]
 800c1ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c274 <_svfiprintf_r+0x1f8>
 800c1b0:	7821      	ldrb	r1, [r4, #0]
 800c1b2:	2203      	movs	r2, #3
 800c1b4:	4650      	mov	r0, sl
 800c1b6:	f7f4 f80b 	bl	80001d0 <memchr>
 800c1ba:	b138      	cbz	r0, 800c1cc <_svfiprintf_r+0x150>
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	eba0 000a 	sub.w	r0, r0, sl
 800c1c2:	2240      	movs	r2, #64	; 0x40
 800c1c4:	4082      	lsls	r2, r0
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	3401      	adds	r4, #1
 800c1ca:	9304      	str	r3, [sp, #16]
 800c1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d0:	4825      	ldr	r0, [pc, #148]	; (800c268 <_svfiprintf_r+0x1ec>)
 800c1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1d6:	2206      	movs	r2, #6
 800c1d8:	f7f3 fffa 	bl	80001d0 <memchr>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d038      	beq.n	800c252 <_svfiprintf_r+0x1d6>
 800c1e0:	4b22      	ldr	r3, [pc, #136]	; (800c26c <_svfiprintf_r+0x1f0>)
 800c1e2:	bb1b      	cbnz	r3, 800c22c <_svfiprintf_r+0x1b0>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	3307      	adds	r3, #7
 800c1e8:	f023 0307 	bic.w	r3, r3, #7
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	9303      	str	r3, [sp, #12]
 800c1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f2:	4433      	add	r3, r6
 800c1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f6:	e768      	b.n	800c0ca <_svfiprintf_r+0x4e>
 800c1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	2001      	movs	r0, #1
 800c200:	e7a6      	b.n	800c150 <_svfiprintf_r+0xd4>
 800c202:	2300      	movs	r3, #0
 800c204:	3401      	adds	r4, #1
 800c206:	9305      	str	r3, [sp, #20]
 800c208:	4619      	mov	r1, r3
 800c20a:	f04f 0c0a 	mov.w	ip, #10
 800c20e:	4620      	mov	r0, r4
 800c210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c214:	3a30      	subs	r2, #48	; 0x30
 800c216:	2a09      	cmp	r2, #9
 800c218:	d903      	bls.n	800c222 <_svfiprintf_r+0x1a6>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0c6      	beq.n	800c1ac <_svfiprintf_r+0x130>
 800c21e:	9105      	str	r1, [sp, #20]
 800c220:	e7c4      	b.n	800c1ac <_svfiprintf_r+0x130>
 800c222:	fb0c 2101 	mla	r1, ip, r1, r2
 800c226:	4604      	mov	r4, r0
 800c228:	2301      	movs	r3, #1
 800c22a:	e7f0      	b.n	800c20e <_svfiprintf_r+0x192>
 800c22c:	ab03      	add	r3, sp, #12
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	462a      	mov	r2, r5
 800c232:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <_svfiprintf_r+0x1f4>)
 800c234:	a904      	add	r1, sp, #16
 800c236:	4638      	mov	r0, r7
 800c238:	f3af 8000 	nop.w
 800c23c:	1c42      	adds	r2, r0, #1
 800c23e:	4606      	mov	r6, r0
 800c240:	d1d6      	bne.n	800c1f0 <_svfiprintf_r+0x174>
 800c242:	89ab      	ldrh	r3, [r5, #12]
 800c244:	065b      	lsls	r3, r3, #25
 800c246:	f53f af2d 	bmi.w	800c0a4 <_svfiprintf_r+0x28>
 800c24a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c24c:	b01d      	add	sp, #116	; 0x74
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	ab03      	add	r3, sp, #12
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	462a      	mov	r2, r5
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <_svfiprintf_r+0x1f4>)
 800c25a:	a904      	add	r1, sp, #16
 800c25c:	4638      	mov	r0, r7
 800c25e:	f000 f879 	bl	800c354 <_printf_i>
 800c262:	e7eb      	b.n	800c23c <_svfiprintf_r+0x1c0>
 800c264:	0800c770 	.word	0x0800c770
 800c268:	0800c77a 	.word	0x0800c77a
 800c26c:	00000000 	.word	0x00000000
 800c270:	0800bfc9 	.word	0x0800bfc9
 800c274:	0800c776 	.word	0x0800c776

0800c278 <_printf_common>:
 800c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27c:	4616      	mov	r6, r2
 800c27e:	4699      	mov	r9, r3
 800c280:	688a      	ldr	r2, [r1, #8]
 800c282:	690b      	ldr	r3, [r1, #16]
 800c284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c288:	4293      	cmp	r3, r2
 800c28a:	bfb8      	it	lt
 800c28c:	4613      	movlt	r3, r2
 800c28e:	6033      	str	r3, [r6, #0]
 800c290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c294:	4607      	mov	r7, r0
 800c296:	460c      	mov	r4, r1
 800c298:	b10a      	cbz	r2, 800c29e <_printf_common+0x26>
 800c29a:	3301      	adds	r3, #1
 800c29c:	6033      	str	r3, [r6, #0]
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	0699      	lsls	r1, r3, #26
 800c2a2:	bf42      	ittt	mi
 800c2a4:	6833      	ldrmi	r3, [r6, #0]
 800c2a6:	3302      	addmi	r3, #2
 800c2a8:	6033      	strmi	r3, [r6, #0]
 800c2aa:	6825      	ldr	r5, [r4, #0]
 800c2ac:	f015 0506 	ands.w	r5, r5, #6
 800c2b0:	d106      	bne.n	800c2c0 <_printf_common+0x48>
 800c2b2:	f104 0a19 	add.w	sl, r4, #25
 800c2b6:	68e3      	ldr	r3, [r4, #12]
 800c2b8:	6832      	ldr	r2, [r6, #0]
 800c2ba:	1a9b      	subs	r3, r3, r2
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dc26      	bgt.n	800c30e <_printf_common+0x96>
 800c2c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2c4:	1e13      	subs	r3, r2, #0
 800c2c6:	6822      	ldr	r2, [r4, #0]
 800c2c8:	bf18      	it	ne
 800c2ca:	2301      	movne	r3, #1
 800c2cc:	0692      	lsls	r2, r2, #26
 800c2ce:	d42b      	bmi.n	800c328 <_printf_common+0xb0>
 800c2d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	47c0      	blx	r8
 800c2da:	3001      	adds	r0, #1
 800c2dc:	d01e      	beq.n	800c31c <_printf_common+0xa4>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	f003 0306 	and.w	r3, r3, #6
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	bf02      	ittt	eq
 800c2ea:	68e5      	ldreq	r5, [r4, #12]
 800c2ec:	6833      	ldreq	r3, [r6, #0]
 800c2ee:	1aed      	subeq	r5, r5, r3
 800c2f0:	68a3      	ldr	r3, [r4, #8]
 800c2f2:	bf0c      	ite	eq
 800c2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2f8:	2500      	movne	r5, #0
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	bfc4      	itt	gt
 800c2fe:	1a9b      	subgt	r3, r3, r2
 800c300:	18ed      	addgt	r5, r5, r3
 800c302:	2600      	movs	r6, #0
 800c304:	341a      	adds	r4, #26
 800c306:	42b5      	cmp	r5, r6
 800c308:	d11a      	bne.n	800c340 <_printf_common+0xc8>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e008      	b.n	800c320 <_printf_common+0xa8>
 800c30e:	2301      	movs	r3, #1
 800c310:	4652      	mov	r2, sl
 800c312:	4649      	mov	r1, r9
 800c314:	4638      	mov	r0, r7
 800c316:	47c0      	blx	r8
 800c318:	3001      	adds	r0, #1
 800c31a:	d103      	bne.n	800c324 <_printf_common+0xac>
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c324:	3501      	adds	r5, #1
 800c326:	e7c6      	b.n	800c2b6 <_printf_common+0x3e>
 800c328:	18e1      	adds	r1, r4, r3
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	2030      	movs	r0, #48	; 0x30
 800c32e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c332:	4422      	add	r2, r4
 800c334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c33c:	3302      	adds	r3, #2
 800c33e:	e7c7      	b.n	800c2d0 <_printf_common+0x58>
 800c340:	2301      	movs	r3, #1
 800c342:	4622      	mov	r2, r4
 800c344:	4649      	mov	r1, r9
 800c346:	4638      	mov	r0, r7
 800c348:	47c0      	blx	r8
 800c34a:	3001      	adds	r0, #1
 800c34c:	d0e6      	beq.n	800c31c <_printf_common+0xa4>
 800c34e:	3601      	adds	r6, #1
 800c350:	e7d9      	b.n	800c306 <_printf_common+0x8e>
	...

0800c354 <_printf_i>:
 800c354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c358:	7e0f      	ldrb	r7, [r1, #24]
 800c35a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c35c:	2f78      	cmp	r7, #120	; 0x78
 800c35e:	4691      	mov	r9, r2
 800c360:	4680      	mov	r8, r0
 800c362:	460c      	mov	r4, r1
 800c364:	469a      	mov	sl, r3
 800c366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c36a:	d807      	bhi.n	800c37c <_printf_i+0x28>
 800c36c:	2f62      	cmp	r7, #98	; 0x62
 800c36e:	d80a      	bhi.n	800c386 <_printf_i+0x32>
 800c370:	2f00      	cmp	r7, #0
 800c372:	f000 80d4 	beq.w	800c51e <_printf_i+0x1ca>
 800c376:	2f58      	cmp	r7, #88	; 0x58
 800c378:	f000 80c0 	beq.w	800c4fc <_printf_i+0x1a8>
 800c37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c384:	e03a      	b.n	800c3fc <_printf_i+0xa8>
 800c386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c38a:	2b15      	cmp	r3, #21
 800c38c:	d8f6      	bhi.n	800c37c <_printf_i+0x28>
 800c38e:	a101      	add	r1, pc, #4	; (adr r1, 800c394 <_printf_i+0x40>)
 800c390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c394:	0800c3ed 	.word	0x0800c3ed
 800c398:	0800c401 	.word	0x0800c401
 800c39c:	0800c37d 	.word	0x0800c37d
 800c3a0:	0800c37d 	.word	0x0800c37d
 800c3a4:	0800c37d 	.word	0x0800c37d
 800c3a8:	0800c37d 	.word	0x0800c37d
 800c3ac:	0800c401 	.word	0x0800c401
 800c3b0:	0800c37d 	.word	0x0800c37d
 800c3b4:	0800c37d 	.word	0x0800c37d
 800c3b8:	0800c37d 	.word	0x0800c37d
 800c3bc:	0800c37d 	.word	0x0800c37d
 800c3c0:	0800c505 	.word	0x0800c505
 800c3c4:	0800c42d 	.word	0x0800c42d
 800c3c8:	0800c4bf 	.word	0x0800c4bf
 800c3cc:	0800c37d 	.word	0x0800c37d
 800c3d0:	0800c37d 	.word	0x0800c37d
 800c3d4:	0800c527 	.word	0x0800c527
 800c3d8:	0800c37d 	.word	0x0800c37d
 800c3dc:	0800c42d 	.word	0x0800c42d
 800c3e0:	0800c37d 	.word	0x0800c37d
 800c3e4:	0800c37d 	.word	0x0800c37d
 800c3e8:	0800c4c7 	.word	0x0800c4c7
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	1d1a      	adds	r2, r3, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	602a      	str	r2, [r5, #0]
 800c3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e09f      	b.n	800c540 <_printf_i+0x1ec>
 800c400:	6820      	ldr	r0, [r4, #0]
 800c402:	682b      	ldr	r3, [r5, #0]
 800c404:	0607      	lsls	r7, r0, #24
 800c406:	f103 0104 	add.w	r1, r3, #4
 800c40a:	6029      	str	r1, [r5, #0]
 800c40c:	d501      	bpl.n	800c412 <_printf_i+0xbe>
 800c40e:	681e      	ldr	r6, [r3, #0]
 800c410:	e003      	b.n	800c41a <_printf_i+0xc6>
 800c412:	0646      	lsls	r6, r0, #25
 800c414:	d5fb      	bpl.n	800c40e <_printf_i+0xba>
 800c416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c41a:	2e00      	cmp	r6, #0
 800c41c:	da03      	bge.n	800c426 <_printf_i+0xd2>
 800c41e:	232d      	movs	r3, #45	; 0x2d
 800c420:	4276      	negs	r6, r6
 800c422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c426:	485a      	ldr	r0, [pc, #360]	; (800c590 <_printf_i+0x23c>)
 800c428:	230a      	movs	r3, #10
 800c42a:	e012      	b.n	800c452 <_printf_i+0xfe>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	6820      	ldr	r0, [r4, #0]
 800c430:	1d19      	adds	r1, r3, #4
 800c432:	6029      	str	r1, [r5, #0]
 800c434:	0605      	lsls	r5, r0, #24
 800c436:	d501      	bpl.n	800c43c <_printf_i+0xe8>
 800c438:	681e      	ldr	r6, [r3, #0]
 800c43a:	e002      	b.n	800c442 <_printf_i+0xee>
 800c43c:	0641      	lsls	r1, r0, #25
 800c43e:	d5fb      	bpl.n	800c438 <_printf_i+0xe4>
 800c440:	881e      	ldrh	r6, [r3, #0]
 800c442:	4853      	ldr	r0, [pc, #332]	; (800c590 <_printf_i+0x23c>)
 800c444:	2f6f      	cmp	r7, #111	; 0x6f
 800c446:	bf0c      	ite	eq
 800c448:	2308      	moveq	r3, #8
 800c44a:	230a      	movne	r3, #10
 800c44c:	2100      	movs	r1, #0
 800c44e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c452:	6865      	ldr	r5, [r4, #4]
 800c454:	60a5      	str	r5, [r4, #8]
 800c456:	2d00      	cmp	r5, #0
 800c458:	bfa2      	ittt	ge
 800c45a:	6821      	ldrge	r1, [r4, #0]
 800c45c:	f021 0104 	bicge.w	r1, r1, #4
 800c460:	6021      	strge	r1, [r4, #0]
 800c462:	b90e      	cbnz	r6, 800c468 <_printf_i+0x114>
 800c464:	2d00      	cmp	r5, #0
 800c466:	d04b      	beq.n	800c500 <_printf_i+0x1ac>
 800c468:	4615      	mov	r5, r2
 800c46a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c46e:	fb03 6711 	mls	r7, r3, r1, r6
 800c472:	5dc7      	ldrb	r7, [r0, r7]
 800c474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c478:	4637      	mov	r7, r6
 800c47a:	42bb      	cmp	r3, r7
 800c47c:	460e      	mov	r6, r1
 800c47e:	d9f4      	bls.n	800c46a <_printf_i+0x116>
 800c480:	2b08      	cmp	r3, #8
 800c482:	d10b      	bne.n	800c49c <_printf_i+0x148>
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	07de      	lsls	r6, r3, #31
 800c488:	d508      	bpl.n	800c49c <_printf_i+0x148>
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	6861      	ldr	r1, [r4, #4]
 800c48e:	4299      	cmp	r1, r3
 800c490:	bfde      	ittt	le
 800c492:	2330      	movle	r3, #48	; 0x30
 800c494:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c49c:	1b52      	subs	r2, r2, r5
 800c49e:	6122      	str	r2, [r4, #16]
 800c4a0:	f8cd a000 	str.w	sl, [sp]
 800c4a4:	464b      	mov	r3, r9
 800c4a6:	aa03      	add	r2, sp, #12
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f7ff fee4 	bl	800c278 <_printf_common>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d14a      	bne.n	800c54a <_printf_i+0x1f6>
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b8:	b004      	add	sp, #16
 800c4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	f043 0320 	orr.w	r3, r3, #32
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	4833      	ldr	r0, [pc, #204]	; (800c594 <_printf_i+0x240>)
 800c4c8:	2778      	movs	r7, #120	; 0x78
 800c4ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	6829      	ldr	r1, [r5, #0]
 800c4d2:	061f      	lsls	r7, r3, #24
 800c4d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4d8:	d402      	bmi.n	800c4e0 <_printf_i+0x18c>
 800c4da:	065f      	lsls	r7, r3, #25
 800c4dc:	bf48      	it	mi
 800c4de:	b2b6      	uxthmi	r6, r6
 800c4e0:	07df      	lsls	r7, r3, #31
 800c4e2:	bf48      	it	mi
 800c4e4:	f043 0320 	orrmi.w	r3, r3, #32
 800c4e8:	6029      	str	r1, [r5, #0]
 800c4ea:	bf48      	it	mi
 800c4ec:	6023      	strmi	r3, [r4, #0]
 800c4ee:	b91e      	cbnz	r6, 800c4f8 <_printf_i+0x1a4>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	f023 0320 	bic.w	r3, r3, #32
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	e7a7      	b.n	800c44c <_printf_i+0xf8>
 800c4fc:	4824      	ldr	r0, [pc, #144]	; (800c590 <_printf_i+0x23c>)
 800c4fe:	e7e4      	b.n	800c4ca <_printf_i+0x176>
 800c500:	4615      	mov	r5, r2
 800c502:	e7bd      	b.n	800c480 <_printf_i+0x12c>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	6826      	ldr	r6, [r4, #0]
 800c508:	6961      	ldr	r1, [r4, #20]
 800c50a:	1d18      	adds	r0, r3, #4
 800c50c:	6028      	str	r0, [r5, #0]
 800c50e:	0635      	lsls	r5, r6, #24
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	d501      	bpl.n	800c518 <_printf_i+0x1c4>
 800c514:	6019      	str	r1, [r3, #0]
 800c516:	e002      	b.n	800c51e <_printf_i+0x1ca>
 800c518:	0670      	lsls	r0, r6, #25
 800c51a:	d5fb      	bpl.n	800c514 <_printf_i+0x1c0>
 800c51c:	8019      	strh	r1, [r3, #0]
 800c51e:	2300      	movs	r3, #0
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	4615      	mov	r5, r2
 800c524:	e7bc      	b.n	800c4a0 <_printf_i+0x14c>
 800c526:	682b      	ldr	r3, [r5, #0]
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	602a      	str	r2, [r5, #0]
 800c52c:	681d      	ldr	r5, [r3, #0]
 800c52e:	6862      	ldr	r2, [r4, #4]
 800c530:	2100      	movs	r1, #0
 800c532:	4628      	mov	r0, r5
 800c534:	f7f3 fe4c 	bl	80001d0 <memchr>
 800c538:	b108      	cbz	r0, 800c53e <_printf_i+0x1ea>
 800c53a:	1b40      	subs	r0, r0, r5
 800c53c:	6060      	str	r0, [r4, #4]
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c548:	e7aa      	b.n	800c4a0 <_printf_i+0x14c>
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	462a      	mov	r2, r5
 800c54e:	4649      	mov	r1, r9
 800c550:	4640      	mov	r0, r8
 800c552:	47d0      	blx	sl
 800c554:	3001      	adds	r0, #1
 800c556:	d0ad      	beq.n	800c4b4 <_printf_i+0x160>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	079b      	lsls	r3, r3, #30
 800c55c:	d413      	bmi.n	800c586 <_printf_i+0x232>
 800c55e:	68e0      	ldr	r0, [r4, #12]
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	4298      	cmp	r0, r3
 800c564:	bfb8      	it	lt
 800c566:	4618      	movlt	r0, r3
 800c568:	e7a6      	b.n	800c4b8 <_printf_i+0x164>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4632      	mov	r2, r6
 800c56e:	4649      	mov	r1, r9
 800c570:	4640      	mov	r0, r8
 800c572:	47d0      	blx	sl
 800c574:	3001      	adds	r0, #1
 800c576:	d09d      	beq.n	800c4b4 <_printf_i+0x160>
 800c578:	3501      	adds	r5, #1
 800c57a:	68e3      	ldr	r3, [r4, #12]
 800c57c:	9903      	ldr	r1, [sp, #12]
 800c57e:	1a5b      	subs	r3, r3, r1
 800c580:	42ab      	cmp	r3, r5
 800c582:	dcf2      	bgt.n	800c56a <_printf_i+0x216>
 800c584:	e7eb      	b.n	800c55e <_printf_i+0x20a>
 800c586:	2500      	movs	r5, #0
 800c588:	f104 0619 	add.w	r6, r4, #25
 800c58c:	e7f5      	b.n	800c57a <_printf_i+0x226>
 800c58e:	bf00      	nop
 800c590:	0800c781 	.word	0x0800c781
 800c594:	0800c792 	.word	0x0800c792

0800c598 <memmove>:
 800c598:	4288      	cmp	r0, r1
 800c59a:	b510      	push	{r4, lr}
 800c59c:	eb01 0402 	add.w	r4, r1, r2
 800c5a0:	d902      	bls.n	800c5a8 <memmove+0x10>
 800c5a2:	4284      	cmp	r4, r0
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	d807      	bhi.n	800c5b8 <memmove+0x20>
 800c5a8:	1e43      	subs	r3, r0, #1
 800c5aa:	42a1      	cmp	r1, r4
 800c5ac:	d008      	beq.n	800c5c0 <memmove+0x28>
 800c5ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5b6:	e7f8      	b.n	800c5aa <memmove+0x12>
 800c5b8:	4402      	add	r2, r0
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	428a      	cmp	r2, r1
 800c5be:	d100      	bne.n	800c5c2 <memmove+0x2a>
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5ca:	e7f7      	b.n	800c5bc <memmove+0x24>

0800c5cc <_sbrk_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d06      	ldr	r5, [pc, #24]	; (800c5e8 <_sbrk_r+0x1c>)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	602b      	str	r3, [r5, #0]
 800c5d8:	f7f6 fb9a 	bl	8002d10 <_sbrk>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_sbrk_r+0x1a>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_sbrk_r+0x1a>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	2000082c 	.word	0x2000082c

0800c5ec <memcpy>:
 800c5ec:	440a      	add	r2, r1
 800c5ee:	4291      	cmp	r1, r2
 800c5f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5f4:	d100      	bne.n	800c5f8 <memcpy+0xc>
 800c5f6:	4770      	bx	lr
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c602:	4291      	cmp	r1, r2
 800c604:	d1f9      	bne.n	800c5fa <memcpy+0xe>
 800c606:	bd10      	pop	{r4, pc}

0800c608 <_realloc_r>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	4680      	mov	r8, r0
 800c60e:	4614      	mov	r4, r2
 800c610:	460e      	mov	r6, r1
 800c612:	b921      	cbnz	r1, 800c61e <_realloc_r+0x16>
 800c614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	4611      	mov	r1, r2
 800c61a:	f7ff bc49 	b.w	800beb0 <_malloc_r>
 800c61e:	b92a      	cbnz	r2, 800c62c <_realloc_r+0x24>
 800c620:	f7ff fbda 	bl	800bdd8 <_free_r>
 800c624:	4625      	mov	r5, r4
 800c626:	4628      	mov	r0, r5
 800c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62c:	f000 f81b 	bl	800c666 <_malloc_usable_size_r>
 800c630:	4284      	cmp	r4, r0
 800c632:	4607      	mov	r7, r0
 800c634:	d802      	bhi.n	800c63c <_realloc_r+0x34>
 800c636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c63a:	d812      	bhi.n	800c662 <_realloc_r+0x5a>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4640      	mov	r0, r8
 800c640:	f7ff fc36 	bl	800beb0 <_malloc_r>
 800c644:	4605      	mov	r5, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	d0ed      	beq.n	800c626 <_realloc_r+0x1e>
 800c64a:	42bc      	cmp	r4, r7
 800c64c:	4622      	mov	r2, r4
 800c64e:	4631      	mov	r1, r6
 800c650:	bf28      	it	cs
 800c652:	463a      	movcs	r2, r7
 800c654:	f7ff ffca 	bl	800c5ec <memcpy>
 800c658:	4631      	mov	r1, r6
 800c65a:	4640      	mov	r0, r8
 800c65c:	f7ff fbbc 	bl	800bdd8 <_free_r>
 800c660:	e7e1      	b.n	800c626 <_realloc_r+0x1e>
 800c662:	4635      	mov	r5, r6
 800c664:	e7df      	b.n	800c626 <_realloc_r+0x1e>

0800c666 <_malloc_usable_size_r>:
 800c666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c66a:	1f18      	subs	r0, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfbc      	itt	lt
 800c670:	580b      	ldrlt	r3, [r1, r0]
 800c672:	18c0      	addlt	r0, r0, r3
 800c674:	4770      	bx	lr
	...

0800c678 <_init>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr

0800c684 <_fini>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr
