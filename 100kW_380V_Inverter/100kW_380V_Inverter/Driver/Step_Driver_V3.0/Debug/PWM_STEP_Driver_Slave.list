
PWM_STEP_Driver_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d074  0800d074  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d074  0800d074  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d074  0800d074  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d078  0800d078  0001d078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000005b8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000634  20000634  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196c6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbc  00000000  00000000  00039772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020950  00000000  00000000  0003edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab2e  00000000  00000000  0005f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8687  00000000  00000000  0007a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001428cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ccc  00000000  00000000  00142920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf54 	.word	0x0800cf54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800cf54 	.word	0x0800cf54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <process_data>:
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t bytesTransd = 0;

int process_data (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	int startREG = RxData[0];  // get the register address
 8000276:	4b19      	ldr	r3, [pc, #100]	; (80002dc <process_data+0x6c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	617b      	str	r3, [r7, #20]
	int numREG = bytesRrecvd;  // Get the number of registers
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <process_data+0x70>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 8000282:	697a      	ldr	r2, [r7, #20]
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	4413      	add	r3, r2
 8000288:	3b01      	subs	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b09      	cmp	r3, #9
 8000290:	dd09      	ble.n	80002a6 <process_data+0x36>
	{
		// clear everything and return
		memset(RxData,'\0',RxSIZE);
 8000292:	220b      	movs	r2, #11
 8000294:	2100      	movs	r1, #0
 8000296:	4811      	ldr	r0, [pc, #68]	; (80002dc <process_data+0x6c>)
 8000298:	f00c f9e6 	bl	800c668 <memset>
		rxcount =0;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <process_data+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
		return 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	e016      	b.n	80002d4 <process_data+0x64>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 80002a6:	2301      	movs	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e00c      	b.n	80002ca <process_data+0x5a>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 80002b0:	693a      	ldr	r2, [r7, #16]
 80002b2:	1c53      	adds	r3, r2, #1
 80002b4:	613b      	str	r3, [r7, #16]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	1c59      	adds	r1, r3, #1
 80002ba:	6179      	str	r1, [r7, #20]
 80002bc:	4907      	ldr	r1, [pc, #28]	; (80002dc <process_data+0x6c>)
 80002be:	5c89      	ldrb	r1, [r1, r2]
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <process_data+0x78>)
 80002c2:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	dbee      	blt.n	80002b0 <process_data+0x40>
	}
	return 1;  // success
 80002d2:	2301      	movs	r3, #1
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000a4 	.word	0x200000a4
 80002e0:	200000b2 	.word	0x200000b2
 80002e4:	200000af 	.word	0x200000af
 80002e8:	20000098 	.word	0x20000098

080002ec <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f005 fe6f 	bl	8005fd8 <HAL_I2C_EnableListen_IT>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	803b      	strh	r3, [r7, #0]


	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d110      	bne.n	800033c <HAL_I2C_AddrCallback+0x38>
	{
		RxData[0] = 0;  // reset the RxData[0] to clear any residue address from previous call
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <HAL_I2C_AddrCallback+0x70>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
		rxcount =0;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_I2C_AddrCallback+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <HAL_I2C_AddrCallback+0x74>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <HAL_I2C_AddrCallback+0x70>)
 800032e:	18d1      	adds	r1, r2, r3
 8000330:	2300      	movs	r3, #0
 8000332:	2201      	movs	r2, #1
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f005 fd9d 	bl	8005e74 <HAL_I2C_Slave_Seq_Receive_IT>
		txcount = 0;
		startPosition = RxData[0];
		RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
	}
}
 800033a:	e016      	b.n	800036a <HAL_I2C_AddrCallback+0x66>
		txcount = 0;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <HAL_I2C_AddrCallback+0x78>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_I2C_AddrCallback+0x70>)
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <HAL_I2C_AddrCallback+0x7c>)
 8000348:	701a      	strb	r2, [r3, #0]
		RxData[0] = 0;  // Reset the start register as we have already copied it
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <HAL_I2C_AddrCallback+0x70>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <HAL_I2C_AddrCallback+0x7c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_I2C_AddrCallback+0x78>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4413      	add	r3, r2
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <HAL_I2C_AddrCallback+0x80>)
 800035e:	1899      	adds	r1, r3, r2
 8000360:	2300      	movs	r3, #0
 8000362:	2201      	movs	r2, #1
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f005 fcd3 	bl	8005d10 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000a4 	.word	0x200000a4
 8000378:	200000af 	.word	0x200000af
 800037c:	200000b0 	.word	0x200000b0
 8000380:	200000b1 	.word	0x200000b1
 8000384:	20000098 	.word	0x20000098

08000388 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	txcount++;
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800039a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 80003aa:	1899      	adds	r1, r3, r2
 80003ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003b0:	2201      	movs	r2, #1
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f005 fcac 	bl	8005d10 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000b0 	.word	0x200000b0
 80003c4:	200000b1 	.word	0x200000b1
 80003c8:	20000098 	.word	0x20000098

080003cc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	rxcount++;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003de:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b0a      	cmp	r3, #10
 80003e6:	d81a      	bhi.n	800041e <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b0a      	cmp	r3, #10
 80003ee:	d10b      	bne.n	8000408 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80003f8:	18d1      	adds	r1, r2, r3
 80003fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003fe:	2201      	movs	r2, #1
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f005 fd37 	bl	8005e74 <HAL_I2C_Slave_Seq_Receive_IT>
 8000406:	e00a      	b.n	800041e <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000410:	18d1      	adds	r1, r2, r3
 8000412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000416:	2201      	movs	r2, #1
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f005 fd2b 	bl	8005e74 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b0b      	cmp	r3, #11
 8000424:	d101      	bne.n	800042a <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 8000426:	f7ff ff23 	bl	8000270 <process_data>
	}
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000af 	.word	0x200000af
 8000438:	200000a4 	.word	0x200000a4

0800043c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f005 fe94 	bl	8006172 <HAL_I2C_GetError>
 800044a:	60f8      	str	r0, [r7, #12]

	if (errorcode == 4)  // AF error
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2b04      	cmp	r3, #4
 8000450:	d119      	bne.n	8000486 <HAL_I2C_ErrorCallback+0x4a>
	{
		if (txcount == 0)  // error is while slave is receiving
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <HAL_I2C_ErrorCallback+0x7c>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10b      	bne.n	8000472 <HAL_I2C_ErrorCallback+0x36>
		{
			bytesRrecvd = rxcount-1;  // the first byte is the register address
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <HAL_I2C_ErrorCallback+0x80>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3b01      	subs	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <HAL_I2C_ErrorCallback+0x84>)
 8000464:	701a      	strb	r2, [r3, #0]
			rxcount = 0;  // Reset the rxcount for the next operation
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_I2C_ErrorCallback+0x80>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
			process_data();
 800046c:	f7ff ff00 	bl	8000270 <process_data>
 8000470:	e01a      	b.n	80004a8 <HAL_I2C_ErrorCallback+0x6c>
		}
		else // error while slave is transmitting
		{
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_I2C_ErrorCallback+0x7c>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3b01      	subs	r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_I2C_ErrorCallback+0x88>)
 800047c:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_I2C_ErrorCallback+0x7c>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	e010      	b.n	80004a8 <HAL_I2C_ErrorCallback+0x6c>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	else if (errorcode == 1)  // BERR Error
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10d      	bne.n	80004a8 <HAL_I2C_ErrorCallback+0x6c>
	{
		HAL_I2C_DeInit(hi2c);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f005 fa12 	bl	80058b6 <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f005 f980 	bl	8005798 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 8000498:	220b      	movs	r2, #11
 800049a:	2100      	movs	r1, #0
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <HAL_I2C_ErrorCallback+0x8c>)
 800049e:	f00c f8e3 	bl	800c668 <memset>
		rxcount =0;  // reset the count
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_I2C_ErrorCallback+0x80>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_EnableListen_IT(hi2c);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f005 fd95 	bl	8005fd8 <HAL_I2C_EnableListen_IT>
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000b0 	.word	0x200000b0
 80004bc:	200000af 	.word	0x200000af
 80004c0:	200000b2 	.word	0x200000b2
 80004c4:	200000b3 	.word	0x200000b3
 80004c8:	200000a4 	.word	0x200000a4

080004cc <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80004ea:	2303      	movs	r3, #3
 80004ec:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80004ee:	463b      	mov	r3, r7
 80004f0:	4619      	mov	r1, r3
 80004f2:	4803      	ldr	r0, [pc, #12]	; (8000500 <ADC_Select_CH1+0x34>)
 80004f4:	f003 fd5a 	bl	8003fac <HAL_ADC_ConfigChannel>
	     }
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000154 	.word	0x20000154

08000504 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 800051a:	230c      	movs	r3, #12
 800051c:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000522:	2303      	movs	r3, #3
 8000524:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000526:	463b      	mov	r3, r7
 8000528:	4619      	mov	r1, r3
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <ADC_Select_CH12+0x34>)
 800052c:	f003 fd3e 	bl	8003fac <HAL_ADC_ConfigChannel>
	     }
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000154 	.word	0x20000154

0800053c <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 8000540:	f7ff ffc4 	bl	80004cc <ADC_Select_CH1>
	current[1]=0;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <ADC_read_1+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <ADC_read_1+0x3c>)
 800054c:	f002 fdd4 	bl	80030f8 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000550:	2164      	movs	r1, #100	; 0x64
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <ADC_read_1+0x3c>)
 8000554:	f002 ff1c 	bl	8003390 <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <ADC_read_1+0x3c>)
 800055a:	f003 f999 	bl	8003890 <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <ADC_read_1+0x38>)
 8000564:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <ADC_read_1+0x3c>)
 8000568:	f002 fedc 	bl	8003324 <HAL_ADC_Stop>


	 		  return current[1];
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <ADC_read_1+0x38>)
 800056e:	885b      	ldrh	r3, [r3, #2]
	  }
 8000570:	4618      	mov	r0, r3
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000570 	.word	0x20000570
 8000578:	20000154 	.word	0x20000154

0800057c <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000580:	f7ff ffc0 	bl	8000504 <ADC_Select_CH12>
	current[0]=0;
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <ADC_read_12+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <ADC_read_12+0x3c>)
 800058c:	f002 fdb4 	bl	80030f8 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000590:	2164      	movs	r1, #100	; 0x64
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <ADC_read_12+0x3c>)
 8000594:	f002 fefc 	bl	8003390 <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <ADC_read_12+0x3c>)
 800059a:	f003 f979 	bl	8003890 <HAL_ADC_GetValue>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <ADC_read_12+0x38>)
 80005a4:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <ADC_read_12+0x3c>)
 80005a8:	f002 febc 	bl	8003324 <HAL_ADC_Stop>


	 		  return current[0];
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <ADC_read_12+0x38>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
	  }
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000570 	.word	0x20000570
 80005b8:	20000154 	.word	0x20000154

080005bc <PWM_correction>:


void PWM_correction(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e06f      	b.n	80006a8 <PWM_correction+0xec>

	//pwm[i]=hall_sens[3]*5;
 //  if(pwm_tgr!=0){
	pwm[i]=pwm_cmd;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4a44      	ldr	r2, [pc, #272]	; (80006dc <PWM_correction+0x120>)
 80005cc:	8812      	ldrh	r2, [r2, #0]
 80005ce:	b291      	uxth	r1, r2
 80005d0:	4a43      	ldr	r2, [pc, #268]	; (80006e0 <PWM_correction+0x124>)
 80005d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  //  pwm_tgr=pwm_tgr-1;
  // }

	if((current[i]>=limit)&&(pwm[i]>=10)){
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a42      	ldr	r2, [pc, #264]	; (80006e4 <PWM_correction+0x128>)
 80005da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <PWM_correction+0x12c>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d314      	bcc.n	8000610 <PWM_correction+0x54>
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a3d      	ldr	r2, [pc, #244]	; (80006e0 <PWM_correction+0x124>)
 80005ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	d90e      	bls.n	8000610 <PWM_correction+0x54>
	pwm[i]=pwm[i]-10;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <PWM_correction+0x124>)
 80005f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	3a0a      	subs	r2, #10
 80005fe:	b291      	uxth	r1, r2
 8000600:	4a37      	ldr	r2, [pc, #220]	; (80006e0 <PWM_correction+0x124>)
 8000602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    LED_2_ON;
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	4838      	ldr	r0, [pc, #224]	; (80006ec <PWM_correction+0x130>)
 800060c:	f005 f87a 	bl	8005704 <HAL_GPIO_WritePin>
	}

	if(current[i]>=330){
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <PWM_correction+0x128>)
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800061c:	d330      	bcc.n	8000680 <PWM_correction+0xc4>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4833      	ldr	r0, [pc, #204]	; (80006f0 <PWM_correction+0x134>)
 8000622:	f009 faa1 	bl	8009b68 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	4831      	ldr	r0, [pc, #196]	; (80006f0 <PWM_correction+0x134>)
 800062a:	f009 fa9d 	bl	8009b68 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4830      	ldr	r0, [pc, #192]	; (80006f4 <PWM_correction+0x138>)
 8000632:	f009 fa99 	bl	8009b68 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	482f      	ldr	r0, [pc, #188]	; (80006f8 <PWM_correction+0x13c>)
 800063a:	f009 fa95 	bl	8009b68 <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800063e:	2100      	movs	r1, #0
 8000640:	482b      	ldr	r0, [pc, #172]	; (80006f0 <PWM_correction+0x134>)
 8000642:	f00a fec9 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000646:	2104      	movs	r1, #4
 8000648:	4829      	ldr	r0, [pc, #164]	; (80006f0 <PWM_correction+0x134>)
 800064a:	f00a fec5 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	4828      	ldr	r0, [pc, #160]	; (80006f4 <PWM_correction+0x138>)
 8000652:	f00a fec1 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000656:	2100      	movs	r1, #0
 8000658:	4827      	ldr	r0, [pc, #156]	; (80006f8 <PWM_correction+0x13c>)
 800065a:	f00a febd 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <PWM_correction+0x124>)
 8000660:	220a      	movs	r2, #10
 8000662:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <PWM_correction+0x124>)
 8000666:	220a      	movs	r2, #10
 8000668:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <PWM_correction+0x124>)
 800066c:	220a      	movs	r2, #10
 800066e:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <PWM_correction+0x124>)
 8000672:	220a      	movs	r2, #10
 8000674:	80da      	strh	r2, [r3, #6]

		            LED_2_ON;}
 8000676:	2201      	movs	r2, #1
 8000678:	2101      	movs	r1, #1
 800067a:	481c      	ldr	r0, [pc, #112]	; (80006ec <PWM_correction+0x130>)
 800067c:	f005 f842 	bl	8005704 <HAL_GPIO_WritePin>

	if((pwm[i]>=10)&&(current[i]<=10)){LED_2_OFF;}
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <PWM_correction+0x124>)
 8000684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000688:	2b09      	cmp	r3, #9
 800068a:	d90a      	bls.n	80006a2 <PWM_correction+0xe6>
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <PWM_correction+0x128>)
 8000690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000694:	2b0a      	cmp	r3, #10
 8000696:	d804      	bhi.n	80006a2 <PWM_correction+0xe6>
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4813      	ldr	r0, [pc, #76]	; (80006ec <PWM_correction+0x130>)
 800069e:	f005 f831 	bl	8005704 <HAL_GPIO_WritePin>
for(uint8_t i=0;i<4;i++){
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d98c      	bls.n	80005c8 <PWM_correction+0xc>

}
pwm_n=(pwm[0]+pwm[1]+pwm[2]+pwm[3])/4;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <PWM_correction+0x124>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <PWM_correction+0x124>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <PWM_correction+0x124>)
 80006bc:	8892      	ldrh	r2, [r2, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <PWM_correction+0x124>)
 80006c2:	88d2      	ldrh	r2, [r2, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da00      	bge.n	80006cc <PWM_correction+0x110>
 80006ca:	3303      	adds	r3, #3
 80006cc:	109b      	asrs	r3, r3, #2
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <PWM_correction+0x140>)
 80006d2:	801a      	strh	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000584 	.word	0x20000584
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000570 	.word	0x20000570
 80006e8:	20000008 	.word	0x20000008
 80006ec:	48001400 	.word	0x48001400
 80006f0:	2000025c 	.word	0x2000025c
 80006f4:	20000340 	.word	0x20000340
 80006f8:	2000038c 	.word	0x2000038c
 80006fc:	20000582 	.word	0x20000582

08000700 <I2C_send>:
////////////////////////////////////////////////////////////////////////////////////////////

void I2C_send(uint8_t data, uint8_t flags)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af02      	add	r7, sp, #8
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	 // бесконечный цикл
        for(;;) {
                // проверяем, готово ли устройство по адресу lcd_addr для связи
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2201      	movs	r2, #1
 8000716:	214e      	movs	r1, #78	; 0x4e
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <I2C_send+0x9c>)
 800071a:	f005 f9ef 	bl	8005afc <HAL_I2C_IsDeviceReady>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]
	         // если да, то выходим из бесконечного цикла
                if(res == HAL_OK) break;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d000      	beq.n	800072a <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 8000728:	e7f2      	b.n	8000710 <I2C_send+0x10>
                if(res == HAL_OK) break;
 800072a:	bf00      	nop
	    }
        // операция �? с 1111 0000 приводит к обнулению бит с 0 по 3, остаются биты с 4 по 7
	uint8_t up = data & 0xF0;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f023 030f 	bic.w	r3, r3, #15
 8000732:	73bb      	strb	r3, [r7, #14]
        // то же самое, но data сдвигается на 4 бита влево
        uint8_t lo = (data << 4) & 0xF0;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
         // 4-7 биты содержат информацию, биты 0-3 настраивают работу дисплея
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800073a:	7bba      	ldrb	r2, [r7, #14]
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	4313      	orrs	r3, r2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f043 030c 	orr.w	r3, r3, #12
 8000746:	b2db      	uxtb	r3, r3
 8000748:	723b      	strb	r3, [r7, #8]
         // дублирование сигнала, на выводе Е в этот раз 0
	data_arr[1] = up|flags|BACKLIGHT;
 800074a:	7bba      	ldrb	r2, [r7, #14]
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4313      	orrs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	b2db      	uxtb	r3, r3
 8000758:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800075a:	7b7a      	ldrb	r2, [r7, #13]
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	4313      	orrs	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f043 030c 	orr.w	r3, r3, #12
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 800076a:	7b7a      	ldrb	r2, [r7, #13]
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	4313      	orrs	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	b2db      	uxtb	r3, r3
 8000778:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800077a:	f107 0208 	add.w	r2, r7, #8
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2304      	movs	r3, #4
 8000786:	214e      	movs	r1, #78	; 0x4e
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <I2C_send+0x9c>)
 800078a:	f005 f8c3 	bl	8005914 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 800078e:	2005      	movs	r0, #5
 8000790:	f002 fa90 	bl	8002cb4 <HAL_Delay>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001e8 	.word	0x200001e8

080007a0 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	4313      	orrs	r3, r2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <lcd_write_nibble+0x7c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	b25a      	sxtb	r2, r3
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80007e0:	f107 020f 	add.w	r2, r7, #15
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2301      	movs	r3, #1
 80007ea:	214e      	movs	r1, #78	; 0x4e
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <lcd_write_nibble+0x80>)
 80007ee:	f005 f891 	bl	8005914 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f002 fa5e 	bl	8002cb4 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f023 0304 	bic.w	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	; 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <lcd_write_nibble+0x80>)
 8000810:	f005 f880 	bl	8005914 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000000a 	.word	0x2000000a
 8000820:	200001e8 	.word	0x200001e8

08000824 <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffad 	bl	80007a0 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffa8 	bl	80007a0 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d002      	beq.n	800085c <lcd_send_cmd+0x38>
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d102      	bne.n	8000862 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 800085c:	2002      	movs	r0, #2
 800085e:	f002 fa29 	bl	8002cb4 <HAL_Delay>
  }
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 030f 	and.w	r3, r3, #15
 8000880:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff8a 	bl	80007a0 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff85 	bl	80007a0 <lcd_write_nibble>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80008a2:	2032      	movs	r0, #50	; 0x32
 80008a4:	f002 fa06 	bl	8002cb4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2003      	movs	r0, #3
 80008ac:	f7ff ff78 	bl	80007a0 <lcd_write_nibble>
  HAL_Delay(5);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f002 f9ff 	bl	8002cb4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2003      	movs	r0, #3
 80008ba:	f7ff ff71 	bl	80007a0 <lcd_write_nibble>
  HAL_Delay(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f002 f9f8 	bl	8002cb4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2003      	movs	r0, #3
 80008c8:	f7ff ff6a 	bl	80007a0 <lcd_write_nibble>
  HAL_Delay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f002 f9f1 	bl	8002cb4 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff ff63 	bl	80007a0 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80008da:	2028      	movs	r0, #40	; 0x28
 80008dc:	f7ff ffa2 	bl	8000824 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80008e0:	200c      	movs	r0, #12
 80008e2:	f7ff ff9f 	bl	8000824 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80008e6:	2006      	movs	r0, #6
 80008e8:	f7ff ff9c 	bl	8000824 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff99 	bl	8000824 <lcd_send_cmd>
  HAL_Delay(2);
 80008f2:	2002      	movs	r0, #2
 80008f4:	f002 f9de 	bl	8002cb4 <HAL_Delay>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000904:	e006      	b.n	8000914 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffab 	bl	800086a <lcd_send_data>
  while (*str) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f4      	bne.n	8000906 <lcd_write_string+0xa>
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	3b01      	subs	r3, #1
 800093c:	2b03      	cmp	r3, #3
 800093e:	d817      	bhi.n	8000970 <lcd_set_cursor+0x48>
 8000940:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <lcd_set_cursor+0x20>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000959 	.word	0x08000959
 800094c:	0800095f 	.word	0x0800095f
 8000950:	08000965 	.word	0x08000965
 8000954:	0800096b 	.word	0x0800096b
        case 1:
            address = 0x80;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	73fb      	strb	r3, [r7, #15]
            break;
 800095c:	e00a      	b.n	8000974 <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	73fb      	strb	r3, [r7, #15]
            break;
 8000962:	e007      	b.n	8000974 <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 8000964:	2394      	movs	r3, #148	; 0x94
 8000966:	73fb      	strb	r3, [r7, #15]
            break;
 8000968:	e004      	b.n	8000974 <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 800096a:	23d4      	movs	r3, #212	; 0xd4
 800096c:	73fb      	strb	r3, [r7, #15]
            break;
 800096e:	e001      	b.n	8000974 <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	4413      	add	r3, r2
 800097a:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff4d 	bl	8000824 <lcd_send_cmd>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop

08000994 <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff43 	bl	8000824 <lcd_send_cmd>
    HAL_Delay(2);
 800099e:	2002      	movs	r0, #2
 80009a0:	f002 f988 	bl	8002cb4 <HAL_Delay>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <filter>:
}

//////////////////////////////////////////////////////////////////////////////////////////////

int filter(int x)
  {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  static int n;
  static int m[N];
  static int y;
  y=y+(x-m[n]);
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <filter+0x68>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <filter+0x6c>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	1ad2      	subs	r2, r2, r3
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <filter+0x70>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <filter+0x70>)
 80009c6:	6013      	str	r3, [r2, #0]
  m[n]=x;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <filter+0x68>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4911      	ldr	r1, [pc, #68]	; (8000a14 <filter+0x6c>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  n=(n+1)%N;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <filter+0x68>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1c59      	adds	r1, r3, #1
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <filter+0x74>)
 80009dc:	fb83 2301 	smull	r2, r3, r3, r1
 80009e0:	10da      	asrs	r2, r3, #3
 80009e2:	17cb      	asrs	r3, r1, #31
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	1aca      	subs	r2, r1, r3
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <filter+0x68>)
 80009f2:	601a      	str	r2, [r3, #0]
  return y/N;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <filter+0x70>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <filter+0x74>)
 80009fa:	fb82 1203 	smull	r1, r2, r2, r3
 80009fe:	10d2      	asrs	r2, r2, #3
 8000a00:	17db      	asrs	r3, r3, #31
 8000a02:	1ad3      	subs	r3, r2, r3
  }
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	200005c0 	.word	0x200005c0
 8000a14:	200005c4 	.word	0x200005c4
 8000a18:	20000614 	.word	0x20000614
 8000a1c:	66666667 	.word	0x66666667

08000a20 <page>:

//////////////////////////////////////////////////////////////////////////////////////////////
void page(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	if((!CLEAR)&&(!page_flag)){
 8000a24:	2120      	movs	r1, #32
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <page+0x74>)
 8000a28:	f004 fe54 	bl	80056d4 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d113      	bne.n	8000a5a <page+0x3a>
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <page+0x78>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10f      	bne.n	8000a5a <page+0x3a>
		LED_3_ON;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <page+0x7c>)
 8000a40:	f004 fe60 	bl	8005704 <HAL_GPIO_WritePin>
		page_flag=1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <page+0x78>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
        page_num++;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <page+0x80>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <page+0x80>)
 8000a54:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 8000a56:	f7ff ff9d 	bl	8000994 <lcd_clear>
	}

	if((CLEAR)&&(page_flag)){
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <page+0x74>)
 8000a5e:	f004 fe39 	bl	80056d4 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d012      	beq.n	8000a8e <page+0x6e>
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <page+0x78>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00e      	beq.n	8000a8e <page+0x6e>
			LED_3_OFF;
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <page+0x7c>)
 8000a76:	f004 fe45 	bl	8005704 <HAL_GPIO_WritePin>

			 if(page_num>2){page_num=0;}
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <page+0x80>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d902      	bls.n	8000a88 <page+0x68>
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <page+0x80>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			 page_flag=0;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <page+0x78>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]

		}

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48000400 	.word	0x48000400
 8000a98:	2000059d 	.word	0x2000059d
 8000a9c:	48001400 	.word	0x48001400
 8000aa0:	2000059c 	.word	0x2000059c

08000aa4 <I2C_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void I2C_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

	//I2C1 GPIO

	GPIOB->MODER |= ( GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1 );
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <I2C_Init+0x70>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <I2C_Init+0x70>)
 8000aae:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000ab2:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= ( GPIO_OTYPER_OT_9 | GPIO_OTYPER_OT_8 );
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <I2C_Init+0x70>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <I2C_Init+0x70>)
 8000aba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000abe:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR8_1|GPIO_PUPDR_PUPDR9_1);
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <I2C_Init+0x70>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <I2C_Init+0x70>)
 8000ac6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000aca:	60d3      	str	r3, [r2, #12]


	  SET_BIT(RCC->AHBENR,RCC_AHBENR_GPIOBEN);
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <I2C_Init+0x74>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <I2C_Init+0x74>)
 8000ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad6:	6153      	str	r3, [r2, #20]
	  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN);
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <I2C_Init+0x74>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <I2C_Init+0x74>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	61d3      	str	r3, [r2, #28]

	  GPIOB->AFR[1] |= (4<<0) | (4<<4);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <I2C_Init+0x70>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <I2C_Init+0x70>)
 8000aea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000aee:	6253      	str	r3, [r2, #36]	; 0x24

	  I2C1->CR1 |= (1<<15);  // reset the I2C
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <I2C_Init+0x78>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <I2C_Init+0x78>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	6013      	str	r3, [r2, #0]
	  I2C1->CR1 &= ~(1<<15);  // Normal operation
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <I2C_Init+0x78>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <I2C_Init+0x78>)
 8000b02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	48000400 	.word	0x48000400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40005400 	.word	0x40005400

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f002 f85f 	bl	8002be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 fac3 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f001 f8b3 	bl	8001c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b32:	f001 f877 	bl	8001c24 <MX_DMA_Init>
  MX_ADC2_Init();
 8000b36:	f000 fb99 	bl	800126c <MX_ADC2_Init>
  MX_TIM1_Init();
 8000b3a:	f000 fd37 	bl	80015ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b3e:	f000 fdef 	bl	8001720 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b42:	f001 f80f 	bl	8001b64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b46:	f001 f83d 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000b4a:	f000 feb9 	bl	80018c0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000b4e:	f000 fc93 	bl	8001478 <MX_I2C1_Init>
  MX_RTC_Init();
 8000b52:	f000 fcd1 	bl	80014f8 <MX_RTC_Init>
  MX_TIM15_Init();
 8000b56:	f000 ff61 	bl	8001a1c <MX_TIM15_Init>
  MX_ADC1_Init();
 8000b5a:	f000 fb17 	bl	800118c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000b5e:	f000 fc1b 	bl	8001398 <MX_ADC3_Init>
  MX_TIM3_Init();
 8000b62:	f000 fe5f 	bl	8001824 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_2_ON;
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	48b5      	ldr	r0, [pc, #724]	; (8000e40 <main+0x320>)
 8000b6c:	f004 fdca 	bl	8005704 <HAL_GPIO_WritePin>
	TX_2;
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f004 fdc3 	bl	8005704 <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 8000b7e:	4bb1      	ldr	r3, [pc, #708]	; (8000e44 <main+0x324>)
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	4bb1      	ldr	r3, [pc, #708]	; (8000e48 <main+0x328>)
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 8000b86:	4baf      	ldr	r3, [pc, #700]	; (8000e44 <main+0x324>)
 8000b88:	885a      	ldrh	r2, [r3, #2]
 8000b8a:	4baf      	ldr	r3, [pc, #700]	; (8000e48 <main+0x328>)
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 8000b8e:	4bad      	ldr	r3, [pc, #692]	; (8000e44 <main+0x324>)
 8000b90:	889a      	ldrh	r2, [r3, #4]
 8000b92:	4bae      	ldr	r3, [pc, #696]	; (8000e4c <main+0x32c>)
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 8000b96:	4bab      	ldr	r3, [pc, #684]	; (8000e44 <main+0x324>)
 8000b98:	88da      	ldrh	r2, [r3, #6]
 8000b9a:	4bad      	ldr	r3, [pc, #692]	; (8000e50 <main+0x330>)
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	48ac      	ldr	r0, [pc, #688]	; (8000e54 <main+0x334>)
 8000ba2:	f008 fee1 	bl	8009968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	48aa      	ldr	r0, [pc, #680]	; (8000e54 <main+0x334>)
 8000baa:	f008 fedd 	bl	8009968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	48a9      	ldr	r0, [pc, #676]	; (8000e58 <main+0x338>)
 8000bb2:	f008 fed9 	bl	8009968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	48a8      	ldr	r0, [pc, #672]	; (8000e5c <main+0x33c>)
 8000bba:	f008 fed5 	bl	8009968 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	48a7      	ldr	r0, [pc, #668]	; (8000e60 <main+0x340>)
 8000bc2:	f009 f8c9 	bl	8009d58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	48a5      	ldr	r0, [pc, #660]	; (8000e60 <main+0x340>)
 8000bca:	f009 f8c5 	bl	8009d58 <HAL_TIM_IC_Start_IT>

  PORT1_ON;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd4:	48a3      	ldr	r0, [pc, #652]	; (8000e64 <main+0x344>)
 8000bd6:	f004 fd95 	bl	8005704 <HAL_GPIO_WritePin>
  PORT2_ON;
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	48a0      	ldr	r0, [pc, #640]	; (8000e64 <main+0x344>)
 8000be2:	f004 fd8f 	bl	8005704 <HAL_GPIO_WritePin>
  PORT3_ON;
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	489d      	ldr	r0, [pc, #628]	; (8000e64 <main+0x344>)
 8000bee:	f004 fd89 	bl	8005704 <HAL_GPIO_WritePin>
  PORT4_ON;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf8:	489a      	ldr	r0, [pc, #616]	; (8000e64 <main+0x344>)
 8000bfa:	f004 fd83 	bl	8005704 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 8000bfe:	2105      	movs	r1, #5
 8000c00:	4899      	ldr	r0, [pc, #612]	; (8000e68 <main+0x348>)
 8000c02:	f003 f939 	bl	8003e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 8000c06:	2104      	movs	r1, #4
 8000c08:	4898      	ldr	r0, [pc, #608]	; (8000e6c <main+0x34c>)
 8000c0a:	f003 f935 	bl	8003e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4897      	ldr	r0, [pc, #604]	; (8000e70 <main+0x350>)
 8000c12:	f003 f931 	bl	8003e78 <HAL_ADCEx_Calibration_Start>

  flag=1;
 8000c16:	4b97      	ldr	r3, [pc, #604]	; (8000e74 <main+0x354>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000c1c:	2064      	movs	r0, #100	; 0x64
 8000c1e:	f002 f849 	bl	8002cb4 <HAL_Delay>

  I2C_Init();
 8000c22:	f7ff ff3f 	bl	8000aa4 <I2C_Init>



  lcd_init();
 8000c26:	f7ff fe3a 	bl	800089e <lcd_init>
  lcd_clear();
 8000c2a:	f7ff feb3 	bl	8000994 <lcd_clear>
    char *text = "PWM-";
 8000c2e:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <main+0x358>)
 8000c30:	60fb      	str	r3, [r7, #12]
     char int_to_str[10];

     LED_2_OFF;
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	4882      	ldr	r0, [pc, #520]	; (8000e40 <main+0x320>)
 8000c38:	f004 fd64 	bl	8005704 <HAL_GPIO_WritePin>



      I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2030      	movs	r0, #48	; 0x30
 8000c40:	f7ff fd5e 	bl	8000700 <I2C_send>
      I2C_send(0b00000010,0);   // установка курсора в начале строки
 8000c44:	2100      	movs	r1, #0
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fd5a 	bl	8000700 <I2C_send>
      I2C_send(0b00001100,0);   // нормальный режим работы
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f7ff fd56 	bl	8000700 <I2C_send>
      I2C_send(0b00000001,0);   // очистка дисплея
 8000c54:	2100      	movs	r1, #0
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fd52 	bl	8000700 <I2C_send>
	 //	 	HAL_Delay(500);




	  if(flag==1){
 8000c5c:	4b85      	ldr	r3, [pc, #532]	; (8000e74 <main+0x354>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1fa      	bne.n	8000c5c <main+0x13c>
		  HAL_ADC_Stop_DMA(&hadc2);
 8000c66:	4880      	ldr	r0, [pc, #512]	; (8000e68 <main+0x348>)
 8000c68:	f002 fdb0 	bl	80037cc <HAL_ADC_Stop_DMA>
		  current[2]=hall_sens[4];
 8000c6c:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <main+0x35c>)
 8000c6e:	891a      	ldrh	r2, [r3, #8]
 8000c70:	4b83      	ldr	r3, [pc, #524]	; (8000e80 <main+0x360>)
 8000c72:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Start(&hadc1);
 8000c74:	487d      	ldr	r0, [pc, #500]	; (8000e6c <main+0x34c>)
 8000c76:	f002 fa3f 	bl	80030f8 <HAL_ADC_Start>
		 	  		  	 HAL_ADC_PollForConversion(&hadc1, 100);
 8000c7a:	2164      	movs	r1, #100	; 0x64
 8000c7c:	487b      	ldr	r0, [pc, #492]	; (8000e6c <main+0x34c>)
 8000c7e:	f002 fb87 	bl	8003390 <HAL_ADC_PollForConversion>
		 	  		     current[3]=0;
 8000c82:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <main+0x360>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	80da      	strh	r2, [r3, #6]
		 	  		  	 current[3]=HAL_ADC_GetValue(&hadc1);
 8000c88:	4878      	ldr	r0, [pc, #480]	; (8000e6c <main+0x34c>)
 8000c8a:	f002 fe01 	bl	8003890 <HAL_ADC_GetValue>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <main+0x360>)
 8000c94:	80da      	strh	r2, [r3, #6]
		 	  		  	 HAL_ADC_Stop(&hadc1);
 8000c96:	4875      	ldr	r0, [pc, #468]	; (8000e6c <main+0x34c>)
 8000c98:	f002 fb44 	bl	8003324 <HAL_ADC_Stop>

		 	  		  ADC_read_1();
 8000c9c:	f7ff fc4e 	bl	800053c <ADC_read_1>
		 	  		  ADC_read_12();
 8000ca0:	f7ff fc6c 	bl	800057c <ADC_read_12>

                current_avg=(current[0]+current[1]+current[2]+current[3])/4;
 8000ca4:	4b76      	ldr	r3, [pc, #472]	; (8000e80 <main+0x360>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b75      	ldr	r3, [pc, #468]	; (8000e80 <main+0x360>)
 8000cac:	885b      	ldrh	r3, [r3, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a73      	ldr	r2, [pc, #460]	; (8000e80 <main+0x360>)
 8000cb2:	8892      	ldrh	r2, [r2, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a72      	ldr	r2, [pc, #456]	; (8000e80 <main+0x360>)
 8000cb8:	88d2      	ldrh	r2, [r2, #6]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da00      	bge.n	8000cc2 <main+0x1a2>
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	109b      	asrs	r3, r3, #2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <main+0x364>)
 8000cc8:	801a      	strh	r2, [r3, #0]
                current_sum=current[0]+current[1]+current[2]+current[3];
 8000cca:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <main+0x360>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <main+0x360>)
 8000cd0:	885b      	ldrh	r3, [r3, #2]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <main+0x360>)
 8000cd8:	889b      	ldrh	r3, [r3, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <main+0x360>)
 8000ce0:	88db      	ldrh	r3, [r3, #6]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <main+0x368>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		 	  		  adc_count++;
 8000cea:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <main+0x36c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <main+0x36c>)
 8000cf4:	701a      	strb	r2, [r3, #0]



		 	  		adc_filter[0]= filter(current[0]);
 8000cf6:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <main+0x360>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe54 	bl	80009a8 <filter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <main+0x370>)
 8000d06:	701a      	strb	r2, [r3, #0]
		 	  		adc_filter[1]= filter(current[1]);
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <main+0x360>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe4b 	bl	80009a8 <filter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <main+0x370>)
 8000d18:	705a      	strb	r2, [r3, #1]
		 	  		adc_filter[2]= filter(current[2]);
 8000d1a:	4b59      	ldr	r3, [pc, #356]	; (8000e80 <main+0x360>)
 8000d1c:	889b      	ldrh	r3, [r3, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe42 	bl	80009a8 <filter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <main+0x370>)
 8000d2a:	709a      	strb	r2, [r3, #2]
		 	  		adc_filter[3]= filter(current[3]);
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <main+0x360>)
 8000d2e:	88db      	ldrh	r3, [r3, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe39 	bl	80009a8 <filter>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <main+0x370>)
 8000d3c:	70da      	strb	r2, [r3, #3]

		 	  	  if((page_num==0)&&(adc_count==20)){
 8000d3e:	4b55      	ldr	r3, [pc, #340]	; (8000e94 <main+0x374>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d149      	bne.n	8000dda <main+0x2ba>
 8000d46:	4b51      	ldr	r3, [pc, #324]	; (8000e8c <main+0x36c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b14      	cmp	r3, #20
 8000d4c:	d145      	bne.n	8000dda <main+0x2ba>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000d4e:	4b52      	ldr	r3, [pc, #328]	; (8000e98 <main+0x378>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	463b      	mov	r3, r7
 8000d54:	4951      	ldr	r1, [pc, #324]	; (8000e9c <main+0x37c>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00b fc8e 	bl	800c678 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fde2 	bl	8000928 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8000d64:	463b      	mov	r3, r7
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fdc8 	bl	80008fc <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_n,pwm_n/20);
 8000d6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <main+0x380>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <main+0x380>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <main+0x384>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4638      	mov	r0, r7
 8000d82:	460a      	mov	r2, r1
 8000d84:	4948      	ldr	r1, [pc, #288]	; (8000ea8 <main+0x388>)
 8000d86:	f00b fc77 	bl	800c678 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff fdcb 	bl	8000928 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fdb1 	bl	80008fc <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <main+0x364>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	463b      	mov	r3, r7
 8000da2:	4942      	ldr	r1, [pc, #264]	; (8000eac <main+0x38c>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00b fc67 	bl	800c678 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2003      	movs	r0, #3
 8000dae:	f7ff fdbb 	bl	8000928 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000db2:	463b      	mov	r3, r7
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fda1 	bl	80008fc <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <main+0x390>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	493c      	ldr	r1, [pc, #240]	; (8000eb4 <main+0x394>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b fc57 	bl	800c678 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2004      	movs	r0, #4
 8000dce:	f7ff fdab 	bl	8000928 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd91 	bl	80008fc <lcd_write_string>



		 	  	  }

		 	  	  if((page_num==2)&&(adc_count==20)){
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <main+0x374>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	f040 8086 	bne.w	8000ef0 <main+0x3d0>
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <main+0x36c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b14      	cmp	r3, #20
 8000dea:	f040 8081 	bne.w	8000ef0 <main+0x3d0>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000dee:	2200      	movs	r2, #0
 8000df0:	4931      	ldr	r1, [pc, #196]	; (8000eb8 <main+0x398>)
 8000df2:	4832      	ldr	r0, [pc, #200]	; (8000ebc <main+0x39c>)
 8000df4:	f008 fb11 	bl	800941a <HAL_RTC_GetTime>
		 	  	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4931      	ldr	r1, [pc, #196]	; (8000ec0 <main+0x3a0>)
 8000dfc:	482f      	ldr	r0, [pc, #188]	; (8000ebc <main+0x39c>)
 8000dfe:	f008 fbee 	bl	80095de <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <main+0x3a4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <main+0x3a8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <main+0x3ac>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4638      	mov	r0, r7
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	460b      	mov	r3, r1
 8000e18:	492d      	ldr	r1, [pc, #180]	; (8000ed0 <main+0x3b0>)
 8000e1a:	f00b fc2d 	bl	800c678 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fd81 	bl	8000928 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8000e26:	463b      	mov	r3, r7
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fd67 	bl	80008fc <lcd_write_string>

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <main+0x398>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <main+0x398>)
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <main+0x398>)
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	e049      	b.n	8000ed4 <main+0x3b4>
 8000e40:	48001400 	.word	0x48001400
 8000e44:	20000000 	.word	0x20000000
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	40013400 	.word	0x40013400
 8000e50:	40014000 	.word	0x40014000
 8000e54:	2000025c 	.word	0x2000025c
 8000e58:	20000340 	.word	0x20000340
 8000e5c:	2000038c 	.word	0x2000038c
 8000e60:	200002a8 	.word	0x200002a8
 8000e64:	48000400 	.word	0x48000400
 8000e68:	20000104 	.word	0x20000104
 8000e6c:	200000b4 	.word	0x200000b4
 8000e70:	20000154 	.word	0x20000154
 8000e74:	20000587 	.word	0x20000587
 8000e78:	0800cf6c 	.word	0x0800cf6c
 8000e7c:	20000578 	.word	0x20000578
 8000e80:	20000570 	.word	0x20000570
 8000e84:	2000059e 	.word	0x2000059e
 8000e88:	200005a0 	.word	0x200005a0
 8000e8c:	20000596 	.word	0x20000596
 8000e90:	20000598 	.word	0x20000598
 8000e94:	2000059c 	.word	0x2000059c
 8000e98:	20000590 	.word	0x20000590
 8000e9c:	0800cf74 	.word	0x0800cf74
 8000ea0:	20000582 	.word	0x20000582
 8000ea4:	cccccccd 	.word	0xcccccccd
 8000ea8:	0800cf88 	.word	0x0800cf88
 8000eac:	0800cfa0 	.word	0x0800cfa0
 8000eb0:	20000594 	.word	0x20000594
 8000eb4:	0800cfb0 	.word	0x0800cfb0
 8000eb8:	200005a8 	.word	0x200005a8
 8000ebc:	2000023c 	.word	0x2000023c
 8000ec0:	200005bc 	.word	0x200005bc
 8000ec4:	200005a3 	.word	0x200005a3
 8000ec8:	200005a2 	.word	0x200005a2
 8000ecc:	200005a4 	.word	0x200005a4
 8000ed0:	0800cfbc 	.word	0x0800cfbc
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4968      	ldr	r1, [pc, #416]	; (800107c <main+0x55c>)
 8000edc:	f00b fbcc 	bl	800c678 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fd20 	bl	8000928 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fd06 	bl	80008fc <lcd_write_string>

		 	  			 	  	  }



		 	  	  if(page_num==1){
 8000ef0:	4b63      	ldr	r3, [pc, #396]	; (8001080 <main+0x560>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	f040 80a3 	bne.w	8001040 <main+0x520>
		 	  	                 	if(adc_count==18){
 8000efa:	4b62      	ldr	r3, [pc, #392]	; (8001084 <main+0x564>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d157      	bne.n	8000fb2 <main+0x492>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8000f02:	4b61      	ldr	r3, [pc, #388]	; (8001088 <main+0x568>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4a61      	ldr	r2, [pc, #388]	; (800108c <main+0x56c>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <main+0x568>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4638      	mov	r0, r7
 8000f18:	495d      	ldr	r1, [pc, #372]	; (8001090 <main+0x570>)
 8000f1a:	f00b fbad 	bl	800c678 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fd01 	bl	8000928 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fce7 	bl	80008fc <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <main+0x568>)
 8000f30:	885b      	ldrh	r3, [r3, #2]
 8000f32:	4a56      	ldr	r2, [pc, #344]	; (800108c <main+0x56c>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b52      	ldr	r3, [pc, #328]	; (8001088 <main+0x568>)
 8000f40:	885b      	ldrh	r3, [r3, #2]
 8000f42:	4638      	mov	r0, r7
 8000f44:	4952      	ldr	r1, [pc, #328]	; (8001090 <main+0x570>)
 8000f46:	f00b fb97 	bl	800c678 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f7ff fceb 	bl	8000928 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000f52:	463b      	mov	r3, r7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fcd1 	bl	80008fc <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <main+0x568>)
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	4a4b      	ldr	r2, [pc, #300]	; (800108c <main+0x56c>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <main+0x568>)
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	4638      	mov	r0, r7
 8000f70:	4947      	ldr	r1, [pc, #284]	; (8001090 <main+0x570>)
 8000f72:	f00b fb81 	bl	800c678 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f7ff fcd5 	bl	8000928 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fcbb 	bl	80008fc <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <main+0x568>)
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <main+0x56c>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <main+0x568>)
 8000f98:	88db      	ldrh	r3, [r3, #6]
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	493c      	ldr	r1, [pc, #240]	; (8001090 <main+0x570>)
 8000f9e:	f00b fb6b 	bl	800c678 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff fcbf 	bl	8000928 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fca5 	bl	80008fc <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count==180){
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <main+0x564>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2bb4      	cmp	r3, #180	; 0xb4
 8000fb8:	d142      	bne.n	8001040 <main+0x520>


		 	  			sprintf(int_to_str, "Adc-%03d",current[0]);
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <main+0x574>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4935      	ldr	r1, [pc, #212]	; (8001098 <main+0x578>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00b fb57 	bl	800c678 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8000fca:	210d      	movs	r1, #13
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff fcab 	bl	8000928 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fc91 	bl	80008fc <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[1]);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <main+0x574>)
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	492d      	ldr	r1, [pc, #180]	; (8001098 <main+0x578>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00b fb47 	bl	800c678 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8000fea:	210d      	movs	r1, #13
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff fc9b 	bl	8000928 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fc81 	bl	80008fc <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[2]);
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <main+0x574>)
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	461a      	mov	r2, r3
 8001000:	463b      	mov	r3, r7
 8001002:	4925      	ldr	r1, [pc, #148]	; (8001098 <main+0x578>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00b fb37 	bl	800c678 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 800100a:	210d      	movs	r1, #13
 800100c:	2003      	movs	r0, #3
 800100e:	f7ff fc8b 	bl	8000928 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8001012:	463b      	mov	r3, r7
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fc71 	bl	80008fc <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc-%03d",current[3]);
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <main+0x574>)
 800101c:	88db      	ldrh	r3, [r3, #6]
 800101e:	461a      	mov	r2, r3
 8001020:	463b      	mov	r3, r7
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <main+0x578>)
 8001024:	4618      	mov	r0, r3
 8001026:	f00b fb27 	bl	800c678 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 800102a:	210d      	movs	r1, #13
 800102c:	2004      	movs	r0, #4
 800102e:	f7ff fc7b 	bl	8000928 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8001032:	463b      	mov	r3, r7
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fc61 	bl	80008fc <lcd_write_string>

		 	  	    adc_count=0;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <main+0x564>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
		 	  		}
		 	  	  }

		 // HAL_Delay(10);

	  	flag=0;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <main+0x57c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]





	  	PWM_correction();
 8001046:	f7ff fab9 	bl	80005bc <PWM_correction>
	  	page();
 800104a:	f7ff fce9 	bl	8000a20 <page>
	  	 TIM1->CCR1=pwm[0];
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <main+0x568>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0x580>)
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <main+0x568>)
 8001058:	885a      	ldrh	r2, [r3, #2]
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <main+0x580>)
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <main+0x568>)
 8001060:	889a      	ldrh	r2, [r3, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <main+0x584>)
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <main+0x568>)
 8001068:	88da      	ldrh	r2, [r3, #6]
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <main+0x588>)
 800106c:	635a      	str	r2, [r3, #52]	; 0x34





	  	HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 800106e:	2205      	movs	r2, #5
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <main+0x58c>)
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <main+0x590>)
 8001074:	f002 fa8e 	bl	8003594 <HAL_ADC_Start_DMA>
	  if(flag==1){
 8001078:	e5f0      	b.n	8000c5c <main+0x13c>
 800107a:	bf00      	nop
 800107c:	0800cfd8 	.word	0x0800cfd8
 8001080:	2000059c 	.word	0x2000059c
 8001084:	20000596 	.word	0x20000596
 8001088:	20000000 	.word	0x20000000
 800108c:	cccccccd 	.word	0xcccccccd
 8001090:	0800cfec 	.word	0x0800cfec
 8001094:	20000570 	.word	0x20000570
 8001098:	0800cffc 	.word	0x0800cffc
 800109c:	20000587 	.word	0x20000587
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40013400 	.word	0x40013400
 80010a8:	40014000 	.word	0x40014000
 80010ac:	20000578 	.word	0x20000578
 80010b0:	20000104 	.word	0x20000104

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b09e      	sub	sp, #120	; 0x78
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010be:	2228      	movs	r2, #40	; 0x28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b fad0 	bl	800c668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	223c      	movs	r2, #60	; 0x3c
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f00b fac2 	bl	800c668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010e4:	230a      	movs	r3, #10
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	2310      	movs	r3, #16
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f8:	2300      	movs	r3, #0
 80010fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001100:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001106:	4618      	mov	r0, r3
 8001108:	f006 fc46 	bl	8007998 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001112:	f001 f811 	bl	8002138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fc6e 	bl	8008a14 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800113e:	f000 fffb 	bl	8002138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <SystemClock_Config+0xd4>)
 8001144:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800115e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001162:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4618      	mov	r0, r3
 8001170:	f007 fe86 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800117a:	f000 ffdd 	bl	8002138 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3778      	adds	r7, #120	; 0x78
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	000131a3 	.word	0x000131a3

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_ADC1_Init+0xdc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_ADC1_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	4817      	ldr	r0, [pc, #92]	; (8001268 <MX_ADC1_Init+0xdc>)
 800120a:	f001 fd95 	bl	8002d38 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001214:	f000 ff90 	bl	8002138 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_ADC1_Init+0xdc>)
 8001224:	f003 f9ae 	bl	8004584 <HAL_ADCEx_MultiModeConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800122e:	f000 ff83 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001232:	2304      	movs	r3, #4
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001236:	2301      	movs	r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800123e:	2302      	movs	r3, #2
 8001240:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC1_Init+0xdc>)
 8001250:	f002 feac 	bl	8003fac <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800125a:	f000 ff6d 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000b4 	.word	0x200000b4

0800126c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_ADC2_Init+0x124>)
 8001284:	4a43      	ldr	r2, [pc, #268]	; (8001394 <MX_ADC2_Init+0x128>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <MX_ADC2_Init+0x124>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_ADC2_Init+0x124>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <MX_ADC2_Init+0x124>)
 8001296:	2201      	movs	r2, #1
 8001298:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <MX_ADC2_Init+0x124>)
 800129c:	2201      	movs	r2, #1
 800129e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012a0:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <MX_ADC2_Init+0x124>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <MX_ADC2_Init+0x124>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <MX_ADC2_Init+0x124>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <MX_ADC2_Init+0x124>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_ADC2_Init+0x124>)
 80012bc:	2205      	movs	r2, #5
 80012be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_ADC2_Init+0x124>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <MX_ADC2_Init+0x124>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_ADC2_Init+0x124>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <MX_ADC2_Init+0x124>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012da:	482d      	ldr	r0, [pc, #180]	; (8001390 <MX_ADC2_Init+0x124>)
 80012dc:	f001 fd2c 	bl	8002d38 <HAL_ADC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80012e6:	f000 ff27 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80012f6:	2302      	movs	r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4822      	ldr	r0, [pc, #136]	; (8001390 <MX_ADC2_Init+0x124>)
 8001308:	f002 fe50 	bl	8003fac <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001312:	f000 ff11 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001316:	2302      	movs	r3, #2
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800131a:	2302      	movs	r3, #2
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <MX_ADC2_Init+0x124>)
 8001324:	f002 fe42 	bl	8003fac <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800132e:	f000 ff03 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001332:	2303      	movs	r3, #3
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001336:	2303      	movs	r3, #3
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_ADC2_Init+0x124>)
 8001340:	f002 fe34 	bl	8003fac <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800134a:	f000 fef5 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800134e:	2304      	movs	r3, #4
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001352:	2304      	movs	r3, #4
 8001354:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_ADC2_Init+0x124>)
 800135c:	f002 fe26 	bl	8003fac <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8001366:	f000 fee7 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800136a:	230c      	movs	r3, #12
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800136e:	2305      	movs	r3, #5
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_ADC2_Init+0x124>)
 8001378:	f002 fe18 	bl	8003fac <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 8001382:	f000 fed9 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000104 	.word	0x20000104
 8001394:	50000100 	.word	0x50000100

08001398 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <MX_ADC3_Init+0xdc>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_ADC3_Init+0xd8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_ADC3_Init+0xd8>)
 8001402:	2204      	movs	r2, #4
 8001404:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_ADC3_Init+0xd8>)
 8001408:	2200      	movs	r2, #0
 800140a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_ADC3_Init+0xd8>)
 800140e:	2200      	movs	r2, #0
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <MX_ADC3_Init+0xd8>)
 8001414:	f001 fc90 	bl	8002d38 <HAL_ADC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800141e:	f000 fe8b 	bl	8002138 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <MX_ADC3_Init+0xd8>)
 800142e:	f003 f8a9 	bl	8004584 <HAL_ADCEx_MultiModeConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001438:	f000 fe7e 	bl	8002138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001440:	2301      	movs	r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001448:	2302      	movs	r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_ADC3_Init+0xd8>)
 800145a:	f002 fda7 	bl	8003fac <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001464:	f000 fe68 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000154 	.word	0x20000154
 8001474:	50000400 	.word	0x50000400

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_I2C1_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_I2C1_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_I2C1_Init+0x74>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x7c>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C1_Init+0x74>)
 800148a:	2224      	movs	r2, #36	; 0x24
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C1_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_I2C1_Init+0x74>)
 80014b4:	f004 f970 	bl	8005798 <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014be:	f000 fe3b 	bl	8002138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_I2C1_Init+0x74>)
 80014c6:	f006 f9cf 	bl	8007868 <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 fe32 	bl	8002138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_I2C1_Init+0x74>)
 80014d8:	f006 fa11 	bl	80078fe <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 fe29 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001e8 	.word	0x200001e8
 80014f0:	40005400 	.word	0x40005400
 80014f4:	2000090e 	.word	0x2000090e

080014f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_RTC_Init+0xac>)
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <MX_RTC_Init+0xb0>)
 8001514:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <MX_RTC_Init+0xac>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_RTC_Init+0xac>)
 800151e:	227f      	movs	r2, #127	; 0x7f
 8001520:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_RTC_Init+0xac>)
 8001524:	f240 1237 	movw	r2, #311	; 0x137
 8001528:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_RTC_Init+0xac>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_RTC_Init+0xac>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_RTC_Init+0xac>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <MX_RTC_Init+0xac>)
 800153e:	f007 fe4f 	bl	80091e0 <HAL_RTC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001548:	f000 fdf6 	bl	8002138 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 800154c:	2309      	movs	r3, #9
 800154e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001550:	2300      	movs	r3, #0
 8001552:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001554:	2300      	movs	r3, #0
 8001556:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <MX_RTC_Init+0xac>)
 8001568:	f007 febd 	bl	80092e6 <HAL_RTC_SetTime>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001572:	f000 fde1 	bl	8002138 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001576:	2301      	movs	r3, #1
 8001578:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 800157a:	2306      	movs	r3, #6
 800157c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800157e:	2301      	movs	r3, #1
 8001580:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001582:	2300      	movs	r3, #0
 8001584:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_RTC_Init+0xac>)
 800158e:	f007 ffa2 	bl	80094d6 <HAL_RTC_SetDate>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001598:	f000 fdce 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000023c 	.word	0x2000023c
 80015a8:	40002800 	.word	0x40002800

080015ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09a      	sub	sp, #104	; 0x68
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	222c      	movs	r2, #44	; 0x2c
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00b f83e 	bl	800c668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <MX_TIM1_Init+0x16c>)
 80015ee:	4a4b      	ldr	r2, [pc, #300]	; (800171c <MX_TIM1_Init+0x170>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <MX_TIM1_Init+0x16c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <MX_TIM1_Init+0x16c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001600:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001604:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <MX_TIM1_Init+0x16c>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001618:	483f      	ldr	r0, [pc, #252]	; (8001718 <MX_TIM1_Init+0x16c>)
 800161a:	f008 f8ed 	bl	80097f8 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 fd88 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001632:	4619      	mov	r1, r3
 8001634:	4838      	ldr	r0, [pc, #224]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001636:	f008 ffa1 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001640:	f000 fd7a 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001644:	4834      	ldr	r0, [pc, #208]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001646:	f008 f92e 	bl	80098a6 <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001650:	f000 fd72 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001660:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001664:	4619      	mov	r1, r3
 8001666:	482c      	ldr	r0, [pc, #176]	; (8001718 <MX_TIM1_Init+0x16c>)
 8001668:	f009 ff14 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001672:	f000 fd61 	bl	8002138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001676:	2360      	movs	r3, #96	; 0x60
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001688:	2304      	movs	r3, #4
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	481e      	ldr	r0, [pc, #120]	; (8001718 <MX_TIM1_Init+0x16c>)
 800169e:	f008 fe59 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016a8:	f000 fd46 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <MX_TIM1_Init+0x16c>)
 80016b6:	f008 fe4d 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80016c0:	f000 fd3a 	bl	8002138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 80016d0:	2332      	movs	r3, #50	; 0x32
 80016d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM1_Init+0x16c>)
 80016fa:	f009 ff4b 	bl	800b594 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001704:	f000 fd18 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM1_Init+0x16c>)
 800170a:	f000 ffa1 	bl	8002650 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3768      	adds	r7, #104	; 0x68
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000025c 	.word	0x2000025c
 800171c:	40012c00 	.word	0x40012c00

08001720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <MX_TIM2_Init+0xfc>)
 800174e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <MX_TIM2_Init+0xfc>)
 8001756:	2201      	movs	r2, #1
 8001758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <MX_TIM2_Init+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <MX_TIM2_Init+0xfc>)
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <MX_TIM2_Init+0x100>)
 8001764:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <MX_TIM2_Init+0xfc>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <MX_TIM2_Init+0xfc>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001772:	482a      	ldr	r0, [pc, #168]	; (800181c <MX_TIM2_Init+0xfc>)
 8001774:	f008 f840 	bl	80097f8 <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800177e:	f000 fcdb 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4619      	mov	r1, r3
 800178e:	4823      	ldr	r0, [pc, #140]	; (800181c <MX_TIM2_Init+0xfc>)
 8001790:	f008 fef4 	bl	800a57c <HAL_TIM_ConfigClockSource>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800179a:	f000 fccd 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800179e:	481f      	ldr	r0, [pc, #124]	; (800181c <MX_TIM2_Init+0xfc>)
 80017a0:	f008 fa78 	bl	8009c94 <HAL_TIM_IC_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017aa:	f000 fcc5 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4817      	ldr	r0, [pc, #92]	; (800181c <MX_TIM2_Init+0xfc>)
 80017be:	f009 fe69 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80017c8:	f000 fcb6 	bl	8002138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017d0:	2301      	movs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 80017d8:	230c      	movs	r3, #12
 80017da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_TIM2_Init+0xfc>)
 80017e4:	f008 fd19 	bl	800a21a <HAL_TIM_IC_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80017ee:	f000 fca3 	bl	8002138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017f2:	2302      	movs	r3, #2
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017f6:	2302      	movs	r3, #2
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2204      	movs	r2, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM2_Init+0xfc>)
 8001806:	f008 fd08 	bl	800a21a <HAL_TIM_IC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001810:	f000 fc92 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200002a8 	.word	0x200002a8
 8001820:	03d09000 	.word	0x03d09000

08001824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <MX_TIM3_Init+0x98>)
 8001846:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM3_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_TIM3_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_TIM3_Init+0x94>)
 800186a:	f007 ffc5 	bl	80097f8 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001874:	f000 fc60 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001886:	f008 fe79 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 fc52 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM3_Init+0x94>)
 80018a2:	f009 fdf7 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018ac:	f000 fc44 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200002f4 	.word	0x200002f4
 80018bc:	40000400 	.word	0x40000400

080018c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b09a      	sub	sp, #104	; 0x68
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	222c      	movs	r2, #44	; 0x2c
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00a feb4 	bl	800c668 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001902:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <MX_TIM8_Init+0x158>)
 8001904:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <MX_TIM8_Init+0x154>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001918:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_TIM8_Init+0x154>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800192c:	4839      	ldr	r0, [pc, #228]	; (8001a14 <MX_TIM8_Init+0x154>)
 800192e:	f007 ff63 	bl	80097f8 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001938:	f000 fbfe 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001946:	4619      	mov	r1, r3
 8001948:	4832      	ldr	r0, [pc, #200]	; (8001a14 <MX_TIM8_Init+0x154>)
 800194a:	f008 fe17 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001954:	f000 fbf0 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001958:	482e      	ldr	r0, [pc, #184]	; (8001a14 <MX_TIM8_Init+0x154>)
 800195a:	f007 ffa4 	bl	80098a6 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001964:	f000 fbe8 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001978:	4619      	mov	r1, r3
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MX_TIM8_Init+0x154>)
 800197c:	f009 fd8a 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001986:	f000 fbd7 	bl	8002138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM8_Init+0x154>)
 80019b2:	f008 fccf 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80019bc:	f000 fbbc 	bl	8002138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 80019cc:	2332      	movs	r3, #50	; 0x32
 80019ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM8_Init+0x154>)
 80019f6:	f009 fdcd 	bl	800b594 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001a00:	f000 fb9a 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM8_Init+0x154>)
 8001a06:	f000 fe23 	bl	8002650 <HAL_TIM_MspPostInit>

}
 8001a0a:	bf00      	nop
 8001a0c:	3768      	adds	r7, #104	; 0x68
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000340 	.word	0x20000340
 8001a18:	40013400 	.word	0x40013400

08001a1c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09a      	sub	sp, #104	; 0x68
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	222c      	movs	r2, #44	; 0x2c
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00a fe06 	bl	800c668 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <MX_TIM15_Init+0x144>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a62:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a88:	4834      	ldr	r0, [pc, #208]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001a8a:	f007 feb5 	bl	80097f8 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a94:	f000 fb50 	bl	8002138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	482d      	ldr	r0, [pc, #180]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001aa6:	f008 fd69 	bl	800a57c <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001ab0:	f000 fb42 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001ab4:	4829      	ldr	r0, [pc, #164]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001ab6:	f007 fef6 	bl	80098a6 <HAL_TIM_PWM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001ac0:	f000 fb3a 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4822      	ldr	r0, [pc, #136]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001ad4:	f009 fcde 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001ade:	f000 fb2b 	bl	8002138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b04:	2200      	movs	r2, #0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001b0a:	f008 fc23 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001b14:	f000 fb10 	bl	8002138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001b40:	f009 fd28 	bl	800b594 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001b4a:	f000 faf5 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <MX_TIM15_Init+0x140>)
 8001b50:	f000 fd7e 	bl	8002650 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3768      	adds	r7, #104	; 0x68
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000038c 	.word	0x2000038c
 8001b60:	40014000 	.word	0x40014000

08001b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <MX_USART1_UART_Init+0x5c>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_USART1_UART_Init+0x58>)
 8001ba8:	f009 fdb5 	bl	800b716 <HAL_UART_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bb2:	f000 fac1 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003d8 	.word	0x200003d8
 8001bc0:	40013800 	.word	0x40013800

08001bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <MX_USART2_UART_Init+0x5c>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c08:	f009 fd85 	bl	800b716 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c12:	f000 fa91 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000460 	.word	0x20000460
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_DMA_Init+0x70>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2010      	movs	r0, #16
 8001c60:	f003 f867 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f003 f880 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2011      	movs	r0, #17
 8001c70:	f003 f85f 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001c74:	2011      	movs	r0, #17
 8001c76:	f003 f878 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2038      	movs	r0, #56	; 0x38
 8001c80:	f003 f857 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001c84:	2038      	movs	r0, #56	; 0x38
 8001c86:	f003 f870 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	4a59      	ldr	r2, [pc, #356]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd0:	6153      	str	r3, [r2, #20]
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b51      	ldr	r3, [pc, #324]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a4d      	ldr	r2, [pc, #308]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <MX_GPIO_Init+0x198>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	4847      	ldr	r0, [pc, #284]	; (8001e34 <MX_GPIO_Init+0x19c>)
 8001d16:	f003 fcf5 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	4846      	ldr	r0, [pc, #280]	; (8001e38 <MX_GPIO_Init+0x1a0>)
 8001d20:	f003 fcf0 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001d2a:	4844      	ldr	r0, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x1a4>)
 8001d2c:	f003 fcea 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f003 fce3 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8001d3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d44:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4837      	ldr	r0, [pc, #220]	; (8001e34 <MX_GPIO_Init+0x19c>)
 8001d56:	f003 fa67 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8001d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4830      	ldr	r0, [pc, #192]	; (8001e34 <MX_GPIO_Init+0x19c>)
 8001d74:	f003 fa58 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	482a      	ldr	r0, [pc, #168]	; (8001e38 <MX_GPIO_Init+0x1a0>)
 8001d90:	f003 fa4a 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001d94:	2302      	movs	r3, #2
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d98:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dac:	f003 fa3c 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8001db0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_GPIO_Init+0x1a4>)
 8001dca:	f003 fa2d 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8001dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f003 fa1d 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLEAR_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin;
 8001dee:	2320      	movs	r3, #32
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLEAR_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480e      	ldr	r0, [pc, #56]	; (8001e3c <MX_GPIO_Init+0x1a4>)
 8001e02:	f003 fa11 	bl	8005228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2007      	movs	r0, #7
 8001e0c:	f002 ff91 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e10:	2007      	movs	r0, #7
 8001e12:	f002 ffaa 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2103      	movs	r1, #3
 8001e1a:	2028      	movs	r0, #40	; 0x28
 8001e1c:	f002 ff89 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e20:	2028      	movs	r0, #40	; 0x28
 8001e22:	f002 ffa2 	bl	8004d6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48001400 	.word	0x48001400
 8001e3c:	48000400 	.word	0x48000400

08001e40 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d174      	bne.n	8001f3c <HAL_TIM_IC_CaptureCallback+0xfc>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f1b      	ldrb	r3, [r3, #28]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d144      	bne.n	8001ee4 <HAL_TIM_IC_CaptureCallback+0xa4>
        {

        	TIM3->CNT=0;
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001e60:	2100      	movs	r1, #0
 8001e62:	4839      	ldr	r0, [pc, #228]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001e64:	f007 fe80 	bl	8009b68 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4837      	ldr	r0, [pc, #220]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001e6c:	f007 fe7c 	bl	8009b68 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001e70:	2100      	movs	r1, #0
 8001e72:	4836      	ldr	r0, [pc, #216]	; (8001f4c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001e74:	f007 fe78 	bl	8009b68 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4835      	ldr	r0, [pc, #212]	; (8001f50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001e7c:	f007 fe74 	bl	8009b68 <HAL_TIM_PWM_Stop>




            TIM2->CNT = 0;
 8001e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4832      	ldr	r0, [pc, #200]	; (8001f54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001e8c:	f008 fc40 	bl	800a710 <HAL_TIM_ReadCapturedValue>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001e94:	6013      	str	r3, [r2, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001e96:	2104      	movs	r1, #4
 8001e98:	482e      	ldr	r0, [pc, #184]	; (8001f54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001e9a:	f008 fc39 	bl	800a710 <HAL_TIM_ReadCapturedValue>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001ea4:	801a      	strh	r2, [r3, #0]
           // LED_1_OFF;
            rpm= 480000000/period;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001eb2:	6013      	str	r3, [r2, #0]
            f=32000000/period;
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001ec2:	801a      	strh	r2, [r3, #0]


            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4820      	ldr	r0, [pc, #128]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001ec8:	f009 f9d2 	bl	800b270 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001ecc:	2104      	movs	r1, #4
 8001ece:	481e      	ldr	r0, [pc, #120]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001ed0:	f009 f9ce 	bl	800b270 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	481d      	ldr	r0, [pc, #116]	; (8001f4c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001ed8:	f009 f9ca 	bl	800b270 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8001edc:	2100      	movs	r1, #0
 8001ede:	481c      	ldr	r0, [pc, #112]	; (8001f50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001ee0:	f009 f9c6 	bl	800b270 <HAL_TIMEx_PWMN_Start>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7f1b      	ldrb	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d127      	bne.n	8001f3c <HAL_TIM_IC_CaptureCallback+0xfc>
                {

        	  TIM3->CNT=0;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ef8:	f003 fc1c 	bl	8005734 <HAL_GPIO_TogglePin>


        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001efc:	2100      	movs	r1, #0
 8001efe:	4812      	ldr	r0, [pc, #72]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f00:	f009 fa6a 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001f04:	2104      	movs	r1, #4
 8001f06:	4810      	ldr	r0, [pc, #64]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f08:	f009 fa66 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	480f      	ldr	r0, [pc, #60]	; (8001f4c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001f10:	f009 fa62 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8001f14:	2100      	movs	r1, #0
 8001f16:	480e      	ldr	r0, [pc, #56]	; (8001f50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001f18:	f009 fa5e 	bl	800b3d8 <HAL_TIMEx_PWMN_Stop>

        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f20:	f007 fd22 	bl	8009968 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f24:	2104      	movs	r1, #4
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f28:	f007 fd1e 	bl	8009968 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4807      	ldr	r0, [pc, #28]	; (8001f4c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001f30:	f007 fd1a 	bl	8009968 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001f34:	2100      	movs	r1, #0
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001f38:	f007 fd16 	bl	8009968 <HAL_TIM_PWM_Start>


                }

    }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40000400 	.word	0x40000400
 8001f48:	2000025c 	.word	0x2000025c
 8001f4c:	20000340 	.word	0x20000340
 8001f50:	2000038c 	.word	0x2000038c
 8001f54:	200002a8 	.word	0x200002a8
 8001f58:	20000588 	.word	0x20000588
 8001f5c:	2000058c 	.word	0x2000058c
 8001f60:	1c9c3800 	.word	0x1c9c3800
 8001f64:	20000590 	.word	0x20000590
 8001f68:	01e84800 	.word	0x01e84800
 8001f6c:	20000594 	.word	0x20000594
 8001f70:	48000800 	.word	0x48000800

08001f74 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f84:	d149      	bne.n	800201a <HAL_GPIO_EXTI_Callback+0xa6>
   {
      // Переключение в противоположное состояние ножки
      // выхода для управления светодиодом (LED):
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f8a:	484d      	ldr	r0, [pc, #308]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f8c:	f003 fbd2 	bl	8005734 <HAL_GPIO_TogglePin>
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8001f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f94:	484a      	ldr	r0, [pc, #296]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f96:	f003 fb9d 	bl	80056d4 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d13c      	bne.n	800201a <HAL_GPIO_EXTI_Callback+0xa6>



            if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b13      	cmp	r3, #19
 8001fac:	d81c      	bhi.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x74>
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x74>

            	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4944      	ldr	r1, [pc, #272]	; (80020cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001fba:	4845      	ldr	r0, [pc, #276]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fbc:	f007 fa2d 	bl	800941a <HAL_RTC_GetTime>
            	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4944      	ldr	r1, [pc, #272]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001fc4:	4842      	ldr	r0, [pc, #264]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fc6:	f007 fb0a 	bl	80095de <HAL_RTC_GetDate>

            	hour=sTime.Hours;
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x164>)
 8001fd0:	701a      	strb	r2, [r3, #0]
            	min=sTime.Minutes;
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001fd4:	785a      	ldrb	r2, [r3, #1]
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_GPIO_EXTI_Callback+0x168>)
 8001fd8:	701a      	strb	r2, [r3, #0]
            	sec=sTime.Seconds;
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001fdc:	789a      	ldrb	r2, [r3, #2]
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fe0:	701a      	strb	r2, [r3, #0]

            	status=1;
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]


            }

        		   pwm_cmd=pwm_cmd+10;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	330a      	adds	r3, #10
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001ff4:	801a      	strh	r2, [r3, #0]
        		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8002000:	4293      	cmp	r3, r2
 8002002:	d903      	bls.n	800200c <HAL_GPIO_EXTI_Callback+0x98>
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8002006:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800200a:	801a      	strh	r2, [r3, #0]
        		   pwm_tgr=4;
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x170>)
 800200e:	2204      	movs	r2, #4
 8002010:	701a      	strb	r2, [r3, #0]
        		   EXTI->PR = EXTI_PR_PR13;
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x174>)
 8002014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002018:	615a      	str	r2, [r3, #20]


   }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002020:	d149      	bne.n	80020b6 <HAL_GPIO_EXTI_Callback+0x142>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8002022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002026:	4826      	ldr	r0, [pc, #152]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002028:	f003 fb54 	bl	80056d4 <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b01      	cmp	r3, #1
 8002030:	d104      	bne.n	800203c <HAL_GPIO_EXTI_Callback+0xc8>
        // Переключение в противоположное состояние ножки
        // выхода для управления светодиодом (LED):
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);}
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	4822      	ldr	r0, [pc, #136]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002038:	f003 fb7c 	bl	8005734 <HAL_GPIO_TogglePin>
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	481f      	ldr	r0, [pc, #124]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002042:	f003 fb47 	bl	80056d4 <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d134      	bne.n	80020b6 <HAL_GPIO_EXTI_Callback+0x142>

		   if((pwm_cmd==0)&&(status==1)){
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <HAL_GPIO_EXTI_Callback+0x102>
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10b      	bne.n	8002076 <HAL_GPIO_EXTI_Callback+0x102>
		              	status=0;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

		              	hour=0;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x164>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
		              	min=0;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_GPIO_EXTI_Callback+0x168>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
		              	sec=0;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
		              }


		   pwm_cmd=pwm_cmd-10;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b0a      	subs	r3, #10
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8002082:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd>=2100){pwm_cmd=0;}
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f640 0233 	movw	r2, #2099	; 0x833
 800208e:	4293      	cmp	r3, r2
 8002090:	d902      	bls.n	8002098 <HAL_GPIO_EXTI_Callback+0x124>
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd<=1){pwm_cmd=0;}
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d802      	bhi.n	80020a8 <HAL_GPIO_EXTI_Callback+0x134>
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x150>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	801a      	strh	r2, [r3, #0]
		   pwm_tgr=4;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x170>)
 80020aa:	2204      	movs	r2, #4
 80020ac:	701a      	strb	r2, [r3, #0]
		   EXTI->PR = EXTI_PR_PR14;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x174>)
 80020b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b4:	615a      	str	r2, [r3, #20]
	   }


     }

}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	48000800 	.word	0x48000800
 80020c4:	20000584 	.word	0x20000584
 80020c8:	200005a5 	.word	0x200005a5
 80020cc:	200005a8 	.word	0x200005a8
 80020d0:	2000023c 	.word	0x2000023c
 80020d4:	200005bc 	.word	0x200005bc
 80020d8:	200005a3 	.word	0x200005a3
 80020dc:	200005a2 	.word	0x200005a2
 80020e0:	200005a4 	.word	0x200005a4
 80020e4:	20000586 	.word	0x20000586
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

RX_2;
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f003 fb01 	bl	8005704 <HAL_GPIO_WritePin>

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_ADC_ConvCpltCallback+0x24>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d102      	bne.n	8002124 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_ADC_ConvCpltCallback+0x28>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    }
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	50000100 	.word	0x50000100
 8002134:	20000587 	.word	0x20000587

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002140:	e7fe      	b.n	8002140 <Error_Handler+0x8>
	...

08002144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_MspInit+0x50>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_MspInit+0x50>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6193      	str	r3, [r2, #24]
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_MspInit+0x50>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_MspInit+0x50>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_MspInit+0x50>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x50>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2005      	movs	r0, #5
 8002180:	f002 fdd7 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002184:	2005      	movs	r0, #5
 8002186:	f002 fdf0 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08e      	sub	sp, #56	; 0x38
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d136      	bne.n	8002228 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 80021c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10b      	bne.n	80021e4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	4a6b      	ldr	r2, [pc, #428]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6153      	str	r3, [r2, #20]
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	6153      	str	r3, [r2, #20]
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 80021fc:	2308      	movs	r3, #8
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002212:	f003 f809 	bl	8005228 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2012      	movs	r0, #18
 800221c:	f002 fd89 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002220:	2012      	movs	r0, #18
 8002222:	f002 fda2 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002226:	e0a5      	b.n	8002374 <HAL_ADC_MspInit+0x1dc>
  else if(hadc->Instance==ADC2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a55      	ldr	r2, [pc, #340]	; (8002384 <HAL_ADC_MspInit+0x1ec>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d177      	bne.n	8002322 <HAL_ADC_MspInit+0x18a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002232:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 800223a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_ADC_MspInit+0x1e4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10b      	bne.n	800225c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	6153      	str	r3, [r2, #20]
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002266:	6153      	str	r3, [r2, #20]
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800227a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227e:	6153      	str	r3, [r2, #20]
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 800228c:	23f0      	movs	r3, #240	; 0xf0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002290:	2303      	movs	r3, #3
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a2:	f002 ffc1 	bl	8005228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 80022a6:	2304      	movs	r3, #4
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	4833      	ldr	r0, [pc, #204]	; (8002388 <HAL_ADC_MspInit+0x1f0>)
 80022ba:	f002 ffb5 	bl	8005228 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022c0:	4a33      	ldr	r2, [pc, #204]	; (8002390 <HAL_ADC_MspInit+0x1f8>)
 80022c2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80022f4:	4825      	ldr	r0, [pc, #148]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 80022f6:	f002 fd60 	bl	8004dba <HAL_DMA_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_ADC_MspInit+0x16c>
      Error_Handler();
 8002300:	f7ff ff1a 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_ADC_MspInit+0x1f4>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2012      	movs	r0, #18
 8002316:	f002 fd0c 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800231a:	2012      	movs	r0, #18
 800231c:	f002 fd25 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002320:	e028      	b.n	8002374 <HAL_ADC_MspInit+0x1dc>
  else if(hadc->Instance==ADC3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <HAL_ADC_MspInit+0x1fc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d123      	bne.n	8002374 <HAL_ADC_MspInit+0x1dc>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002336:	6153      	str	r3, [r2, #20]
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 800234a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234e:	6153      	str	r3, [r2, #20]
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_ADC_MspInit+0x1e8>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 800235c:	2303      	movs	r3, #3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_ADC_MspInit+0x1f0>)
 8002370:	f002 ff5a 	bl	8005228 <HAL_GPIO_Init>
}
 8002374:	bf00      	nop
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000618 	.word	0x20000618
 8002380:	40021000 	.word	0x40021000
 8002384:	50000100 	.word	0x50000100
 8002388:	48000400 	.word	0x48000400
 800238c:	200001a4 	.word	0x200001a4
 8002390:	40020408 	.word	0x40020408
 8002394:	50000400 	.word	0x50000400

08002398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_I2C_MspInit+0x9c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d138      	bne.n	800242c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6153      	str	r3, [r2, #20]
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e4:	2304      	movs	r3, #4
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4813      	ldr	r0, [pc, #76]	; (800243c <HAL_I2C_MspInit+0xa4>)
 80023f0:	f002 ff1a 	bl	8005228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 80023fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023fe:	61d3      	str	r3, [r2, #28]
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_I2C_MspInit+0xa0>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	201f      	movs	r0, #31
 8002412:	f002 fc8e 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002416:	201f      	movs	r0, #31
 8002418:	f002 fca7 	bl	8004d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2020      	movs	r0, #32
 8002422:	f002 fc86 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002426:	2020      	movs	r0, #32
 8002428:	f002 fc9f 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40005400 	.word	0x40005400
 8002438:	40021000 	.word	0x40021000
 800243c:	48000400 	.word	0x48000400

08002440 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_I2C_MspDeInit+0x48>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d115      	bne.n	800247e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_I2C_MspDeInit+0x4c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_I2C_MspDeInit+0x4c>)
 8002458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800245c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800245e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002462:	480b      	ldr	r0, [pc, #44]	; (8002490 <HAL_I2C_MspDeInit+0x50>)
 8002464:	f003 f85a 	bl	800551c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <HAL_I2C_MspDeInit+0x50>)
 800246e:	f003 f855 	bl	800551c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002472:	201f      	movs	r0, #31
 8002474:	f002 fc87 	bl	8004d86 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002478:	2020      	movs	r0, #32
 800247a:	f002 fc84 	bl	8004d86 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40005400 	.word	0x40005400
 800248c:	40021000 	.word	0x40021000
 8002490:	48000400 	.word	0x48000400

08002494 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_RTC_MspInit+0x44>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <HAL_RTC_MspInit+0x36>
 80024a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_RTC_MspInit+0x48>)
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	461a      	mov	r2, r3
 80024c6:	2301      	movs	r3, #1
 80024c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40002800 	.word	0x40002800
 80024dc:	10908100 	.word	0x10908100

080024e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_TIM_Base_MspInit+0x15c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d114      	bne.n	800252c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2018      	movs	r0, #24
 8002520:	f002 fc07 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002524:	2018      	movs	r0, #24
 8002526:	f002 fc20 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800252a:	e083      	b.n	8002634 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d131      	bne.n	800259a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a41      	ldr	r2, [pc, #260]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	6153      	str	r3, [r2, #20]
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002566:	2301      	movs	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002576:	2301      	movs	r3, #1
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f002 fe50 	bl	8005228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	201c      	movs	r0, #28
 800258e:	f002 fbd0 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002592:	201c      	movs	r0, #28
 8002594:	f002 fbe9 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002598:	e04c      	b.n	8002634 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_TIM_Base_MspInit+0x164>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d114      	bne.n	80025ce <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	61d3      	str	r3, [r2, #28]
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	201d      	movs	r0, #29
 80025c2:	f002 fbb6 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025c6:	201d      	movs	r0, #29
 80025c8:	f002 fbcf 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 80025cc:	e032      	b.n	8002634 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_TIM_Base_MspInit+0x168>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d114      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	202b      	movs	r0, #43	; 0x2b
 80025f6:	f002 fb9c 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 80025fa:	202b      	movs	r0, #43	; 0x2b
 80025fc:	f002 fbb5 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002600:	e018      	b.n	8002634 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM15)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_TIM_Base_MspInit+0x16c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d113      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_TIM_Base_MspInit+0x160>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2018      	movs	r0, #24
 800262a:	f002 fb82 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800262e:	2018      	movs	r0, #24
 8002630:	f002 fb9b 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	3738      	adds	r7, #56	; 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40000400 	.word	0x40000400
 8002648:	40013400 	.word	0x40013400
 800264c:	40014000 	.word	0x40014000

08002650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_TIM_MspPostInit+0x150>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11e      	bne.n	80026b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	6153      	str	r3, [r2, #20]
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800268a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800269c:	2306      	movs	r3, #6
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026aa:	f002 fdbd 	bl	8005228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80026ae:	e072      	b.n	8002796 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3c      	ldr	r2, [pc, #240]	; (80027a8 <HAL_TIM_MspPostInit+0x158>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d13a      	bne.n	8002730 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c4:	6153      	str	r3, [r2, #20]
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6153      	str	r3, [r2, #20]
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80026fc:	2302      	movs	r3, #2
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f002 fd8d 	bl	8005228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800270e:	2308      	movs	r3, #8
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800271e:	2304      	movs	r3, #4
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <HAL_TIM_MspPostInit+0x15c>)
 800272a:	f002 fd7d 	bl	8005228 <HAL_GPIO_Init>
}
 800272e:	e032      	b.n	8002796 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_TIM_MspPostInit+0x160>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d12d      	bne.n	8002796 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6153      	str	r3, [r2, #20]
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_TIM_MspPostInit+0x154>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	480f      	ldr	r0, [pc, #60]	; (80027ac <HAL_TIM_MspPostInit+0x15c>)
 8002770:	f002 fd5a 	bl	8005228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002786:	2302      	movs	r3, #2
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	4619      	mov	r1, r3
 8002790:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_TIM_MspPostInit+0x15c>)
 8002792:	f002 fd49 	bl	8005228 <HAL_GPIO_Init>
}
 8002796:	bf00      	nop
 8002798:	3730      	adds	r7, #48	; 0x30
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40013400 	.word	0x40013400
 80027ac:	48000400 	.word	0x48000400
 80027b0:	40014000 	.word	0x40014000

080027b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_UART_MspInit+0x1bc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d128      	bne.n	8002828 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d6:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4a60      	ldr	r2, [pc, #384]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6153      	str	r3, [r2, #20]
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002816:	2307      	movs	r3, #7
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	4855      	ldr	r0, [pc, #340]	; (8002978 <HAL_UART_MspInit+0x1c4>)
 8002822:	f002 fd01 	bl	8005228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002826:	e09f      	b.n	8002968 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a53      	ldr	r2, [pc, #332]	; (800297c <HAL_UART_MspInit+0x1c8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 809a 	bne.w	8002968 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 800283a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283e:	61d3      	str	r3, [r2, #28]
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	6153      	str	r3, [r2, #20]
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286e:	6153      	str	r3, [r2, #20]
 8002870:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_UART_MspInit+0x1c0>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800287c:	2304      	movs	r3, #4
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800288c:	2307      	movs	r3, #7
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289a:	f002 fcc5 	bl	8005228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800289e:	2310      	movs	r3, #16
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ae:	2307      	movs	r3, #7
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	482f      	ldr	r0, [pc, #188]	; (8002978 <HAL_UART_MspInit+0x1c4>)
 80028ba:	f002 fcb5 	bl	8005228 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028c0:	4a30      	ldr	r2, [pc, #192]	; (8002984 <HAL_UART_MspInit+0x1d0>)
 80028c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028c6:	2210      	movs	r2, #16
 80028c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028f0:	4823      	ldr	r0, [pc, #140]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 80028f2:	f002 fa62 	bl	8004dba <HAL_DMA_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 80028fc:	f7ff fc1c 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 8002904:	671a      	str	r2, [r3, #112]	; 0x70
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_UART_MspInit+0x1cc>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_UART_MspInit+0x1d8>)
 8002910:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002938:	2200      	movs	r2, #0
 800293a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 800293e:	f002 fa3c 	bl	8004dba <HAL_DMA_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002948:	f7ff fbf6 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002950:	675a      	str	r2, [r3, #116]	; 0x74
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_UART_MspInit+0x1d4>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2026      	movs	r0, #38	; 0x26
 800295e:	f002 f9e8 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002962:	2026      	movs	r0, #38	; 0x26
 8002964:	f002 fa01 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002968:	bf00      	nop
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013800 	.word	0x40013800
 8002974:	40021000 	.word	0x40021000
 8002978:	48000400 	.word	0x48000400
 800297c:	40004400 	.word	0x40004400
 8002980:	200004e8 	.word	0x200004e8
 8002984:	40020080 	.word	0x40020080
 8002988:	2000052c 	.word	0x2000052c
 800298c:	4002006c 	.word	0x4002006c

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <NMI_Handler+0x4>

08002996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <MemManage_Handler+0x4>

080029a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <BusFault_Handler+0x4>

080029a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <UsageFault_Handler+0x4>

080029ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029dc:	f000 f94a 	bl	8002c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80029f6:	2002      	movs	r0, #2
 80029f8:	f002 feb6 	bl	8005768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA1_Channel6_IRQHandler+0x10>)
 8002a06:	f002 faf5 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000052c 	.word	0x2000052c

08002a14 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <DMA1_Channel7_IRQHandler+0x10>)
 8002a1a:	f002 faeb 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200004e8 	.word	0x200004e8

08002a28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <ADC1_2_IRQHandler+0x14>)
 8002a2e:	f000 ff3d 	bl	80038ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002a32:	4803      	ldr	r0, [pc, #12]	; (8002a40 <ADC1_2_IRQHandler+0x18>)
 8002a34:	f000 ff3a 	bl	80038ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200000b4 	.word	0x200000b4
 8002a40:	20000104 	.word	0x20000104

08002a44 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4803      	ldr	r0, [pc, #12]	; (8002a58 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002a4a:	f007 fac7 	bl	8009fdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002a4e:	4803      	ldr	r0, [pc, #12]	; (8002a5c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002a50:	f007 fac4 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000025c 	.word	0x2000025c
 8002a5c:	2000038c 	.word	0x2000038c

08002a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM2_IRQHandler+0x10>)
 8002a66:	f007 fab9 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200002a8 	.word	0x200002a8

08002a74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <TIM3_IRQHandler+0x10>)
 8002a7a:	f007 faaf 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002f4 	.word	0x200002f4

08002a88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <I2C1_EV_IRQHandler+0x10>)
 8002a8e:	f003 fac3 	bl	8006018 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200001e8 	.word	0x200001e8

08002a9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <I2C1_ER_IRQHandler+0x10>)
 8002aa2:	f003 fad3 	bl	800604c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200001e8 	.word	0x200001e8

08002ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <USART2_IRQHandler+0x10>)
 8002ab6:	f008 fe7d 	bl	800b7b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000460 	.word	0x20000460

08002ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8002ac8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002acc:	f002 fe4c 	bl	8005768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 8002ad0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ad4:	f002 fe48 	bl	8005768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <TIM8_BRK_IRQHandler+0x10>)
 8002ae2:	f007 fa7b 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000340 	.word	0x20000340

08002af0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA2_Channel1_IRQHandler+0x10>)
 8002af6:	f002 fa7d 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001a4 	.word	0x200001a4

08002b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <_sbrk+0x5c>)
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <_sbrk+0x60>)
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <_sbrk+0x64>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <_sbrk+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b34:	f009 fd6e 	bl	800c614 <__errno>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e009      	b.n	8002b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <_sbrk+0x64>)
 8002b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000a000 	.word	0x2000a000
 8002b64:	00000400 	.word	0x00000400
 8002b68:	2000061c 	.word	0x2000061c
 8002b6c:	20000638 	.word	0x20000638

08002b70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <SystemInit+0x20>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <SystemInit+0x20>)
 8002b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bcc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff ffea 	bl	8002b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <LoopForever+0xe>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	; (8002be0 <LoopForever+0x16>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f009 fd2d 	bl	800c620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bc6:	f7fd ffab 	bl	8000b20 <main>

08002bca <LoopForever>:

LoopForever:
    b LoopForever
 8002bca:	e7fe      	b.n	8002bca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bcc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002bd8:	0800d07c 	.word	0x0800d07c
  ldr r2, =_sbss
 8002bdc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002be0:	20000634 	.word	0x20000634

08002be4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC3_IRQHandler>
	...

08002be8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_Init+0x28>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_Init+0x28>)
 8002bf2:	f043 0310 	orr.w	r3, r3, #16
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f002 f88f 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f000 f808 	bl	8002c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c04:	f7ff fa9e 	bl	8002144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40022000 	.word	0x40022000

08002c14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_InitTick+0x54>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_InitTick+0x58>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 f8b5 	bl	8004da2 <HAL_SYSTICK_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00e      	b.n	8002c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d80a      	bhi.n	8002c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	f002 f86f 	bl	8004d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_InitTick+0x5c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	20000014 	.word	0x20000014
 8002c70:	20000010 	.word	0x20000010

08002c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x20>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_IncTick+0x24>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_IncTick+0x24>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000014 	.word	0x20000014
 8002c98:	20000620 	.word	0x20000620

08002c9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000620 	.word	0x20000620

08002cb4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff ffee 	bl	8002c9c <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_Delay+0x44>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000014 	.word	0x20000014

08002cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b09a      	sub	sp, #104	; 0x68
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e1c9      	b.n	80030ec <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d176      	bne.n	8002e58 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d152      	bne.n	8002e18 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fa03 	bl	8002198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d13b      	bne.n	8002e18 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 fdab 	bl	80048fc <ADC_Disable>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12f      	bne.n	8002e18 <HAL_ADC_Init+0xe0>
 8002db8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d12b      	bne.n	8002e18 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002df2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002df4:	4b86      	ldr	r3, [pc, #536]	; (8003010 <HAL_ADC_Init+0x2d8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a86      	ldr	r2, [pc, #536]	; (8003014 <HAL_ADC_Init+0x2dc>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9a      	lsrs	r2, r3, #18
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e0a:	e002      	b.n	8002e12 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e34:	d110      	bne.n	8002e58 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f023 0312 	bic.w	r3, r3, #18
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8136 	bne.w	80030d2 <HAL_ADC_Init+0x39a>
 8002e66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 8131 	bne.w	80030d2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8129 	bne.w	80030d2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e88:	f043 0202 	orr.w	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADC_Init+0x16c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5e      	ldr	r2, [pc, #376]	; (8003018 <HAL_ADC_Init+0x2e0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_Init+0x170>
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_ADC_Init+0x2e4>)
 8002ea6:	e000      	b.n	8002eaa <HAL_ADC_Init+0x172>
 8002ea8:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <HAL_ADC_Init+0x2e8>)
 8002eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb4:	d102      	bne.n	8002ebc <HAL_ADC_Init+0x184>
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_ADC_Init+0x2e0>)
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e01a      	b.n	8002ef2 <HAL_ADC_Init+0x1ba>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a55      	ldr	r2, [pc, #340]	; (8003018 <HAL_ADC_Init+0x2e0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d103      	bne.n	8002ece <HAL_ADC_Init+0x196>
 8002ec6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e011      	b.n	8002ef2 <HAL_ADC_Init+0x1ba>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a54      	ldr	r2, [pc, #336]	; (8003024 <HAL_ADC_Init+0x2ec>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d102      	bne.n	8002ede <HAL_ADC_Init+0x1a6>
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_ADC_Init+0x2f0>)
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e009      	b.n	8002ef2 <HAL_ADC_Init+0x1ba>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a51      	ldr	r2, [pc, #324]	; (8003028 <HAL_ADC_Init+0x2f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d102      	bne.n	8002eee <HAL_ADC_Init+0x1b6>
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_ADC_Init+0x2ec>)
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e001      	b.n	8002ef2 <HAL_ADC_Init+0x1ba>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_ADC_Init+0x1da>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Init+0x1da>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_ADC_Init+0x1dc>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11c      	bne.n	8002f52 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_ADC_Init+0x202>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x202>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_Init+0x204>
 8002f3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7e5b      	ldrb	r3, [r3, #25]
 8002f56:	035b      	lsls	r3, r3, #13
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f5c:	2a01      	cmp	r2, #1
 8002f5e:	d002      	beq.n	8002f66 <HAL_ADC_Init+0x22e>
 8002f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f64:	e000      	b.n	8002f68 <HAL_ADC_Init+0x230>
 8002f66:	2200      	movs	r2, #0
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d11b      	bne.n	8002fbe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e5b      	ldrb	r3, [r3, #25]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	045a      	lsls	r2, r3, #17
 8002f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa0:	e00d      	b.n	8002fbe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d03a      	beq.n	800303c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <HAL_ADC_Init+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_Init+0x2a2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_ADC_Init+0x2f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d128      	bne.n	800302c <HAL_ADC_Init+0x2f4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002fe2:	d012      	beq.n	800300a <HAL_ADC_Init+0x2d2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fec:	d00a      	beq.n	8003004 <HAL_ADC_Init+0x2cc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002ff6:	d002      	beq.n	8002ffe <HAL_ADC_Init+0x2c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	e018      	b.n	8003030 <HAL_ADC_Init+0x2f8>
 8002ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003002:	e015      	b.n	8003030 <HAL_ADC_Init+0x2f8>
 8003004:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003008:	e012      	b.n	8003030 <HAL_ADC_Init+0x2f8>
 800300a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800300e:	e00f      	b.n	8003030 <HAL_ADC_Init+0x2f8>
 8003010:	2000000c 	.word	0x2000000c
 8003014:	431bde83 	.word	0x431bde83
 8003018:	50000100 	.word	0x50000100
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	50000400 	.word	0x50000400
 8003028:	50000500 	.word	0x50000500
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003034:	4313      	orrs	r3, r2
 8003036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003038:	4313      	orrs	r3, r2
 800303a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d114      	bne.n	8003074 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003058:	f023 0302 	bic.w	r3, r3, #2
 800305c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e1b      	ldrb	r3, [r3, #24]
 8003062:	039a      	lsls	r2, r3, #14
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4313      	orrs	r3, r2
 800306e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003070:	4313      	orrs	r3, r2
 8003072:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_ADC_Init+0x3bc>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10c      	bne.n	80030aa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f023 010f 	bic.w	r1, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 020f 	bic.w	r2, r2, #15
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f023 0303 	bic.w	r3, r3, #3
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
 80030d0:	e00a      	b.n	80030e8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f023 0312 	bic.w	r3, r3, #18
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80030e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3768      	adds	r7, #104	; 0x68
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fff0c007 	.word	0xfff0c007

080030f8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80f9 	bne.w	8003306 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Start+0x2a>
 800311e:	2302      	movs	r3, #2
 8003120:	e0f4      	b.n	800330c <HAL_ADC_Start+0x214>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f001 fb82 	bl	8004834 <ADC_Enable>
 8003130:	4603      	mov	r3, r0
 8003132:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 80e0 	bne.w	80032fc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003158:	d004      	beq.n	8003164 <HAL_ADC_Start+0x6c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <HAL_ADC_Start+0x21c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d106      	bne.n	8003172 <HAL_ADC_Start+0x7a>
 8003164:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_ADC_Start+0x220>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_ADC_Start+0x9a>
 8003170:	e005      	b.n	800317e <HAL_ADC_Start+0x86>
 8003172:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_ADC_Start+0x224>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_ADC_Start+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003186:	d004      	beq.n	8003192 <HAL_ADC_Start+0x9a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a64      	ldr	r2, [pc, #400]	; (8003320 <HAL_ADC_Start+0x228>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d115      	bne.n	80031be <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d036      	beq.n	800321a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031bc:	e02d      	b.n	800321a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Start+0xe6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4e      	ldr	r2, [pc, #312]	; (8003314 <HAL_ADC_Start+0x21c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_Start+0xfc>
 80031de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e008      	b.n	8003206 <HAL_ADC_Start+0x10e>
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_ADC_Start+0x228>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003212:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d106      	bne.n	8003236 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f023 0206 	bic.w	r2, r3, #6
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
 8003234:	e002      	b.n	800323c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	221c      	movs	r2, #28
 800324a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003254:	d004      	beq.n	8003260 <HAL_ADC_Start+0x168>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2e      	ldr	r2, [pc, #184]	; (8003314 <HAL_ADC_Start+0x21c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d106      	bne.n	800326e <HAL_ADC_Start+0x176>
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_ADC_Start+0x220>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03e      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 800326c:	e005      	b.n	800327a <HAL_ADC_Start+0x182>
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_ADC_Start+0x224>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2b00      	cmp	r3, #0
 8003278:	d037      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003282:	d004      	beq.n	800328e <HAL_ADC_Start+0x196>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_ADC_Start+0x21c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d106      	bne.n	800329c <HAL_ADC_Start+0x1a4>
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_ADC_Start+0x220>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b05      	cmp	r3, #5
 8003298:	d027      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 800329a:	e005      	b.n	80032a8 <HAL_ADC_Start+0x1b0>
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_ADC_Start+0x224>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d020      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b0:	d004      	beq.n	80032bc <HAL_ADC_Start+0x1c4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_ADC_Start+0x21c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d106      	bne.n	80032ca <HAL_ADC_Start+0x1d2>
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_ADC_Start+0x220>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d010      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 80032c8:	e005      	b.n	80032d6 <HAL_ADC_Start+0x1de>
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_ADC_Start+0x224>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d009      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032de:	d004      	beq.n	80032ea <HAL_ADC_Start+0x1f2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_ADC_Start+0x228>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10f      	bne.n	800330a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0204 	orr.w	r2, r2, #4
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	e006      	b.n	800330a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003304:	e001      	b.n	800330a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	50000100 	.word	0x50000100
 8003318:	50000300 	.word	0x50000300
 800331c:	50000700 	.word	0x50000700
 8003320:	50000400 	.word	0x50000400

08003324 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_Stop+0x1a>
 800333a:	2302      	movs	r3, #2
 800333c:	e023      	b.n	8003386 <HAL_ADC_Stop+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003346:	216c      	movs	r1, #108	; 0x6c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f001 fb3d 	bl	80049c8 <ADC_ConversionStop>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 facf 	bl	80048fc <ADC_Disable>
 800335e:	4603      	mov	r3, r0
 8003360:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d102      	bne.n	80033ac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80033a6:	2308      	movs	r3, #8
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e03a      	b.n	8003422 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_PollForConversion+0x30>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a72      	ldr	r2, [pc, #456]	; (8003584 <HAL_ADC_PollForConversion+0x1f4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_PollForConversion+0x34>
 80033c0:	4b71      	ldr	r3, [pc, #452]	; (8003588 <HAL_ADC_PollForConversion+0x1f8>)
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_PollForConversion+0x36>
 80033c4:	4b71      	ldr	r3, [pc, #452]	; (800358c <HAL_ADC_PollForConversion+0x1fc>)
 80033c6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d112      	bne.n	80033fa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d11d      	bne.n	800341e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0bf      	b.n	800357a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0ad      	b.n	800357a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800341e:	230c      	movs	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800342a:	d004      	beq.n	8003436 <HAL_ADC_PollForConversion+0xa6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_ADC_PollForConversion+0x1f4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d106      	bne.n	8003444 <HAL_ADC_PollForConversion+0xb4>
 8003436:	4b54      	ldr	r3, [pc, #336]	; (8003588 <HAL_ADC_PollForConversion+0x1f8>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2b00      	cmp	r3, #0
 8003440:	d010      	beq.n	8003464 <HAL_ADC_PollForConversion+0xd4>
 8003442:	e005      	b.n	8003450 <HAL_ADC_PollForConversion+0xc0>
 8003444:	4b51      	ldr	r3, [pc, #324]	; (800358c <HAL_ADC_PollForConversion+0x1fc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_ADC_PollForConversion+0xd4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003458:	d004      	beq.n	8003464 <HAL_ADC_PollForConversion+0xd4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4c      	ldr	r2, [pc, #304]	; (8003590 <HAL_ADC_PollForConversion+0x200>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d104      	bne.n	800346e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00f      	b.n	800348e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003476:	d004      	beq.n	8003482 <HAL_ADC_PollForConversion+0xf2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_ADC_PollForConversion+0x1f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d102      	bne.n	8003488 <HAL_ADC_PollForConversion+0xf8>
 8003482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003486:	e000      	b.n	800348a <HAL_ADC_PollForConversion+0xfa>
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_ADC_PollForConversion+0x200>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800348e:	f7ff fc05 	bl	8002c9c <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003494:	e021      	b.n	80034da <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d01d      	beq.n	80034da <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_ADC_PollForConversion+0x124>
 80034a4:	f7ff fbfa 	bl	8002c9c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d212      	bcs.n	80034da <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0204 	orr.w	r2, r3, #4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0d6      	beq.n	8003496 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d131      	bne.n	8003566 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003508:	2b00      	cmp	r3, #0
 800350a:	d12c      	bne.n	8003566 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b08      	cmp	r3, #8
 8003518:	d125      	bne.n	8003566 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d112      	bne.n	800354e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d112      	bne.n	8003566 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
 800354c:	e00b      	b.n	8003566 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	50000100 	.word	0x50000100
 8003588:	50000300 	.word	0x50000300
 800358c:	50000700 	.word	0x50000700
 8003590:	50000400 	.word	0x50000400

08003594 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 80f7 	bne.w	80037a2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Start_DMA+0x2e>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0f2      	b.n	80037a8 <HAL_ADC_Start_DMA+0x214>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d2:	d004      	beq.n	80035de <HAL_ADC_Start_DMA+0x4a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a75      	ldr	r2, [pc, #468]	; (80037b0 <HAL_ADC_Start_DMA+0x21c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_Start_DMA+0x5e>
 80035de:	4b75      	ldr	r3, [pc, #468]	; (80037b4 <HAL_ADC_Start_DMA+0x220>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e008      	b.n	8003604 <HAL_ADC_Start_DMA+0x70>
 80035f2:	4b71      	ldr	r3, [pc, #452]	; (80037b8 <HAL_ADC_Start_DMA+0x224>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80c5 	beq.w	8003794 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 f912 	bl	8004834 <ADC_Enable>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80b7 	bne.w	800378a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADC_Start_DMA+0xb0>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_ADC_Start_DMA+0x21c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d106      	bne.n	8003652 <HAL_ADC_Start_DMA+0xbe>
 8003644:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_ADC_Start_DMA+0x220>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <HAL_ADC_Start_DMA+0xde>
 8003650:	e005      	b.n	800365e <HAL_ADC_Start_DMA+0xca>
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_ADC_Start_DMA+0x224>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_ADC_Start_DMA+0xde>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003666:	d004      	beq.n	8003672 <HAL_ADC_Start_DMA+0xde>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a53      	ldr	r2, [pc, #332]	; (80037bc <HAL_ADC_Start_DMA+0x228>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d115      	bne.n	800369e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d036      	beq.n	80036fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003694:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800369c:	e02d      	b.n	80036fa <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b2:	d004      	beq.n	80036be <HAL_ADC_Start_DMA+0x12a>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <HAL_ADC_Start_DMA+0x21c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10a      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x140>
 80036be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e008      	b.n	80036e6 <HAL_ADC_Start_DMA+0x152>
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_ADC_Start_DMA+0x228>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	d106      	bne.n	8003716 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f023 0206 	bic.w	r2, r3, #6
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
 8003714:	e002      	b.n	800371c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_ADC_Start_DMA+0x22c>)
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	4a24      	ldr	r2, [pc, #144]	; (80037c4 <HAL_ADC_Start_DMA+0x230>)
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	4a23      	ldr	r2, [pc, #140]	; (80037c8 <HAL_ADC_Start_DMA+0x234>)
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	221c      	movs	r2, #28
 8003742:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0210 	orr.w	r2, r2, #16
 8003752:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	4619      	mov	r1, r3
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f001 fb68 	bl	8004e48 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0204 	orr.w	r2, r2, #4
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e00d      	b.n	80037a6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003792:	e008      	b.n	80037a6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037a0:	e001      	b.n	80037a6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	50000100 	.word	0x50000100
 80037b4:	50000300 	.word	0x50000300
 80037b8:	50000700 	.word	0x50000700
 80037bc:	50000400 	.word	0x50000400
 80037c0:	08004769 	.word	0x08004769
 80037c4:	080047e3 	.word	0x080047e3
 80037c8:	080047ff 	.word	0x080047ff

080037cc <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_Stop_DMA+0x1a>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e050      	b.n	8003888 <HAL_ADC_Stop_DMA+0xbc>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037ee:	216c      	movs	r1, #108	; 0x6c
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f001 f8e9 	bl	80049c8 <ADC_ConversionStop>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13e      	bne.n	800387e <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003818:	2b02      	cmp	r3, #2
 800381a:	d10f      	bne.n	800383c <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	4618      	mov	r0, r3
 8003822:	f001 fb70 	bl	8004f06 <HAL_DMA_Abort>
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0210 	bic.w	r2, r2, #16
 800384a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 f852 	bl	80048fc <ADC_Disable>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e002      	b.n	8003864 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f001 f84c 	bl	80048fc <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x38>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80bc 	beq.w	8003a68 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80b6 	beq.w	8003a68 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391c:	d004      	beq.n	8003928 <HAL_ADC_IRQHandler+0x7c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a90      	ldr	r2, [pc, #576]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d106      	bne.n	8003936 <HAL_ADC_IRQHandler+0x8a>
 8003928:	4b8f      	ldr	r3, [pc, #572]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03e      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 8003934:	e005      	b.n	8003942 <HAL_ADC_IRQHandler+0x96>
 8003936:	4b8d      	ldr	r3, [pc, #564]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2b00      	cmp	r3, #0
 8003940:	d037      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394a:	d004      	beq.n	8003956 <HAL_ADC_IRQHandler+0xaa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a84      	ldr	r2, [pc, #528]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d106      	bne.n	8003964 <HAL_ADC_IRQHandler+0xb8>
 8003956:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2b05      	cmp	r3, #5
 8003960:	d027      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 8003962:	e005      	b.n	8003970 <HAL_ADC_IRQHandler+0xc4>
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2b05      	cmp	r3, #5
 800396e:	d020      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003978:	d004      	beq.n	8003984 <HAL_ADC_IRQHandler+0xd8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a79      	ldr	r2, [pc, #484]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d106      	bne.n	8003992 <HAL_ADC_IRQHandler+0xe6>
 8003984:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2b09      	cmp	r3, #9
 800398e:	d010      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 8003990:	e005      	b.n	800399e <HAL_ADC_IRQHandler+0xf2>
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b09      	cmp	r3, #9
 800399c:	d009      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a6:	d004      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x106>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_ADC_IRQHandler+0x2c4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d104      	bne.n	80039bc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e00f      	b.n	80039dc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x124>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a66      	ldr	r2, [pc, #408]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d102      	bne.n	80039d6 <HAL_ADC_IRQHandler+0x12a>
 80039d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_IRQHandler+0x12c>
 80039d6:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_ADC_IRQHandler+0x2c4>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d137      	bne.n	8003a5a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d132      	bne.n	8003a5a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d02d      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11a      	bne.n	8003a42 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 020c 	bic.w	r2, r2, #12
 8003a1a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d112      	bne.n	8003a5a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a40:	e00b      	b.n	8003a5a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe fb56 	bl	800210c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	220c      	movs	r2, #12
 8003a66:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_IRQHandler+0x1d0>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8138 	beq.w	8003cf8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8132 	beq.w	8003cf8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa8:	d004      	beq.n	8003ab4 <HAL_ADC_IRQHandler+0x208>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d106      	bne.n	8003ac2 <HAL_ADC_IRQHandler+0x216>
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03e      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003ac0:	e005      	b.n	8003ace <HAL_ADC_IRQHandler+0x222>
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d037      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADC_IRQHandler+0x236>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d106      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x244>
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d027      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003aee:	e005      	b.n	8003afc <HAL_ADC_IRQHandler+0x250>
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d020      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b04:	d004      	beq.n	8003b10 <HAL_ADC_IRQHandler+0x264>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d106      	bne.n	8003b1e <HAL_ADC_IRQHandler+0x272>
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_ADC_IRQHandler+0x2bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2b09      	cmp	r3, #9
 8003b1a:	d010      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003b1c:	e005      	b.n	8003b2a <HAL_ADC_IRQHandler+0x27e>
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_ADC_IRQHandler+0x2c0>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d009      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b32:	d004      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x292>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_ADC_IRQHandler+0x2c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d104      	bne.n	8003b48 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e018      	b.n	8003b7a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b50:	d004      	beq.n	8003b5c <HAL_ADC_IRQHandler+0x2b0>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_ADC_IRQHandler+0x2b8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10b      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x2c8>
 8003b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b60:	e009      	b.n	8003b76 <HAL_ADC_IRQHandler+0x2ca>
 8003b62:	bf00      	nop
 8003b64:	50000100 	.word	0x50000100
 8003b68:	50000300 	.word	0x50000300
 8003b6c:	50000700 	.word	0x50000700
 8003b70:	50000400 	.word	0x50000400
 8003b74:	4b92      	ldr	r3, [pc, #584]	; (8003dc0 <HAL_ADC_IRQHandler+0x514>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f040 80b0 	bne.w	8003cea <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 80a3 	bne.w	8003cea <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 809d 	bne.w	8003cea <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8097 	beq.w	8003cea <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc4:	d004      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x324>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7e      	ldr	r2, [pc, #504]	; (8003dc4 <HAL_ADC_IRQHandler+0x518>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d106      	bne.n	8003bde <HAL_ADC_IRQHandler+0x332>
 8003bd0:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <HAL_ADC_IRQHandler+0x51c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d03e      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003bdc:	e005      	b.n	8003bea <HAL_ADC_IRQHandler+0x33e>
 8003bde:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_ADC_IRQHandler+0x520>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d037      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x352>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <HAL_ADC_IRQHandler+0x518>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d106      	bne.n	8003c0c <HAL_ADC_IRQHandler+0x360>
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <HAL_ADC_IRQHandler+0x51c>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d027      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003c0a:	e005      	b.n	8003c18 <HAL_ADC_IRQHandler+0x36c>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_ADC_IRQHandler+0x520>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d020      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c20:	d004      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x380>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <HAL_ADC_IRQHandler+0x518>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d106      	bne.n	8003c3a <HAL_ADC_IRQHandler+0x38e>
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_ADC_IRQHandler+0x51c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2b07      	cmp	r3, #7
 8003c36:	d010      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003c38:	e005      	b.n	8003c46 <HAL_ADC_IRQHandler+0x39a>
 8003c3a:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_ADC_IRQHandler+0x520>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b07      	cmp	r3, #7
 8003c44:	d009      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4e:	d004      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x3ae>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_ADC_IRQHandler+0x514>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d104      	bne.n	8003c64 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e00f      	b.n	8003c84 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6c:	d004      	beq.n	8003c78 <HAL_ADC_IRQHandler+0x3cc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_ADC_IRQHandler+0x518>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d102      	bne.n	8003c7e <HAL_ADC_IRQHandler+0x3d2>
 8003c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c7c:	e000      	b.n	8003c80 <HAL_ADC_IRQHandler+0x3d4>
 8003c7e:	4b50      	ldr	r3, [pc, #320]	; (8003dc0 <HAL_ADC_IRQHandler+0x514>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d12d      	bne.n	8003cea <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11a      	bne.n	8003cd2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003caa:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d112      	bne.n	8003cea <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
 8003cd0:	e00b      	b.n	8003cea <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f936 	bl	8003f5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2260      	movs	r2, #96	; 0x60
 8003cf6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x47a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fe fff9 	bl	8002d10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <HAL_ADC_IRQHandler+0x4aa>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f91c 	bl	8003f84 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_ADC_IRQHandler+0x4da>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f90e 	bl	8003f98 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d04f      	beq.n	8003e30 <HAL_ADC_IRQHandler+0x584>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04a      	beq.n	8003e30 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d102      	bne.n	8003da8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e02d      	b.n	8003e04 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db0:	d004      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x510>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <HAL_ADC_IRQHandler+0x518>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <HAL_ADC_IRQHandler+0x524>
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <HAL_ADC_IRQHandler+0x51c>)
 8003dbe:	e008      	b.n	8003dd2 <HAL_ADC_IRQHandler+0x526>
 8003dc0:	50000400 	.word	0x50000400
 8003dc4:	50000100 	.word	0x50000100
 8003dc8:	50000300 	.word	0x50000300
 8003dcc:	50000700 	.word	0x50000700
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_ADC_IRQHandler+0x5c8>)
 8003dd2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10a      	bne.n	8003e04 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e007      	b.n	8003e04 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10e      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f043 0202 	orr.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe ff7e 	bl	8002d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d018      	beq.n	8003e6c <HAL_ADC_IRQHandler+0x5c0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	f043 0208 	orr.w	r2, r3, #8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f882 	bl	8003f70 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003e6c:	bf00      	nop
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	50000700 	.word	0x50000700

08003e78 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADCEx_Calibration_Start+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e05f      	b.n	8003f54 <HAL_ADCEx_Calibration_Start+0xdc>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fd2d 	bl	80048fc <ADC_Disable>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d14e      	bne.n	8003f4a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003ec0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ee6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003ee8:	f7fe fed8 	bl	8002c9c <HAL_GetTick>
 8003eec:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003eee:	e01c      	b.n	8003f2a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ef0:	f7fe fed4 	bl	8002c9c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b0a      	cmp	r3, #10
 8003efc:	d915      	bls.n	8003f2a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0c:	d10d      	bne.n	8003f2a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f023 0312 	bic.w	r3, r3, #18
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e014      	b.n	8003f54 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f38:	d0da      	beq.n	8003ef0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b09b      	sub	sp, #108	; 0x6c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x22>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e2ca      	b.n	8004564 <HAL_ADC_ConfigChannel+0x5b8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 82ae 	bne.w	8004542 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d81c      	bhi.n	8004028 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	461a      	mov	r2, r3
 8004002:	231f      	movs	r3, #31
 8004004:	4093      	lsls	r3, r2
 8004006:	43db      	mvns	r3, r3
 8004008:	4019      	ands	r1, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa00 f203 	lsl.w	r2, r0, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
 8004026:	e063      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b09      	cmp	r3, #9
 800402e:	d81e      	bhi.n	800406e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	3b1e      	subs	r3, #30
 8004044:	221f      	movs	r2, #31
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	4019      	ands	r1, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	3b1e      	subs	r3, #30
 8004060:	fa00 f203 	lsl.w	r2, r0, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	635a      	str	r2, [r3, #52]	; 0x34
 800406c:	e040      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b0e      	cmp	r3, #14
 8004074:	d81e      	bhi.n	80040b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	3b3c      	subs	r3, #60	; 0x3c
 800408a:	221f      	movs	r2, #31
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	4019      	ands	r1, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	3b3c      	subs	r3, #60	; 0x3c
 80040a6:	fa00 f203 	lsl.w	r2, r0, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
 80040b2:	e01d      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	3b5a      	subs	r3, #90	; 0x5a
 80040c8:	221f      	movs	r2, #31
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	4019      	ands	r1, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	3b5a      	subs	r3, #90	; 0x5a
 80040e4:	fa00 f203 	lsl.w	r2, r0, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 80e5 	bne.w	80042ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b09      	cmp	r3, #9
 8004106:	d91c      	bls.n	8004142 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6999      	ldr	r1, [r3, #24]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	3b1e      	subs	r3, #30
 800411a:	2207      	movs	r2, #7
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	4019      	ands	r1, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6898      	ldr	r0, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	3b1e      	subs	r3, #30
 8004134:	fa00 f203 	lsl.w	r2, r0, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	619a      	str	r2, [r3, #24]
 8004140:	e019      	b.n	8004176 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6959      	ldr	r1, [r3, #20]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	2207      	movs	r2, #7
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	4019      	ands	r1, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6898      	ldr	r0, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	fa00 f203 	lsl.w	r2, r0, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	08db      	lsrs	r3, r3, #3
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	3b01      	subs	r3, #1
 8004194:	2b03      	cmp	r3, #3
 8004196:	d84f      	bhi.n	8004238 <HAL_ADC_ConfigChannel+0x28c>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041d3 	.word	0x080041d3
 80041a8:	080041f5 	.word	0x080041f5
 80041ac:	08004217 	.word	0x08004217
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041b6:	4b9a      	ldr	r3, [pc, #616]	; (8004420 <HAL_ADC_ConfigChannel+0x474>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	0691      	lsls	r1, r2, #26
 80041c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041c2:	430a      	orrs	r2, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041d0:	e07e      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041d8:	4b91      	ldr	r3, [pc, #580]	; (8004420 <HAL_ADC_ConfigChannel+0x474>)
 80041da:	4013      	ands	r3, r2
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	0691      	lsls	r1, r2, #26
 80041e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e4:	430a      	orrs	r2, r1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041f2:	e06d      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <HAL_ADC_ConfigChannel+0x474>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	0691      	lsls	r1, r2, #26
 8004204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004206:	430a      	orrs	r2, r1
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004212:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004214:	e05c      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800421c:	4b80      	ldr	r3, [pc, #512]	; (8004420 <HAL_ADC_ConfigChannel+0x474>)
 800421e:	4013      	ands	r3, r2
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	0691      	lsls	r1, r2, #26
 8004226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004228:	430a      	orrs	r2, r1
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004236:	e04b      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	069b      	lsls	r3, r3, #26
 8004248:	429a      	cmp	r2, r3
 800424a:	d107      	bne.n	800425c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	069b      	lsls	r3, r3, #26
 800426c:	429a      	cmp	r2, r3
 800426e:	d107      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800427e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	069b      	lsls	r3, r3, #26
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	069b      	lsls	r3, r3, #26
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d10a      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80042c8:	e001      	b.n	80042ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80042ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d108      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x344>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x344>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x346>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 8130 	bne.w	8004558 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d00f      	beq.n	8004320 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	400a      	ands	r2, r1
 800431a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800431e:	e049      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	409a      	lsls	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b09      	cmp	r3, #9
 8004340:	d91c      	bls.n	800437c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6999      	ldr	r1, [r3, #24]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	3b1b      	subs	r3, #27
 8004354:	2207      	movs	r2, #7
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	4019      	ands	r1, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6898      	ldr	r0, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	3b1b      	subs	r3, #27
 800436e:	fa00 f203 	lsl.w	r2, r0, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	619a      	str	r2, [r3, #24]
 800437a:	e01b      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6959      	ldr	r1, [r3, #20]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	2207      	movs	r2, #7
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	4019      	ands	r1, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6898      	ldr	r0, [r3, #8]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	fa00 f203 	lsl.w	r2, r0, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043bc:	d004      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0x41c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_ADC_ConfigChannel+0x478>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x420>
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <HAL_ADC_ConfigChannel+0x47c>)
 80043ca:	e000      	b.n	80043ce <HAL_ADC_ConfigChannel+0x422>
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_ADC_ConfigChannel+0x480>)
 80043ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043e8:	2b11      	cmp	r3, #17
 80043ea:	d105      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043fc:	2b12      	cmp	r3, #18
 80043fe:	f040 80ab 	bne.w	8004558 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 80a4 	bne.w	8004558 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004418:	d10a      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x484>
 800441a:	4b02      	ldr	r3, [pc, #8]	; (8004424 <HAL_ADC_ConfigChannel+0x478>)
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e022      	b.n	8004466 <HAL_ADC_ConfigChannel+0x4ba>
 8004420:	83fff000 	.word	0x83fff000
 8004424:	50000100 	.word	0x50000100
 8004428:	50000300 	.word	0x50000300
 800442c:	50000700 	.word	0x50000700
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a4e      	ldr	r2, [pc, #312]	; (8004570 <HAL_ADC_ConfigChannel+0x5c4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d103      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x496>
 800443a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e011      	b.n	8004466 <HAL_ADC_ConfigChannel+0x4ba>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4b      	ldr	r2, [pc, #300]	; (8004574 <HAL_ADC_ConfigChannel+0x5c8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d102      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x4a6>
 800444c:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_ADC_ConfigChannel+0x5cc>)
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e009      	b.n	8004466 <HAL_ADC_ConfigChannel+0x4ba>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a48      	ldr	r2, [pc, #288]	; (8004578 <HAL_ADC_ConfigChannel+0x5cc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d102      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x4b6>
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <HAL_ADC_ConfigChannel+0x5c8>)
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e001      	b.n	8004466 <HAL_ADC_ConfigChannel+0x4ba>
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d108      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x4da>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x4da>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_ADC_ConfigChannel+0x4dc>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d150      	bne.n	800452e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800448c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x502>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x502>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x504>
 80044ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d13c      	bne.n	800452e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d11d      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x54c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c4:	d118      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_ADC_ConfigChannel+0x5d0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <HAL_ADC_ConfigChannel+0x5d4>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	0c9a      	lsrs	r2, r3, #18
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044e8:	e002      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f9      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044f6:	e02e      	b.n	8004556 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b11      	cmp	r3, #17
 80044fe:	d10b      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x56c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004508:	d106      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800450a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004514:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004516:	e01e      	b.n	8004556 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b12      	cmp	r3, #18
 800451e:	d11a      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800452c:	e013      	b.n	8004556 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004540:	e00a      	b.n	8004558 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004554:	e000      	b.n	8004558 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004556:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004564:	4618      	mov	r0, r3
 8004566:	376c      	adds	r7, #108	; 0x6c
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	50000100 	.word	0x50000100
 8004574:	50000400 	.word	0x50000400
 8004578:	50000500 	.word	0x50000500
 800457c:	2000000c 	.word	0x2000000c
 8004580:	431bde83 	.word	0x431bde83

08004584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004584:	b480      	push	{r7}
 8004586:	b099      	sub	sp, #100	; 0x64
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800459c:	d102      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	e01a      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d103      	bne.n	80045b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80045ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	e011      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a67      	ldr	r2, [pc, #412]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d102      	bne.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e009      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a64      	ldr	r2, [pc, #400]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d102      	bne.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045d0:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	e001      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b0      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0a9      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 808d 	bne.w	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8086 	bne.w	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004620:	d004      	beq.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4b      	ldr	r2, [pc, #300]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800462e:	e000      	b.n	8004632 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004630:	4b4c      	ldr	r3, [pc, #304]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004632:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d040      	beq.n	80046be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800463c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800464e:	035b      	lsls	r3, r3, #13
 8004650:	430b      	orrs	r3, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004656:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d108      	bne.n	8004678 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d15c      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800469a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800469c:	2b00      	cmp	r3, #0
 800469e:	d14b      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80046a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046a8:	f023 030f 	bic.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6892      	ldr	r2, [r2, #8]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046bc:	e03c      	b.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d108      	bne.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d123      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800470c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800470e:	2b00      	cmp	r3, #0
 8004710:	d112      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800471a:	f023 030f 	bic.w	r3, r3, #15
 800471e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004720:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004722:	e009      	b.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004736:	e000      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004738:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004746:	4618      	mov	r0, r3
 8004748:	3764      	adds	r7, #100	; 0x64
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	50000100 	.word	0x50000100
 8004758:	50000400 	.word	0x50000400
 800475c:	50000500 	.word	0x50000500
 8004760:	50000300 	.word	0x50000300
 8004764:	50000700 	.word	0x50000700

08004768 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800477e:	2b00      	cmp	r3, #0
 8004780:	d126      	bne.n	80047d0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004798:	2b00      	cmp	r3, #0
 800479a:	d115      	bne.n	80047c8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0201 	orr.w	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7fd fc9f 	bl	800210c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80047ce:	e004      	b.n	80047da <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7fe fa83 	bl	8002cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7fe fa7d 	bl	8002d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d108      	bne.n	8004860 <ADC_Enable+0x2c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <ADC_Enable+0x2c>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <ADC_Enable+0x2e>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d143      	bne.n	80048ee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <ADC_Enable+0xc4>)
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f043 0210 	orr.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e02f      	b.n	80048f0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80048a0:	f7fe f9fc 	bl	8002c9c <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048a6:	e01b      	b.n	80048e0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048a8:	f7fe f9f8 	bl	8002c9c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d914      	bls.n	80048e0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d00d      	beq.n	80048e0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f043 0210 	orr.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d1dc      	bne.n	80048a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	8000003f 	.word	0x8000003f

080048fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <ADC_Disable+0x2c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <ADC_Disable+0x2c>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <ADC_Disable+0x2e>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d047      	beq.n	80049be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 030d 	and.w	r3, r3, #13
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10f      	bne.n	800495c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0202 	orr.w	r2, r2, #2
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2203      	movs	r2, #3
 8004952:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004954:	f7fe f9a2 	bl	8002c9c <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800495a:	e029      	b.n	80049b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f043 0210 	orr.w	r2, r3, #16
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e023      	b.n	80049c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004978:	f7fe f990 	bl	8002c9c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d914      	bls.n	80049b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d10d      	bne.n	80049b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f043 0210 	orr.w	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e007      	b.n	80049c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d0dc      	beq.n	8004978 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 809b 	beq.w	8004b24 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fc:	d12a      	bne.n	8004a54 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d126      	bne.n	8004a54 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d122      	bne.n	8004a54 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004a0e:	230c      	movs	r3, #12
 8004a10:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004a12:	e014      	b.n	8004a3e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <ADC_ConversionStop+0x168>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d90d      	bls.n	8004a38 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0210 	orr.w	r2, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e076      	b.n	8004b26 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d1e3      	bne.n	8004a14 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b60      	cmp	r3, #96	; 0x60
 8004a58:	d015      	beq.n	8004a86 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d10e      	bne.n	8004a86 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0210 	orr.w	r2, r2, #16
 8004a84:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d015      	beq.n	8004ab8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10e      	bne.n	8004ab8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0220 	orr.w	r2, r2, #32
 8004ab6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b60      	cmp	r3, #96	; 0x60
 8004abc:	d005      	beq.n	8004aca <ADC_ConversionStop+0x102>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b6c      	cmp	r3, #108	; 0x6c
 8004ac2:	d105      	bne.n	8004ad0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	617b      	str	r3, [r7, #20]
        break;
 8004ac8:	e005      	b.n	8004ad6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004aca:	2308      	movs	r3, #8
 8004acc:	617b      	str	r3, [r7, #20]
        break;
 8004ace:	e002      	b.n	8004ad6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	617b      	str	r3, [r7, #20]
        break;
 8004ad4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe f8e1 	bl	8002c9c <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004adc:	e01b      	b.n	8004b16 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ade:	f7fe f8dd 	bl	8002c9c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b0b      	cmp	r3, #11
 8004aea:	d914      	bls.n	8004b16 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0210 	orr.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e007      	b.n	8004b26 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1dc      	bne.n	8004ade <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	000993ff 	.word	0x000993ff

08004b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b50:	4013      	ands	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	60d3      	str	r3, [r2, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <__NVIC_GetPriorityGrouping+0x18>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0307 	and.w	r3, r3, #7
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db0b      	blt.n	8004bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4907      	ldr	r1, [pc, #28]	; (8004bd0 <__NVIC_EnableIRQ+0x38>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db12      	blt.n	8004c0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	490a      	ldr	r1, [pc, #40]	; (8004c18 <__NVIC_DisableIRQ+0x44>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfa:	3320      	adds	r3, #32
 8004bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c00:	f3bf 8f4f 	dsb	sy
}
 8004c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c06:	f3bf 8f6f 	isb	sy
}
 8004c0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db0a      	blt.n	8004c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	490c      	ldr	r1, [pc, #48]	; (8004c68 <__NVIC_SetPriority+0x4c>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c44:	e00a      	b.n	8004c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4908      	ldr	r1, [pc, #32]	; (8004c6c <__NVIC_SetPriority+0x50>)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3b04      	subs	r3, #4
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	440b      	add	r3, r1
 8004c5a:	761a      	strb	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	; 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f1c3 0307 	rsb	r3, r3, #7
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d902      	bls.n	8004ca0 <NVIC_EncodePriority+0x30>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b03      	subs	r3, #3
 8004c9e:	e000      	b.n	8004ca2 <NVIC_EncodePriority+0x32>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	4313      	orrs	r3, r2
         );
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff8e 	bl	8004c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff05 	bl	8004b34 <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d44:	f7ff ff1a 	bl	8004b7c <__NVIC_GetPriorityGrouping>
 8004d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff ff8e 	bl	8004c70 <NVIC_EncodePriority>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff5d 	bl	8004c1c <__NVIC_SetPriority>
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff0d 	bl	8004b98 <__NVIC_EnableIRQ>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff1d 	bl	8004bd4 <__NVIC_DisableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff94 	bl	8004cd8 <SysTick_Config>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e037      	b.n	8004e40 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004de6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9c4 	bl	80051b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}  
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_DMA_Start_IT+0x20>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e04a      	b.n	8004efe <HAL_DMA_Start_IT+0xb6>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d13a      	bne.n	8004ef0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f958 	bl	8005154 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 020e 	orr.w	r2, r2, #14
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e00f      	b.n	8004ede <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 020a 	orr.w	r2, r2, #10
 8004ecc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0204 	bic.w	r2, r2, #4
 8004edc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e005      	b.n	8004efc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d008      	beq.n	8004f2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e020      	b.n	8004f6c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 020e 	bic.w	r2, r2, #14
 8004f38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	2101      	movs	r1, #1
 8004f54:	fa01 f202 	lsl.w	r2, r1, r2
 8004f58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d005      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
 8004f98:	e027      	b.n	8004fea <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 020e 	bic.w	r2, r2, #14
 8004fa8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
    } 
  }
  return status;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2204      	movs	r2, #4
 8005012:	409a      	lsls	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d024      	beq.n	8005066 <HAL_DMA_IRQHandler+0x72>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01f      	beq.n	8005066 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d107      	bne.n	8005044 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0204 	bic.w	r2, r2, #4
 8005042:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	2104      	movs	r1, #4
 800504e:	fa01 f202 	lsl.w	r2, r1, r2
 8005052:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d06a      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005064:	e065      	b.n	8005132 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2202      	movs	r2, #2
 800506c:	409a      	lsls	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02c      	beq.n	80050d0 <HAL_DMA_IRQHandler+0xdc>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d027      	beq.n	80050d0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 020a 	bic.w	r2, r2, #10
 800509c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2102      	movs	r1, #2
 80050b0:	fa01 f202 	lsl.w	r2, r1, r2
 80050b4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d035      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80050ce:	e030      	b.n	8005132 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2208      	movs	r2, #8
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d028      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13e>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d023      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 020e 	bic.w	r2, r2, #14
 80050f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f202 	lsl.w	r2, r1, r2
 8005108:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
    }
  }
}  
 8005130:	e7ff      	b.n	8005132 <HAL_DMA_IRQHandler+0x13e>
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f202 	lsl.w	r2, r1, r2
 8005170:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b10      	cmp	r3, #16
 8005180:	d108      	bne.n	8005194 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005192:	e007      	b.n	80051a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	60da      	str	r2, [r3, #12]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <DMA_CalcBaseAndBitshift+0x60>)
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d80f      	bhi.n	80051e4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <DMA_CalcBaseAndBitshift+0x64>)
 80051cc:	4413      	add	r3, r2
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <DMA_CalcBaseAndBitshift+0x68>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <DMA_CalcBaseAndBitshift+0x6c>)
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80051e2:	e00e      	b.n	8005202 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <DMA_CalcBaseAndBitshift+0x70>)
 80051ec:	4413      	add	r3, r2
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <DMA_CalcBaseAndBitshift+0x68>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <DMA_CalcBaseAndBitshift+0x74>)
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40020407 	.word	0x40020407
 8005214:	bffdfff8 	.word	0xbffdfff8
 8005218:	cccccccd 	.word	0xcccccccd
 800521c:	40020000 	.word	0x40020000
 8005220:	bffdfbf8 	.word	0xbffdfbf8
 8005224:	40020400 	.word	0x40020400

08005228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005236:	e154      	b.n	80054e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2101      	movs	r1, #1
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 8146 	beq.w	80054dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d005      	beq.n	8005268 <HAL_GPIO_Init+0x40>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d130      	bne.n	80052ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800529e:	2201      	movs	r2, #1
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	f003 0201 	and.w	r2, r3, #1
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d017      	beq.n	8005306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2203      	movs	r2, #3
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4013      	ands	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d123      	bne.n	800535a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	08da      	lsrs	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3208      	adds	r2, #8
 800531a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	220f      	movs	r2, #15
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	08da      	lsrs	r2, r3, #3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3208      	adds	r2, #8
 8005354:	6939      	ldr	r1, [r7, #16]
 8005356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	2203      	movs	r2, #3
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f003 0203 	and.w	r2, r3, #3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80a0 	beq.w	80054dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539c:	4b58      	ldr	r3, [pc, #352]	; (8005500 <HAL_GPIO_Init+0x2d8>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4a57      	ldr	r2, [pc, #348]	; (8005500 <HAL_GPIO_Init+0x2d8>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6193      	str	r3, [r2, #24]
 80053a8:	4b55      	ldr	r3, [pc, #340]	; (8005500 <HAL_GPIO_Init+0x2d8>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053b4:	4a53      	ldr	r2, [pc, #332]	; (8005504 <HAL_GPIO_Init+0x2dc>)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	220f      	movs	r2, #15
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053de:	d019      	beq.n	8005414 <HAL_GPIO_Init+0x1ec>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a49      	ldr	r2, [pc, #292]	; (8005508 <HAL_GPIO_Init+0x2e0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_GPIO_Init+0x1e8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a48      	ldr	r2, [pc, #288]	; (800550c <HAL_GPIO_Init+0x2e4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00d      	beq.n	800540c <HAL_GPIO_Init+0x1e4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a47      	ldr	r2, [pc, #284]	; (8005510 <HAL_GPIO_Init+0x2e8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <HAL_GPIO_Init+0x1e0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a46      	ldr	r2, [pc, #280]	; (8005514 <HAL_GPIO_Init+0x2ec>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_GPIO_Init+0x1dc>
 8005400:	2304      	movs	r3, #4
 8005402:	e008      	b.n	8005416 <HAL_GPIO_Init+0x1ee>
 8005404:	2305      	movs	r3, #5
 8005406:	e006      	b.n	8005416 <HAL_GPIO_Init+0x1ee>
 8005408:	2303      	movs	r3, #3
 800540a:	e004      	b.n	8005416 <HAL_GPIO_Init+0x1ee>
 800540c:	2302      	movs	r3, #2
 800540e:	e002      	b.n	8005416 <HAL_GPIO_Init+0x1ee>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_GPIO_Init+0x1ee>
 8005414:	2300      	movs	r3, #0
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	f002 0203 	and.w	r2, r2, #3
 800541c:	0092      	lsls	r2, r2, #2
 800541e:	4093      	lsls	r3, r2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005426:	4937      	ldr	r1, [pc, #220]	; (8005504 <HAL_GPIO_Init+0x2dc>)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	3302      	adds	r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800545e:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005482:	4a25      	ldr	r2, [pc, #148]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	43db      	mvns	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054ac:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	3301      	adds	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f47f aea3 	bne.w	8005238 <HAL_GPIO_Init+0x10>
  }
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40021000 	.word	0x40021000
 8005504:	40010000 	.word	0x40010000
 8005508:	48000400 	.word	0x48000400
 800550c:	48000800 	.word	0x48000800
 8005510:	48000c00 	.word	0x48000c00
 8005514:	48001000 	.word	0x48001000
 8005518:	40010400 	.word	0x40010400

0800551c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800552a:	e0b8      	b.n	800569e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800552c:	2201      	movs	r2, #1
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80ab 	beq.w	8005698 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005542:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <HAL_GPIO_DeInit+0x1a0>)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	3302      	adds	r3, #2
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4013      	ands	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800556a:	d019      	beq.n	80055a0 <HAL_GPIO_DeInit+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a54      	ldr	r2, [pc, #336]	; (80056c0 <HAL_GPIO_DeInit+0x1a4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_GPIO_DeInit+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a53      	ldr	r2, [pc, #332]	; (80056c4 <HAL_GPIO_DeInit+0x1a8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00d      	beq.n	8005598 <HAL_GPIO_DeInit+0x7c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a52      	ldr	r2, [pc, #328]	; (80056c8 <HAL_GPIO_DeInit+0x1ac>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <HAL_GPIO_DeInit+0x78>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a51      	ldr	r2, [pc, #324]	; (80056cc <HAL_GPIO_DeInit+0x1b0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <HAL_GPIO_DeInit+0x74>
 800558c:	2304      	movs	r3, #4
 800558e:	e008      	b.n	80055a2 <HAL_GPIO_DeInit+0x86>
 8005590:	2305      	movs	r3, #5
 8005592:	e006      	b.n	80055a2 <HAL_GPIO_DeInit+0x86>
 8005594:	2303      	movs	r3, #3
 8005596:	e004      	b.n	80055a2 <HAL_GPIO_DeInit+0x86>
 8005598:	2302      	movs	r3, #2
 800559a:	e002      	b.n	80055a2 <HAL_GPIO_DeInit+0x86>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_GPIO_DeInit+0x86>
 80055a0:	2300      	movs	r3, #0
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	f002 0203 	and.w	r2, r2, #3
 80055a8:	0092      	lsls	r2, r2, #2
 80055aa:	4093      	lsls	r3, r2
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d132      	bne.n	8005618 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	4945      	ldr	r1, [pc, #276]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055bc:	4013      	ands	r3, r2
 80055be:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055c0:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	4941      	ldr	r1, [pc, #260]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055ce:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	493e      	ldr	r1, [pc, #248]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055dc:	4b3c      	ldr	r3, [pc, #240]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	493a      	ldr	r1, [pc, #232]	; (80056d0 <HAL_GPIO_DeInit+0x1b4>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	220f      	movs	r2, #15
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80055fa:	4a30      	ldr	r2, [pc, #192]	; (80056bc <HAL_GPIO_DeInit+0x1a0>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3302      	adds	r3, #2
 8005602:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43da      	mvns	r2, r3
 800560a:	482c      	ldr	r0, [pc, #176]	; (80056bc <HAL_GPIO_DeInit+0x1a0>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	400a      	ands	r2, r1
 8005612:	3302      	adds	r3, #2
 8005614:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2103      	movs	r1, #3
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	08da      	lsrs	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3208      	adds	r2, #8
 8005636:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	220f      	movs	r2, #15
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	08d2      	lsrs	r2, r2, #3
 800564e:	4019      	ands	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	2103      	movs	r1, #3
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	401a      	ands	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	2101      	movs	r1, #1
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	401a      	ands	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	2103      	movs	r1, #3
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	401a      	ands	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	3301      	adds	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f47f af40 	bne.w	800552c <HAL_GPIO_DeInit+0x10>
  }
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40010000 	.word	0x40010000
 80056c0:	48000400 	.word	0x48000400
 80056c4:	48000800 	.word	0x48000800
 80056c8:	48000c00 	.word	0x48000c00
 80056cc:	48001000 	.word	0x48001000
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
 80056f0:	e001      	b.n	80056f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
 8005710:	4613      	mov	r3, r2
 8005712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005714:	787b      	ldrb	r3, [r7, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005720:	e002      	b.n	8005728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4013      	ands	r3, r2
 800574c:	041a      	lsls	r2, r3, #16
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	43d9      	mvns	r1, r3
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	400b      	ands	r3, r1
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800577e:	4a05      	ldr	r2, [pc, #20]	; (8005794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	4618      	mov	r0, r3
 8005788:	f7fc fbf4 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40010400 	.word	0x40010400

08005798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e081      	b.n	80058ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fc fdea 	bl	8002398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	; 0x24
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d107      	bne.n	8005812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	e006      	b.n	8005820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800581e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d104      	bne.n	8005832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005844:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005854:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e021      	b.n	800590c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fc fdad 	bl	8002440 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	461a      	mov	r2, r3
 8005920:	460b      	mov	r3, r1
 8005922:	817b      	strh	r3, [r7, #10]
 8005924:	4613      	mov	r3, r2
 8005926:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b20      	cmp	r3, #32
 8005932:	f040 80da 	bne.w	8005aea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2C_Master_Transmit+0x30>
 8005940:	2302      	movs	r3, #2
 8005942:	e0d3      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800594c:	f7fd f9a6 	bl	8002c9c <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	2319      	movs	r3, #25
 8005958:	2201      	movs	r2, #1
 800595a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 fcb1 	bl	80072c6 <I2C_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0be      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2221      	movs	r2, #33	; 0x21
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2210      	movs	r2, #16
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	893a      	ldrh	r2, [r7, #8]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	2bff      	cmp	r3, #255	; 0xff
 800599e:	d90e      	bls.n	80059be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	8979      	ldrh	r1, [r7, #10]
 80059ae:	4b51      	ldr	r3, [pc, #324]	; (8005af4 <HAL_I2C_Master_Transmit+0x1e0>)
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f001 fe3e 	bl	8007638 <I2C_TransferConfig>
 80059bc:	e06c      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	4b48      	ldr	r3, [pc, #288]	; (8005af4 <HAL_I2C_Master_Transmit+0x1e0>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 fe2d 	bl	8007638 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059de:	e05b      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	6a39      	ldr	r1, [r7, #32]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f001 fcbd 	bl	8007364 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e07b      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d034      	beq.n	8005a98 <HAL_I2C_Master_Transmit+0x184>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d130      	bne.n	8005a98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f001 fc40 	bl	80072c6 <I2C_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04d      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d90e      	bls.n	8005a78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	8979      	ldrh	r1, [r7, #10]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f001 fde1 	bl	8007638 <I2C_TransferConfig>
 8005a76:	e00f      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 fdd0 	bl	8007638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d19e      	bne.n	80059e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6a39      	ldr	r1, [r7, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 fca3 	bl	80073f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e01a      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_I2C_Master_Transmit+0x1e4>)
 8005aca:	400b      	ands	r3, r1
 8005acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	80002000 	.word	0x80002000
 8005af8:	fe00e800 	.word	0xfe00e800

08005afc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	f040 80f3 	bne.w	8005d04 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e0e9      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_I2C_IsDeviceReady+0x44>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e0e2      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2224      	movs	r2, #36	; 0x24
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <HAL_I2C_IsDeviceReady+0x72>
 8005b5e:	897b      	ldrh	r3, [r7, #10]
 8005b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b6c:	e006      	b.n	8005b7c <HAL_I2C_IsDeviceReady+0x80>
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b82:	f7fd f88b 	bl	8002c9c <HAL_GetTick>
 8005b86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005bb4:	e034      	b.n	8005c20 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d01a      	beq.n	8005bf4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fd f86d 	bl	8002c9c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <HAL_I2C_IsDeviceReady+0xd8>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e088      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c20:	7ffb      	ldrb	r3, [r7, #31]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_I2C_IsDeviceReady+0x130>
 8005c26:	7fbb      	ldrb	r3, [r7, #30]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0c4      	beq.n	8005bb6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d01a      	beq.n	8005c70 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2120      	movs	r1, #32
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f001 fb3e 	bl	80072c6 <I2C_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e058      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e04a      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2120      	movs	r1, #32
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 fb23 	bl	80072c6 <I2C_WaitOnFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e03d      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2210      	movs	r2, #16
 8005c90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2220      	movs	r2, #32
 8005c98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d118      	bne.n	8005cd4 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2120      	movs	r1, #32
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f001 fb02 	bl	80072c6 <I2C_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e01c      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	f63f af39 	bhi.w	8005b56 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d2c:	2b28      	cmp	r3, #40	; 0x28
 8005d2e:	f040 8098 	bne.w	8005e62 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e08c      	b.n	8005e64 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005d4a:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f001 fd2c 	bl	80077ac <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e080      	b.n	8005e64 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b2a      	cmp	r3, #42	; 0x2a
 8005d74:	d12a      	bne.n	8005dcc <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d76:	2102      	movs	r1, #2
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fd17 	bl	80077ac <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8c:	d11e      	bne.n	8005dcc <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d9c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d012      	beq.n	8005dcc <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff f8e0 	bl	8004f78 <HAL_DMA_Abort_IT>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2229      	movs	r2, #41	; 0x29
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d106      	bne.n	8005e4c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005e54:	f248 0101 	movw	r1, #32769	; 0x8001
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f001 fc1f 	bl	800769c <I2C_Enable_IRQ>

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	0800728b 	.word	0x0800728b
 8005e70:	0800618b 	.word	0x0800618b

08005e74 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e90:	2b28      	cmp	r3, #40	; 0x28
 8005e92:	f040 8098 	bne.w	8005fc6 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e08c      	b.n	8005fc8 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005eae:	f248 0102 	movw	r1, #32770	; 0x8002
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f001 fc7a 	bl	80077ac <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e080      	b.n	8005fc8 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b29      	cmp	r3, #41	; 0x29
 8005ed8:	d12a      	bne.n	8005f30 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005eda:	2101      	movs	r1, #1
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f001 fc65 	bl	80077ac <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef0:	d11e      	bne.n	8005f30 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f00:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d012      	beq.n	8005f30 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8005f10:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff f82e 	bl	8004f78 <HAL_DMA_Abort_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	222a      	movs	r2, #42	; 0x2a
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f54:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8005f76:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005fb8:	f248 0102 	movw	r1, #32770	; 0x8002
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f001 fb6d 	bl	800769c <I2C_Enable_IRQ>

    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	0800728b 	.word	0x0800728b
 8005fd4:	0800618b 	.word	0x0800618b

08005fd8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d10d      	bne.n	8006008 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2228      	movs	r2, #40	; 0x28
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_I2C_EnableListen_IT+0x3c>)
 8005ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fb4c 	bl	800769c <I2C_Enable_IRQ>

    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	0800618b 	.word	0x0800618b

08006018 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
  }
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006090:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	0a9b      	lsrs	r3, r3, #10
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	09db      	lsrs	r3, r3, #7
 80060a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f043 0208 	orr.w	r2, r3, #8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	0a5b      	lsrs	r3, r3, #9
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	f043 0202 	orr.w	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 030b 	and.w	r3, r3, #11
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 ff87 	bl	8007014 <I2C_ITError>
  }
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <I2C_Slave_ISR_IT+0x24>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e0ec      	b.n	8006388 <I2C_Slave_ISR_IT+0x1fe>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fdbf 	bl	8006d54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04d      	beq.n	800627e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d047      	beq.n	800627e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d128      	bne.n	800624a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b28      	cmp	r3, #40	; 0x28
 8006202:	d108      	bne.n	8006216 <I2C_Slave_ISR_IT+0x8c>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800620a:	d104      	bne.n	8006216 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800620c:	6939      	ldr	r1, [r7, #16]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 feaa 	bl	8006f68 <I2C_ITListenCplt>
 8006214:	e032      	b.n	800627c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b29      	cmp	r3, #41	; 0x29
 8006220:	d10e      	bne.n	8006240 <I2C_Slave_ISR_IT+0xb6>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006228:	d00a      	beq.n	8006240 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2210      	movs	r2, #16
 8006230:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f001 f805 	bl	8007242 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fc62 	bl	8006b02 <I2C_ITSlaveSeqCplt>
 800623e:	e01d      	b.n	800627c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2210      	movs	r2, #16
 8006246:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006248:	e096      	b.n	8006378 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2210      	movs	r2, #16
 8006250:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <I2C_Slave_ISR_IT+0xe4>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800626a:	f040 8085 	bne.w	8006378 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	4619      	mov	r1, r3
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fecd 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800627a:	e07d      	b.n	8006378 <I2C_Slave_ISR_IT+0x1ee>
 800627c:	e07c      	b.n	8006378 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d030      	beq.n	80062ec <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006292:	2b00      	cmp	r3, #0
 8006294:	d02a      	beq.n	80062ec <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d14f      	bne.n	800637c <I2C_Slave_ISR_IT+0x1f2>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062e2:	d04b      	beq.n	800637c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fc0c 	bl	8006b02 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80062ea:	e047      	b.n	800637c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	08db      	lsrs	r3, r3, #3
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006304:	6939      	ldr	r1, [r7, #16]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fb3a 	bl	8006980 <I2C_ITAddrCplt>
 800630c:	e037      	b.n	800637e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d031      	beq.n	800637e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02b      	beq.n	800637e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d018      	beq.n	8006362 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006360:	e00d      	b.n	800637e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006368:	d002      	beq.n	8006370 <I2C_Slave_ISR_IT+0x1e6>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fbc6 	bl	8006b02 <I2C_ITSlaveSeqCplt>
 8006376:	e002      	b.n	800637e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800637c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <I2C_Master_ISR_DMA+0x1a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0e1      	b.n	800656e <I2C_Master_ISR_DMA+0x1de>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d017      	beq.n	80063ee <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f043 0204 	orr.w	r2, r3, #4
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80063de:	2120      	movs	r1, #32
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 f95b 	bl	800769c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 ff2b 	bl	8007242 <I2C_Flush_TXDR>
 80063ec:	e0ba      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d072      	beq.n	80064e0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	099b      	lsrs	r3, r3, #6
 80063fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006402:	2b00      	cmp	r3, #0
 8006404:	d06c      	beq.n	80064e0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d04e      	beq.n	80064be <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d906      	bls.n	8006446 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800643e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e010      	b.n	8006468 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006458:	d003      	beq.n	8006462 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e002      	b.n	8006468 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006466:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	b2da      	uxtb	r2, r3
 800646e:	8a79      	ldrh	r1, [r7, #18]
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 f8de 	bl	8007638 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b22      	cmp	r3, #34	; 0x22
 8006498:	d108      	bne.n	80064ac <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80064aa:	e05b      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80064bc:	e052      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064cc:	d003      	beq.n	80064d6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fada 	bl	8006a88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80064d4:	e046      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064d6:	2140      	movs	r1, #64	; 0x40
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fd9b 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80064de:	e041      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d029      	beq.n	8006540 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d023      	beq.n	8006540 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006510:	d027      	beq.n	8006562 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800651a:	d108      	bne.n	800652e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800652c:	e019      	b.n	8006562 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 faaa 	bl	8006a88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006534:	e015      	b.n	8006562 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006536:	2140      	movs	r1, #64	; 0x40
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fd6b 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800653e:	e010      	b.n	8006562 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fb30 	bl	8006bc0 <I2C_ITMasterCplt>
 8006560:	e000      	b.n	8006564 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006562:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006584:	4b8c      	ldr	r3, [pc, #560]	; (80067b8 <I2C_Mem_ISR_DMA+0x240>)
 8006586:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <I2C_Mem_ISR_DMA+0x1e>
 8006592:	2302      	movs	r3, #2
 8006594:	e10c      	b.n	80067b0 <I2C_Mem_ISR_DMA+0x238>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d017      	beq.n	80065da <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d011      	beq.n	80065da <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	f043 0204 	orr.w	r2, r3, #4
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80065ca:	2120      	movs	r1, #32
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f001 f865 	bl	800769c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fe35 	bl	8007242 <I2C_Flush_TXDR>
 80065d8:	e0e5      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006602:	651a      	str	r2, [r3, #80]	; 0x50
 8006604:	e0cf      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d05c      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	099b      	lsrs	r3, r3, #6
 8006616:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800661a:	2b00      	cmp	r3, #0
 800661c:	d056      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800661e:	2110      	movs	r1, #16
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 f83b 	bl	800769c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d048      	beq.n	80066c2 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d910      	bls.n	800665c <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006644:	b299      	uxth	r1, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664a:	b2da      	uxtb	r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 ffef 	bl	8007638 <I2C_TransferConfig>
 800665a:	e011      	b.n	8006680 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666a:	b299      	uxth	r1, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 ffdc 	bl	8007638 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	; 0x22
 800669c:	d108      	bne.n	80066b0 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80066ae:	e07a      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80066c0:	e071      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fca5 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80066ca:	e06c      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	099b      	lsrs	r3, r3, #6
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d056      	beq.n	8006786 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d050      	beq.n	8006786 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b22      	cmp	r3, #34	; 0x22
 80066ee:	d101      	bne.n	80066f4 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <I2C_Mem_ISR_DMA+0x244>)
 80066f2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2bff      	cmp	r3, #255	; 0xff
 80066fc:	d910      	bls.n	8006720 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	22ff      	movs	r2, #255	; 0xff
 8006702:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006708:	b299      	uxth	r1, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670e:	b2da      	uxtb	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 ff8d 	bl	8007638 <I2C_TransferConfig>
 800671e:	e011      	b.n	8006744 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	b299      	uxth	r1, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006734:	b2da      	uxtb	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 ff7a 	bl	8007638 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b22      	cmp	r3, #34	; 0x22
 8006760:	d108      	bne.n	8006774 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006770:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006772:	e018      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006784:	e00f      	b.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fa0d 	bl	8006bc0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	80002000 	.word	0x80002000
 80067bc:	80002400 	.word	0x80002400

080067c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <I2C_Slave_ISR_DMA+0x24>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e0c9      	b.n	8006978 <I2C_Slave_ISR_DMA+0x1b8>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 faa4 	bl	8006d54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 809a 	beq.w	800694e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8093 	beq.w	800694e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0b9b      	lsrs	r3, r3, #14
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	0bdb      	lsrs	r3, r3, #15
 8006838:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800683c:	2b00      	cmp	r3, #0
 800683e:	d07f      	beq.n	8006940 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	0bdb      	lsrs	r3, r3, #15
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0b9b      	lsrs	r3, r3, #14
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006884:	2301      	movs	r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d128      	bne.n	80068e0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b28      	cmp	r3, #40	; 0x28
 8006898:	d108      	bne.n	80068ac <I2C_Slave_ISR_DMA+0xec>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a0:	d104      	bne.n	80068ac <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fb5f 	bl	8006f68 <I2C_ITListenCplt>
 80068aa:	e048      	b.n	800693e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b29      	cmp	r3, #41	; 0x29
 80068b6:	d10e      	bne.n	80068d6 <I2C_Slave_ISR_DMA+0x116>
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068be:	d00a      	beq.n	80068d6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2210      	movs	r2, #16
 80068c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fcba 	bl	8007242 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f917 	bl	8006b02 <I2C_ITSlaveSeqCplt>
 80068d4:	e033      	b.n	800693e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2210      	movs	r2, #16
 80068dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80068de:	e034      	b.n	800694a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2210      	movs	r2, #16
 80068e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	f043 0204 	orr.w	r2, r3, #4
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <I2C_Slave_ISR_DMA+0x14a>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006908:	d11f      	bne.n	800694a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b21      	cmp	r3, #33	; 0x21
 800690e:	d002      	beq.n	8006916 <I2C_Slave_ISR_DMA+0x156>
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b29      	cmp	r3, #41	; 0x29
 8006914:	d103      	bne.n	800691e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2221      	movs	r2, #33	; 0x21
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
 800691c:	e008      	b.n	8006930 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	d002      	beq.n	800692a <I2C_Slave_ISR_DMA+0x16a>
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b2a      	cmp	r3, #42	; 0x2a
 8006928:	d102      	bne.n	8006930 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2222      	movs	r2, #34	; 0x22
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006934:	4619      	mov	r1, r3
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fb6c 	bl	8007014 <I2C_ITError>
      if (treatdmanack == 1U)
 800693c:	e005      	b.n	800694a <I2C_Slave_ISR_DMA+0x18a>
 800693e:	e004      	b.n	800694a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2210      	movs	r2, #16
 8006946:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006948:	e011      	b.n	800696e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800694a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800694c:	e00f      	b.n	800696e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	08db      	lsrs	r3, r3, #3
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f809 	bl	8006980 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006996:	2b28      	cmp	r3, #40	; 0x28
 8006998:	d16a      	bne.n	8006a70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d138      	bne.n	8006a50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	09db      	lsrs	r3, r3, #7
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	89bb      	ldrh	r3, [r7, #12]
 80069e6:	4053      	eors	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f003 0306 	and.w	r3, r3, #6
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11c      	bne.n	8006a2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80069f2:	897b      	ldrh	r3, [r7, #10]
 80069f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d13b      	bne.n	8006a80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2208      	movs	r2, #8
 8006a14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a1e:	89ba      	ldrh	r2, [r7, #12]
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7f9 fc6d 	bl	8000304 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a2a:	e029      	b.n	8006a80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 feb9 	bl	80077ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a42:	89ba      	ldrh	r2, [r7, #12]
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7f9 fc5b 	bl	8000304 <HAL_I2C_AddrCallback>
}
 8006a4e:	e017      	b.n	8006a80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fea9 	bl	80077ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a62:	89ba      	ldrh	r2, [r7, #12]
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7f9 fc4b 	bl	8000304 <HAL_I2C_AddrCallback>
}
 8006a6e:	e007      	b.n	8006a80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b21      	cmp	r3, #33	; 0x21
 8006aa2:	d115      	bne.n	8006ad0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2211      	movs	r2, #17
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ab8:	2101      	movs	r1, #1
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fe76 	bl	80077ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fb20 	bl	800610e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ace:	e014      	b.n	8006afa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2212      	movs	r2, #18
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fe60 	bl	80077ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fb14 	bl	8006122 <HAL_I2C_MasterRxCpltCallback>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	0b9b      	lsrs	r3, r3, #14
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e00d      	b.n	8006b54 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	0bdb      	lsrs	r3, r3, #15
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b52:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b29      	cmp	r3, #41	; 0x29
 8006b5e:	d112      	bne.n	8006b86 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2228      	movs	r2, #40	; 0x28
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2221      	movs	r2, #33	; 0x21
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fe1b 	bl	80077ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7f9 fc02 	bl	8000388 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b84:	e017      	b.n	8006bb6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b90:	d111      	bne.n	8006bb6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2228      	movs	r2, #40	; 0x28
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2222      	movs	r2, #34	; 0x22
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fe02 	bl	80077ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7f9 fc0b 	bl	80003cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b21      	cmp	r3, #33	; 0x21
 8006be0:	d107      	bne.n	8006bf2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fde1 	bl	80077ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2211      	movs	r2, #17
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf0:	e00c      	b.n	8006c0c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b22      	cmp	r3, #34	; 0x22
 8006bfc:	d106      	bne.n	8006c0c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006bfe:	2102      	movs	r1, #2
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fdd3 	bl	80077ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2212      	movs	r2, #18
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <I2C_ITMasterCplt+0x18c>)
 8006c18:	400b      	ands	r3, r1
 8006c1a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <I2C_ITMasterCplt+0x190>)
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	f043 0204 	orr.w	r2, r3, #4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d10b      	bne.n	8006c6c <I2C_ITMasterCplt+0xac>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	089b      	lsrs	r3, r3, #2
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fae8 	bl	8007242 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b60      	cmp	r3, #96	; 0x60
 8006c82:	d002      	beq.n	8006c8a <I2C_ITMasterCplt+0xca>
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f9bf 	bl	8007014 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c96:	e054      	b.n	8006d42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b21      	cmp	r3, #33	; 0x21
 8006ca2:	d124      	bne.n	8006cee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d10b      	bne.n	8006cd6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fa31 	bl	8006136 <HAL_I2C_MemTxCpltCallback>
}
 8006cd4:	e035      	b.n	8006d42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fa11 	bl	800610e <HAL_I2C_MasterTxCpltCallback>
}
 8006cec:	e029      	b.n	8006d42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b22      	cmp	r3, #34	; 0x22
 8006cf8:	d123      	bne.n	8006d42 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d10b      	bne.n	8006d2c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fa10 	bl	800614a <HAL_I2C_MemRxCpltCallback>
}
 8006d2a:	e00a      	b.n	8006d42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff f9f0 	bl	8006122 <HAL_I2C_MasterRxCpltCallback>
}
 8006d42:	bf00      	nop
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	fe00e800 	.word	0xfe00e800
 8006d50:	ffff0000 	.word	0xffff0000

08006d54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2220      	movs	r2, #32
 8006d78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b21      	cmp	r3, #33	; 0x21
 8006d7e:	d002      	beq.n	8006d86 <I2C_ITSlaveCplt+0x32>
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b29      	cmp	r3, #41	; 0x29
 8006d84:	d108      	bne.n	8006d98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d86:	f248 0101 	movw	r1, #32769	; 0x8001
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd0e 	bl	80077ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2221      	movs	r2, #33	; 0x21
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
 8006d96:	e00d      	b.n	8006db4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b22      	cmp	r3, #34	; 0x22
 8006d9c:	d002      	beq.n	8006da4 <I2C_ITSlaveCplt+0x50>
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b2a      	cmp	r3, #42	; 0x2a
 8006da2:	d107      	bne.n	8006db4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006da4:	f248 0102 	movw	r1, #32770	; 0x8002
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fcff 	bl	80077ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2222      	movs	r2, #34	; 0x22
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dc2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b64      	ldr	r3, [pc, #400]	; (8006f60 <I2C_ITSlaveCplt+0x20c>)
 8006dd0:	400b      	ands	r3, r1
 8006dd2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa34 	bl	8007242 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	0b9b      	lsrs	r3, r3, #14
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006df4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d020      	beq.n	8006e40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e0c:	e018      	b.n	8006e40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	0bdb      	lsrs	r3, r3, #15
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d012      	beq.n	8006e40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0304 	bic.w	r3, r3, #4
 8006e52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9c:	f043 0204 	orr.w	r2, r3, #4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d010      	beq.n	8006edc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8a7 	bl	8007014 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b28      	cmp	r3, #40	; 0x28
 8006ed0:	d141      	bne.n	8006f56 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f847 	bl	8006f68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eda:	e03c      	b.n	8006f56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ee4:	d014      	beq.n	8006f10 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fe0b 	bl	8006b02 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <I2C_ITSlaveCplt+0x210>)
 8006ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7f9 f9ef 	bl	80002ec <HAL_I2C_ListenCpltCallback>
}
 8006f0e:	e022      	b.n	8006f56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b22      	cmp	r3, #34	; 0x22
 8006f1a:	d10e      	bne.n	8006f3a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7f9 fa4a 	bl	80003cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006f38:	e00d      	b.n	8006f56 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7f9 fa19 	bl	8000388 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f56:	bf00      	nop
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	fe00e800 	.word	0xfe00e800
 8006f64:	ffff0000 	.word	0xffff0000

08006f68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <I2C_ITListenCplt+0xa8>)
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	089b      	lsrs	r3, r3, #2
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d022      	beq.n	8006fe6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d012      	beq.n	8006fe6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	f043 0204 	orr.w	r2, r3, #4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fe6:	f248 0103 	movw	r1, #32771	; 0x8003
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fbde 	bl	80077ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7f9 f973 	bl	80002ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	ffff0000 	.word	0xffff0000

08007014 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007024:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a6d      	ldr	r2, [pc, #436]	; (80071e8 <I2C_ITError+0x1d4>)
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b28      	cmp	r3, #40	; 0x28
 800704a:	d005      	beq.n	8007058 <I2C_ITError+0x44>
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b29      	cmp	r3, #41	; 0x29
 8007050:	d002      	beq.n	8007058 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b2a      	cmp	r3, #42	; 0x2a
 8007056:	d10b      	bne.n	8007070 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007058:	2103      	movs	r1, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fba6 	bl	80077ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2228      	movs	r2, #40	; 0x28
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a60      	ldr	r2, [pc, #384]	; (80071ec <I2C_ITError+0x1d8>)
 800706c:	635a      	str	r2, [r3, #52]	; 0x34
 800706e:	e030      	b.n	80070d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007070:	f248 0103 	movw	r1, #32771	; 0x8003
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fb99 	bl	80077ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8e1 	bl	8007242 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b60      	cmp	r3, #96	; 0x60
 800708a:	d01f      	beq.n	80070cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d114      	bne.n	80070cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b10      	cmp	r3, #16
 80070ae:	d109      	bne.n	80070c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2210      	movs	r2, #16
 80070b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	f043 0204 	orr.w	r2, r3, #4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2220      	movs	r2, #32
 80070ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d039      	beq.n	8007154 <I2C_ITError+0x140>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b11      	cmp	r3, #17
 80070e4:	d002      	beq.n	80070ec <I2C_ITError+0xd8>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b21      	cmp	r3, #33	; 0x21
 80070ea:	d133      	bne.n	8007154 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fa:	d107      	bne.n	800710c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800710a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe f812 	bl	800513a <HAL_DMA_GetState>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d017      	beq.n	800714c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	4a33      	ldr	r2, [pc, #204]	; (80071f0 <I2C_ITError+0x1dc>)
 8007122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd ff21 	bl	8004f78 <HAL_DMA_Abort_IT>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04d      	beq.n	80071d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007146:	4610      	mov	r0, r2
 8007148:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800714a:	e045      	b.n	80071d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f851 	bl	80071f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007152:	e041      	b.n	80071d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d039      	beq.n	80071d0 <I2C_ITError+0x1bc>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b12      	cmp	r3, #18
 8007160:	d002      	beq.n	8007168 <I2C_ITError+0x154>
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b22      	cmp	r3, #34	; 0x22
 8007166:	d133      	bne.n	80071d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007176:	d107      	bne.n	8007188 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007186:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718c:	4618      	mov	r0, r3
 800718e:	f7fd ffd4 	bl	800513a <HAL_DMA_GetState>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d017      	beq.n	80071c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <I2C_ITError+0x1dc>)
 800719e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fd fee3 	bl	8004f78 <HAL_DMA_Abort_IT>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d011      	beq.n	80071dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071c2:	4610      	mov	r0, r2
 80071c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071c6:	e009      	b.n	80071dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f813 	bl	80071f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ce:	e005      	b.n	80071dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f80f 	bl	80071f4 <I2C_TreatErrorCallback>
  }
}
 80071d6:	e002      	b.n	80071de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071dc:	bf00      	nop
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	ffff0000 	.word	0xffff0000
 80071ec:	0800618b 	.word	0x0800618b
 80071f0:	0800728b 	.word	0x0800728b

080071f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b60      	cmp	r3, #96	; 0x60
 8007206:	d10e      	bne.n	8007226 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fe ff9d 	bl	800615e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007224:	e009      	b.n	800723a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7f9 f901 	bl	800043c <HAL_I2C_ErrorCallback>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d103      	bne.n	8007260 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d007      	beq.n	800727e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	619a      	str	r2, [r3, #24]
  }
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	2200      	movs	r2, #0
 80072a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b4:	2200      	movs	r2, #0
 80072b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff ff9b 	bl	80071f4 <I2C_TreatErrorCallback>
}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d6:	e031      	b.n	800733c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d02d      	beq.n	800733c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e0:	f7fb fcdc 	bl	8002c9c <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d122      	bne.n	800733c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	bf0c      	ite	eq
 8007306:	2301      	moveq	r3, #1
 8007308:	2300      	movne	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	429a      	cmp	r2, r3
 8007312:	d113      	bne.n	800733c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e00f      	b.n	800735c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	429a      	cmp	r2, r3
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	429a      	cmp	r2, r3
 8007358:	d0be      	beq.n	80072d8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007370:	e033      	b.n	80073da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f87e 	bl	8007478 <I2C_IsErrorOccurred>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e031      	b.n	80073ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d025      	beq.n	80073da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fb fc85 	bl	8002c9c <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11a      	bne.n	80073da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d013      	beq.n	80073da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e007      	b.n	80073ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d1c4      	bne.n	8007372 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073fe:	e02f      	b.n	8007460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f837 	bl	8007478 <I2C_IsErrorOccurred>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e02d      	b.n	8007470 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007414:	f7fb fc42 	bl	8002c9c <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d11a      	bne.n	8007460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b20      	cmp	r3, #32
 8007436:	d013      	beq.n	8007460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f043 0220 	orr.w	r2, r3, #32
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e007      	b.n	8007470 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b20      	cmp	r3, #32
 800746c:	d1c8      	bne.n	8007400 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d068      	beq.n	8007576 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2210      	movs	r2, #16
 80074aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074ac:	e049      	b.n	8007542 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d045      	beq.n	8007542 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fb fbf1 	bl	8002c9c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <I2C_IsErrorOccurred+0x54>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d13a      	bne.n	8007542 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d121      	bne.n	8007534 <I2C_IsErrorOccurred+0xbc>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f6:	d01d      	beq.n	8007534 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80074f8:	7cfb      	ldrb	r3, [r7, #19]
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d01a      	beq.n	8007534 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800750c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800750e:	f7fb fbc5 	bl	8002c9c <HAL_GetTick>
 8007512:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007514:	e00e      	b.n	8007534 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007516:	f7fb fbc1 	bl	8002c9c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b19      	cmp	r3, #25
 8007522:	d907      	bls.n	8007534 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	f043 0320 	orr.w	r3, r3, #32
 800752a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007532:	e006      	b.n	8007542 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b20      	cmp	r3, #32
 8007540:	d1e9      	bne.n	8007516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b20      	cmp	r3, #32
 800754e:	d003      	beq.n	8007558 <I2C_IsErrorOccurred+0xe0>
 8007550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0aa      	beq.n	80074ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2220      	movs	r2, #32
 8007566:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	f043 0304 	orr.w	r3, r3, #4
 800756e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00b      	beq.n	80075c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f043 0308 	orr.w	r3, r3, #8
 80075b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	f043 0302 	orr.w	r3, r3, #2
 80075d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01c      	beq.n	8007626 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fe28 	bl	8007242 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6859      	ldr	r1, [r3, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <I2C_IsErrorOccurred+0x1bc>)
 80075fe:	400b      	ands	r3, r1
 8007600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800762a:	4618      	mov	r0, r3
 800762c:	3728      	adds	r7, #40	; 0x28
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	fe00e800 	.word	0xfe00e800

08007638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	817b      	strh	r3, [r7, #10]
 8007646:	4613      	mov	r3, r2
 8007648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800764a:	897b      	ldrh	r3, [r7, #10]
 800764c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007650:	7a7b      	ldrb	r3, [r7, #9]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	4313      	orrs	r3, r2
 8007662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	0d5b      	lsrs	r3, r3, #21
 8007672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007676:	4b08      	ldr	r3, [pc, #32]	; (8007698 <I2C_TransferConfig+0x60>)
 8007678:	430b      	orrs	r3, r1
 800767a:	43db      	mvns	r3, r3
 800767c:	ea02 0103 	and.w	r1, r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	03ff63ff 	.word	0x03ff63ff

0800769c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b0:	4a3b      	ldr	r2, [pc, #236]	; (80077a0 <I2C_Enable_IRQ+0x104>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d032      	beq.n	800771c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <I2C_Enable_IRQ+0x108>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d02d      	beq.n	800771c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80076c4:	4a38      	ldr	r2, [pc, #224]	; (80077a8 <I2C_Enable_IRQ+0x10c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d028      	beq.n	800771c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da03      	bge.n	80076da <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80076d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80076ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076ec:	887b      	ldrh	r3, [r7, #2]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80076fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	2b10      	cmp	r3, #16
 8007702:	d103      	bne.n	800770c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800770a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	2b20      	cmp	r3, #32
 8007710:	d138      	bne.n	8007784 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f043 0320 	orr.w	r3, r3, #32
 8007718:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800771a:	e033      	b.n	8007784 <I2C_Enable_IRQ+0xe8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800771c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da03      	bge.n	800772c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800772a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800773c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800774e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	2b10      	cmp	r3, #16
 8007754:	d103      	bne.n	800775e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800775c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800775e:	887b      	ldrh	r3, [r7, #2]
 8007760:	2b20      	cmp	r3, #32
 8007762:	d103      	bne.n	800776c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800776a:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <I2C_Enable_IRQ+0x10c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d006      	beq.n	8007784 <I2C_Enable_IRQ+0xe8>
 8007776:	887b      	ldrh	r3, [r7, #2]
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d103      	bne.n	8007784 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007782:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	430a      	orrs	r2, r1
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	08006391 	.word	0x08006391
 80077a4:	080067c1 	.word	0x080067c1
 80077a8:	08006579 	.word	0x08006579

080077ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00f      	beq.n	80077e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80077cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077da:	2b28      	cmp	r3, #40	; 0x28
 80077dc:	d003      	beq.n	80077e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80077e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00f      	beq.n	8007810 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80077f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007804:	2b28      	cmp	r3, #40	; 0x28
 8007806:	d003      	beq.n	8007810 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800780e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da03      	bge.n	8007820 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800781e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	2b10      	cmp	r3, #16
 8007824:	d103      	bne.n	800782e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800782c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	2b20      	cmp	r3, #32
 8007832:	d103      	bne.n	800783c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f043 0320 	orr.w	r3, r3, #32
 800783a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d103      	bne.n	800784a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007848:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	43da      	mvns	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	400a      	ands	r2, r1
 800785a:	601a      	str	r2, [r3, #0]
}
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b20      	cmp	r3, #32
 800787c:	d138      	bne.n	80078f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007888:	2302      	movs	r3, #2
 800788a:	e032      	b.n	80078f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2224      	movs	r2, #36	; 0x24
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0201 	bic.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b20      	cmp	r3, #32
 8007912:	d139      	bne.n	8007988 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800791e:	2302      	movs	r3, #2
 8007920:	e033      	b.n	800798a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2224      	movs	r2, #36	; 0x24
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007950:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800799e:	af00      	add	r7, sp, #0
 80079a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f001 b823 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 817d 	beq.w	8007cce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80079d4:	4bbc      	ldr	r3, [pc, #752]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f003 030c 	and.w	r3, r3, #12
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d00c      	beq.n	80079fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80079e0:	4bb9      	ldr	r3, [pc, #740]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d15c      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x10e>
 80079ec:	4bb6      	ldr	r3, [pc, #728]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f8:	d155      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x10e>
 80079fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007a06:	fa93 f3a3 	rbit	r3, r3
 8007a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8007a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a12:	fab3 f383 	clz	r3, r3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d102      	bne.n	8007a2c <HAL_RCC_OscConfig+0x94>
 8007a26:	4ba8      	ldr	r3, [pc, #672]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	e015      	b.n	8007a58 <HAL_RCC_OscConfig+0xc0>
 8007a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007a38:	fa93 f3a3 	rbit	r3, r3
 8007a3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007a48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007a4c:	fa93 f3a3 	rbit	r3, r3
 8007a50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007a54:	4b9c      	ldr	r3, [pc, #624]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007a60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007a64:	fa92 f2a2 	rbit	r2, r2
 8007a68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007a6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007a70:	fab2 f282 	clz	r2, r2
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	f042 0220 	orr.w	r2, r2, #32
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	f002 021f 	and.w	r2, r2, #31
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f202 	lsl.w	r2, r1, r2
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 811f 	beq.w	8007ccc <HAL_RCC_OscConfig+0x334>
 8007a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 8116 	bne.w	8007ccc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f000 bfaf 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab6:	d106      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x12e>
 8007ab8:	4b83      	ldr	r3, [pc, #524]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a82      	ldr	r2, [pc, #520]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e036      	b.n	8007b34 <HAL_RCC_OscConfig+0x19c>
 8007ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCC_OscConfig+0x158>
 8007ad6:	4b7c      	ldr	r3, [pc, #496]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a7b      	ldr	r2, [pc, #492]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b79      	ldr	r3, [pc, #484]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a78      	ldr	r2, [pc, #480]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e021      	b.n	8007b34 <HAL_RCC_OscConfig+0x19c>
 8007af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b00:	d10c      	bne.n	8007b1c <HAL_RCC_OscConfig+0x184>
 8007b02:	4b71      	ldr	r3, [pc, #452]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a70      	ldr	r2, [pc, #448]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4b6e      	ldr	r3, [pc, #440]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a6d      	ldr	r2, [pc, #436]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e00b      	b.n	8007b34 <HAL_RCC_OscConfig+0x19c>
 8007b1c:	4b6a      	ldr	r3, [pc, #424]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a69      	ldr	r2, [pc, #420]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	4b67      	ldr	r3, [pc, #412]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a66      	ldr	r2, [pc, #408]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b34:	4b64      	ldr	r3, [pc, #400]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	f023 020f 	bic.w	r2, r3, #15
 8007b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	495f      	ldr	r1, [pc, #380]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d059      	beq.n	8007c12 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5e:	f7fb f89d 	bl	8002c9c <HAL_GetTick>
 8007b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b66:	e00a      	b.n	8007b7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b68:	f7fb f898 	bl	8002c9c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b64      	cmp	r3, #100	; 0x64
 8007b76:	d902      	bls.n	8007b7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	f000 bf43 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 8007b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007b8a:	fa93 f3a3 	rbit	r3, r3
 8007b8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007b92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b96:	fab3 f383 	clz	r3, r3
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x218>
 8007baa:	4b47      	ldr	r3, [pc, #284]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	e015      	b.n	8007bdc <HAL_RCC_OscConfig+0x244>
 8007bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bb4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007bbc:	fa93 f3a3 	rbit	r3, r3
 8007bc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bc8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007bcc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007bd0:	fa93 f3a3 	rbit	r3, r3
 8007bd4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007be0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007be4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007be8:	fa92 f2a2 	rbit	r2, r2
 8007bec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007bf0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007bf4:	fab2 f282 	clz	r2, r2
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	f042 0220 	orr.w	r2, r2, #32
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	f002 021f 	and.w	r2, r2, #31
 8007c04:	2101      	movs	r1, #1
 8007c06:	fa01 f202 	lsl.w	r2, r1, r2
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0ab      	beq.n	8007b68 <HAL_RCC_OscConfig+0x1d0>
 8007c10:	e05d      	b.n	8007cce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c12:	f7fb f843 	bl	8002c9c <HAL_GetTick>
 8007c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c1a:	e00a      	b.n	8007c32 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c1c:	f7fb f83e 	bl	8002c9c <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b64      	cmp	r3, #100	; 0x64
 8007c2a:	d902      	bls.n	8007c32 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	f000 bee9 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 8007c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007c3e:	fa93 f3a3 	rbit	r3, r3
 8007c42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007c46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c4a:	fab3 f383 	clz	r3, r3
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f043 0301 	orr.w	r3, r3, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d102      	bne.n	8007c64 <HAL_RCC_OscConfig+0x2cc>
 8007c5e:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	e015      	b.n	8007c90 <HAL_RCC_OscConfig+0x2f8>
 8007c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c68:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007c70:	fa93 f3a3 	rbit	r3, r3
 8007c74:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007c80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007c84:	fa93 f3a3 	rbit	r3, r3
 8007c88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <HAL_RCC_OscConfig+0x330>)
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c94:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007c98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007c9c:	fa92 f2a2 	rbit	r2, r2
 8007ca0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007ca4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007ca8:	fab2 f282 	clz	r2, r2
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	f042 0220 	orr.w	r2, r2, #32
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	f002 021f 	and.w	r2, r2, #31
 8007cb8:	2101      	movs	r1, #1
 8007cba:	fa01 f202 	lsl.w	r2, r1, r2
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ab      	bne.n	8007c1c <HAL_RCC_OscConfig+0x284>
 8007cc4:	e003      	b.n	8007cce <HAL_RCC_OscConfig+0x336>
 8007cc6:	bf00      	nop
 8007cc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 817d 	beq.w	8007fde <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007ce4:	4ba6      	ldr	r3, [pc, #664]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007cf0:	4ba3      	ldr	r3, [pc, #652]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f003 030c 	and.w	r3, r3, #12
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d172      	bne.n	8007de2 <HAL_RCC_OscConfig+0x44a>
 8007cfc:	4ba0      	ldr	r3, [pc, #640]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d16c      	bne.n	8007de2 <HAL_RCC_OscConfig+0x44a>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007d12:	fa93 f3a3 	rbit	r3, r3
 8007d16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007d1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d1e:	fab3 f383 	clz	r3, r3
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d102      	bne.n	8007d38 <HAL_RCC_OscConfig+0x3a0>
 8007d32:	4b93      	ldr	r3, [pc, #588]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	e013      	b.n	8007d60 <HAL_RCC_OscConfig+0x3c8>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007d42:	fa93 f3a3 	rbit	r3, r3
 8007d46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007d54:	fa93 f3a3 	rbit	r3, r3
 8007d58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007d5c:	4b88      	ldr	r3, [pc, #544]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2202      	movs	r2, #2
 8007d62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007d66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007d6a:	fa92 f2a2 	rbit	r2, r2
 8007d6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007d72:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007d76:	fab2 f282 	clz	r2, r2
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	f042 0220 	orr.w	r2, r2, #32
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	f002 021f 	and.w	r2, r2, #31
 8007d86:	2101      	movs	r1, #1
 8007d88:	fa01 f202 	lsl.w	r2, r1, r2
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCC_OscConfig+0x410>
 8007d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d002      	beq.n	8007da8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f000 be2e 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da8:	4b75      	ldr	r3, [pc, #468]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	21f8      	movs	r1, #248	; 0xf8
 8007dbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007dc6:	fa91 f1a1 	rbit	r1, r1
 8007dca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007dce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007dd2:	fab1 f181 	clz	r1, r1
 8007dd6:	b2c9      	uxtb	r1, r1
 8007dd8:	408b      	lsls	r3, r1
 8007dda:	4969      	ldr	r1, [pc, #420]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de0:	e0fd      	b.n	8007fde <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8088 	beq.w	8007f04 <HAL_RCC_OscConfig+0x56c>
 8007df4:	2301      	movs	r3, #1
 8007df6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dfa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007dfe:	fa93 f3a3 	rbit	r3, r3
 8007e02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007e06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e0a:	fab3 f383 	clz	r3, r3
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e20:	f7fa ff3c 	bl	8002c9c <HAL_GetTick>
 8007e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e2a:	f7fa ff37 	bl	8002c9c <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d902      	bls.n	8007e40 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	f000 bde2 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 8007e40:	2302      	movs	r3, #2
 8007e42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007e4a:	fa93 f3a3 	rbit	r3, r3
 8007e4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007e52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e56:	fab3 f383 	clz	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d102      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4d8>
 8007e6a:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	e013      	b.n	8007e98 <HAL_RCC_OscConfig+0x500>
 8007e70:	2302      	movs	r3, #2
 8007e72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007e7a:	fa93 f3a3 	rbit	r3, r3
 8007e7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007e82:	2302      	movs	r3, #2
 8007e84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007e88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007e8c:	fa93 f3a3 	rbit	r3, r3
 8007e90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007e94:	4b3a      	ldr	r3, [pc, #232]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007e9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007ea2:	fa92 f2a2 	rbit	r2, r2
 8007ea6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007eaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007eae:	fab2 f282 	clz	r2, r2
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	f042 0220 	orr.w	r2, r2, #32
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	f002 021f 	and.w	r2, r2, #31
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0af      	beq.n	8007e2a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eca:	4b2d      	ldr	r3, [pc, #180]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	21f8      	movs	r1, #248	; 0xf8
 8007ee0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007ee8:	fa91 f1a1 	rbit	r1, r1
 8007eec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007ef0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007ef4:	fab1 f181 	clz	r1, r1
 8007ef8:	b2c9      	uxtb	r1, r1
 8007efa:	408b      	lsls	r3, r1
 8007efc:	4920      	ldr	r1, [pc, #128]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	600b      	str	r3, [r1, #0]
 8007f02:	e06c      	b.n	8007fde <HAL_RCC_OscConfig+0x646>
 8007f04:	2301      	movs	r3, #1
 8007f06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f0e:	fa93 f3a3 	rbit	r3, r3
 8007f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f1a:	fab3 f383 	clz	r3, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f30:	f7fa feb4 	bl	8002c9c <HAL_GetTick>
 8007f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f3a:	f7fa feaf 	bl	8002c9c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d902      	bls.n	8007f50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	f000 bd5a 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 8007f50:	2302      	movs	r3, #2
 8007f52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f5a:	fa93 f3a3 	rbit	r3, r3
 8007f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f66:	fab3 f383 	clz	r3, r3
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d104      	bne.n	8007f84 <HAL_RCC_OscConfig+0x5ec>
 8007f7a:	4b01      	ldr	r3, [pc, #4]	; (8007f80 <HAL_RCC_OscConfig+0x5e8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	e015      	b.n	8007fac <HAL_RCC_OscConfig+0x614>
 8007f80:	40021000 	.word	0x40021000
 8007f84:	2302      	movs	r3, #2
 8007f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f8e:	fa93 f3a3 	rbit	r3, r3
 8007f92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f96:	2302      	movs	r3, #2
 8007f98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007fa0:	fa93 f3a3 	rbit	r3, r3
 8007fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007fa8:	4bc8      	ldr	r3, [pc, #800]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2202      	movs	r2, #2
 8007fae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007fb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007fb6:	fa92 f2a2 	rbit	r2, r2
 8007fba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007fbe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007fc2:	fab2 f282 	clz	r2, r2
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	f042 0220 	orr.w	r2, r2, #32
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	f002 021f 	and.w	r2, r2, #31
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1ad      	bne.n	8007f3a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8110 	beq.w	8008214 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d079      	beq.n	80080f8 <HAL_RCC_OscConfig+0x760>
 8008004:	2301      	movs	r3, #1
 8008006:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800800a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800800e:	fa93 f3a3 	rbit	r3, r3
 8008012:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8008016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800801a:	fab3 f383 	clz	r3, r3
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	4bab      	ldr	r3, [pc, #684]	; (80082d0 <HAL_RCC_OscConfig+0x938>)
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	461a      	mov	r2, r3
 800802a:	2301      	movs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800802e:	f7fa fe35 	bl	8002c9c <HAL_GetTick>
 8008032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008036:	e00a      	b.n	800804e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008038:	f7fa fe30 	bl	8002c9c <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d902      	bls.n	800804e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	f000 bcdb 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 800804e:	2302      	movs	r3, #2
 8008050:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008058:	fa93 f3a3 	rbit	r3, r3
 800805c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008064:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008068:	2202      	movs	r2, #2
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008070:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	fa93 f2a3 	rbit	r2, r3
 800807a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808c:	2202      	movs	r2, #2
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	fa93 f2a3 	rbit	r2, r3
 800809e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80080a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080a8:	4b88      	ldr	r3, [pc, #544]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 80080aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080b4:	2102      	movs	r1, #2
 80080b6:	6019      	str	r1, [r3, #0]
 80080b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	fa93 f1a3 	rbit	r1, r3
 80080c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80080ce:	6019      	str	r1, [r3, #0]
  return result;
 80080d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	fab3 f383 	clz	r3, r3
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	2101      	movs	r1, #1
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	4013      	ands	r3, r2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0a0      	beq.n	8008038 <HAL_RCC_OscConfig+0x6a0>
 80080f6:	e08d      	b.n	8008214 <HAL_RCC_OscConfig+0x87c>
 80080f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	fa93 f2a3 	rbit	r2, r3
 8008112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008116:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800811a:	601a      	str	r2, [r3, #0]
  return result;
 800811c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008124:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008126:	fab3 f383 	clz	r3, r3
 800812a:	b2db      	uxtb	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	4b68      	ldr	r3, [pc, #416]	; (80082d0 <HAL_RCC_OscConfig+0x938>)
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800813a:	f7fa fdaf 	bl	8002c9c <HAL_GetTick>
 800813e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008142:	e00a      	b.n	800815a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008144:	f7fa fdaa 	bl	8002c9c <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d902      	bls.n	800815a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	f000 bc55 	b.w	8008a04 <HAL_RCC_OscConfig+0x106c>
 800815a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800815e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008162:	2202      	movs	r2, #2
 8008164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800816a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	fa93 f2a3 	rbit	r2, r3
 8008174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008178:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008182:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008186:	2202      	movs	r2, #2
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800818e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	fa93 f2a3 	rbit	r2, r3
 8008198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800819c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081aa:	2202      	movs	r2, #2
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	fa93 f2a3 	rbit	r2, r3
 80081bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80081c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081c6:	4b41      	ldr	r3, [pc, #260]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 80081c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80081d2:	2102      	movs	r1, #2
 80081d4:	6019      	str	r1, [r3, #0]
 80081d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	fa93 f1a3 	rbit	r1, r3
 80081e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80081ec:	6019      	str	r1, [r3, #0]
  return result;
 80081ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2101      	movs	r1, #1
 800820a:	fa01 f303 	lsl.w	r3, r1, r3
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d197      	bne.n	8008144 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 81a1 	beq.w	800856c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800822a:	2300      	movs	r3, #0
 800822c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008230:	4b26      	ldr	r3, [pc, #152]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d116      	bne.n	800826a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800823c:	4b23      	ldr	r3, [pc, #140]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 8008242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008246:	61d3      	str	r3, [r2, #28]
 8008248:	4b20      	ldr	r3, [pc, #128]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008254:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800825e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008262:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800826a:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <HAL_RCC_OscConfig+0x93c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d11a      	bne.n	80082ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008276:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <HAL_RCC_OscConfig+0x93c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a16      	ldr	r2, [pc, #88]	; (80082d4 <HAL_RCC_OscConfig+0x93c>)
 800827c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008282:	f7fa fd0b 	bl	8002c9c <HAL_GetTick>
 8008286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800828a:	e009      	b.n	80082a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828c:	f7fa fd06 	bl	8002c9c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b64      	cmp	r3, #100	; 0x64
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e3b1      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <HAL_RCC_OscConfig+0x93c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ef      	beq.n	800828c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d10d      	bne.n	80082d8 <HAL_RCC_OscConfig+0x940>
 80082bc:	4b03      	ldr	r3, [pc, #12]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	4a02      	ldr	r2, [pc, #8]	; (80082cc <HAL_RCC_OscConfig+0x934>)
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	6213      	str	r3, [r2, #32]
 80082c8:	e03c      	b.n	8008344 <HAL_RCC_OscConfig+0x9ac>
 80082ca:	bf00      	nop
 80082cc:	40021000 	.word	0x40021000
 80082d0:	10908120 	.word	0x10908120
 80082d4:	40007000 	.word	0x40007000
 80082d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10c      	bne.n	8008302 <HAL_RCC_OscConfig+0x96a>
 80082e8:	4bc1      	ldr	r3, [pc, #772]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	4ac0      	ldr	r2, [pc, #768]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80082ee:	f023 0301 	bic.w	r3, r3, #1
 80082f2:	6213      	str	r3, [r2, #32]
 80082f4:	4bbe      	ldr	r3, [pc, #760]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	4abd      	ldr	r2, [pc, #756]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80082fa:	f023 0304 	bic.w	r3, r3, #4
 80082fe:	6213      	str	r3, [r2, #32]
 8008300:	e020      	b.n	8008344 <HAL_RCC_OscConfig+0x9ac>
 8008302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b05      	cmp	r3, #5
 8008310:	d10c      	bne.n	800832c <HAL_RCC_OscConfig+0x994>
 8008312:	4bb7      	ldr	r3, [pc, #732]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	4ab6      	ldr	r2, [pc, #728]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008318:	f043 0304 	orr.w	r3, r3, #4
 800831c:	6213      	str	r3, [r2, #32]
 800831e:	4bb4      	ldr	r3, [pc, #720]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	4ab3      	ldr	r2, [pc, #716]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008324:	f043 0301 	orr.w	r3, r3, #1
 8008328:	6213      	str	r3, [r2, #32]
 800832a:	e00b      	b.n	8008344 <HAL_RCC_OscConfig+0x9ac>
 800832c:	4bb0      	ldr	r3, [pc, #704]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	4aaf      	ldr	r2, [pc, #700]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	6213      	str	r3, [r2, #32]
 8008338:	4bad      	ldr	r3, [pc, #692]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	4aac      	ldr	r2, [pc, #688]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 800833e:	f023 0304 	bic.w	r3, r3, #4
 8008342:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8081 	beq.w	8008458 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008356:	f7fa fca1 	bl	8002c9c <HAL_GetTick>
 800835a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800835e:	e00b      	b.n	8008378 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008360:	f7fa fc9c 	bl	8002c9c <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008370:	4293      	cmp	r3, r2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e345      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
 8008378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800837c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008380:	2202      	movs	r2, #2
 8008382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008388:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	fa93 f2a3 	rbit	r2, r3
 8008392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008396:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80083a4:	2202      	movs	r2, #2
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	fa93 f2a3 	rbit	r2, r3
 80083b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80083be:	601a      	str	r2, [r3, #0]
  return result;
 80083c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80083c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ca:	fab3 f383 	clz	r3, r3
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	095b      	lsrs	r3, r3, #5
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f043 0302 	orr.w	r3, r3, #2
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d102      	bne.n	80083e4 <HAL_RCC_OscConfig+0xa4c>
 80083de:	4b84      	ldr	r3, [pc, #528]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	e013      	b.n	800840c <HAL_RCC_OscConfig+0xa74>
 80083e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80083ec:	2202      	movs	r2, #2
 80083ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	fa93 f2a3 	rbit	r2, r3
 80083fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008402:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	4b79      	ldr	r3, [pc, #484]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008410:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008414:	2102      	movs	r1, #2
 8008416:	6011      	str	r1, [r2, #0]
 8008418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800841c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	fa92 f1a2 	rbit	r1, r2
 8008426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800842a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800842e:	6011      	str	r1, [r2, #0]
  return result;
 8008430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008434:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	fab2 f282 	clz	r2, r2
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	f002 021f 	and.w	r2, r2, #31
 800844a:	2101      	movs	r1, #1
 800844c:	fa01 f202 	lsl.w	r2, r1, r2
 8008450:	4013      	ands	r3, r2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d084      	beq.n	8008360 <HAL_RCC_OscConfig+0x9c8>
 8008456:	e07f      	b.n	8008558 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008458:	f7fa fc20 	bl	8002c9c <HAL_GetTick>
 800845c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008460:	e00b      	b.n	800847a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008462:	f7fa fc1b 	bl	8002c9c <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e2c4      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
 800847a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800847e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008482:	2202      	movs	r2, #2
 8008484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800848a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	fa93 f2a3 	rbit	r2, r3
 8008494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008498:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80084a6:	2202      	movs	r2, #2
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	fa93 f2a3 	rbit	r2, r3
 80084b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80084c0:	601a      	str	r2, [r3, #0]
  return result;
 80084c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80084ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084cc:	fab3 f383 	clz	r3, r3
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f043 0302 	orr.w	r3, r3, #2
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d102      	bne.n	80084e6 <HAL_RCC_OscConfig+0xb4e>
 80084e0:	4b43      	ldr	r3, [pc, #268]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	e013      	b.n	800850e <HAL_RCC_OscConfig+0xb76>
 80084e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80084ee:	2202      	movs	r2, #2
 80084f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	fa93 f2a3 	rbit	r2, r3
 8008500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008504:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	4b39      	ldr	r3, [pc, #228]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008512:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008516:	2102      	movs	r1, #2
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800851e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	fa92 f1a2 	rbit	r1, r2
 8008528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800852c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008530:	6011      	str	r1, [r2, #0]
  return result;
 8008532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008536:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	fab2 f282 	clz	r2, r2
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	f002 021f 	and.w	r2, r2, #31
 800854c:	2101      	movs	r1, #1
 800854e:	fa01 f202 	lsl.w	r2, r1, r2
 8008552:	4013      	ands	r3, r2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d184      	bne.n	8008462 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008558:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800855c:	2b01      	cmp	r3, #1
 800855e:	d105      	bne.n	800856c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008560:	4b23      	ldr	r3, [pc, #140]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800856a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800856c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8242 	beq.w	8008a02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800857e:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <HAL_RCC_OscConfig+0xc58>)
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f003 030c 	and.w	r3, r3, #12
 8008586:	2b08      	cmp	r3, #8
 8008588:	f000 8213 	beq.w	80089b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800858c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	2b02      	cmp	r3, #2
 800859a:	f040 8162 	bne.w	8008862 <HAL_RCC_OscConfig+0xeca>
 800859e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80085a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	fa93 f2a3 	rbit	r2, r3
 80085ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80085c2:	601a      	str	r2, [r3, #0]
  return result;
 80085c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80085cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ce:	fab3 f383 	clz	r3, r3
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	461a      	mov	r2, r3
 80085e0:	2300      	movs	r3, #0
 80085e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e4:	f7fa fb5a 	bl	8002c9c <HAL_GetTick>
 80085e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085ec:	e00c      	b.n	8008608 <HAL_RCC_OscConfig+0xc70>
 80085ee:	bf00      	nop
 80085f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f4:	f7fa fb52 	bl	8002c9c <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e1fd      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
 8008608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800860c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800861a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	fa93 f2a3 	rbit	r2, r3
 8008624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008628:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800862c:	601a      	str	r2, [r3, #0]
  return result;
 800862e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008632:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008638:	fab3 f383 	clz	r3, r3
 800863c:	b2db      	uxtb	r3, r3
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d102      	bne.n	8008652 <HAL_RCC_OscConfig+0xcba>
 800864c:	4bb0      	ldr	r3, [pc, #704]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	e027      	b.n	80086a2 <HAL_RCC_OscConfig+0xd0a>
 8008652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008656:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800865a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800865e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008664:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	fa93 f2a3 	rbit	r2, r3
 800866e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008672:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800867c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800868a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	fa93 f2a3 	rbit	r2, r3
 8008694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008698:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	4b9c      	ldr	r3, [pc, #624]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80086aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80086ae:	6011      	str	r1, [r2, #0]
 80086b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	fa92 f1a2 	rbit	r1, r2
 80086be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80086c6:	6011      	str	r1, [r2, #0]
  return result;
 80086c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	fab2 f282 	clz	r2, r2
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	f042 0220 	orr.w	r2, r2, #32
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	f002 021f 	and.w	r2, r2, #31
 80086e2:	2101      	movs	r1, #1
 80086e4:	fa01 f202 	lsl.w	r2, r1, r2
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d182      	bne.n	80085f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ee:	4b88      	ldr	r3, [pc, #544]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80086f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	430b      	orrs	r3, r1
 8008710:	497f      	ldr	r1, [pc, #508]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 8008712:	4313      	orrs	r3, r2
 8008714:	604b      	str	r3, [r1, #4]
 8008716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800871a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800871e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008728:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	fa93 f2a3 	rbit	r2, r3
 8008732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008736:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800873a:	601a      	str	r2, [r3, #0]
  return result;
 800873c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008740:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008744:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008746:	fab3 f383 	clz	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	461a      	mov	r2, r3
 8008758:	2301      	movs	r3, #1
 800875a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875c:	f7fa fa9e 	bl	8002c9c <HAL_GetTick>
 8008760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008764:	e009      	b.n	800877a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008766:	f7fa fa99 	bl	8002c9c <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e144      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
 800877a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800877e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800878c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	fa93 f2a3 	rbit	r2, r3
 8008796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800879a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800879e:	601a      	str	r2, [r3, #0]
  return result;
 80087a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80087a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087aa:	fab3 f383 	clz	r3, r3
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d102      	bne.n	80087c4 <HAL_RCC_OscConfig+0xe2c>
 80087be:	4b54      	ldr	r3, [pc, #336]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	e027      	b.n	8008814 <HAL_RCC_OscConfig+0xe7c>
 80087c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80087cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	fa93 f2a3 	rbit	r2, r3
 80087e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80087f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	fa93 f2a3 	rbit	r2, r3
 8008806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800880a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	4b3f      	ldr	r3, [pc, #252]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008818:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800881c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008826:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	fa92 f1a2 	rbit	r1, r2
 8008830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008834:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008838:	6011      	str	r1, [r2, #0]
  return result;
 800883a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800883e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	fab2 f282 	clz	r2, r2
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	f042 0220 	orr.w	r2, r2, #32
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	f002 021f 	and.w	r2, r2, #31
 8008854:	2101      	movs	r1, #1
 8008856:	fa01 f202 	lsl.w	r2, r1, r2
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d082      	beq.n	8008766 <HAL_RCC_OscConfig+0xdce>
 8008860:	e0cf      	b.n	8008a02 <HAL_RCC_OscConfig+0x106a>
 8008862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008866:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800886a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800886e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008874:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	fa93 f2a3 	rbit	r2, r3
 800887e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008882:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008886:	601a      	str	r2, [r3, #0]
  return result;
 8008888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800888c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008890:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008892:	fab3 f383 	clz	r3, r3
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800889c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	461a      	mov	r2, r3
 80088a4:	2300      	movs	r3, #0
 80088a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a8:	f7fa f9f8 	bl	8002c9c <HAL_GetTick>
 80088ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088b0:	e009      	b.n	80088c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088b2:	f7fa f9f3 	bl	8002c9c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e09e      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
 80088c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80088ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	fa93 f2a3 	rbit	r2, r3
 80088e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80088ea:	601a      	str	r2, [r3, #0]
  return result;
 80088ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80088f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088f6:	fab3 f383 	clz	r3, r3
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d104      	bne.n	8008914 <HAL_RCC_OscConfig+0xf7c>
 800890a:	4b01      	ldr	r3, [pc, #4]	; (8008910 <HAL_RCC_OscConfig+0xf78>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	e029      	b.n	8008964 <HAL_RCC_OscConfig+0xfcc>
 8008910:	40021000 	.word	0x40021000
 8008914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008918:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800891c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008926:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	fa93 f2a3 	rbit	r2, r3
 8008930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008934:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800893e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800894c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	fa93 f2a3 	rbit	r2, r3
 8008956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800895a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <HAL_RCC_OscConfig+0x1078>)
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008968:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800896c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008970:	6011      	str	r1, [r2, #0]
 8008972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008976:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	fa92 f1a2 	rbit	r1, r2
 8008980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008984:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008988:	6011      	str	r1, [r2, #0]
  return result;
 800898a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800898e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	fab2 f282 	clz	r2, r2
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	f042 0220 	orr.w	r2, r2, #32
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	f002 021f 	and.w	r2, r2, #31
 80089a4:	2101      	movs	r1, #1
 80089a6:	fa01 f202 	lsl.w	r2, r1, r2
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d180      	bne.n	80088b2 <HAL_RCC_OscConfig+0xf1a>
 80089b0:	e027      	b.n	8008a02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e01e      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <HAL_RCC_OscConfig+0x1078>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80089ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80089d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d10b      	bne.n	80089fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80089e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80089ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80089ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d001      	beq.n	8008a02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40021000 	.word	0x40021000

08008a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b09e      	sub	sp, #120	; 0x78
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e162      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a2c:	4b90      	ldr	r3, [pc, #576]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d910      	bls.n	8008a5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a3a:	4b8d      	ldr	r3, [pc, #564]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 0207 	bic.w	r2, r3, #7
 8008a42:	498b      	ldr	r1, [pc, #556]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4a:	4b89      	ldr	r3, [pc, #548]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d001      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e14a      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a68:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	497f      	ldr	r1, [pc, #508]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80dc 	beq.w	8008c40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d13c      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xf6>
 8008a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a98:	fa93 f3a3 	rbit	r3, r3
 8008a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa0:	fab3 f383 	clz	r3, r3
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d102      	bne.n	8008aba <HAL_RCC_ClockConfig+0xa6>
 8008ab4:	4b6f      	ldr	r3, [pc, #444]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	e00f      	b.n	8008ada <HAL_RCC_ClockConfig+0xc6>
 8008aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ac2:	fa93 f3a3 	rbit	r3, r3
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008acc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad0:	fa93 f3a3 	rbit	r3, r3
 8008ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ad6:	4b67      	ldr	r3, [pc, #412]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae2:	fa92 f2a2 	rbit	r2, r2
 8008ae6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aea:	fab2 f282 	clz	r2, r2
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	f042 0220 	orr.w	r2, r2, #32
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	f002 021f 	and.w	r2, r2, #31
 8008afa:	2101      	movs	r1, #1
 8008afc:	fa01 f202 	lsl.w	r2, r1, r2
 8008b00:	4013      	ands	r3, r2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d17b      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e0f3      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d13c      	bne.n	8008b8c <HAL_RCC_ClockConfig+0x178>
 8008b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b22:	fab3 f383 	clz	r3, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d102      	bne.n	8008b3c <HAL_RCC_ClockConfig+0x128>
 8008b36:	4b4f      	ldr	r3, [pc, #316]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	e00f      	b.n	8008b5c <HAL_RCC_ClockConfig+0x148>
 8008b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	fa93 f3a3 	rbit	r3, r3
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b52:	fa93 f3a3 	rbit	r3, r3
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b58:	4b46      	ldr	r3, [pc, #280]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b60:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b64:	fa92 f2a2 	rbit	r2, r2
 8008b68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b6c:	fab2 f282 	clz	r2, r2
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	f042 0220 	orr.w	r2, r2, #32
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	f002 021f 	and.w	r2, r2, #31
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13a      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0b2      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	fa93 f3a3 	rbit	r3, r3
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b9a:	fab3 f383 	clz	r3, r3
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d102      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
 8008bae:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	e00d      	b.n	8008bd0 <HAL_RCC_ClockConfig+0x1bc>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	fa93 f3a3 	rbit	r3, r3
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	fa93 f3a3 	rbit	r3, r3
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	61ba      	str	r2, [r7, #24]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	fa92 f2a2 	rbit	r2, r2
 8008bda:	617a      	str	r2, [r7, #20]
  return result;
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	fab2 f282 	clz	r2, r2
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	f042 0220 	orr.w	r2, r2, #32
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	f002 021f 	and.w	r2, r2, #31
 8008bee:	2101      	movs	r1, #1
 8008bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e079      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f023 0203 	bic.w	r2, r3, #3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	491a      	ldr	r1, [pc, #104]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c10:	f7fa f844 	bl	8002c9c <HAL_GetTick>
 8008c14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c16:	e00a      	b.n	8008c2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c18:	f7fa f840 	bl	8002c9c <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e061      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c2e:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f003 020c 	and.w	r2, r3, #12
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d1eb      	bne.n	8008c18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d214      	bcs.n	8008c78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f023 0207 	bic.w	r2, r3, #7
 8008c56:	4906      	ldr	r1, [pc, #24]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d005      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e040      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
 8008c70:	40022000 	.word	0x40022000
 8008c74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d008      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c84:	4b1d      	ldr	r3, [pc, #116]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	491a      	ldr	r1, [pc, #104]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ca2:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4912      	ldr	r1, [pc, #72]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008cb6:	f000 f829 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cc4:	22f0      	movs	r2, #240	; 0xf0
 8008cc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	fa92 f2a2 	rbit	r2, r2
 8008cce:	60fa      	str	r2, [r7, #12]
  return result;
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	fab2 f282 	clz	r2, r2
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	40d3      	lsrs	r3, r2
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <HAL_RCC_ClockConfig+0x2ec>)
 8008cdc:	5cd3      	ldrb	r3, [r2, r3]
 8008cde:	fa21 f303 	lsr.w	r3, r1, r3
 8008ce2:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <HAL_RCC_ClockConfig+0x2f0>)
 8008ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008ce6:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <HAL_RCC_ClockConfig+0x2f4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f9 ff92 	bl	8002c14 <HAL_InitTick>
  
  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3778      	adds	r7, #120	; 0x78
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	0800d008 	.word	0x0800d008
 8008d04:	2000000c 	.word	0x2000000c
 8008d08:	20000010 	.word	0x20000010

08008d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b08b      	sub	sp, #44	; 0x2c
 8008d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008d26:	4b29      	ldr	r3, [pc, #164]	; (8008dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d002      	beq.n	8008d3c <HAL_RCC_GetSysClockFreq+0x30>
 8008d36:	2b08      	cmp	r3, #8
 8008d38:	d003      	beq.n	8008d42 <HAL_RCC_GetSysClockFreq+0x36>
 8008d3a:	e03c      	b.n	8008db6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008d3c:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008d3e:	623b      	str	r3, [r7, #32]
      break;
 8008d40:	e03c      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008d48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008d4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	fa92 f2a2 	rbit	r2, r2
 8008d54:	607a      	str	r2, [r7, #4]
  return result;
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	fab2 f282 	clz	r2, r2
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	40d3      	lsrs	r3, r2
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d62:	5cd3      	ldrb	r3, [r2, r3]
 8008d64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008d66:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	220f      	movs	r2, #15
 8008d70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	fa92 f2a2 	rbit	r2, r2
 8008d78:	60fa      	str	r2, [r7, #12]
  return result;
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	fab2 f282 	clz	r2, r2
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	40d3      	lsrs	r3, r2
 8008d84:	4a14      	ldr	r2, [pc, #80]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d94:	4a0e      	ldr	r2, [pc, #56]	; (8008dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	e004      	b.n	8008db0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008daa:	fb02 f303 	mul.w	r3, r2, r3
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	623b      	str	r3, [r7, #32]
      break;
 8008db4:	e002      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008db8:	623b      	str	r3, [r7, #32]
      break;
 8008dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	372c      	adds	r7, #44	; 0x2c
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	007a1200 	.word	0x007a1200
 8008dd4:	0800d020 	.word	0x0800d020
 8008dd8:	0800d030 	.word	0x0800d030
 8008ddc:	003d0900 	.word	0x003d0900

08008de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008de4:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008de6:	681b      	ldr	r3, [r3, #0]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	2000000c 	.word	0x2000000c

08008df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008dfe:	f7ff ffef 	bl	8008de0 <HAL_RCC_GetHCLKFreq>
 8008e02:	4601      	mov	r1, r0
 8008e04:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008e10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	fa92 f2a2 	rbit	r2, r2
 8008e18:	603a      	str	r2, [r7, #0]
  return result;
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	fab2 f282 	clz	r2, r2
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	40d3      	lsrs	r3, r2
 8008e24:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008e26:	5cd3      	ldrb	r3, [r2, r3]
 8008e28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40021000 	.word	0x40021000
 8008e38:	0800d018 	.word	0x0800d018

08008e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008e42:	f7ff ffcd 	bl	8008de0 <HAL_RCC_GetHCLKFreq>
 8008e46:	4601      	mov	r1, r0
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008e50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	fa92 f2a2 	rbit	r2, r2
 8008e5c:	603a      	str	r2, [r7, #0]
  return result;
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	fab2 f282 	clz	r2, r2
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	40d3      	lsrs	r3, r2
 8008e68:	4a04      	ldr	r2, [pc, #16]	; (8008e7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8008e6a:	5cd3      	ldrb	r3, [r2, r3]
 8008e6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	0800d018 	.word	0x0800d018

08008e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b092      	sub	sp, #72	; 0x48
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80d4 	beq.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ea4:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10e      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eb0:	4b4b      	ldr	r3, [pc, #300]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	4a4a      	ldr	r2, [pc, #296]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eba:	61d3      	str	r3, [r2, #28]
 8008ebc:	4b48      	ldr	r3, [pc, #288]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ece:	4b45      	ldr	r3, [pc, #276]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d118      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eda:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a41      	ldr	r2, [pc, #260]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ee6:	f7f9 fed9 	bl	8002c9c <HAL_GetTick>
 8008eea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eec:	e008      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eee:	f7f9 fed5 	bl	8002c9c <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b64      	cmp	r3, #100	; 0x64
 8008efa:	d901      	bls.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e169      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f00:	4b38      	ldr	r3, [pc, #224]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0f0      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f0c:	4b34      	ldr	r3, [pc, #208]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8084 	beq.w	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d07c      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f2c:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	fa93 f3a3 	rbit	r3, r3
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f46:	fab3 f383 	clz	r3, r3
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	461a      	mov	r2, r3
 8008f56:	2301      	movs	r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	fa93 f3a3 	rbit	r3, r3
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f6a:	fab3 f383 	clz	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008f7e:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d04b      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f8e:	f7f9 fe85 	bl	8002c9c <HAL_GetTick>
 8008f92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f94:	e00a      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f96:	f7f9 fe81 	bl	8002c9c <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e113      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008fac:	2302      	movs	r3, #2
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	fa93 f3a3 	rbit	r3, r3
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb8:	2302      	movs	r3, #2
 8008fba:	623b      	str	r3, [r7, #32]
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	fa93 f3a3 	rbit	r3, r3
 8008fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc6:	fab3 f383 	clz	r3, r3
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f043 0302 	orr.w	r3, r3, #2
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d108      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008fda:	4b01      	ldr	r3, [pc, #4]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	e00d      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	40007000 	.word	0x40007000
 8008fe8:	10908100 	.word	0x10908100
 8008fec:	2302      	movs	r3, #2
 8008fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	fa93 f3a3 	rbit	r3, r3
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	4b78      	ldr	r3, [pc, #480]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	613a      	str	r2, [r7, #16]
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	fa92 f2a2 	rbit	r2, r2
 8009006:	60fa      	str	r2, [r7, #12]
  return result;
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	fab2 f282 	clz	r2, r2
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	f002 021f 	and.w	r2, r2, #31
 800901a:	2101      	movs	r1, #1
 800901c:	fa01 f202 	lsl.w	r2, r1, r2
 8009020:	4013      	ands	r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0b7      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009026:	4b6d      	ldr	r3, [pc, #436]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	496a      	ldr	r1, [pc, #424]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009034:	4313      	orrs	r3, r2
 8009036:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800903c:	2b01      	cmp	r3, #1
 800903e:	d105      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009040:	4b66      	ldr	r3, [pc, #408]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	4a65      	ldr	r2, [pc, #404]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800904a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009058:	4b60      	ldr	r3, [pc, #384]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	f023 0203 	bic.w	r2, r3, #3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	495d      	ldr	r1, [pc, #372]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009066:	4313      	orrs	r3, r2
 8009068:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009076:	4b59      	ldr	r3, [pc, #356]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4956      	ldr	r1, [pc, #344]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009094:	4b51      	ldr	r3, [pc, #324]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	494e      	ldr	r1, [pc, #312]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090b2:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f023 0210 	bic.w	r2, r3, #16
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4947      	ldr	r1, [pc, #284]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d008      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80090d0:	4b42      	ldr	r3, [pc, #264]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	493f      	ldr	r1, [pc, #252]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80090ee:	4b3b      	ldr	r3, [pc, #236]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f023 0220 	bic.w	r2, r3, #32
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	4938      	ldr	r1, [pc, #224]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800910c:	4b33      	ldr	r3, [pc, #204]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	4930      	ldr	r1, [pc, #192]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800912a:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	4929      	ldr	r1, [pc, #164]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009138:	4313      	orrs	r3, r2
 800913a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009148:	4b24      	ldr	r3, [pc, #144]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	4921      	ldr	r1, [pc, #132]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009156:	4313      	orrs	r3, r2
 8009158:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009166:	4b1d      	ldr	r3, [pc, #116]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	491a      	ldr	r1, [pc, #104]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009174:	4313      	orrs	r3, r2
 8009176:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009184:	4b15      	ldr	r3, [pc, #84]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	4912      	ldr	r1, [pc, #72]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009192:	4313      	orrs	r3, r2
 8009194:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	490b      	ldr	r1, [pc, #44]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	4903      	ldr	r1, [pc, #12]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3748      	adds	r7, #72	; 0x48
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40021000 	.word	0x40021000

080091e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e073      	b.n	80092de <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7f5b      	ldrb	r3, [r3, #29]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d105      	bne.n	800920c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7f9 f944 	bl	8002494 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b10      	cmp	r3, #16
 800921e:	d055      	beq.n	80092cc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	22ca      	movs	r2, #202	; 0xca
 8009226:	625a      	str	r2, [r3, #36]	; 0x24
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2253      	movs	r2, #83	; 0x53
 800922e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa49 	bl	80096c8 <RTC_EnterInitMode>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d12c      	bne.n	800929a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800924e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009252:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6899      	ldr	r1, [r3, #8]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	68d2      	ldr	r2, [r2, #12]
 800927a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6919      	ldr	r1, [r3, #16]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	041a      	lsls	r2, r3, #16
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa50 	bl	8009736 <RTC_ExitInitMode>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d110      	bne.n	80092c2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80092ae:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	22ff      	movs	r2, #255	; 0xff
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
 80092ca:	e001      	b.n	80092d0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80092e6:	b590      	push	{r4, r7, lr}
 80092e8:	b087      	sub	sp, #28
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7f1b      	ldrb	r3, [r3, #28]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_RTC_SetTime+0x1c>
 80092fe:	2302      	movs	r3, #2
 8009300:	e087      	b.n	8009412 <HAL_RTC_SetTime+0x12c>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2202      	movs	r2, #2
 800930c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d126      	bne.n	8009362 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2200      	movs	r2, #0
 8009326:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fa27 	bl	8009780 <RTC_ByteToBcd2>
 8009332:	4603      	mov	r3, r0
 8009334:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fa20 	bl	8009780 <RTC_ByteToBcd2>
 8009340:	4603      	mov	r3, r0
 8009342:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009344:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	789b      	ldrb	r3, [r3, #2]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fa18 	bl	8009780 <RTC_ByteToBcd2>
 8009350:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009352:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	78db      	ldrb	r3, [r3, #3]
 800935a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e018      	b.n	8009394 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009382:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009388:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	78db      	ldrb	r3, [r3, #3]
 800938e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	22ca      	movs	r2, #202	; 0xca
 800939a:	625a      	str	r2, [r3, #36]	; 0x24
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2253      	movs	r2, #83	; 0x53
 80093a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f98f 	bl	80096c8 <RTC_EnterInitMode>
 80093aa:	4603      	mov	r3, r0
 80093ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80093ae:	7cfb      	ldrb	r3, [r7, #19]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d120      	bne.n	80093f6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80093be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80093c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6899      	ldr	r1, [r3, #8]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f9a2 	bl	8009736 <RTC_ExitInitMode>
 80093f2:	4603      	mov	r3, r0
 80093f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80093f6:	7cfb      	ldrb	r3, [r7, #19]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	22ff      	movs	r2, #255	; 0xff
 8009408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]

  return status;
 8009410:	7cfb      	ldrb	r3, [r7, #19]
}
 8009412:	4618      	mov	r0, r3
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd90      	pop	{r4, r7, pc}

0800941a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800944c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009450:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	0a1b      	lsrs	r3, r3, #8
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946c:	b2da      	uxtb	r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	0d9b      	lsrs	r3, r3, #22
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	b2da      	uxtb	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d11a      	bne.n	80094cc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f98e 	bl	80097bc <RTC_Bcd2ToByte>
 80094a0:	4603      	mov	r3, r0
 80094a2:	461a      	mov	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 f985 	bl	80097bc <RTC_Bcd2ToByte>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	789b      	ldrb	r3, [r3, #2]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f97c 	bl	80097bc <RTC_Bcd2ToByte>
 80094c4:	4603      	mov	r3, r0
 80094c6:	461a      	mov	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094d6:	b590      	push	{r4, r7, lr}
 80094d8:	b087      	sub	sp, #28
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7f1b      	ldrb	r3, [r3, #28]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_RTC_SetDate+0x1c>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e071      	b.n	80095d6 <HAL_RTC_SetDate+0x100>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2202      	movs	r2, #2
 80094fc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10e      	bne.n	8009522 <HAL_RTC_SetDate+0x4c>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	f023 0310 	bic.w	r3, r3, #16
 8009518:	b2db      	uxtb	r3, r3
 800951a:	330a      	adds	r3, #10
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d11c      	bne.n	8009562 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	78db      	ldrb	r3, [r3, #3]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 f927 	bl	8009780 <RTC_ByteToBcd2>
 8009532:	4603      	mov	r3, r0
 8009534:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f920 	bl	8009780 <RTC_ByteToBcd2>
 8009540:	4603      	mov	r3, r0
 8009542:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009544:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f918 	bl	8009780 <RTC_ByteToBcd2>
 8009550:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009552:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	e00e      	b.n	8009580 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	78db      	ldrb	r3, [r3, #3]
 8009566:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800956e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009574:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	22ca      	movs	r2, #202	; 0xca
 8009586:	625a      	str	r2, [r3, #36]	; 0x24
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2253      	movs	r2, #83	; 0x53
 800958e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f000 f899 	bl	80096c8 <RTC_EnterInitMode>
 8009596:	4603      	mov	r3, r0
 8009598:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800959a:	7cfb      	ldrb	r3, [r7, #19]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10c      	bne.n	80095ba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f8c0 	bl	8009736 <RTC_ExitInitMode>
 80095b6:	4603      	mov	r3, r0
 80095b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80095ba:	7cfb      	ldrb	r3, [r7, #19]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	22ff      	movs	r2, #255	; 0xff
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	771a      	strb	r2, [r3, #28]

  return status;
 80095d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd90      	pop	{r4, r7, pc}

080095de <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	b2da      	uxtb	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 031f 	and.w	r3, r3, #31
 8009612:	b2da      	uxtb	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009620:	b2da      	uxtb	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	0b5b      	lsrs	r3, r3, #13
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f003 0307 	and.w	r3, r3, #7
 8009630:	b2da      	uxtb	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11a      	bne.n	8009672 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	78db      	ldrb	r3, [r3, #3]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f8bb 	bl	80097bc <RTC_Bcd2ToByte>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f8b2 	bl	80097bc <RTC_Bcd2ToByte>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	789b      	ldrb	r3, [r3, #2]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8a9 	bl	80097bc <RTC_Bcd2ToByte>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <HAL_RTC_WaitForSynchro+0x48>)
 800968e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009690:	f7f9 fb04 	bl	8002c9c <HAL_GetTick>
 8009694:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009696:	e009      	b.n	80096ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009698:	f7f9 fb00 	bl	8002c9c <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a6:	d901      	bls.n	80096ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e007      	b.n	80096bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0ee      	beq.n	8009698 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	0001ff5f 	.word	0x0001ff5f

080096c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d122      	bne.n	800972c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096f6:	f7f9 fad1 	bl	8002c9c <HAL_GetTick>
 80096fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80096fc:	e00c      	b.n	8009718 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096fe:	f7f9 facd 	bl	8002c9c <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800970c:	d904      	bls.n	8009718 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <RTC_EnterInitMode+0x64>
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d1e8      	bne.n	80096fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009750:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff8b 	bl	800967c <HAL_RTC_WaitForSynchro>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2204      	movs	r2, #4
 8009770:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800978e:	e005      	b.n	800979c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	3b0a      	subs	r3, #10
 800979a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b09      	cmp	r3, #9
 80097a0:	d8f6      	bhi.n	8009790 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	b2db      	uxtb	r3, r3
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	091b      	lsrs	r3, r3, #4
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	4413      	add	r3, r2
 80097ea:	b2db      	uxtb	r3, r3
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e049      	b.n	800989e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f8 fe5e 	bl	80024e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f000 ffd6 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e049      	b.n	800994c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f841 	bl	8009954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f000 ff7f 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <HAL_TIM_PWM_Start+0x24>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b01      	cmp	r3, #1
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	e03c      	b.n	8009a06 <HAL_TIM_PWM_Start+0x9e>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b04      	cmp	r3, #4
 8009990:	d109      	bne.n	80099a6 <HAL_TIM_PWM_Start+0x3e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b01      	cmp	r3, #1
 800999c:	bf14      	ite	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	2300      	moveq	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	e02f      	b.n	8009a06 <HAL_TIM_PWM_Start+0x9e>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d109      	bne.n	80099c0 <HAL_TIM_PWM_Start+0x58>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	bf14      	ite	ne
 80099b8:	2301      	movne	r3, #1
 80099ba:	2300      	moveq	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	e022      	b.n	8009a06 <HAL_TIM_PWM_Start+0x9e>
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b0c      	cmp	r3, #12
 80099c4:	d109      	bne.n	80099da <HAL_TIM_PWM_Start+0x72>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	bf14      	ite	ne
 80099d2:	2301      	movne	r3, #1
 80099d4:	2300      	moveq	r3, #0
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	e015      	b.n	8009a06 <HAL_TIM_PWM_Start+0x9e>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b10      	cmp	r3, #16
 80099de:	d109      	bne.n	80099f4 <HAL_TIM_PWM_Start+0x8c>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	bf14      	ite	ne
 80099ec:	2301      	movne	r3, #1
 80099ee:	2300      	moveq	r3, #0
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	e008      	b.n	8009a06 <HAL_TIM_PWM_Start+0x9e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	bf14      	ite	ne
 8009a00:	2301      	movne	r3, #1
 8009a02:	2300      	moveq	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e097      	b.n	8009b3e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_TIM_PWM_Start+0xb6>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a1c:	e023      	b.n	8009a66 <HAL_TIM_PWM_Start+0xfe>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d104      	bne.n	8009a2e <HAL_TIM_PWM_Start+0xc6>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a2c:	e01b      	b.n	8009a66 <HAL_TIM_PWM_Start+0xfe>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d104      	bne.n	8009a3e <HAL_TIM_PWM_Start+0xd6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a3c:	e013      	b.n	8009a66 <HAL_TIM_PWM_Start+0xfe>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b0c      	cmp	r3, #12
 8009a42:	d104      	bne.n	8009a4e <HAL_TIM_PWM_Start+0xe6>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a4c:	e00b      	b.n	8009a66 <HAL_TIM_PWM_Start+0xfe>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d104      	bne.n	8009a5e <HAL_TIM_PWM_Start+0xf6>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a5c:	e003      	b.n	8009a66 <HAL_TIM_PWM_Start+0xfe>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f001 fbd8 	bl	800b224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <HAL_TIM_PWM_Start+0x1e0>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <HAL_TIM_PWM_Start+0x13e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a32      	ldr	r2, [pc, #200]	; (8009b4c <HAL_TIM_PWM_Start+0x1e4>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <HAL_TIM_PWM_Start+0x13e>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a30      	ldr	r2, [pc, #192]	; (8009b50 <HAL_TIM_PWM_Start+0x1e8>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <HAL_TIM_PWM_Start+0x13e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2f      	ldr	r2, [pc, #188]	; (8009b54 <HAL_TIM_PWM_Start+0x1ec>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <HAL_TIM_PWM_Start+0x13e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2d      	ldr	r2, [pc, #180]	; (8009b58 <HAL_TIM_PWM_Start+0x1f0>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d101      	bne.n	8009aaa <HAL_TIM_PWM_Start+0x142>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <HAL_TIM_PWM_Start+0x144>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d007      	beq.n	8009ac0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009abe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a20      	ldr	r2, [pc, #128]	; (8009b48 <HAL_TIM_PWM_Start+0x1e0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d018      	beq.n	8009afc <HAL_TIM_PWM_Start+0x194>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad2:	d013      	beq.n	8009afc <HAL_TIM_PWM_Start+0x194>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a20      	ldr	r2, [pc, #128]	; (8009b5c <HAL_TIM_PWM_Start+0x1f4>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00e      	beq.n	8009afc <HAL_TIM_PWM_Start+0x194>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a1f      	ldr	r2, [pc, #124]	; (8009b60 <HAL_TIM_PWM_Start+0x1f8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d009      	beq.n	8009afc <HAL_TIM_PWM_Start+0x194>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <HAL_TIM_PWM_Start+0x1e4>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d004      	beq.n	8009afc <HAL_TIM_PWM_Start+0x194>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <HAL_TIM_PWM_Start+0x1e8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d115      	bne.n	8009b28 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	4b18      	ldr	r3, [pc, #96]	; (8009b64 <HAL_TIM_PWM_Start+0x1fc>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b06      	cmp	r3, #6
 8009b0c:	d015      	beq.n	8009b3a <HAL_TIM_PWM_Start+0x1d2>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b14:	d011      	beq.n	8009b3a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0201 	orr.w	r2, r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b26:	e008      	b.n	8009b3a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e000      	b.n	8009b3c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40013400 	.word	0x40013400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800
 8009b5c:	40000400 	.word	0x40000400
 8009b60:	40000800 	.word	0x40000800
 8009b64:	00010007 	.word	0x00010007

08009b68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2200      	movs	r2, #0
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fb52 	bl	800b224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a3e      	ldr	r2, [pc, #248]	; (8009c80 <HAL_TIM_PWM_Stop+0x118>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d013      	beq.n	8009bb2 <HAL_TIM_PWM_Stop+0x4a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a3d      	ldr	r2, [pc, #244]	; (8009c84 <HAL_TIM_PWM_Stop+0x11c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d00e      	beq.n	8009bb2 <HAL_TIM_PWM_Stop+0x4a>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a3b      	ldr	r2, [pc, #236]	; (8009c88 <HAL_TIM_PWM_Stop+0x120>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d009      	beq.n	8009bb2 <HAL_TIM_PWM_Stop+0x4a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3a      	ldr	r2, [pc, #232]	; (8009c8c <HAL_TIM_PWM_Stop+0x124>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d004      	beq.n	8009bb2 <HAL_TIM_PWM_Stop+0x4a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a38      	ldr	r2, [pc, #224]	; (8009c90 <HAL_TIM_PWM_Stop+0x128>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d101      	bne.n	8009bb6 <HAL_TIM_PWM_Stop+0x4e>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <HAL_TIM_PWM_Stop+0x50>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d017      	beq.n	8009bec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6a1a      	ldr	r2, [r3, #32]
 8009bc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10f      	bne.n	8009bec <HAL_TIM_PWM_Stop+0x84>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	f240 4344 	movw	r3, #1092	; 0x444
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d107      	bne.n	8009bec <HAL_TIM_PWM_Stop+0x84>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a1a      	ldr	r2, [r3, #32]
 8009bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10f      	bne.n	8009c1c <HAL_TIM_PWM_Stop+0xb4>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6a1a      	ldr	r2, [r3, #32]
 8009c02:	f240 4344 	movw	r3, #1092	; 0x444
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d107      	bne.n	8009c1c <HAL_TIM_PWM_Stop+0xb4>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <HAL_TIM_PWM_Stop+0xc4>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c2a:	e023      	b.n	8009c74 <HAL_TIM_PWM_Stop+0x10c>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d104      	bne.n	8009c3c <HAL_TIM_PWM_Stop+0xd4>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c3a:	e01b      	b.n	8009c74 <HAL_TIM_PWM_Stop+0x10c>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d104      	bne.n	8009c4c <HAL_TIM_PWM_Stop+0xe4>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c4a:	e013      	b.n	8009c74 <HAL_TIM_PWM_Stop+0x10c>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b0c      	cmp	r3, #12
 8009c50:	d104      	bne.n	8009c5c <HAL_TIM_PWM_Stop+0xf4>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c5a:	e00b      	b.n	8009c74 <HAL_TIM_PWM_Stop+0x10c>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b10      	cmp	r3, #16
 8009c60:	d104      	bne.n	8009c6c <HAL_TIM_PWM_Stop+0x104>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c6a:	e003      	b.n	8009c74 <HAL_TIM_PWM_Stop+0x10c>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	40012c00 	.word	0x40012c00
 8009c84:	40013400 	.word	0x40013400
 8009c88:	40014000 	.word	0x40014000
 8009c8c:	40014400 	.word	0x40014400
 8009c90:	40014800 	.word	0x40014800

08009c94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e049      	b.n	8009d3a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f841 	bl	8009d42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f000 fd88 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <HAL_TIM_IC_Start_IT+0x1e>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	e023      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x66>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d104      	bne.n	8009d86 <HAL_TIM_IC_Start_IT+0x2e>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	e01b      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x66>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d104      	bne.n	8009d96 <HAL_TIM_IC_Start_IT+0x3e>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	e013      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x66>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b0c      	cmp	r3, #12
 8009d9a:	d104      	bne.n	8009da6 <HAL_TIM_IC_Start_IT+0x4e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	e00b      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x66>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d104      	bne.n	8009db6 <HAL_TIM_IC_Start_IT+0x5e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	e003      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x66>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d104      	bne.n	8009dd0 <HAL_TIM_IC_Start_IT+0x78>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	e013      	b.n	8009df8 <HAL_TIM_IC_Start_IT+0xa0>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d104      	bne.n	8009de0 <HAL_TIM_IC_Start_IT+0x88>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	e00b      	b.n	8009df8 <HAL_TIM_IC_Start_IT+0xa0>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b08      	cmp	r3, #8
 8009de4:	d104      	bne.n	8009df0 <HAL_TIM_IC_Start_IT+0x98>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	e003      	b.n	8009df8 <HAL_TIM_IC_Start_IT+0xa0>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d102      	bne.n	8009e06 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e00:	7b7b      	ldrb	r3, [r7, #13]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d001      	beq.n	8009e0a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e0d8      	b.n	8009fbc <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <HAL_TIM_IC_Start_IT+0xc2>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e18:	e023      	b.n	8009e62 <HAL_TIM_IC_Start_IT+0x10a>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d104      	bne.n	8009e2a <HAL_TIM_IC_Start_IT+0xd2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e28:	e01b      	b.n	8009e62 <HAL_TIM_IC_Start_IT+0x10a>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d104      	bne.n	8009e3a <HAL_TIM_IC_Start_IT+0xe2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e38:	e013      	b.n	8009e62 <HAL_TIM_IC_Start_IT+0x10a>
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2b0c      	cmp	r3, #12
 8009e3e:	d104      	bne.n	8009e4a <HAL_TIM_IC_Start_IT+0xf2>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e48:	e00b      	b.n	8009e62 <HAL_TIM_IC_Start_IT+0x10a>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b10      	cmp	r3, #16
 8009e4e:	d104      	bne.n	8009e5a <HAL_TIM_IC_Start_IT+0x102>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e58:	e003      	b.n	8009e62 <HAL_TIM_IC_Start_IT+0x10a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <HAL_TIM_IC_Start_IT+0x11a>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e70:	e013      	b.n	8009e9a <HAL_TIM_IC_Start_IT+0x142>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d104      	bne.n	8009e82 <HAL_TIM_IC_Start_IT+0x12a>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e80:	e00b      	b.n	8009e9a <HAL_TIM_IC_Start_IT+0x142>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d104      	bne.n	8009e92 <HAL_TIM_IC_Start_IT+0x13a>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e90:	e003      	b.n	8009e9a <HAL_TIM_IC_Start_IT+0x142>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b0c      	cmp	r3, #12
 8009e9e:	d841      	bhi.n	8009f24 <HAL_TIM_IC_Start_IT+0x1cc>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <HAL_TIM_IC_Start_IT+0x150>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009edd 	.word	0x08009edd
 8009eac:	08009f25 	.word	0x08009f25
 8009eb0:	08009f25 	.word	0x08009f25
 8009eb4:	08009f25 	.word	0x08009f25
 8009eb8:	08009eef 	.word	0x08009eef
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009f25 	.word	0x08009f25
 8009ec4:	08009f25 	.word	0x08009f25
 8009ec8:	08009f01 	.word	0x08009f01
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009f13 	.word	0x08009f13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0202 	orr.w	r2, r2, #2
 8009eea:	60da      	str	r2, [r3, #12]
      break;
 8009eec:	e01d      	b.n	8009f2a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0204 	orr.w	r2, r2, #4
 8009efc:	60da      	str	r2, [r3, #12]
      break;
 8009efe:	e014      	b.n	8009f2a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0208 	orr.w	r2, r2, #8
 8009f0e:	60da      	str	r2, [r3, #12]
      break;
 8009f10:	e00b      	b.n	8009f2a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68da      	ldr	r2, [r3, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0210 	orr.w	r2, r2, #16
 8009f20:	60da      	str	r2, [r3, #12]
      break;
 8009f22:	e002      	b.n	8009f2a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
      break;
 8009f28:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d144      	bne.n	8009fba <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2201      	movs	r2, #1
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 f973 	bl	800b224 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a20      	ldr	r2, [pc, #128]	; (8009fc4 <HAL_TIM_IC_Start_IT+0x26c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d018      	beq.n	8009f7a <HAL_TIM_IC_Start_IT+0x222>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f50:	d013      	beq.n	8009f7a <HAL_TIM_IC_Start_IT+0x222>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <HAL_TIM_IC_Start_IT+0x270>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00e      	beq.n	8009f7a <HAL_TIM_IC_Start_IT+0x222>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a1a      	ldr	r2, [pc, #104]	; (8009fcc <HAL_TIM_IC_Start_IT+0x274>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d009      	beq.n	8009f7a <HAL_TIM_IC_Start_IT+0x222>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <HAL_TIM_IC_Start_IT+0x278>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d004      	beq.n	8009f7a <HAL_TIM_IC_Start_IT+0x222>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a17      	ldr	r2, [pc, #92]	; (8009fd4 <HAL_TIM_IC_Start_IT+0x27c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d115      	bne.n	8009fa6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <HAL_TIM_IC_Start_IT+0x280>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b06      	cmp	r3, #6
 8009f8a:	d015      	beq.n	8009fb8 <HAL_TIM_IC_Start_IT+0x260>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f92:	d011      	beq.n	8009fb8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa4:	e008      	b.n	8009fb8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0201 	orr.w	r2, r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	e000      	b.n	8009fba <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40012c00 	.word	0x40012c00
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	40013400 	.word	0x40013400
 8009fd4:	40014000 	.word	0x40014000
 8009fd8:	00010007 	.word	0x00010007

08009fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d122      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d11b      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0202 	mvn.w	r2, #2
 800a008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f7 ff0e 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 800a024:	e005      	b.n	800a032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fbc0 	bl	800a7ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fbc7 	bl	800a7c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b04      	cmp	r3, #4
 800a044:	d122      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d11b      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0204 	mvn.w	r2, #4
 800a05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7f7 fee4 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 800a078:	e005      	b.n	800a086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fb96 	bl	800a7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb9d 	bl	800a7c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b08      	cmp	r3, #8
 800a098:	d122      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0208 	mvn.w	r2, #8
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f7 feba 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb6c 	bl	800a7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fb73 	bl	800a7c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d122      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0210 	mvn.w	r2, #16
 800a104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2208      	movs	r2, #8
 800a10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7f7 fe90 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 800a120:	e005      	b.n	800a12e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fb42 	bl	800a7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fb49 	bl	800a7c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10e      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d107      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0201 	mvn.w	r2, #1
 800a158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fb1c 	bl	800a798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d10e      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a178:	2b80      	cmp	r3, #128	; 0x80
 800a17a:	d107      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 fa8c 	bl	800b6a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	d10e      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a6:	2b80      	cmp	r3, #128	; 0x80
 800a1a8:	d107      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 fa7f 	bl	800b6b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c4:	2b40      	cmp	r3, #64	; 0x40
 800a1c6:	d10e      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d107      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 faf7 	bl	800a7d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0320 	and.w	r3, r3, #32
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	d10e      	bne.n	800a212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f003 0320 	and.w	r3, r3, #32
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d107      	bne.n	800a212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0220 	mvn.w	r2, #32
 800a20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 fa3f 	bl	800b690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a234:	2302      	movs	r3, #2
 800a236:	e088      	b.n	800a34a <HAL_TIM_IC_ConfigChannel+0x130>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d11b      	bne.n	800a27e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f000 fe2d 	bl	800aeb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 020c 	bic.w	r2, r2, #12
 800a268:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6999      	ldr	r1, [r3, #24]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	619a      	str	r2, [r3, #24]
 800a27c:	e060      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b04      	cmp	r3, #4
 800a282:	d11c      	bne.n	800a2be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6819      	ldr	r1, [r3, #0]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f000 fea5 	bl	800afe2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a2a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6999      	ldr	r1, [r3, #24]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	619a      	str	r2, [r3, #24]
 800a2bc:	e040      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d11b      	bne.n	800a2fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f000 fef2 	bl	800b0bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69da      	ldr	r2, [r3, #28]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 020c 	bic.w	r2, r2, #12
 800a2e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69d9      	ldr	r1, [r3, #28]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	61da      	str	r2, [r3, #28]
 800a2fa:	e021      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b0c      	cmp	r3, #12
 800a300:	d11c      	bne.n	800a33c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f000 ff0f 	bl	800b134 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a324:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69d9      	ldr	r1, [r3, #28]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	021a      	lsls	r2, r3, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	61da      	str	r2, [r3, #28]
 800a33a:	e001      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a36e:	2302      	movs	r3, #2
 800a370:	e0ff      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b14      	cmp	r3, #20
 800a37e:	f200 80f0 	bhi.w	800a562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3dd 	.word	0x0800a3dd
 800a38c:	0800a563 	.word	0x0800a563
 800a390:	0800a563 	.word	0x0800a563
 800a394:	0800a563 	.word	0x0800a563
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a563 	.word	0x0800a563
 800a3a0:	0800a563 	.word	0x0800a563
 800a3a4:	0800a563 	.word	0x0800a563
 800a3a8:	0800a45f 	.word	0x0800a45f
 800a3ac:	0800a563 	.word	0x0800a563
 800a3b0:	0800a563 	.word	0x0800a563
 800a3b4:	0800a563 	.word	0x0800a563
 800a3b8:	0800a49f 	.word	0x0800a49f
 800a3bc:	0800a563 	.word	0x0800a563
 800a3c0:	0800a563 	.word	0x0800a563
 800a3c4:	0800a563 	.word	0x0800a563
 800a3c8:	0800a4e1 	.word	0x0800a4e1
 800a3cc:	0800a563 	.word	0x0800a563
 800a3d0:	0800a563 	.word	0x0800a563
 800a3d4:	0800a563 	.word	0x0800a563
 800a3d8:	0800a521 	.word	0x0800a521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fa90 	bl	800a908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699a      	ldr	r2, [r3, #24]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0208 	orr.w	r2, r2, #8
 800a3f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	699a      	ldr	r2, [r3, #24]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0204 	bic.w	r2, r2, #4
 800a406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6999      	ldr	r1, [r3, #24]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	619a      	str	r2, [r3, #24]
      break;
 800a41a:	e0a5      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fb00 	bl	800aa28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6999      	ldr	r1, [r3, #24]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	021a      	lsls	r2, r3, #8
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	619a      	str	r2, [r3, #24]
      break;
 800a45c:	e084      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fb69 	bl	800ab3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69da      	ldr	r2, [r3, #28]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0208 	orr.w	r2, r2, #8
 800a478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69da      	ldr	r2, [r3, #28]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0204 	bic.w	r2, r2, #4
 800a488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69d9      	ldr	r1, [r3, #28]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	61da      	str	r2, [r3, #28]
      break;
 800a49c:	e064      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fbd1 	bl	800ac4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69da      	ldr	r2, [r3, #28]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69d9      	ldr	r1, [r3, #28]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	021a      	lsls	r2, r3, #8
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	61da      	str	r2, [r3, #28]
      break;
 800a4de:	e043      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fc1a 	bl	800ad20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0208 	orr.w	r2, r2, #8
 800a4fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0204 	bic.w	r2, r2, #4
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	691a      	ldr	r2, [r3, #16]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a51e:	e023      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fc5e 	bl	800ade8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	021a      	lsls	r2, r3, #8
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a560:	e002      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	75fb      	strb	r3, [r7, #23]
      break;
 800a566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a590:	2b01      	cmp	r3, #1
 800a592:	d101      	bne.n	800a598 <HAL_TIM_ConfigClockSource+0x1c>
 800a594:	2302      	movs	r3, #2
 800a596:	e0b6      	b.n	800a706 <HAL_TIM_ConfigClockSource+0x18a>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d4:	d03e      	beq.n	800a654 <HAL_TIM_ConfigClockSource+0xd8>
 800a5d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5da:	f200 8087 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e2:	f000 8086 	beq.w	800a6f2 <HAL_TIM_ConfigClockSource+0x176>
 800a5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ea:	d87f      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a5ec:	2b70      	cmp	r3, #112	; 0x70
 800a5ee:	d01a      	beq.n	800a626 <HAL_TIM_ConfigClockSource+0xaa>
 800a5f0:	2b70      	cmp	r3, #112	; 0x70
 800a5f2:	d87b      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a5f4:	2b60      	cmp	r3, #96	; 0x60
 800a5f6:	d050      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x11e>
 800a5f8:	2b60      	cmp	r3, #96	; 0x60
 800a5fa:	d877      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a5fc:	2b50      	cmp	r3, #80	; 0x50
 800a5fe:	d03c      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0xfe>
 800a600:	2b50      	cmp	r3, #80	; 0x50
 800a602:	d873      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a604:	2b40      	cmp	r3, #64	; 0x40
 800a606:	d058      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x13e>
 800a608:	2b40      	cmp	r3, #64	; 0x40
 800a60a:	d86f      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a60c:	2b30      	cmp	r3, #48	; 0x30
 800a60e:	d064      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x15e>
 800a610:	2b30      	cmp	r3, #48	; 0x30
 800a612:	d86b      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a614:	2b20      	cmp	r3, #32
 800a616:	d060      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x15e>
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d867      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d05c      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x15e>
 800a620:	2b10      	cmp	r3, #16
 800a622:	d05a      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x15e>
 800a624:	e062      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6899      	ldr	r1, [r3, #8]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f000 fdd5 	bl	800b1e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	609a      	str	r2, [r3, #8]
      break;
 800a652:	e04f      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6899      	ldr	r1, [r3, #8]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f000 fdbe 	bl	800b1e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a676:	609a      	str	r2, [r3, #8]
      break;
 800a678:	e03c      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	461a      	mov	r2, r3
 800a688:	f000 fc7c 	bl	800af84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2150      	movs	r1, #80	; 0x50
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fd8b 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a698:	e02c      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	6859      	ldr	r1, [r3, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f000 fcd8 	bl	800b05c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2160      	movs	r1, #96	; 0x60
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fd7b 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a6b8:	e01c      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f000 fc5c 	bl	800af84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2140      	movs	r1, #64	; 0x40
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fd6b 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a6d8:	e00c      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f000 fd62 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a6ea:	e003      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f0:	e000      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b0c      	cmp	r3, #12
 800a722:	d831      	bhi.n	800a788 <HAL_TIM_ReadCapturedValue+0x78>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a761 	.word	0x0800a761
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a789 	.word	0x0800a789
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a76b 	.word	0x0800a76b
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a775 	.word	0x0800a775
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a789 	.word	0x0800a789
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a77f 	.word	0x0800a77f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	60fb      	str	r3, [r7, #12]

      break;
 800a768:	e00f      	b.n	800a78a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	60fb      	str	r3, [r7, #12]

      break;
 800a772:	e00a      	b.n	800a78a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77a:	60fb      	str	r3, [r7, #12]

      break;
 800a77c:	e005      	b.n	800a78a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	60fb      	str	r3, [r7, #12]

      break;
 800a786:	e000      	b.n	800a78a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a788:	bf00      	nop
  }

  return tmpreg;
 800a78a:	68fb      	ldr	r3, [r7, #12]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a3c      	ldr	r2, [pc, #240]	; (800a8ec <TIM_Base_SetConfig+0x104>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00f      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a806:	d00b      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a39      	ldr	r2, [pc, #228]	; (800a8f0 <TIM_Base_SetConfig+0x108>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d007      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a38      	ldr	r2, [pc, #224]	; (800a8f4 <TIM_Base_SetConfig+0x10c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d003      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a37      	ldr	r2, [pc, #220]	; (800a8f8 <TIM_Base_SetConfig+0x110>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d108      	bne.n	800a832 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a2d      	ldr	r2, [pc, #180]	; (800a8ec <TIM_Base_SetConfig+0x104>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d01b      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a840:	d017      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a2a      	ldr	r2, [pc, #168]	; (800a8f0 <TIM_Base_SetConfig+0x108>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a29      	ldr	r2, [pc, #164]	; (800a8f4 <TIM_Base_SetConfig+0x10c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00f      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a28      	ldr	r2, [pc, #160]	; (800a8f8 <TIM_Base_SetConfig+0x110>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00b      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a27      	ldr	r2, [pc, #156]	; (800a8fc <TIM_Base_SetConfig+0x114>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d007      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a26      	ldr	r2, [pc, #152]	; (800a900 <TIM_Base_SetConfig+0x118>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d003      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a25      	ldr	r2, [pc, #148]	; (800a904 <TIM_Base_SetConfig+0x11c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d108      	bne.n	800a884 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a10      	ldr	r2, [pc, #64]	; (800a8ec <TIM_Base_SetConfig+0x104>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d00f      	beq.n	800a8d0 <TIM_Base_SetConfig+0xe8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a11      	ldr	r2, [pc, #68]	; (800a8f8 <TIM_Base_SetConfig+0x110>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d00b      	beq.n	800a8d0 <TIM_Base_SetConfig+0xe8>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a10      	ldr	r2, [pc, #64]	; (800a8fc <TIM_Base_SetConfig+0x114>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d007      	beq.n	800a8d0 <TIM_Base_SetConfig+0xe8>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a0f      	ldr	r2, [pc, #60]	; (800a900 <TIM_Base_SetConfig+0x118>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d003      	beq.n	800a8d0 <TIM_Base_SetConfig+0xe8>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a0e      	ldr	r2, [pc, #56]	; (800a904 <TIM_Base_SetConfig+0x11c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d103      	bne.n	800a8d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	615a      	str	r2, [r3, #20]
}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	40012c00 	.word	0x40012c00
 800a8f0:	40000400 	.word	0x40000400
 800a8f4:	40000800 	.word	0x40000800
 800a8f8:	40013400 	.word	0x40013400
 800a8fc:	40014000 	.word	0x40014000
 800a900:	40014400 	.word	0x40014400
 800a904:	40014800 	.word	0x40014800

0800a908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a908:	b480      	push	{r7}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0201 	bic.w	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f023 0302 	bic.w	r3, r3, #2
 800a954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a2c      	ldr	r2, [pc, #176]	; (800aa14 <TIM_OC1_SetConfig+0x10c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d00f      	beq.n	800a988 <TIM_OC1_SetConfig+0x80>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a2b      	ldr	r2, [pc, #172]	; (800aa18 <TIM_OC1_SetConfig+0x110>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d00b      	beq.n	800a988 <TIM_OC1_SetConfig+0x80>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a2a      	ldr	r2, [pc, #168]	; (800aa1c <TIM_OC1_SetConfig+0x114>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d007      	beq.n	800a988 <TIM_OC1_SetConfig+0x80>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a29      	ldr	r2, [pc, #164]	; (800aa20 <TIM_OC1_SetConfig+0x118>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <TIM_OC1_SetConfig+0x80>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a28      	ldr	r2, [pc, #160]	; (800aa24 <TIM_OC1_SetConfig+0x11c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d10c      	bne.n	800a9a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f023 0308 	bic.w	r3, r3, #8
 800a98e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f023 0304 	bic.w	r3, r3, #4
 800a9a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a1b      	ldr	r2, [pc, #108]	; (800aa14 <TIM_OC1_SetConfig+0x10c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d00f      	beq.n	800a9ca <TIM_OC1_SetConfig+0xc2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a1a      	ldr	r2, [pc, #104]	; (800aa18 <TIM_OC1_SetConfig+0x110>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00b      	beq.n	800a9ca <TIM_OC1_SetConfig+0xc2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a19      	ldr	r2, [pc, #100]	; (800aa1c <TIM_OC1_SetConfig+0x114>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d007      	beq.n	800a9ca <TIM_OC1_SetConfig+0xc2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a18      	ldr	r2, [pc, #96]	; (800aa20 <TIM_OC1_SetConfig+0x118>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d003      	beq.n	800a9ca <TIM_OC1_SetConfig+0xc2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a17      	ldr	r2, [pc, #92]	; (800aa24 <TIM_OC1_SetConfig+0x11c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d111      	bne.n	800a9ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	621a      	str	r2, [r3, #32]
}
 800aa08:	bf00      	nop
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	40012c00 	.word	0x40012c00
 800aa18:	40013400 	.word	0x40013400
 800aa1c:	40014000 	.word	0x40014000
 800aa20:	40014400 	.word	0x40014400
 800aa24:	40014800 	.word	0x40014800

0800aa28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f023 0210 	bic.w	r2, r3, #16
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f023 0320 	bic.w	r3, r3, #32
 800aa76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a28      	ldr	r2, [pc, #160]	; (800ab28 <TIM_OC2_SetConfig+0x100>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_OC2_SetConfig+0x6c>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a27      	ldr	r2, [pc, #156]	; (800ab2c <TIM_OC2_SetConfig+0x104>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d10d      	bne.n	800aab0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a1d      	ldr	r2, [pc, #116]	; (800ab28 <TIM_OC2_SetConfig+0x100>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00f      	beq.n	800aad8 <TIM_OC2_SetConfig+0xb0>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a1c      	ldr	r2, [pc, #112]	; (800ab2c <TIM_OC2_SetConfig+0x104>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <TIM_OC2_SetConfig+0xb0>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a1b      	ldr	r2, [pc, #108]	; (800ab30 <TIM_OC2_SetConfig+0x108>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d007      	beq.n	800aad8 <TIM_OC2_SetConfig+0xb0>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a1a      	ldr	r2, [pc, #104]	; (800ab34 <TIM_OC2_SetConfig+0x10c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_OC2_SetConfig+0xb0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a19      	ldr	r2, [pc, #100]	; (800ab38 <TIM_OC2_SetConfig+0x110>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d113      	bne.n	800ab00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aade:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	621a      	str	r2, [r3, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	371c      	adds	r7, #28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40012c00 	.word	0x40012c00
 800ab2c:	40013400 	.word	0x40013400
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40014400 	.word	0x40014400
 800ab38:	40014800 	.word	0x40014800

0800ab3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a27      	ldr	r2, [pc, #156]	; (800ac38 <TIM_OC3_SetConfig+0xfc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d003      	beq.n	800aba6 <TIM_OC3_SetConfig+0x6a>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a26      	ldr	r2, [pc, #152]	; (800ac3c <TIM_OC3_SetConfig+0x100>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d10d      	bne.n	800abc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abc0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <TIM_OC3_SetConfig+0xfc>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00f      	beq.n	800abea <TIM_OC3_SetConfig+0xae>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <TIM_OC3_SetConfig+0x100>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00b      	beq.n	800abea <TIM_OC3_SetConfig+0xae>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a1a      	ldr	r2, [pc, #104]	; (800ac40 <TIM_OC3_SetConfig+0x104>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d007      	beq.n	800abea <TIM_OC3_SetConfig+0xae>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a19      	ldr	r2, [pc, #100]	; (800ac44 <TIM_OC3_SetConfig+0x108>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC3_SetConfig+0xae>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <TIM_OC3_SetConfig+0x10c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d113      	bne.n	800ac12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	621a      	str	r2, [r3, #32]
}
 800ac2c:	bf00      	nop
 800ac2e:	371c      	adds	r7, #28
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	40012c00 	.word	0x40012c00
 800ac3c:	40013400 	.word	0x40013400
 800ac40:	40014000 	.word	0x40014000
 800ac44:	40014400 	.word	0x40014400
 800ac48:	40014800 	.word	0x40014800

0800ac4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	031b      	lsls	r3, r3, #12
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a18      	ldr	r2, [pc, #96]	; (800ad0c <TIM_OC4_SetConfig+0xc0>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00f      	beq.n	800acd0 <TIM_OC4_SetConfig+0x84>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <TIM_OC4_SetConfig+0xc4>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00b      	beq.n	800acd0 <TIM_OC4_SetConfig+0x84>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <TIM_OC4_SetConfig+0xc8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d007      	beq.n	800acd0 <TIM_OC4_SetConfig+0x84>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <TIM_OC4_SetConfig+0xcc>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <TIM_OC4_SetConfig+0x84>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a14      	ldr	r2, [pc, #80]	; (800ad1c <TIM_OC4_SetConfig+0xd0>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d109      	bne.n	800ace4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	019b      	lsls	r3, r3, #6
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40012c00 	.word	0x40012c00
 800ad10:	40013400 	.word	0x40013400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	40014400 	.word	0x40014400
 800ad1c:	40014800 	.word	0x40014800

0800ad20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	041b      	lsls	r3, r3, #16
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a17      	ldr	r2, [pc, #92]	; (800add4 <TIM_OC5_SetConfig+0xb4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d00f      	beq.n	800ad9a <TIM_OC5_SetConfig+0x7a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a16      	ldr	r2, [pc, #88]	; (800add8 <TIM_OC5_SetConfig+0xb8>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d00b      	beq.n	800ad9a <TIM_OC5_SetConfig+0x7a>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a15      	ldr	r2, [pc, #84]	; (800addc <TIM_OC5_SetConfig+0xbc>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d007      	beq.n	800ad9a <TIM_OC5_SetConfig+0x7a>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a14      	ldr	r2, [pc, #80]	; (800ade0 <TIM_OC5_SetConfig+0xc0>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d003      	beq.n	800ad9a <TIM_OC5_SetConfig+0x7a>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a13      	ldr	r2, [pc, #76]	; (800ade4 <TIM_OC5_SetConfig+0xc4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d109      	bne.n	800adae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ada0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	621a      	str	r2, [r3, #32]
}
 800adc8:	bf00      	nop
 800adca:	371c      	adds	r7, #28
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	40012c00 	.word	0x40012c00
 800add8:	40013400 	.word	0x40013400
 800addc:	40014000 	.word	0x40014000
 800ade0:	40014400 	.word	0x40014400
 800ade4:	40014800 	.word	0x40014800

0800ade8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	051b      	lsls	r3, r3, #20
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a18      	ldr	r2, [pc, #96]	; (800aea0 <TIM_OC6_SetConfig+0xb8>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00f      	beq.n	800ae64 <TIM_OC6_SetConfig+0x7c>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a17      	ldr	r2, [pc, #92]	; (800aea4 <TIM_OC6_SetConfig+0xbc>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00b      	beq.n	800ae64 <TIM_OC6_SetConfig+0x7c>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <TIM_OC6_SetConfig+0xc0>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d007      	beq.n	800ae64 <TIM_OC6_SetConfig+0x7c>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a15      	ldr	r2, [pc, #84]	; (800aeac <TIM_OC6_SetConfig+0xc4>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d003      	beq.n	800ae64 <TIM_OC6_SetConfig+0x7c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a14      	ldr	r2, [pc, #80]	; (800aeb0 <TIM_OC6_SetConfig+0xc8>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d109      	bne.n	800ae78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	029b      	lsls	r3, r3, #10
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	621a      	str	r2, [r3, #32]
}
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	40012c00 	.word	0x40012c00
 800aea4:	40013400 	.word	0x40013400
 800aea8:	40014000 	.word	0x40014000
 800aeac:	40014400 	.word	0x40014400
 800aeb0:	40014800 	.word	0x40014800

0800aeb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	f023 0201 	bic.w	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4a24      	ldr	r2, [pc, #144]	; (800af70 <TIM_TI1_SetConfig+0xbc>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d013      	beq.n	800af0a <TIM_TI1_SetConfig+0x56>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee8:	d00f      	beq.n	800af0a <TIM_TI1_SetConfig+0x56>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	4a21      	ldr	r2, [pc, #132]	; (800af74 <TIM_TI1_SetConfig+0xc0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00b      	beq.n	800af0a <TIM_TI1_SetConfig+0x56>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	4a20      	ldr	r2, [pc, #128]	; (800af78 <TIM_TI1_SetConfig+0xc4>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d007      	beq.n	800af0a <TIM_TI1_SetConfig+0x56>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <TIM_TI1_SetConfig+0xc8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d003      	beq.n	800af0a <TIM_TI1_SetConfig+0x56>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	4a1e      	ldr	r2, [pc, #120]	; (800af80 <TIM_TI1_SetConfig+0xcc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d101      	bne.n	800af0e <TIM_TI1_SetConfig+0x5a>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e000      	b.n	800af10 <TIM_TI1_SetConfig+0x5c>
 800af0e:	2300      	movs	r3, #0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d008      	beq.n	800af26 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0303 	bic.w	r3, r3, #3
 800af1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	e003      	b.n	800af2e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	011b      	lsls	r3, r3, #4
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	4313      	orrs	r3, r2
 800af40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f023 030a 	bic.w	r3, r3, #10
 800af48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f003 030a 	and.w	r3, r3, #10
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	621a      	str	r2, [r3, #32]
}
 800af62:	bf00      	nop
 800af64:	371c      	adds	r7, #28
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	40012c00 	.word	0x40012c00
 800af74:	40000400 	.word	0x40000400
 800af78:	40000800 	.word	0x40000800
 800af7c:	40013400 	.word	0x40013400
 800af80:	40014000 	.word	0x40014000

0800af84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f023 0201 	bic.w	r2, r3, #1
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f023 030a 	bic.w	r3, r3, #10
 800afc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	621a      	str	r2, [r3, #32]
}
 800afd6:	bf00      	nop
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	f023 0210 	bic.w	r2, r3, #16
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b00e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	031b      	lsls	r3, r3, #12
 800b026:	b29b      	uxth	r3, r3
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b034:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	621a      	str	r2, [r3, #32]
}
 800b050:	bf00      	nop
 800b052:	371c      	adds	r7, #28
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	f023 0210 	bic.w	r2, r3, #16
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b086:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	031b      	lsls	r3, r3, #12
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	4313      	orrs	r3, r2
 800b090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	621a      	str	r2, [r3, #32]
}
 800b0b0:	bf00      	nop
 800b0b2:	371c      	adds	r7, #28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	011b      	lsls	r3, r3, #4
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	4313      	orrs	r3, r2
 800b104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b10c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	621a      	str	r2, [r3, #32]
}
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6a1b      	ldr	r3, [r3, #32]
 800b158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b160:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	021b      	lsls	r3, r3, #8
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b172:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	031b      	lsls	r3, r3, #12
 800b178:	b29b      	uxth	r3, r3
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b186:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	031b      	lsls	r3, r3, #12
 800b18c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f043 0307 	orr.w	r3, r3, #7
 800b1d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	609a      	str	r2, [r3, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	021a      	lsls	r2, r3, #8
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	431a      	orrs	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	609a      	str	r2, [r3, #8]
}
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f003 031f 	and.w	r3, r3, #31
 800b236:	2201      	movs	r2, #1
 800b238:	fa02 f303 	lsl.w	r3, r2, r3
 800b23c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6a1a      	ldr	r2, [r3, #32]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	43db      	mvns	r3, r3
 800b246:	401a      	ands	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a1a      	ldr	r2, [r3, #32]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f003 031f 	and.w	r3, r3, #31
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	fa01 f303 	lsl.w	r3, r1, r3
 800b25c:	431a      	orrs	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	621a      	str	r2, [r3, #32]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
	...

0800b270 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <HAL_TIMEx_PWMN_Start+0x24>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b01      	cmp	r3, #1
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	e022      	b.n	800b2da <HAL_TIMEx_PWMN_Start+0x6a>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b04      	cmp	r3, #4
 800b298:	d109      	bne.n	800b2ae <HAL_TIMEx_PWMN_Start+0x3e>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	bf14      	ite	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	2300      	moveq	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	e015      	b.n	800b2da <HAL_TIMEx_PWMN_Start+0x6a>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	d109      	bne.n	800b2c8 <HAL_TIMEx_PWMN_Start+0x58>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	bf14      	ite	ne
 800b2c0:	2301      	movne	r3, #1
 800b2c2:	2300      	moveq	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	e008      	b.n	800b2da <HAL_TIMEx_PWMN_Start+0x6a>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	bf14      	ite	ne
 800b2d4:	2301      	movne	r3, #1
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e069      	b.n	800b3b6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d104      	bne.n	800b2f2 <HAL_TIMEx_PWMN_Start+0x82>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f0:	e013      	b.n	800b31a <HAL_TIMEx_PWMN_Start+0xaa>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d104      	bne.n	800b302 <HAL_TIMEx_PWMN_Start+0x92>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b300:	e00b      	b.n	800b31a <HAL_TIMEx_PWMN_Start+0xaa>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b08      	cmp	r3, #8
 800b306:	d104      	bne.n	800b312 <HAL_TIMEx_PWMN_Start+0xa2>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b310:	e003      	b.n	800b31a <HAL_TIMEx_PWMN_Start+0xaa>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2204      	movs	r2, #4
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 f9d2 	bl	800b6cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b336:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a20      	ldr	r2, [pc, #128]	; (800b3c0 <HAL_TIMEx_PWMN_Start+0x150>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d018      	beq.n	800b374 <HAL_TIMEx_PWMN_Start+0x104>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b34a:	d013      	beq.n	800b374 <HAL_TIMEx_PWMN_Start+0x104>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <HAL_TIMEx_PWMN_Start+0x154>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00e      	beq.n	800b374 <HAL_TIMEx_PWMN_Start+0x104>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a1b      	ldr	r2, [pc, #108]	; (800b3c8 <HAL_TIMEx_PWMN_Start+0x158>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d009      	beq.n	800b374 <HAL_TIMEx_PWMN_Start+0x104>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a19      	ldr	r2, [pc, #100]	; (800b3cc <HAL_TIMEx_PWMN_Start+0x15c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d004      	beq.n	800b374 <HAL_TIMEx_PWMN_Start+0x104>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a18      	ldr	r2, [pc, #96]	; (800b3d0 <HAL_TIMEx_PWMN_Start+0x160>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d115      	bne.n	800b3a0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800b37c:	4013      	ands	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b06      	cmp	r3, #6
 800b384:	d015      	beq.n	800b3b2 <HAL_TIMEx_PWMN_Start+0x142>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38c:	d011      	beq.n	800b3b2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f042 0201 	orr.w	r2, r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39e:	e008      	b.n	800b3b2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0201 	orr.w	r2, r2, #1
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	e000      	b.n	800b3b4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40000400 	.word	0x40000400
 800b3c8:	40000800 	.word	0x40000800
 800b3cc:	40013400 	.word	0x40013400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	00010007 	.word	0x00010007

0800b3d8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f96e 	bl	800b6cc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6a1a      	ldr	r2, [r3, #32]
 800b3f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10f      	bne.n	800b420 <HAL_TIMEx_PWMN_Stop+0x48>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6a1a      	ldr	r2, [r3, #32]
 800b406:	f240 4344 	movw	r3, #1092	; 0x444
 800b40a:	4013      	ands	r3, r2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d107      	bne.n	800b420 <HAL_TIMEx_PWMN_Stop+0x48>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b41e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6a1a      	ldr	r2, [r3, #32]
 800b426:	f241 1311 	movw	r3, #4369	; 0x1111
 800b42a:	4013      	ands	r3, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10f      	bne.n	800b450 <HAL_TIMEx_PWMN_Stop+0x78>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6a1a      	ldr	r2, [r3, #32]
 800b436:	f240 4344 	movw	r3, #1092	; 0x444
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d107      	bne.n	800b450 <HAL_TIMEx_PWMN_Stop+0x78>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d104      	bne.n	800b460 <HAL_TIMEx_PWMN_Stop+0x88>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b45e:	e013      	b.n	800b488 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2b04      	cmp	r3, #4
 800b464:	d104      	bne.n	800b470 <HAL_TIMEx_PWMN_Stop+0x98>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b46e:	e00b      	b.n	800b488 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b08      	cmp	r3, #8
 800b474:	d104      	bne.n	800b480 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b47e:	e003      	b.n	800b488 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e063      	b.n	800b574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a2b      	ldr	r2, [pc, #172]	; (800b580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d004      	beq.n	800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a2a      	ldr	r2, [pc, #168]	; (800b584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d108      	bne.n	800b4f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a1b      	ldr	r2, [pc, #108]	; (800b580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d018      	beq.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b51e:	d013      	beq.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a18      	ldr	r2, [pc, #96]	; (800b588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d00e      	beq.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a17      	ldr	r2, [pc, #92]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d009      	beq.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a12      	ldr	r2, [pc, #72]	; (800b584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d004      	beq.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a13      	ldr	r2, [pc, #76]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d10c      	bne.n	800b562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b54e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	4313      	orrs	r3, r2
 800b558:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	40012c00 	.word	0x40012c00
 800b584:	40013400 	.word	0x40013400
 800b588:	40000400 	.word	0x40000400
 800b58c:	40000800 	.word	0x40000800
 800b590:	40014000 	.word	0x40014000

0800b594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d101      	bne.n	800b5b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	e065      	b.n	800b67c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	4313      	orrs	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	041b      	lsls	r3, r3, #16
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a16      	ldr	r2, [pc, #88]	; (800b688 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d004      	beq.n	800b63e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a14      	ldr	r2, [pc, #80]	; (800b68c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d115      	bne.n	800b66a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	051b      	lsls	r3, r3, #20
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40012c00 	.word	0x40012c00
 800b68c:	40013400 	.word	0x40013400

0800b690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	2204      	movs	r2, #4
 800b6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a1a      	ldr	r2, [r3, #32]
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	401a      	ands	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a1a      	ldr	r2, [r3, #32]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	fa01 f303 	lsl.w	r3, r1, r3
 800b704:	431a      	orrs	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	621a      	str	r2, [r3, #32]
}
 800b70a:	bf00      	nop
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	e040      	b.n	800b7aa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7f7 f83b 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2224      	movs	r2, #36	; 0x24
 800b742:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0201 	bic.w	r2, r2, #1
 800b752:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fb29 	bl	800bdac <UART_SetConfig>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d101      	bne.n	800b764 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e022      	b.n	800b7aa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fcf1 	bl	800c154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f042 0201 	orr.w	r2, r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fd78 	bl	800c298 <UART_CheckIdleState>
 800b7a8:	4603      	mov	r3, r0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b0ba      	sub	sp, #232	; 0xe8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b7da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b7de:	f640 030f 	movw	r3, #2063	; 0x80f
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b7e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d115      	bne.n	800b81c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00f      	beq.n	800b81c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b00      	cmp	r3, #0
 800b806:	d009      	beq.n	800b81c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 82ab 	beq.w	800bd68 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
      }
      return;
 800b81a:	e2a5      	b.n	800bd68 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b81c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 8117 	beq.w	800ba54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d106      	bne.n	800b840 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b836:	4b85      	ldr	r3, [pc, #532]	; (800ba4c <HAL_UART_IRQHandler+0x298>)
 800b838:	4013      	ands	r3, r2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 810a 	beq.w	800ba54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d011      	beq.n	800b870 <HAL_UART_IRQHandler+0xbc>
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2201      	movs	r2, #1
 800b85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b866:	f043 0201 	orr.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d011      	beq.n	800b8a0 <HAL_UART_IRQHandler+0xec>
 800b87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2202      	movs	r2, #2
 800b88e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b896:	f043 0204 	orr.w	r2, r3, #4
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d011      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x11c>
 800b8ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00b      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2204      	movs	r2, #4
 800b8be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c6:	f043 0202 	orr.w	r2, r3, #2
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d4:	f003 0308 	and.w	r3, r3, #8
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d017      	beq.n	800b90c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8e0:	f003 0320 	and.w	r3, r3, #32
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d105      	bne.n	800b8f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2208      	movs	r2, #8
 800b8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b902:	f043 0208 	orr.w	r2, r3, #8
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b914:	2b00      	cmp	r3, #0
 800b916:	d012      	beq.n	800b93e <HAL_UART_IRQHandler+0x18a>
 800b918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b91c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00c      	beq.n	800b93e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b92c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b934:	f043 0220 	orr.w	r2, r3, #32
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8211 	beq.w	800bd6c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b94e:	f003 0320 	and.w	r3, r3, #32
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b95a:	f003 0320 	and.w	r3, r3, #32
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d007      	beq.n	800b972 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b986:	2b40      	cmp	r3, #64	; 0x40
 800b988:	d005      	beq.n	800b996 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b98a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b98e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b992:	2b00      	cmp	r3, #0
 800b994:	d04f      	beq.n	800ba36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fd8d 	bl	800c4b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b40      	cmp	r3, #64	; 0x40
 800b9a8:	d141      	bne.n	800ba2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1d9      	bne.n	800b9aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d013      	beq.n	800ba26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba02:	4a13      	ldr	r2, [pc, #76]	; (800ba50 <HAL_UART_IRQHandler+0x29c>)
 800ba04:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f9 fab4 	bl	8004f78 <HAL_DMA_Abort_IT>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d017      	beq.n	800ba46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ba20:	4610      	mov	r0, r2
 800ba22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba24:	e00f      	b.n	800ba46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f9aa 	bl	800bd80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba2c:	e00b      	b.n	800ba46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9a6 	bl	800bd80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba34:	e007      	b.n	800ba46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f9a2 	bl	800bd80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ba44:	e192      	b.n	800bd6c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba46:	bf00      	nop
    return;
 800ba48:	e190      	b.n	800bd6c <HAL_UART_IRQHandler+0x5b8>
 800ba4a:	bf00      	nop
 800ba4c:	04000120 	.word	0x04000120
 800ba50:	0800c57f 	.word	0x0800c57f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	f040 814b 	bne.w	800bcf4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba62:	f003 0310 	and.w	r3, r3, #16
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 8144 	beq.w	800bcf4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 813d 	beq.w	800bcf4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2210      	movs	r2, #16
 800ba80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8c:	2b40      	cmp	r3, #64	; 0x40
 800ba8e:	f040 80b5 	bne.w	800bbfc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 8164 	beq.w	800bd70 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800baae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bab2:	429a      	cmp	r2, r3
 800bab4:	f080 815c 	bcs.w	800bd70 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800babe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	2b20      	cmp	r3, #32
 800baca:	f000 8086 	beq.w	800bbda <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800baf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bafc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb08:	e841 2300 	strex	r3, r2, [r1]
 800bb0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1da      	bne.n	800bace <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb2a:	f023 0301 	bic.w	r3, r3, #1
 800bb2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e1      	bne.n	800bb18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3308      	adds	r3, #8
 800bb5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3308      	adds	r3, #8
 800bb74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb78:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb80:	e841 2300 	strex	r3, r2, [r1]
 800bb84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e3      	bne.n	800bb54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2220      	movs	r2, #32
 800bb90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbaa:	f023 0310 	bic.w	r3, r3, #16
 800bbae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bbbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbc4:	e841 2300 	strex	r3, r2, [r1]
 800bbc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e4      	bne.n	800bb9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7f9 f996 	bl	8004f06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2202      	movs	r2, #2
 800bbde:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f8cd 	bl	800bd94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbfa:	e0b9      	b.n	800bd70 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 80ab 	beq.w	800bd74 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800bc1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 80a6 	beq.w	800bd74 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc4a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e4      	bne.n	800bc28 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3308      	adds	r3, #8
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	f023 0301 	bic.w	r3, r3, #1
 800bc74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc82:	633a      	str	r2, [r7, #48]	; 0x30
 800bc84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e3      	bne.n	800bc5e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 0310 	bic.w	r3, r3, #16
 800bcbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	69b9      	ldr	r1, [r7, #24]
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e4      	bne.n	800bcaa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bce6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f851 	bl	800bd94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcf2:	e03f      	b.n	800bd74 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <HAL_UART_IRQHandler+0x56a>
 800bd00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d008      	beq.n	800bd1e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fc71 	bl	800c5fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1c:	e02d      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00e      	beq.n	800bd48 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bd2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d01c      	beq.n	800bd78 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
    }
    return;
 800bd46:	e017      	b.n	800bd78 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d012      	beq.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
 800bd54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00c      	beq.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fc22 	bl	800c5aa <UART_EndTransmit_IT>
    return;
 800bd66:	e008      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
      return;
 800bd68:	bf00      	nop
 800bd6a:	e006      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
    return;
 800bd6c:	bf00      	nop
 800bd6e:	e004      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
      return;
 800bd70:	bf00      	nop
 800bd72:	e002      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
      return;
 800bd74:	bf00      	nop
 800bd76:	e000      	b.n	800bd7a <HAL_UART_IRQHandler+0x5c6>
    return;
 800bd78:	bf00      	nop
  }

}
 800bd7a:	37e8      	adds	r7, #232	; 0xe8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bdda:	f023 030c 	bic.w	r3, r3, #12
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	6979      	ldr	r1, [r7, #20]
 800bde4:	430b      	orrs	r3, r1
 800bde6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	430a      	orrs	r2, r1
 800be20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4aa7      	ldr	r2, [pc, #668]	; (800c0c4 <UART_SetConfig+0x318>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d120      	bne.n	800be6e <UART_SetConfig+0xc2>
 800be2c:	4ba6      	ldr	r3, [pc, #664]	; (800c0c8 <UART_SetConfig+0x31c>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	f003 0303 	and.w	r3, r3, #3
 800be34:	2b03      	cmp	r3, #3
 800be36:	d817      	bhi.n	800be68 <UART_SetConfig+0xbc>
 800be38:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <UART_SetConfig+0x94>)
 800be3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3e:	bf00      	nop
 800be40:	0800be51 	.word	0x0800be51
 800be44:	0800be5d 	.word	0x0800be5d
 800be48:	0800be63 	.word	0x0800be63
 800be4c:	0800be57 	.word	0x0800be57
 800be50:	2301      	movs	r3, #1
 800be52:	77fb      	strb	r3, [r7, #31]
 800be54:	e0b5      	b.n	800bfc2 <UART_SetConfig+0x216>
 800be56:	2302      	movs	r3, #2
 800be58:	77fb      	strb	r3, [r7, #31]
 800be5a:	e0b2      	b.n	800bfc2 <UART_SetConfig+0x216>
 800be5c:	2304      	movs	r3, #4
 800be5e:	77fb      	strb	r3, [r7, #31]
 800be60:	e0af      	b.n	800bfc2 <UART_SetConfig+0x216>
 800be62:	2308      	movs	r3, #8
 800be64:	77fb      	strb	r3, [r7, #31]
 800be66:	e0ac      	b.n	800bfc2 <UART_SetConfig+0x216>
 800be68:	2310      	movs	r3, #16
 800be6a:	77fb      	strb	r3, [r7, #31]
 800be6c:	e0a9      	b.n	800bfc2 <UART_SetConfig+0x216>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a96      	ldr	r2, [pc, #600]	; (800c0cc <UART_SetConfig+0x320>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d124      	bne.n	800bec2 <UART_SetConfig+0x116>
 800be78:	4b93      	ldr	r3, [pc, #588]	; (800c0c8 <UART_SetConfig+0x31c>)
 800be7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be84:	d011      	beq.n	800beaa <UART_SetConfig+0xfe>
 800be86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be8a:	d817      	bhi.n	800bebc <UART_SetConfig+0x110>
 800be8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be90:	d011      	beq.n	800beb6 <UART_SetConfig+0x10a>
 800be92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be96:	d811      	bhi.n	800bebc <UART_SetConfig+0x110>
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <UART_SetConfig+0xf8>
 800be9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea0:	d006      	beq.n	800beb0 <UART_SetConfig+0x104>
 800bea2:	e00b      	b.n	800bebc <UART_SetConfig+0x110>
 800bea4:	2300      	movs	r3, #0
 800bea6:	77fb      	strb	r3, [r7, #31]
 800bea8:	e08b      	b.n	800bfc2 <UART_SetConfig+0x216>
 800beaa:	2302      	movs	r3, #2
 800beac:	77fb      	strb	r3, [r7, #31]
 800beae:	e088      	b.n	800bfc2 <UART_SetConfig+0x216>
 800beb0:	2304      	movs	r3, #4
 800beb2:	77fb      	strb	r3, [r7, #31]
 800beb4:	e085      	b.n	800bfc2 <UART_SetConfig+0x216>
 800beb6:	2308      	movs	r3, #8
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	e082      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bebc:	2310      	movs	r3, #16
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e07f      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a82      	ldr	r2, [pc, #520]	; (800c0d0 <UART_SetConfig+0x324>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d124      	bne.n	800bf16 <UART_SetConfig+0x16a>
 800becc:	4b7e      	ldr	r3, [pc, #504]	; (800c0c8 <UART_SetConfig+0x31c>)
 800bece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bed4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bed8:	d011      	beq.n	800befe <UART_SetConfig+0x152>
 800beda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bede:	d817      	bhi.n	800bf10 <UART_SetConfig+0x164>
 800bee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bee4:	d011      	beq.n	800bf0a <UART_SetConfig+0x15e>
 800bee6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800beea:	d811      	bhi.n	800bf10 <UART_SetConfig+0x164>
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <UART_SetConfig+0x14c>
 800bef0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bef4:	d006      	beq.n	800bf04 <UART_SetConfig+0x158>
 800bef6:	e00b      	b.n	800bf10 <UART_SetConfig+0x164>
 800bef8:	2300      	movs	r3, #0
 800befa:	77fb      	strb	r3, [r7, #31]
 800befc:	e061      	b.n	800bfc2 <UART_SetConfig+0x216>
 800befe:	2302      	movs	r3, #2
 800bf00:	77fb      	strb	r3, [r7, #31]
 800bf02:	e05e      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf04:	2304      	movs	r3, #4
 800bf06:	77fb      	strb	r3, [r7, #31]
 800bf08:	e05b      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf0a:	2308      	movs	r3, #8
 800bf0c:	77fb      	strb	r3, [r7, #31]
 800bf0e:	e058      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf10:	2310      	movs	r3, #16
 800bf12:	77fb      	strb	r3, [r7, #31]
 800bf14:	e055      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a6e      	ldr	r2, [pc, #440]	; (800c0d4 <UART_SetConfig+0x328>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d124      	bne.n	800bf6a <UART_SetConfig+0x1be>
 800bf20:	4b69      	ldr	r3, [pc, #420]	; (800c0c8 <UART_SetConfig+0x31c>)
 800bf22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bf28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf2c:	d011      	beq.n	800bf52 <UART_SetConfig+0x1a6>
 800bf2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf32:	d817      	bhi.n	800bf64 <UART_SetConfig+0x1b8>
 800bf34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf38:	d011      	beq.n	800bf5e <UART_SetConfig+0x1b2>
 800bf3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf3e:	d811      	bhi.n	800bf64 <UART_SetConfig+0x1b8>
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <UART_SetConfig+0x1a0>
 800bf44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf48:	d006      	beq.n	800bf58 <UART_SetConfig+0x1ac>
 800bf4a:	e00b      	b.n	800bf64 <UART_SetConfig+0x1b8>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	77fb      	strb	r3, [r7, #31]
 800bf50:	e037      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf52:	2302      	movs	r3, #2
 800bf54:	77fb      	strb	r3, [r7, #31]
 800bf56:	e034      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf58:	2304      	movs	r3, #4
 800bf5a:	77fb      	strb	r3, [r7, #31]
 800bf5c:	e031      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf5e:	2308      	movs	r3, #8
 800bf60:	77fb      	strb	r3, [r7, #31]
 800bf62:	e02e      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf64:	2310      	movs	r3, #16
 800bf66:	77fb      	strb	r3, [r7, #31]
 800bf68:	e02b      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a5a      	ldr	r2, [pc, #360]	; (800c0d8 <UART_SetConfig+0x32c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d124      	bne.n	800bfbe <UART_SetConfig+0x212>
 800bf74:	4b54      	ldr	r3, [pc, #336]	; (800c0c8 <UART_SetConfig+0x31c>)
 800bf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bf7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bf80:	d011      	beq.n	800bfa6 <UART_SetConfig+0x1fa>
 800bf82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bf86:	d817      	bhi.n	800bfb8 <UART_SetConfig+0x20c>
 800bf88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf8c:	d011      	beq.n	800bfb2 <UART_SetConfig+0x206>
 800bf8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf92:	d811      	bhi.n	800bfb8 <UART_SetConfig+0x20c>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <UART_SetConfig+0x1f4>
 800bf98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf9c:	d006      	beq.n	800bfac <UART_SetConfig+0x200>
 800bf9e:	e00b      	b.n	800bfb8 <UART_SetConfig+0x20c>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	77fb      	strb	r3, [r7, #31]
 800bfa4:	e00d      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	77fb      	strb	r3, [r7, #31]
 800bfaa:	e00a      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bfac:	2304      	movs	r3, #4
 800bfae:	77fb      	strb	r3, [r7, #31]
 800bfb0:	e007      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bfb2:	2308      	movs	r3, #8
 800bfb4:	77fb      	strb	r3, [r7, #31]
 800bfb6:	e004      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bfb8:	2310      	movs	r3, #16
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	e001      	b.n	800bfc2 <UART_SetConfig+0x216>
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfca:	d15b      	bne.n	800c084 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800bfcc:	7ffb      	ldrb	r3, [r7, #31]
 800bfce:	2b08      	cmp	r3, #8
 800bfd0:	d827      	bhi.n	800c022 <UART_SetConfig+0x276>
 800bfd2:	a201      	add	r2, pc, #4	; (adr r2, 800bfd8 <UART_SetConfig+0x22c>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800bffd 	.word	0x0800bffd
 800bfdc:	0800c005 	.word	0x0800c005
 800bfe0:	0800c00d 	.word	0x0800c00d
 800bfe4:	0800c023 	.word	0x0800c023
 800bfe8:	0800c013 	.word	0x0800c013
 800bfec:	0800c023 	.word	0x0800c023
 800bff0:	0800c023 	.word	0x0800c023
 800bff4:	0800c023 	.word	0x0800c023
 800bff8:	0800c01b 	.word	0x0800c01b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bffc:	f7fc fefc 	bl	8008df8 <HAL_RCC_GetPCLK1Freq>
 800c000:	61b8      	str	r0, [r7, #24]
        break;
 800c002:	e013      	b.n	800c02c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c004:	f7fc ff1a 	bl	8008e3c <HAL_RCC_GetPCLK2Freq>
 800c008:	61b8      	str	r0, [r7, #24]
        break;
 800c00a:	e00f      	b.n	800c02c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c00c:	4b33      	ldr	r3, [pc, #204]	; (800c0dc <UART_SetConfig+0x330>)
 800c00e:	61bb      	str	r3, [r7, #24]
        break;
 800c010:	e00c      	b.n	800c02c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c012:	f7fc fe7b 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 800c016:	61b8      	str	r0, [r7, #24]
        break;
 800c018:	e008      	b.n	800c02c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c01e:	61bb      	str	r3, [r7, #24]
        break;
 800c020:	e004      	b.n	800c02c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800c022:	2300      	movs	r3, #0
 800c024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	77bb      	strb	r3, [r7, #30]
        break;
 800c02a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 8082 	beq.w	800c138 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	005a      	lsls	r2, r3, #1
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	441a      	add	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	fbb2 f3f3 	udiv	r3, r2, r3
 800c048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b0f      	cmp	r3, #15
 800c04e:	d916      	bls.n	800c07e <UART_SetConfig+0x2d2>
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c056:	d212      	bcs.n	800c07e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	f023 030f 	bic.w	r3, r3, #15
 800c060:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	085b      	lsrs	r3, r3, #1
 800c066:	b29b      	uxth	r3, r3
 800c068:	f003 0307 	and.w	r3, r3, #7
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	89fb      	ldrh	r3, [r7, #14]
 800c070:	4313      	orrs	r3, r2
 800c072:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	89fa      	ldrh	r2, [r7, #14]
 800c07a:	60da      	str	r2, [r3, #12]
 800c07c:	e05c      	b.n	800c138 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	77bb      	strb	r3, [r7, #30]
 800c082:	e059      	b.n	800c138 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c084:	7ffb      	ldrb	r3, [r7, #31]
 800c086:	2b08      	cmp	r3, #8
 800c088:	d835      	bhi.n	800c0f6 <UART_SetConfig+0x34a>
 800c08a:	a201      	add	r2, pc, #4	; (adr r2, 800c090 <UART_SetConfig+0x2e4>)
 800c08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c090:	0800c0b5 	.word	0x0800c0b5
 800c094:	0800c0bd 	.word	0x0800c0bd
 800c098:	0800c0e1 	.word	0x0800c0e1
 800c09c:	0800c0f7 	.word	0x0800c0f7
 800c0a0:	0800c0e7 	.word	0x0800c0e7
 800c0a4:	0800c0f7 	.word	0x0800c0f7
 800c0a8:	0800c0f7 	.word	0x0800c0f7
 800c0ac:	0800c0f7 	.word	0x0800c0f7
 800c0b0:	0800c0ef 	.word	0x0800c0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0b4:	f7fc fea0 	bl	8008df8 <HAL_RCC_GetPCLK1Freq>
 800c0b8:	61b8      	str	r0, [r7, #24]
        break;
 800c0ba:	e021      	b.n	800c100 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0bc:	f7fc febe 	bl	8008e3c <HAL_RCC_GetPCLK2Freq>
 800c0c0:	61b8      	str	r0, [r7, #24]
        break;
 800c0c2:	e01d      	b.n	800c100 <UART_SetConfig+0x354>
 800c0c4:	40013800 	.word	0x40013800
 800c0c8:	40021000 	.word	0x40021000
 800c0cc:	40004400 	.word	0x40004400
 800c0d0:	40004800 	.word	0x40004800
 800c0d4:	40004c00 	.word	0x40004c00
 800c0d8:	40005000 	.word	0x40005000
 800c0dc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0e0:	4b1b      	ldr	r3, [pc, #108]	; (800c150 <UART_SetConfig+0x3a4>)
 800c0e2:	61bb      	str	r3, [r7, #24]
        break;
 800c0e4:	e00c      	b.n	800c100 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0e6:	f7fc fe11 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 800c0ea:	61b8      	str	r0, [r7, #24]
        break;
 800c0ec:	e008      	b.n	800c100 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f2:	61bb      	str	r3, [r7, #24]
        break;
 800c0f4:	e004      	b.n	800c100 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	77bb      	strb	r3, [r7, #30]
        break;
 800c0fe:	bf00      	nop
    }

    if (pclk != 0U)
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d018      	beq.n	800c138 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	085a      	lsrs	r2, r3, #1
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	441a      	add	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	fbb2 f3f3 	udiv	r3, r2, r3
 800c118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b0f      	cmp	r3, #15
 800c11e:	d909      	bls.n	800c134 <UART_SetConfig+0x388>
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c126:	d205      	bcs.n	800c134 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	e001      	b.n	800c138 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c144:	7fbb      	ldrb	r3, [r7, #30]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	007a1200 	.word	0x007a1200

0800c154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	f003 0302 	and.w	r3, r3, #2
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00a      	beq.n	800c1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	f003 0308 	and.w	r3, r3, #8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	f003 0310 	and.w	r3, r3, #16
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00a      	beq.n	800c206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20a:	f003 0320 	and.w	r3, r3, #32
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01a      	beq.n	800c26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c252:	d10a      	bne.n	800c26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	605a      	str	r2, [r3, #4]
  }
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b098      	sub	sp, #96	; 0x60
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2a8:	f7f6 fcf8 	bl	8002c9c <HAL_GetTick>
 800c2ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	d12e      	bne.n	800c31a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f88c 	bl	800c3e8 <UART_WaitOnFlagUntilTimeout>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d021      	beq.n	800c31a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2ea:	653b      	str	r3, [r7, #80]	; 0x50
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c2f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e6      	bne.n	800c2d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2220      	movs	r2, #32
 800c30c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e062      	b.n	800c3e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b04      	cmp	r3, #4
 800c326:	d149      	bne.n	800c3bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c330:	2200      	movs	r2, #0
 800c332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f856 	bl	800c3e8 <UART_WaitOnFlagUntilTimeout>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d03c      	beq.n	800c3bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	623b      	str	r3, [r7, #32]
   return(result);
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c356:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c360:	633b      	str	r3, [r7, #48]	; 0x30
 800c362:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e6      	bne.n	800c342 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3308      	adds	r3, #8
 800c37a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	e853 3f00 	ldrex	r3, [r3]
 800c382:	60fb      	str	r3, [r7, #12]
   return(result);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f023 0301 	bic.w	r3, r3, #1
 800c38a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	3308      	adds	r3, #8
 800c392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c394:	61fa      	str	r2, [r7, #28]
 800c396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c398:	69b9      	ldr	r1, [r7, #24]
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	e841 2300 	strex	r3, r2, [r1]
 800c3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1e5      	bne.n	800c374 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2220      	movs	r2, #32
 800c3ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	e011      	b.n	800c3e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3758      	adds	r7, #88	; 0x58
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3f8:	e049      	b.n	800c48e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c400:	d045      	beq.n	800c48e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c402:	f7f6 fc4b 	bl	8002c9c <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	69ba      	ldr	r2, [r7, #24]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d302      	bcc.n	800c418 <UART_WaitOnFlagUntilTimeout+0x30>
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	e048      	b.n	800c4ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	d031      	beq.n	800c48e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	f003 0308 	and.w	r3, r3, #8
 800c434:	2b08      	cmp	r3, #8
 800c436:	d110      	bne.n	800c45a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2208      	movs	r2, #8
 800c43e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f838 	bl	800c4b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2208      	movs	r2, #8
 800c44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e029      	b.n	800c4ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69db      	ldr	r3, [r3, #28]
 800c460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c468:	d111      	bne.n	800c48e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f000 f81e 	bl	800c4b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2220      	movs	r2, #32
 800c47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e00f      	b.n	800c4ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	69da      	ldr	r2, [r3, #28]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	4013      	ands	r3, r2
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	bf0c      	ite	eq
 800c49e:	2301      	moveq	r3, #1
 800c4a0:	2300      	movne	r3, #0
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d0a6      	beq.n	800c3fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b095      	sub	sp, #84	; 0x54
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c4de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e6      	bne.n	800c4be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f023 0301 	bic.w	r3, r3, #1
 800c506:	64bb      	str	r3, [r7, #72]	; 0x48
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3308      	adds	r3, #8
 800c50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e5      	bne.n	800c4f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d118      	bne.n	800c55e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	60bb      	str	r3, [r7, #8]
   return(result);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f023 0310 	bic.w	r3, r3, #16
 800c540:	647b      	str	r3, [r7, #68]	; 0x44
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54a:	61bb      	str	r3, [r7, #24]
 800c54c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54e:	6979      	ldr	r1, [r7, #20]
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	613b      	str	r3, [r7, #16]
   return(result);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e6      	bne.n	800c52c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c572:	bf00      	nop
 800c574:	3754      	adds	r7, #84	; 0x54
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fbef 	bl	800bd80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5a2:	bf00      	nop
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b088      	sub	sp, #32
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	61bb      	str	r3, [r7, #24]
 800c5d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d4:	6979      	ldr	r1, [r7, #20]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	e841 2300 	strex	r3, r2, [r1]
 800c5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e6      	bne.n	800c5b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7f5 fd7b 	bl	80020ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5f6:	bf00      	nop
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <__errno>:
 800c614:	4b01      	ldr	r3, [pc, #4]	; (800c61c <__errno+0x8>)
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20000018 	.word	0x20000018

0800c620 <__libc_init_array>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4d0d      	ldr	r5, [pc, #52]	; (800c658 <__libc_init_array+0x38>)
 800c624:	4c0d      	ldr	r4, [pc, #52]	; (800c65c <__libc_init_array+0x3c>)
 800c626:	1b64      	subs	r4, r4, r5
 800c628:	10a4      	asrs	r4, r4, #2
 800c62a:	2600      	movs	r6, #0
 800c62c:	42a6      	cmp	r6, r4
 800c62e:	d109      	bne.n	800c644 <__libc_init_array+0x24>
 800c630:	4d0b      	ldr	r5, [pc, #44]	; (800c660 <__libc_init_array+0x40>)
 800c632:	4c0c      	ldr	r4, [pc, #48]	; (800c664 <__libc_init_array+0x44>)
 800c634:	f000 fc8e 	bl	800cf54 <_init>
 800c638:	1b64      	subs	r4, r4, r5
 800c63a:	10a4      	asrs	r4, r4, #2
 800c63c:	2600      	movs	r6, #0
 800c63e:	42a6      	cmp	r6, r4
 800c640:	d105      	bne.n	800c64e <__libc_init_array+0x2e>
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	f855 3b04 	ldr.w	r3, [r5], #4
 800c648:	4798      	blx	r3
 800c64a:	3601      	adds	r6, #1
 800c64c:	e7ee      	b.n	800c62c <__libc_init_array+0xc>
 800c64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c652:	4798      	blx	r3
 800c654:	3601      	adds	r6, #1
 800c656:	e7f2      	b.n	800c63e <__libc_init_array+0x1e>
 800c658:	0800d074 	.word	0x0800d074
 800c65c:	0800d074 	.word	0x0800d074
 800c660:	0800d074 	.word	0x0800d074
 800c664:	0800d078 	.word	0x0800d078

0800c668 <memset>:
 800c668:	4402      	add	r2, r0
 800c66a:	4603      	mov	r3, r0
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d100      	bne.n	800c672 <memset+0xa>
 800c670:	4770      	bx	lr
 800c672:	f803 1b01 	strb.w	r1, [r3], #1
 800c676:	e7f9      	b.n	800c66c <memset+0x4>

0800c678 <siprintf>:
 800c678:	b40e      	push	{r1, r2, r3}
 800c67a:	b500      	push	{lr}
 800c67c:	b09c      	sub	sp, #112	; 0x70
 800c67e:	ab1d      	add	r3, sp, #116	; 0x74
 800c680:	9002      	str	r0, [sp, #8]
 800c682:	9006      	str	r0, [sp, #24]
 800c684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c688:	4809      	ldr	r0, [pc, #36]	; (800c6b0 <siprintf+0x38>)
 800c68a:	9107      	str	r1, [sp, #28]
 800c68c:	9104      	str	r1, [sp, #16]
 800c68e:	4909      	ldr	r1, [pc, #36]	; (800c6b4 <siprintf+0x3c>)
 800c690:	f853 2b04 	ldr.w	r2, [r3], #4
 800c694:	9105      	str	r1, [sp, #20]
 800c696:	6800      	ldr	r0, [r0, #0]
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	a902      	add	r1, sp, #8
 800c69c:	f000 f868 	bl	800c770 <_svfiprintf_r>
 800c6a0:	9b02      	ldr	r3, [sp, #8]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	b01c      	add	sp, #112	; 0x70
 800c6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6ac:	b003      	add	sp, #12
 800c6ae:	4770      	bx	lr
 800c6b0:	20000018 	.word	0x20000018
 800c6b4:	ffff0208 	.word	0xffff0208

0800c6b8 <__ssputs_r>:
 800c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6bc:	688e      	ldr	r6, [r1, #8]
 800c6be:	429e      	cmp	r6, r3
 800c6c0:	4682      	mov	sl, r0
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	4690      	mov	r8, r2
 800c6c6:	461f      	mov	r7, r3
 800c6c8:	d838      	bhi.n	800c73c <__ssputs_r+0x84>
 800c6ca:	898a      	ldrh	r2, [r1, #12]
 800c6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6d0:	d032      	beq.n	800c738 <__ssputs_r+0x80>
 800c6d2:	6825      	ldr	r5, [r4, #0]
 800c6d4:	6909      	ldr	r1, [r1, #16]
 800c6d6:	eba5 0901 	sub.w	r9, r5, r1
 800c6da:	6965      	ldr	r5, [r4, #20]
 800c6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	444b      	add	r3, r9
 800c6e8:	106d      	asrs	r5, r5, #1
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	bf38      	it	cc
 800c6ee:	461d      	movcc	r5, r3
 800c6f0:	0553      	lsls	r3, r2, #21
 800c6f2:	d531      	bpl.n	800c758 <__ssputs_r+0xa0>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f000 fb63 	bl	800cdc0 <_malloc_r>
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	b950      	cbnz	r0, 800c714 <__ssputs_r+0x5c>
 800c6fe:	230c      	movs	r3, #12
 800c700:	f8ca 3000 	str.w	r3, [sl]
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c714:	6921      	ldr	r1, [r4, #16]
 800c716:	464a      	mov	r2, r9
 800c718:	f000 fabe 	bl	800cc98 <memcpy>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	6126      	str	r6, [r4, #16]
 800c72a:	6165      	str	r5, [r4, #20]
 800c72c:	444e      	add	r6, r9
 800c72e:	eba5 0509 	sub.w	r5, r5, r9
 800c732:	6026      	str	r6, [r4, #0]
 800c734:	60a5      	str	r5, [r4, #8]
 800c736:	463e      	mov	r6, r7
 800c738:	42be      	cmp	r6, r7
 800c73a:	d900      	bls.n	800c73e <__ssputs_r+0x86>
 800c73c:	463e      	mov	r6, r7
 800c73e:	6820      	ldr	r0, [r4, #0]
 800c740:	4632      	mov	r2, r6
 800c742:	4641      	mov	r1, r8
 800c744:	f000 fab6 	bl	800ccb4 <memmove>
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	1b9b      	subs	r3, r3, r6
 800c74c:	60a3      	str	r3, [r4, #8]
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	4433      	add	r3, r6
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	2000      	movs	r0, #0
 800c756:	e7db      	b.n	800c710 <__ssputs_r+0x58>
 800c758:	462a      	mov	r2, r5
 800c75a:	f000 fba5 	bl	800cea8 <_realloc_r>
 800c75e:	4606      	mov	r6, r0
 800c760:	2800      	cmp	r0, #0
 800c762:	d1e1      	bne.n	800c728 <__ssputs_r+0x70>
 800c764:	6921      	ldr	r1, [r4, #16]
 800c766:	4650      	mov	r0, sl
 800c768:	f000 fabe 	bl	800cce8 <_free_r>
 800c76c:	e7c7      	b.n	800c6fe <__ssputs_r+0x46>
	...

0800c770 <_svfiprintf_r>:
 800c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	4698      	mov	r8, r3
 800c776:	898b      	ldrh	r3, [r1, #12]
 800c778:	061b      	lsls	r3, r3, #24
 800c77a:	b09d      	sub	sp, #116	; 0x74
 800c77c:	4607      	mov	r7, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	4614      	mov	r4, r2
 800c782:	d50e      	bpl.n	800c7a2 <_svfiprintf_r+0x32>
 800c784:	690b      	ldr	r3, [r1, #16]
 800c786:	b963      	cbnz	r3, 800c7a2 <_svfiprintf_r+0x32>
 800c788:	2140      	movs	r1, #64	; 0x40
 800c78a:	f000 fb19 	bl	800cdc0 <_malloc_r>
 800c78e:	6028      	str	r0, [r5, #0]
 800c790:	6128      	str	r0, [r5, #16]
 800c792:	b920      	cbnz	r0, 800c79e <_svfiprintf_r+0x2e>
 800c794:	230c      	movs	r3, #12
 800c796:	603b      	str	r3, [r7, #0]
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e0d1      	b.n	800c942 <_svfiprintf_r+0x1d2>
 800c79e:	2340      	movs	r3, #64	; 0x40
 800c7a0:	616b      	str	r3, [r5, #20]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a6:	2320      	movs	r3, #32
 800c7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b0:	2330      	movs	r3, #48	; 0x30
 800c7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c95c <_svfiprintf_r+0x1ec>
 800c7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7ba:	f04f 0901 	mov.w	r9, #1
 800c7be:	4623      	mov	r3, r4
 800c7c0:	469a      	mov	sl, r3
 800c7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7c6:	b10a      	cbz	r2, 800c7cc <_svfiprintf_r+0x5c>
 800c7c8:	2a25      	cmp	r2, #37	; 0x25
 800c7ca:	d1f9      	bne.n	800c7c0 <_svfiprintf_r+0x50>
 800c7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d0:	d00b      	beq.n	800c7ea <_svfiprintf_r+0x7a>
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f7ff ff6d 	bl	800c6b8 <__ssputs_r>
 800c7de:	3001      	adds	r0, #1
 800c7e0:	f000 80aa 	beq.w	800c938 <_svfiprintf_r+0x1c8>
 800c7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e6:	445a      	add	r2, fp
 800c7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 80a2 	beq.w	800c938 <_svfiprintf_r+0x1c8>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7fe:	f10a 0a01 	add.w	sl, sl, #1
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	9307      	str	r3, [sp, #28]
 800c806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c80a:	931a      	str	r3, [sp, #104]	; 0x68
 800c80c:	4654      	mov	r4, sl
 800c80e:	2205      	movs	r2, #5
 800c810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c814:	4851      	ldr	r0, [pc, #324]	; (800c95c <_svfiprintf_r+0x1ec>)
 800c816:	f7f3 fcdb 	bl	80001d0 <memchr>
 800c81a:	9a04      	ldr	r2, [sp, #16]
 800c81c:	b9d8      	cbnz	r0, 800c856 <_svfiprintf_r+0xe6>
 800c81e:	06d0      	lsls	r0, r2, #27
 800c820:	bf44      	itt	mi
 800c822:	2320      	movmi	r3, #32
 800c824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c828:	0711      	lsls	r1, r2, #28
 800c82a:	bf44      	itt	mi
 800c82c:	232b      	movmi	r3, #43	; 0x2b
 800c82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c832:	f89a 3000 	ldrb.w	r3, [sl]
 800c836:	2b2a      	cmp	r3, #42	; 0x2a
 800c838:	d015      	beq.n	800c866 <_svfiprintf_r+0xf6>
 800c83a:	9a07      	ldr	r2, [sp, #28]
 800c83c:	4654      	mov	r4, sl
 800c83e:	2000      	movs	r0, #0
 800c840:	f04f 0c0a 	mov.w	ip, #10
 800c844:	4621      	mov	r1, r4
 800c846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c84a:	3b30      	subs	r3, #48	; 0x30
 800c84c:	2b09      	cmp	r3, #9
 800c84e:	d94e      	bls.n	800c8ee <_svfiprintf_r+0x17e>
 800c850:	b1b0      	cbz	r0, 800c880 <_svfiprintf_r+0x110>
 800c852:	9207      	str	r2, [sp, #28]
 800c854:	e014      	b.n	800c880 <_svfiprintf_r+0x110>
 800c856:	eba0 0308 	sub.w	r3, r0, r8
 800c85a:	fa09 f303 	lsl.w	r3, r9, r3
 800c85e:	4313      	orrs	r3, r2
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	46a2      	mov	sl, r4
 800c864:	e7d2      	b.n	800c80c <_svfiprintf_r+0x9c>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	1d19      	adds	r1, r3, #4
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	9103      	str	r1, [sp, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfbb      	ittet	lt
 800c872:	425b      	neglt	r3, r3
 800c874:	f042 0202 	orrlt.w	r2, r2, #2
 800c878:	9307      	strge	r3, [sp, #28]
 800c87a:	9307      	strlt	r3, [sp, #28]
 800c87c:	bfb8      	it	lt
 800c87e:	9204      	strlt	r2, [sp, #16]
 800c880:	7823      	ldrb	r3, [r4, #0]
 800c882:	2b2e      	cmp	r3, #46	; 0x2e
 800c884:	d10c      	bne.n	800c8a0 <_svfiprintf_r+0x130>
 800c886:	7863      	ldrb	r3, [r4, #1]
 800c888:	2b2a      	cmp	r3, #42	; 0x2a
 800c88a:	d135      	bne.n	800c8f8 <_svfiprintf_r+0x188>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	1d1a      	adds	r2, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	9203      	str	r2, [sp, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfb8      	it	lt
 800c898:	f04f 33ff 	movlt.w	r3, #4294967295
 800c89c:	3402      	adds	r4, #2
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c96c <_svfiprintf_r+0x1fc>
 800c8a4:	7821      	ldrb	r1, [r4, #0]
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	4650      	mov	r0, sl
 800c8aa:	f7f3 fc91 	bl	80001d0 <memchr>
 800c8ae:	b140      	cbz	r0, 800c8c2 <_svfiprintf_r+0x152>
 800c8b0:	2340      	movs	r3, #64	; 0x40
 800c8b2:	eba0 000a 	sub.w	r0, r0, sl
 800c8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	4303      	orrs	r3, r0
 800c8be:	3401      	adds	r4, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c6:	4826      	ldr	r0, [pc, #152]	; (800c960 <_svfiprintf_r+0x1f0>)
 800c8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	f7f3 fc7f 	bl	80001d0 <memchr>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d038      	beq.n	800c948 <_svfiprintf_r+0x1d8>
 800c8d6:	4b23      	ldr	r3, [pc, #140]	; (800c964 <_svfiprintf_r+0x1f4>)
 800c8d8:	bb1b      	cbnz	r3, 800c922 <_svfiprintf_r+0x1b2>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	3307      	adds	r3, #7
 800c8de:	f023 0307 	bic.w	r3, r3, #7
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	9303      	str	r3, [sp, #12]
 800c8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e8:	4433      	add	r3, r6
 800c8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ec:	e767      	b.n	800c7be <_svfiprintf_r+0x4e>
 800c8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	e7a5      	b.n	800c844 <_svfiprintf_r+0xd4>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	9305      	str	r3, [sp, #20]
 800c8fe:	4619      	mov	r1, r3
 800c900:	f04f 0c0a 	mov.w	ip, #10
 800c904:	4620      	mov	r0, r4
 800c906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c90a:	3a30      	subs	r2, #48	; 0x30
 800c90c:	2a09      	cmp	r2, #9
 800c90e:	d903      	bls.n	800c918 <_svfiprintf_r+0x1a8>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d0c5      	beq.n	800c8a0 <_svfiprintf_r+0x130>
 800c914:	9105      	str	r1, [sp, #20]
 800c916:	e7c3      	b.n	800c8a0 <_svfiprintf_r+0x130>
 800c918:	fb0c 2101 	mla	r1, ip, r1, r2
 800c91c:	4604      	mov	r4, r0
 800c91e:	2301      	movs	r3, #1
 800c920:	e7f0      	b.n	800c904 <_svfiprintf_r+0x194>
 800c922:	ab03      	add	r3, sp, #12
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	462a      	mov	r2, r5
 800c928:	4b0f      	ldr	r3, [pc, #60]	; (800c968 <_svfiprintf_r+0x1f8>)
 800c92a:	a904      	add	r1, sp, #16
 800c92c:	4638      	mov	r0, r7
 800c92e:	f3af 8000 	nop.w
 800c932:	1c42      	adds	r2, r0, #1
 800c934:	4606      	mov	r6, r0
 800c936:	d1d6      	bne.n	800c8e6 <_svfiprintf_r+0x176>
 800c938:	89ab      	ldrh	r3, [r5, #12]
 800c93a:	065b      	lsls	r3, r3, #25
 800c93c:	f53f af2c 	bmi.w	800c798 <_svfiprintf_r+0x28>
 800c940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c942:	b01d      	add	sp, #116	; 0x74
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	ab03      	add	r3, sp, #12
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	462a      	mov	r2, r5
 800c94e:	4b06      	ldr	r3, [pc, #24]	; (800c968 <_svfiprintf_r+0x1f8>)
 800c950:	a904      	add	r1, sp, #16
 800c952:	4638      	mov	r0, r7
 800c954:	f000 f87a 	bl	800ca4c <_printf_i>
 800c958:	e7eb      	b.n	800c932 <_svfiprintf_r+0x1c2>
 800c95a:	bf00      	nop
 800c95c:	0800d040 	.word	0x0800d040
 800c960:	0800d04a 	.word	0x0800d04a
 800c964:	00000000 	.word	0x00000000
 800c968:	0800c6b9 	.word	0x0800c6b9
 800c96c:	0800d046 	.word	0x0800d046

0800c970 <_printf_common>:
 800c970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	4616      	mov	r6, r2
 800c976:	4699      	mov	r9, r3
 800c978:	688a      	ldr	r2, [r1, #8]
 800c97a:	690b      	ldr	r3, [r1, #16]
 800c97c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c980:	4293      	cmp	r3, r2
 800c982:	bfb8      	it	lt
 800c984:	4613      	movlt	r3, r2
 800c986:	6033      	str	r3, [r6, #0]
 800c988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c98c:	4607      	mov	r7, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	b10a      	cbz	r2, 800c996 <_printf_common+0x26>
 800c992:	3301      	adds	r3, #1
 800c994:	6033      	str	r3, [r6, #0]
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	0699      	lsls	r1, r3, #26
 800c99a:	bf42      	ittt	mi
 800c99c:	6833      	ldrmi	r3, [r6, #0]
 800c99e:	3302      	addmi	r3, #2
 800c9a0:	6033      	strmi	r3, [r6, #0]
 800c9a2:	6825      	ldr	r5, [r4, #0]
 800c9a4:	f015 0506 	ands.w	r5, r5, #6
 800c9a8:	d106      	bne.n	800c9b8 <_printf_common+0x48>
 800c9aa:	f104 0a19 	add.w	sl, r4, #25
 800c9ae:	68e3      	ldr	r3, [r4, #12]
 800c9b0:	6832      	ldr	r2, [r6, #0]
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	42ab      	cmp	r3, r5
 800c9b6:	dc26      	bgt.n	800ca06 <_printf_common+0x96>
 800c9b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9bc:	1e13      	subs	r3, r2, #0
 800c9be:	6822      	ldr	r2, [r4, #0]
 800c9c0:	bf18      	it	ne
 800c9c2:	2301      	movne	r3, #1
 800c9c4:	0692      	lsls	r2, r2, #26
 800c9c6:	d42b      	bmi.n	800ca20 <_printf_common+0xb0>
 800c9c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	47c0      	blx	r8
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	d01e      	beq.n	800ca14 <_printf_common+0xa4>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	68e5      	ldr	r5, [r4, #12]
 800c9da:	6832      	ldr	r2, [r6, #0]
 800c9dc:	f003 0306 	and.w	r3, r3, #6
 800c9e0:	2b04      	cmp	r3, #4
 800c9e2:	bf08      	it	eq
 800c9e4:	1aad      	subeq	r5, r5, r2
 800c9e6:	68a3      	ldr	r3, [r4, #8]
 800c9e8:	6922      	ldr	r2, [r4, #16]
 800c9ea:	bf0c      	ite	eq
 800c9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9f0:	2500      	movne	r5, #0
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	bfc4      	itt	gt
 800c9f6:	1a9b      	subgt	r3, r3, r2
 800c9f8:	18ed      	addgt	r5, r5, r3
 800c9fa:	2600      	movs	r6, #0
 800c9fc:	341a      	adds	r4, #26
 800c9fe:	42b5      	cmp	r5, r6
 800ca00:	d11a      	bne.n	800ca38 <_printf_common+0xc8>
 800ca02:	2000      	movs	r0, #0
 800ca04:	e008      	b.n	800ca18 <_printf_common+0xa8>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4652      	mov	r2, sl
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	47c0      	blx	r8
 800ca10:	3001      	adds	r0, #1
 800ca12:	d103      	bne.n	800ca1c <_printf_common+0xac>
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1c:	3501      	adds	r5, #1
 800ca1e:	e7c6      	b.n	800c9ae <_printf_common+0x3e>
 800ca20:	18e1      	adds	r1, r4, r3
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	2030      	movs	r0, #48	; 0x30
 800ca26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca2a:	4422      	add	r2, r4
 800ca2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca34:	3302      	adds	r3, #2
 800ca36:	e7c7      	b.n	800c9c8 <_printf_common+0x58>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4638      	mov	r0, r7
 800ca40:	47c0      	blx	r8
 800ca42:	3001      	adds	r0, #1
 800ca44:	d0e6      	beq.n	800ca14 <_printf_common+0xa4>
 800ca46:	3601      	adds	r6, #1
 800ca48:	e7d9      	b.n	800c9fe <_printf_common+0x8e>
	...

0800ca4c <_printf_i>:
 800ca4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca50:	7e0f      	ldrb	r7, [r1, #24]
 800ca52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca54:	2f78      	cmp	r7, #120	; 0x78
 800ca56:	4691      	mov	r9, r2
 800ca58:	4680      	mov	r8, r0
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	469a      	mov	sl, r3
 800ca5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca62:	d807      	bhi.n	800ca74 <_printf_i+0x28>
 800ca64:	2f62      	cmp	r7, #98	; 0x62
 800ca66:	d80a      	bhi.n	800ca7e <_printf_i+0x32>
 800ca68:	2f00      	cmp	r7, #0
 800ca6a:	f000 80d8 	beq.w	800cc1e <_printf_i+0x1d2>
 800ca6e:	2f58      	cmp	r7, #88	; 0x58
 800ca70:	f000 80a3 	beq.w	800cbba <_printf_i+0x16e>
 800ca74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca7c:	e03a      	b.n	800caf4 <_printf_i+0xa8>
 800ca7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca82:	2b15      	cmp	r3, #21
 800ca84:	d8f6      	bhi.n	800ca74 <_printf_i+0x28>
 800ca86:	a101      	add	r1, pc, #4	; (adr r1, 800ca8c <_printf_i+0x40>)
 800ca88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca8c:	0800cae5 	.word	0x0800cae5
 800ca90:	0800caf9 	.word	0x0800caf9
 800ca94:	0800ca75 	.word	0x0800ca75
 800ca98:	0800ca75 	.word	0x0800ca75
 800ca9c:	0800ca75 	.word	0x0800ca75
 800caa0:	0800ca75 	.word	0x0800ca75
 800caa4:	0800caf9 	.word	0x0800caf9
 800caa8:	0800ca75 	.word	0x0800ca75
 800caac:	0800ca75 	.word	0x0800ca75
 800cab0:	0800ca75 	.word	0x0800ca75
 800cab4:	0800ca75 	.word	0x0800ca75
 800cab8:	0800cc05 	.word	0x0800cc05
 800cabc:	0800cb29 	.word	0x0800cb29
 800cac0:	0800cbe7 	.word	0x0800cbe7
 800cac4:	0800ca75 	.word	0x0800ca75
 800cac8:	0800ca75 	.word	0x0800ca75
 800cacc:	0800cc27 	.word	0x0800cc27
 800cad0:	0800ca75 	.word	0x0800ca75
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800ca75 	.word	0x0800ca75
 800cadc:	0800ca75 	.word	0x0800ca75
 800cae0:	0800cbef 	.word	0x0800cbef
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	1d1a      	adds	r2, r3, #4
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	602a      	str	r2, [r5, #0]
 800caec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caf4:	2301      	movs	r3, #1
 800caf6:	e0a3      	b.n	800cc40 <_printf_i+0x1f4>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	6829      	ldr	r1, [r5, #0]
 800cafc:	0606      	lsls	r6, r0, #24
 800cafe:	f101 0304 	add.w	r3, r1, #4
 800cb02:	d50a      	bpl.n	800cb1a <_printf_i+0xce>
 800cb04:	680e      	ldr	r6, [r1, #0]
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	2e00      	cmp	r6, #0
 800cb0a:	da03      	bge.n	800cb14 <_printf_i+0xc8>
 800cb0c:	232d      	movs	r3, #45	; 0x2d
 800cb0e:	4276      	negs	r6, r6
 800cb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb14:	485e      	ldr	r0, [pc, #376]	; (800cc90 <_printf_i+0x244>)
 800cb16:	230a      	movs	r3, #10
 800cb18:	e019      	b.n	800cb4e <_printf_i+0x102>
 800cb1a:	680e      	ldr	r6, [r1, #0]
 800cb1c:	602b      	str	r3, [r5, #0]
 800cb1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb22:	bf18      	it	ne
 800cb24:	b236      	sxthne	r6, r6
 800cb26:	e7ef      	b.n	800cb08 <_printf_i+0xbc>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	1d19      	adds	r1, r3, #4
 800cb2e:	6029      	str	r1, [r5, #0]
 800cb30:	0601      	lsls	r1, r0, #24
 800cb32:	d501      	bpl.n	800cb38 <_printf_i+0xec>
 800cb34:	681e      	ldr	r6, [r3, #0]
 800cb36:	e002      	b.n	800cb3e <_printf_i+0xf2>
 800cb38:	0646      	lsls	r6, r0, #25
 800cb3a:	d5fb      	bpl.n	800cb34 <_printf_i+0xe8>
 800cb3c:	881e      	ldrh	r6, [r3, #0]
 800cb3e:	4854      	ldr	r0, [pc, #336]	; (800cc90 <_printf_i+0x244>)
 800cb40:	2f6f      	cmp	r7, #111	; 0x6f
 800cb42:	bf0c      	ite	eq
 800cb44:	2308      	moveq	r3, #8
 800cb46:	230a      	movne	r3, #10
 800cb48:	2100      	movs	r1, #0
 800cb4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb4e:	6865      	ldr	r5, [r4, #4]
 800cb50:	60a5      	str	r5, [r4, #8]
 800cb52:	2d00      	cmp	r5, #0
 800cb54:	bfa2      	ittt	ge
 800cb56:	6821      	ldrge	r1, [r4, #0]
 800cb58:	f021 0104 	bicge.w	r1, r1, #4
 800cb5c:	6021      	strge	r1, [r4, #0]
 800cb5e:	b90e      	cbnz	r6, 800cb64 <_printf_i+0x118>
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	d04d      	beq.n	800cc00 <_printf_i+0x1b4>
 800cb64:	4615      	mov	r5, r2
 800cb66:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb6a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb6e:	5dc7      	ldrb	r7, [r0, r7]
 800cb70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb74:	4637      	mov	r7, r6
 800cb76:	42bb      	cmp	r3, r7
 800cb78:	460e      	mov	r6, r1
 800cb7a:	d9f4      	bls.n	800cb66 <_printf_i+0x11a>
 800cb7c:	2b08      	cmp	r3, #8
 800cb7e:	d10b      	bne.n	800cb98 <_printf_i+0x14c>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	07de      	lsls	r6, r3, #31
 800cb84:	d508      	bpl.n	800cb98 <_printf_i+0x14c>
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	bfde      	ittt	le
 800cb8e:	2330      	movle	r3, #48	; 0x30
 800cb90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb98:	1b52      	subs	r2, r2, r5
 800cb9a:	6122      	str	r2, [r4, #16]
 800cb9c:	f8cd a000 	str.w	sl, [sp]
 800cba0:	464b      	mov	r3, r9
 800cba2:	aa03      	add	r2, sp, #12
 800cba4:	4621      	mov	r1, r4
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fee2 	bl	800c970 <_printf_common>
 800cbac:	3001      	adds	r0, #1
 800cbae:	d14c      	bne.n	800cc4a <_printf_i+0x1fe>
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	b004      	add	sp, #16
 800cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbba:	4835      	ldr	r0, [pc, #212]	; (800cc90 <_printf_i+0x244>)
 800cbbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbc0:	6829      	ldr	r1, [r5, #0]
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbc8:	6029      	str	r1, [r5, #0]
 800cbca:	061d      	lsls	r5, r3, #24
 800cbcc:	d514      	bpl.n	800cbf8 <_printf_i+0x1ac>
 800cbce:	07df      	lsls	r7, r3, #31
 800cbd0:	bf44      	itt	mi
 800cbd2:	f043 0320 	orrmi.w	r3, r3, #32
 800cbd6:	6023      	strmi	r3, [r4, #0]
 800cbd8:	b91e      	cbnz	r6, 800cbe2 <_printf_i+0x196>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	f023 0320 	bic.w	r3, r3, #32
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	2310      	movs	r3, #16
 800cbe4:	e7b0      	b.n	800cb48 <_printf_i+0xfc>
 800cbe6:	6823      	ldr	r3, [r4, #0]
 800cbe8:	f043 0320 	orr.w	r3, r3, #32
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	2378      	movs	r3, #120	; 0x78
 800cbf0:	4828      	ldr	r0, [pc, #160]	; (800cc94 <_printf_i+0x248>)
 800cbf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbf6:	e7e3      	b.n	800cbc0 <_printf_i+0x174>
 800cbf8:	0659      	lsls	r1, r3, #25
 800cbfa:	bf48      	it	mi
 800cbfc:	b2b6      	uxthmi	r6, r6
 800cbfe:	e7e6      	b.n	800cbce <_printf_i+0x182>
 800cc00:	4615      	mov	r5, r2
 800cc02:	e7bb      	b.n	800cb7c <_printf_i+0x130>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	6826      	ldr	r6, [r4, #0]
 800cc08:	6961      	ldr	r1, [r4, #20]
 800cc0a:	1d18      	adds	r0, r3, #4
 800cc0c:	6028      	str	r0, [r5, #0]
 800cc0e:	0635      	lsls	r5, r6, #24
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	d501      	bpl.n	800cc18 <_printf_i+0x1cc>
 800cc14:	6019      	str	r1, [r3, #0]
 800cc16:	e002      	b.n	800cc1e <_printf_i+0x1d2>
 800cc18:	0670      	lsls	r0, r6, #25
 800cc1a:	d5fb      	bpl.n	800cc14 <_printf_i+0x1c8>
 800cc1c:	8019      	strh	r1, [r3, #0]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	4615      	mov	r5, r2
 800cc24:	e7ba      	b.n	800cb9c <_printf_i+0x150>
 800cc26:	682b      	ldr	r3, [r5, #0]
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	602a      	str	r2, [r5, #0]
 800cc2c:	681d      	ldr	r5, [r3, #0]
 800cc2e:	6862      	ldr	r2, [r4, #4]
 800cc30:	2100      	movs	r1, #0
 800cc32:	4628      	mov	r0, r5
 800cc34:	f7f3 facc 	bl	80001d0 <memchr>
 800cc38:	b108      	cbz	r0, 800cc3e <_printf_i+0x1f2>
 800cc3a:	1b40      	subs	r0, r0, r5
 800cc3c:	6060      	str	r0, [r4, #4]
 800cc3e:	6863      	ldr	r3, [r4, #4]
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	2300      	movs	r3, #0
 800cc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc48:	e7a8      	b.n	800cb9c <_printf_i+0x150>
 800cc4a:	6923      	ldr	r3, [r4, #16]
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4649      	mov	r1, r9
 800cc50:	4640      	mov	r0, r8
 800cc52:	47d0      	blx	sl
 800cc54:	3001      	adds	r0, #1
 800cc56:	d0ab      	beq.n	800cbb0 <_printf_i+0x164>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	079b      	lsls	r3, r3, #30
 800cc5c:	d413      	bmi.n	800cc86 <_printf_i+0x23a>
 800cc5e:	68e0      	ldr	r0, [r4, #12]
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	4298      	cmp	r0, r3
 800cc64:	bfb8      	it	lt
 800cc66:	4618      	movlt	r0, r3
 800cc68:	e7a4      	b.n	800cbb4 <_printf_i+0x168>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	4632      	mov	r2, r6
 800cc6e:	4649      	mov	r1, r9
 800cc70:	4640      	mov	r0, r8
 800cc72:	47d0      	blx	sl
 800cc74:	3001      	adds	r0, #1
 800cc76:	d09b      	beq.n	800cbb0 <_printf_i+0x164>
 800cc78:	3501      	adds	r5, #1
 800cc7a:	68e3      	ldr	r3, [r4, #12]
 800cc7c:	9903      	ldr	r1, [sp, #12]
 800cc7e:	1a5b      	subs	r3, r3, r1
 800cc80:	42ab      	cmp	r3, r5
 800cc82:	dcf2      	bgt.n	800cc6a <_printf_i+0x21e>
 800cc84:	e7eb      	b.n	800cc5e <_printf_i+0x212>
 800cc86:	2500      	movs	r5, #0
 800cc88:	f104 0619 	add.w	r6, r4, #25
 800cc8c:	e7f5      	b.n	800cc7a <_printf_i+0x22e>
 800cc8e:	bf00      	nop
 800cc90:	0800d051 	.word	0x0800d051
 800cc94:	0800d062 	.word	0x0800d062

0800cc98 <memcpy>:
 800cc98:	440a      	add	r2, r1
 800cc9a:	4291      	cmp	r1, r2
 800cc9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cca0:	d100      	bne.n	800cca4 <memcpy+0xc>
 800cca2:	4770      	bx	lr
 800cca4:	b510      	push	{r4, lr}
 800cca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccae:	4291      	cmp	r1, r2
 800ccb0:	d1f9      	bne.n	800cca6 <memcpy+0xe>
 800ccb2:	bd10      	pop	{r4, pc}

0800ccb4 <memmove>:
 800ccb4:	4288      	cmp	r0, r1
 800ccb6:	b510      	push	{r4, lr}
 800ccb8:	eb01 0402 	add.w	r4, r1, r2
 800ccbc:	d902      	bls.n	800ccc4 <memmove+0x10>
 800ccbe:	4284      	cmp	r4, r0
 800ccc0:	4623      	mov	r3, r4
 800ccc2:	d807      	bhi.n	800ccd4 <memmove+0x20>
 800ccc4:	1e43      	subs	r3, r0, #1
 800ccc6:	42a1      	cmp	r1, r4
 800ccc8:	d008      	beq.n	800ccdc <memmove+0x28>
 800ccca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccd2:	e7f8      	b.n	800ccc6 <memmove+0x12>
 800ccd4:	4402      	add	r2, r0
 800ccd6:	4601      	mov	r1, r0
 800ccd8:	428a      	cmp	r2, r1
 800ccda:	d100      	bne.n	800ccde <memmove+0x2a>
 800ccdc:	bd10      	pop	{r4, pc}
 800ccde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cce6:	e7f7      	b.n	800ccd8 <memmove+0x24>

0800cce8 <_free_r>:
 800cce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccea:	2900      	cmp	r1, #0
 800ccec:	d044      	beq.n	800cd78 <_free_r+0x90>
 800ccee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccf2:	9001      	str	r0, [sp, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f1a1 0404 	sub.w	r4, r1, #4
 800ccfa:	bfb8      	it	lt
 800ccfc:	18e4      	addlt	r4, r4, r3
 800ccfe:	f000 f913 	bl	800cf28 <__malloc_lock>
 800cd02:	4a1e      	ldr	r2, [pc, #120]	; (800cd7c <_free_r+0x94>)
 800cd04:	9801      	ldr	r0, [sp, #4]
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	b933      	cbnz	r3, 800cd18 <_free_r+0x30>
 800cd0a:	6063      	str	r3, [r4, #4]
 800cd0c:	6014      	str	r4, [r2, #0]
 800cd0e:	b003      	add	sp, #12
 800cd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd14:	f000 b90e 	b.w	800cf34 <__malloc_unlock>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d908      	bls.n	800cd2e <_free_r+0x46>
 800cd1c:	6825      	ldr	r5, [r4, #0]
 800cd1e:	1961      	adds	r1, r4, r5
 800cd20:	428b      	cmp	r3, r1
 800cd22:	bf01      	itttt	eq
 800cd24:	6819      	ldreq	r1, [r3, #0]
 800cd26:	685b      	ldreq	r3, [r3, #4]
 800cd28:	1949      	addeq	r1, r1, r5
 800cd2a:	6021      	streq	r1, [r4, #0]
 800cd2c:	e7ed      	b.n	800cd0a <_free_r+0x22>
 800cd2e:	461a      	mov	r2, r3
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	b10b      	cbz	r3, 800cd38 <_free_r+0x50>
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	d9fa      	bls.n	800cd2e <_free_r+0x46>
 800cd38:	6811      	ldr	r1, [r2, #0]
 800cd3a:	1855      	adds	r5, r2, r1
 800cd3c:	42a5      	cmp	r5, r4
 800cd3e:	d10b      	bne.n	800cd58 <_free_r+0x70>
 800cd40:	6824      	ldr	r4, [r4, #0]
 800cd42:	4421      	add	r1, r4
 800cd44:	1854      	adds	r4, r2, r1
 800cd46:	42a3      	cmp	r3, r4
 800cd48:	6011      	str	r1, [r2, #0]
 800cd4a:	d1e0      	bne.n	800cd0e <_free_r+0x26>
 800cd4c:	681c      	ldr	r4, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	6053      	str	r3, [r2, #4]
 800cd52:	4421      	add	r1, r4
 800cd54:	6011      	str	r1, [r2, #0]
 800cd56:	e7da      	b.n	800cd0e <_free_r+0x26>
 800cd58:	d902      	bls.n	800cd60 <_free_r+0x78>
 800cd5a:	230c      	movs	r3, #12
 800cd5c:	6003      	str	r3, [r0, #0]
 800cd5e:	e7d6      	b.n	800cd0e <_free_r+0x26>
 800cd60:	6825      	ldr	r5, [r4, #0]
 800cd62:	1961      	adds	r1, r4, r5
 800cd64:	428b      	cmp	r3, r1
 800cd66:	bf04      	itt	eq
 800cd68:	6819      	ldreq	r1, [r3, #0]
 800cd6a:	685b      	ldreq	r3, [r3, #4]
 800cd6c:	6063      	str	r3, [r4, #4]
 800cd6e:	bf04      	itt	eq
 800cd70:	1949      	addeq	r1, r1, r5
 800cd72:	6021      	streq	r1, [r4, #0]
 800cd74:	6054      	str	r4, [r2, #4]
 800cd76:	e7ca      	b.n	800cd0e <_free_r+0x26>
 800cd78:	b003      	add	sp, #12
 800cd7a:	bd30      	pop	{r4, r5, pc}
 800cd7c:	20000624 	.word	0x20000624

0800cd80 <sbrk_aligned>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	4e0e      	ldr	r6, [pc, #56]	; (800cdbc <sbrk_aligned+0x3c>)
 800cd84:	460c      	mov	r4, r1
 800cd86:	6831      	ldr	r1, [r6, #0]
 800cd88:	4605      	mov	r5, r0
 800cd8a:	b911      	cbnz	r1, 800cd92 <sbrk_aligned+0x12>
 800cd8c:	f000 f8bc 	bl	800cf08 <_sbrk_r>
 800cd90:	6030      	str	r0, [r6, #0]
 800cd92:	4621      	mov	r1, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	f000 f8b7 	bl	800cf08 <_sbrk_r>
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	d00a      	beq.n	800cdb4 <sbrk_aligned+0x34>
 800cd9e:	1cc4      	adds	r4, r0, #3
 800cda0:	f024 0403 	bic.w	r4, r4, #3
 800cda4:	42a0      	cmp	r0, r4
 800cda6:	d007      	beq.n	800cdb8 <sbrk_aligned+0x38>
 800cda8:	1a21      	subs	r1, r4, r0
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 f8ac 	bl	800cf08 <_sbrk_r>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d101      	bne.n	800cdb8 <sbrk_aligned+0x38>
 800cdb4:	f04f 34ff 	mov.w	r4, #4294967295
 800cdb8:	4620      	mov	r0, r4
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	20000628 	.word	0x20000628

0800cdc0 <_malloc_r>:
 800cdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc4:	1ccd      	adds	r5, r1, #3
 800cdc6:	f025 0503 	bic.w	r5, r5, #3
 800cdca:	3508      	adds	r5, #8
 800cdcc:	2d0c      	cmp	r5, #12
 800cdce:	bf38      	it	cc
 800cdd0:	250c      	movcc	r5, #12
 800cdd2:	2d00      	cmp	r5, #0
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	db01      	blt.n	800cddc <_malloc_r+0x1c>
 800cdd8:	42a9      	cmp	r1, r5
 800cdda:	d905      	bls.n	800cde8 <_malloc_r+0x28>
 800cddc:	230c      	movs	r3, #12
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	2600      	movs	r6, #0
 800cde2:	4630      	mov	r0, r6
 800cde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde8:	4e2e      	ldr	r6, [pc, #184]	; (800cea4 <_malloc_r+0xe4>)
 800cdea:	f000 f89d 	bl	800cf28 <__malloc_lock>
 800cdee:	6833      	ldr	r3, [r6, #0]
 800cdf0:	461c      	mov	r4, r3
 800cdf2:	bb34      	cbnz	r4, 800ce42 <_malloc_r+0x82>
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f7ff ffc2 	bl	800cd80 <sbrk_aligned>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	4604      	mov	r4, r0
 800ce00:	d14d      	bne.n	800ce9e <_malloc_r+0xde>
 800ce02:	6834      	ldr	r4, [r6, #0]
 800ce04:	4626      	mov	r6, r4
 800ce06:	2e00      	cmp	r6, #0
 800ce08:	d140      	bne.n	800ce8c <_malloc_r+0xcc>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4638      	mov	r0, r7
 800ce10:	eb04 0803 	add.w	r8, r4, r3
 800ce14:	f000 f878 	bl	800cf08 <_sbrk_r>
 800ce18:	4580      	cmp	r8, r0
 800ce1a:	d13a      	bne.n	800ce92 <_malloc_r+0xd2>
 800ce1c:	6821      	ldr	r1, [r4, #0]
 800ce1e:	3503      	adds	r5, #3
 800ce20:	1a6d      	subs	r5, r5, r1
 800ce22:	f025 0503 	bic.w	r5, r5, #3
 800ce26:	3508      	adds	r5, #8
 800ce28:	2d0c      	cmp	r5, #12
 800ce2a:	bf38      	it	cc
 800ce2c:	250c      	movcc	r5, #12
 800ce2e:	4629      	mov	r1, r5
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7ff ffa5 	bl	800cd80 <sbrk_aligned>
 800ce36:	3001      	adds	r0, #1
 800ce38:	d02b      	beq.n	800ce92 <_malloc_r+0xd2>
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	442b      	add	r3, r5
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	e00e      	b.n	800ce60 <_malloc_r+0xa0>
 800ce42:	6822      	ldr	r2, [r4, #0]
 800ce44:	1b52      	subs	r2, r2, r5
 800ce46:	d41e      	bmi.n	800ce86 <_malloc_r+0xc6>
 800ce48:	2a0b      	cmp	r2, #11
 800ce4a:	d916      	bls.n	800ce7a <_malloc_r+0xba>
 800ce4c:	1961      	adds	r1, r4, r5
 800ce4e:	42a3      	cmp	r3, r4
 800ce50:	6025      	str	r5, [r4, #0]
 800ce52:	bf18      	it	ne
 800ce54:	6059      	strne	r1, [r3, #4]
 800ce56:	6863      	ldr	r3, [r4, #4]
 800ce58:	bf08      	it	eq
 800ce5a:	6031      	streq	r1, [r6, #0]
 800ce5c:	5162      	str	r2, [r4, r5]
 800ce5e:	604b      	str	r3, [r1, #4]
 800ce60:	4638      	mov	r0, r7
 800ce62:	f104 060b 	add.w	r6, r4, #11
 800ce66:	f000 f865 	bl	800cf34 <__malloc_unlock>
 800ce6a:	f026 0607 	bic.w	r6, r6, #7
 800ce6e:	1d23      	adds	r3, r4, #4
 800ce70:	1af2      	subs	r2, r6, r3
 800ce72:	d0b6      	beq.n	800cde2 <_malloc_r+0x22>
 800ce74:	1b9b      	subs	r3, r3, r6
 800ce76:	50a3      	str	r3, [r4, r2]
 800ce78:	e7b3      	b.n	800cde2 <_malloc_r+0x22>
 800ce7a:	6862      	ldr	r2, [r4, #4]
 800ce7c:	42a3      	cmp	r3, r4
 800ce7e:	bf0c      	ite	eq
 800ce80:	6032      	streq	r2, [r6, #0]
 800ce82:	605a      	strne	r2, [r3, #4]
 800ce84:	e7ec      	b.n	800ce60 <_malloc_r+0xa0>
 800ce86:	4623      	mov	r3, r4
 800ce88:	6864      	ldr	r4, [r4, #4]
 800ce8a:	e7b2      	b.n	800cdf2 <_malloc_r+0x32>
 800ce8c:	4634      	mov	r4, r6
 800ce8e:	6876      	ldr	r6, [r6, #4]
 800ce90:	e7b9      	b.n	800ce06 <_malloc_r+0x46>
 800ce92:	230c      	movs	r3, #12
 800ce94:	603b      	str	r3, [r7, #0]
 800ce96:	4638      	mov	r0, r7
 800ce98:	f000 f84c 	bl	800cf34 <__malloc_unlock>
 800ce9c:	e7a1      	b.n	800cde2 <_malloc_r+0x22>
 800ce9e:	6025      	str	r5, [r4, #0]
 800cea0:	e7de      	b.n	800ce60 <_malloc_r+0xa0>
 800cea2:	bf00      	nop
 800cea4:	20000624 	.word	0x20000624

0800cea8 <_realloc_r>:
 800cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceac:	4680      	mov	r8, r0
 800ceae:	4614      	mov	r4, r2
 800ceb0:	460e      	mov	r6, r1
 800ceb2:	b921      	cbnz	r1, 800cebe <_realloc_r+0x16>
 800ceb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	4611      	mov	r1, r2
 800ceba:	f7ff bf81 	b.w	800cdc0 <_malloc_r>
 800cebe:	b92a      	cbnz	r2, 800cecc <_realloc_r+0x24>
 800cec0:	f7ff ff12 	bl	800cce8 <_free_r>
 800cec4:	4625      	mov	r5, r4
 800cec6:	4628      	mov	r0, r5
 800cec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cecc:	f000 f838 	bl	800cf40 <_malloc_usable_size_r>
 800ced0:	4284      	cmp	r4, r0
 800ced2:	4607      	mov	r7, r0
 800ced4:	d802      	bhi.n	800cedc <_realloc_r+0x34>
 800ced6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceda:	d812      	bhi.n	800cf02 <_realloc_r+0x5a>
 800cedc:	4621      	mov	r1, r4
 800cede:	4640      	mov	r0, r8
 800cee0:	f7ff ff6e 	bl	800cdc0 <_malloc_r>
 800cee4:	4605      	mov	r5, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0ed      	beq.n	800cec6 <_realloc_r+0x1e>
 800ceea:	42bc      	cmp	r4, r7
 800ceec:	4622      	mov	r2, r4
 800ceee:	4631      	mov	r1, r6
 800cef0:	bf28      	it	cs
 800cef2:	463a      	movcs	r2, r7
 800cef4:	f7ff fed0 	bl	800cc98 <memcpy>
 800cef8:	4631      	mov	r1, r6
 800cefa:	4640      	mov	r0, r8
 800cefc:	f7ff fef4 	bl	800cce8 <_free_r>
 800cf00:	e7e1      	b.n	800cec6 <_realloc_r+0x1e>
 800cf02:	4635      	mov	r5, r6
 800cf04:	e7df      	b.n	800cec6 <_realloc_r+0x1e>
	...

0800cf08 <_sbrk_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d06      	ldr	r5, [pc, #24]	; (800cf24 <_sbrk_r+0x1c>)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	f7f5 fdf6 	bl	8002b04 <_sbrk>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_sbrk_r+0x1a>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_sbrk_r+0x1a>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	2000062c 	.word	0x2000062c

0800cf28 <__malloc_lock>:
 800cf28:	4801      	ldr	r0, [pc, #4]	; (800cf30 <__malloc_lock+0x8>)
 800cf2a:	f000 b811 	b.w	800cf50 <__retarget_lock_acquire_recursive>
 800cf2e:	bf00      	nop
 800cf30:	20000630 	.word	0x20000630

0800cf34 <__malloc_unlock>:
 800cf34:	4801      	ldr	r0, [pc, #4]	; (800cf3c <__malloc_unlock+0x8>)
 800cf36:	f000 b80c 	b.w	800cf52 <__retarget_lock_release_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	20000630 	.word	0x20000630

0800cf40 <_malloc_usable_size_r>:
 800cf40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf44:	1f18      	subs	r0, r3, #4
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfbc      	itt	lt
 800cf4a:	580b      	ldrlt	r3, [r1, r0]
 800cf4c:	18c0      	addlt	r0, r0, r3
 800cf4e:	4770      	bx	lr

0800cf50 <__retarget_lock_acquire_recursive>:
 800cf50:	4770      	bx	lr

0800cf52 <__retarget_lock_release_recursive>:
 800cf52:	4770      	bx	lr

0800cf54 <_init>:
 800cf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf56:	bf00      	nop
 800cf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5a:	bc08      	pop	{r3}
 800cf5c:	469e      	mov	lr, r3
 800cf5e:	4770      	bx	lr

0800cf60 <_fini>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr
