
BUCK-BOOST_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007004  08007004  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007004  08007004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800700c  0800700c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007010  08007010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007014  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00000438  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140fe  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aae  00000000  00000000  0001d192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0001fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3a  00000000  00000000  00020e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f428  00000000  00000000  00021c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e98  00000000  00000000  0004109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbd9a  00000000  00000000  00058f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114ccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005114  00000000  00000000  00114d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00119e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f08 	.word	0x08006f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006f08 	.word	0x08006f08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC1_Init>:
#define ADC_SAMPLING_TIME_7_5 0x3
#define ADC_SAMPLING_TIME_61_5 0x5
#define ADC_SAMPLING_TIME_181_5 0x6
#define ADC_SAMPLING_TIME_601_5 0x7

void ADC1_Init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0


    // Включение тактирования для ADC1
    RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000274:	4b32      	ldr	r3, [pc, #200]	@ (8000340 <ADC1_Init+0xd0>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a31      	ldr	r2, [pc, #196]	@ (8000340 <ADC1_Init+0xd0>)
 800027a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800027e:	6153      	str	r3, [r2, #20]

    // Сброс флагов ADC
    ADC1->ISR |= ADC_ISR_ADRDY;
 8000280:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]

    ADC12_COMMON->CCR &= ~ADC_CCR_CKMODE; // Очистка старых значений
 8000290:	4b2c      	ldr	r3, [pc, #176]	@ (8000344 <ADC1_Init+0xd4>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a2b      	ldr	r2, [pc, #172]	@ (8000344 <ADC1_Init+0xd4>)
 8000296:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800029a:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR |= (0x1 << ADC_CCR_CKMODE_Pos); // Установка CKMODE на HCLK/1
 800029c:	4b29      	ldr	r3, [pc, #164]	@ (8000344 <ADC1_Init+0xd4>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a28      	ldr	r2, [pc, #160]	@ (8000344 <ADC1_Init+0xd4>)
 80002a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002a6:	6093      	str	r3, [r2, #8]

    // Настройка последовательного преобразования каналов для ADC1
    ADC1->SQR1 = (1 << ADC_SQR1_SQ1_Pos) | // Первый канал 1
 80002a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002ac:	4a26      	ldr	r2, [pc, #152]	@ (8000348 <ADC1_Init+0xd8>)
 80002ae:	631a      	str	r2, [r3, #48]	@ 0x30
                 (2 << ADC_SQR1_SQ2_Pos) | // Второй канал 2
                 (3 << ADC_SQR1_SQ3_Pos) | // Третий канал 3
                 (4 << ADC_SQR1_SQ4_Pos);  // Четвертый канал 4

    ADC1->SQR1 |= (4 << ADC_SQR1_L_Pos); // Указываем, что 4 преобразования
 80002b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

    // Настройка времени выборки для каналов 1-4
       ADC1->SMPR1 &= ~((0x7 << ADC_SMPR1_SMP1_Pos) | // Очистка старых значений
 80002c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80002ce:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80002d2:	6153      	str	r3, [r2, #20]
                        (0x7 << ADC_SMPR1_SMP2_Pos) |
                        (0x7 << ADC_SMPR1_SMP3_Pos) |
                        (0x7 << ADC_SMPR1_SMP4_Pos));  // Каналы 1-4


       ADC1->SMPR1 |= (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP1_Pos) | // Канал 1
 80002d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002de:	f443 43ff 	orr.w	r3, r3, #32640	@ 0x7f80
 80002e2:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 80002e6:	6153      	str	r3, [r2, #20]
                      (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP2_Pos) | // Канал 2
                      (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP3_Pos) | // Канал 3
                      (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP4_Pos);  // Канал 4

       // Запуск калибровки ADC1
       ADC1->CR &= ~ADC_CR_ADEN; // Отключить ADC перед калибровкой
 80002e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6093      	str	r3, [r2, #8]
       ADC1->CR |= ADC_CR_ADCAL; // Запуск калибровки
 80002f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000306:	6093      	str	r3, [r2, #8]
       while (ADC1->CR & ADC_CR_ADCAL); // Ожидание завершения калибровки
 8000308:	bf00      	nop
 800030a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	2b00      	cmp	r3, #0
 8000312:	dbfa      	blt.n	800030a <ADC1_Init+0x9a>

       // Включение ADC1
       ADC1->CR |= ADC_CR_ADEN;
 8000314:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6093      	str	r3, [r2, #8]
       while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Ожидание готовности ADC1
 8000324:	bf00      	nop
 8000326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f8      	beq.n	8000326 <ADC1_Init+0xb6>


}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000
 8000344:	50000300 	.word	0x50000300
 8000348:	040c2040 	.word	0x040c2040

0800034c <ADC2_Init>:

void ADC2_Init(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    // Включение тактирования для ADC2
    RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000350:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <ADC2_Init+0xb0>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a29      	ldr	r2, [pc, #164]	@ (80003fc <ADC2_Init+0xb0>)
 8000356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800035a:	6153      	str	r3, [r2, #20]

    // Сброс флагов ADC

    ADC2->ISR |= ADC_ISR_ADRDY;
 800035c:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <ADC2_Init+0xb4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a27      	ldr	r2, [pc, #156]	@ (8000400 <ADC2_Init+0xb4>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]


    ADC12_COMMON->CCR &= ~ADC_CCR_CKMODE; // Очистка старых значений
 8000368:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <ADC2_Init+0xb8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a25      	ldr	r2, [pc, #148]	@ (8000404 <ADC2_Init+0xb8>)
 800036e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000372:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR |= (0x1 << ADC_CCR_CKMODE_Pos); // Установка CKMODE на HCLK/1
 8000374:	4b23      	ldr	r3, [pc, #140]	@ (8000404 <ADC2_Init+0xb8>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a22      	ldr	r2, [pc, #136]	@ (8000404 <ADC2_Init+0xb8>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800037e:	6093      	str	r3, [r2, #8]

    // Настройка последовательного преобразования каналов для ADC2
    ADC2->SQR1 = (1 << ADC_SQR1_SQ1_Pos) | // Первый канал 1
 8000380:	4b1f      	ldr	r3, [pc, #124]	@ (8000400 <ADC2_Init+0xb4>)
 8000382:	4a21      	ldr	r2, [pc, #132]	@ (8000408 <ADC2_Init+0xbc>)
 8000384:	631a      	str	r2, [r3, #48]	@ 0x30
                 (2 << ADC_SQR1_SQ2_Pos) | // Второй канал 2
                 (3 << ADC_SQR1_SQ3_Pos);  // Третий канал 3

    ADC2->SQR1 |= (3 << ADC_SQR1_L_Pos); // Указываем, что 3 преобразования
 8000386:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <ADC2_Init+0xb4>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a1d      	ldr	r2, [pc, #116]	@ (8000400 <ADC2_Init+0xb4>)
 800038c:	f043 0303 	orr.w	r3, r3, #3
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30


    // Настройка времени выборки для каналов 1-3
       ADC2->SMPR1 &= ~((0x7 << ADC_SMPR1_SMP1_Pos) | // Очистка старых значений
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <ADC2_Init+0xb4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <ADC2_Init+0xb4>)
 8000398:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800039c:	f023 0308 	bic.w	r3, r3, #8
 80003a0:	6153      	str	r3, [r2, #20]
                        (0x7 << ADC_SMPR1_SMP2_Pos) |
                        (0x7 << ADC_SMPR1_SMP3_Pos));  // Каналы 1-3

       ADC2->SMPR1 |= (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP1_Pos) | // Канал 1
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <ADC2_Init+0xb4>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <ADC2_Init+0xb4>)
 80003a8:	f443 637f 	orr.w	r3, r3, #4080	@ 0xff0
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	6153      	str	r3, [r2, #20]
                      (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP2_Pos) | // Канал 2
                      (ADC_SAMPLING_TIME_601_5 << ADC_SMPR1_SMP3_Pos);  // Канал 3

       // Запуск калибровки ADC2
       ADC2->CR &= ~ADC_CR_ADEN; // Отключить ADC перед калибровкой
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <ADC2_Init+0xb4>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <ADC2_Init+0xb4>)
 80003b8:	f023 0301 	bic.w	r3, r3, #1
 80003bc:	6093      	str	r3, [r2, #8]
       ADC2->CR |= ADC_CR_ADCAL; // Запуск калибровки
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <ADC2_Init+0xb4>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <ADC2_Init+0xb4>)
 80003c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003c8:	6093      	str	r3, [r2, #8]
       while (ADC2->CR & ADC_CR_ADCAL); // Ожидание завершения калибровки
 80003ca:	bf00      	nop
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <ADC2_Init+0xb4>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dbfb      	blt.n	80003cc <ADC2_Init+0x80>

       // Включение ADC2
       ADC2->CR |= ADC_CR_ADEN;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <ADC2_Init+0xb4>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <ADC2_Init+0xb4>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6093      	str	r3, [r2, #8]
       while (!(ADC2->ISR & ADC_ISR_ADRDY)); // Ожидание готовности ADC2
 80003e0:	bf00      	nop
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <ADC2_Init+0xb4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <ADC2_Init+0x96>

}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	50000100 	.word	0x50000100
 8000404:	50000300 	.word	0x50000300
 8000408:	000c2040 	.word	0x000c2040

0800040c <ADC1_StartConversion>:

void ADC1_StartConversion(uint16_t *data_buffer) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	 ADC1->ISR |= ADC_ISR_EOC | ADC_ISR_EOS| ADC_ISR_OVR; // Сброс флагов завершения преобразования
 8000414:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041e:	f043 031c 	orr.w	r3, r3, #28
 8000422:	6013      	str	r3, [r2, #0]
    // Запуск преобразования для ADC1
    ADC1->CR |= ADC_CR_ADSTART;
 8000424:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6093      	str	r3, [r2, #8]

    uint32_t timeout;

    while (!(ADC1->ISR & ADC_ISR_EOS)) { // Ожидаем завершения последовательности
 8000434:	e02f      	b.n	8000496 <ADC1_StartConversion+0x8a>
        for (int i = 0; i < 4; i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	e029      	b.n	8000490 <ADC1_StartConversion+0x84>
            timeout = 100000; // Тайм-аут для ожидания
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <ADC1_StartConversion+0xb4>)
 800043e:	60fb      	str	r3, [r7, #12]

            while (!(ADC1->ISR & ADC_ISR_EOC)) { // Ожидаем завершения преобразования
 8000440:	e013      	b.n	800046a <ADC1_StartConversion+0x5e>
                if (--timeout == 0) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3b01      	subs	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d10d      	bne.n	800046a <ADC1_StartConversion+0x5e>
                    if (ADC1->ISR & ADC_ISR_OVR) { // Проверка на переполнение
 800044e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	2b00      	cmp	r3, #0
 800045a:	d02c      	beq.n	80004b6 <ADC1_StartConversion+0xaa>
                    	 LED_6_ON;
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000462:	4818      	ldr	r0, [pc, #96]	@ (80004c4 <ADC1_StartConversion+0xb8>)
 8000464:	f002 f8d0 	bl	8002608 <HAL_GPIO_WritePin>
                    }

                    return;
 8000468:	e025      	b.n	80004b6 <ADC1_StartConversion+0xaa>
            while (!(ADC1->ISR & ADC_ISR_EOC)) { // Ожидаем завершения преобразования
 800046a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0e4      	beq.n	8000442 <ADC1_StartConversion+0x36>
                }
            }

            data_buffer[i] = ADC1->DR; // Сохраняем данные в буфер
 8000478:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800047c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	b28a      	uxth	r2, r1
 8000488:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	3301      	adds	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	2b03      	cmp	r3, #3
 8000494:	ddd2      	ble.n	800043c <ADC1_StartConversion+0x30>
    while (!(ADC1->ISR & ADC_ISR_EOS)) { // Ожидаем завершения последовательности
 8000496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0c8      	beq.n	8000436 <ADC1_StartConversion+0x2a>
        }
    }

    ADC1->ISR |= ADC_ISR_EOS; // Сброс флага завершения последовательности
 80004a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e000      	b.n	80004b8 <ADC1_StartConversion+0xac>
                    return;
 80004b6:	bf00      	nop
}
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	000186a0 	.word	0x000186a0
 80004c4:	48000400 	.word	0x48000400

080004c8 <ADC2_StartConversion>:


void ADC2_StartConversion(uint16_t *data_buffer) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 ADC2->ISR |= ADC_ISR_EOC | ADC_ISR_EOS| ADC_ISR_OVR; // Сброс флагов завершения преобразования
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <ADC2_StartConversion+0xa0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a24      	ldr	r2, [pc, #144]	@ (8000568 <ADC2_StartConversion+0xa0>)
 80004d6:	f043 031c 	orr.w	r3, r3, #28
 80004da:	6013      	str	r3, [r2, #0]
    // Запуск преобразования для ADC2
    ADC2->CR |= ADC_CR_ADSTART;
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <ADC2_StartConversion+0xa0>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <ADC2_StartConversion+0xa0>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6093      	str	r3, [r2, #8]
    uint32_t timeout;

       while (!(ADC2->ISR & ADC_ISR_EOS)) { // Ожидаем завершения последовательности
 80004e8:	e02c      	b.n	8000544 <ADC2_StartConversion+0x7c>
           for (int i = 0; i < 3; i++) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	e026      	b.n	800053e <ADC2_StartConversion+0x76>
               timeout = 100000; // Тайм-аут для ожидания
 80004f0:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <ADC2_StartConversion+0xa4>)
 80004f2:	60fb      	str	r3, [r7, #12]

               while (!(ADC2->ISR & ADC_ISR_EOC)) { // Ожидаем завершения преобразования
 80004f4:	e012      	b.n	800051c <ADC2_StartConversion+0x54>
                   if (--timeout == 0) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10c      	bne.n	800051c <ADC2_StartConversion+0x54>
                       if (ADC2->ISR & ADC_ISR_OVR) { // Проверка на переполнение
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <ADC2_StartConversion+0xa0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0310 	and.w	r3, r3, #16
 800050a:	2b00      	cmp	r3, #0
 800050c:	d027      	beq.n	800055e <ADC2_StartConversion+0x96>
                       	 LED_6_ON;
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000514:	4816      	ldr	r0, [pc, #88]	@ (8000570 <ADC2_StartConversion+0xa8>)
 8000516:	f002 f877 	bl	8002608 <HAL_GPIO_WritePin>
                       }

                       return;
 800051a:	e020      	b.n	800055e <ADC2_StartConversion+0x96>
               while (!(ADC2->ISR & ADC_ISR_EOC)) { // Ожидаем завершения преобразования
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <ADC2_StartConversion+0xa0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0e6      	beq.n	80004f6 <ADC2_StartConversion+0x2e>
                   }
               }

               data_buffer[i] = ADC2->DR; // Сохраняем данные в буфер
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <ADC2_StartConversion+0xa0>)
 800052a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	b28a      	uxth	r2, r1
 8000536:	801a      	strh	r2, [r3, #0]
           for (int i = 0; i < 3; i++) {
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	3301      	adds	r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	2b02      	cmp	r3, #2
 8000542:	ddd5      	ble.n	80004f0 <ADC2_StartConversion+0x28>
       while (!(ADC2->ISR & ADC_ISR_EOS)) { // Ожидаем завершения последовательности
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <ADC2_StartConversion+0xa0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0cc      	beq.n	80004ea <ADC2_StartConversion+0x22>
           }
       }

       ADC2->ISR |= ADC_ISR_EOS; // Сброс флага завершения последовательности
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <ADC2_StartConversion+0xa0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <ADC2_StartConversion+0xa0>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e000      	b.n	8000560 <ADC2_StartConversion+0x98>
                       return;
 800055e:	bf00      	nop
   }
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	50000100 	.word	0x50000100
 800056c:	000186a0 	.word	0x000186a0
 8000570:	48000400 	.word	0x48000400

08000574 <lcd_write_nibble>:
        I2C_send((uint8_t)(*str), 1);
        str++;
    }
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
    uint8_t data = nibble << D4_BIT;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	b2db      	uxtb	r3, r3
 800058a:	73fb      	strb	r3, [r7, #15]
    data |= rs << RS_BIT;
 800058c:	7bfa      	ldrb	r2, [r7, #15]
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	73fb      	strb	r3, [r7, #15]
    data |= backlight_state << BL_BIT;
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <lcd_write_nibble+0x7c>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	b25a      	sxtb	r2, r3
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73fb      	strb	r3, [r7, #15]
    data |= 1 << EN_BIT;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80005b4:	f107 020f 	add.w	r2, r7, #15
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	214e      	movs	r1, #78	@ 0x4e
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <lcd_write_nibble+0x80>)
 80005c2:	f002 f907 	bl	80027d4 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fb34 	bl	8001c34 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f023 0304 	bic.w	r3, r3, #4
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80005d6:	f107 020f 	add.w	r2, r7, #15
 80005da:	2364      	movs	r3, #100	@ 0x64
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	214e      	movs	r1, #78	@ 0x4e
 80005e2:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <lcd_write_nibble+0x80>)
 80005e4:	f002 f8f6 	bl	80027d4 <HAL_I2C_Master_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	200000b4 	.word	0x200000b4

080005f8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = cmd >> 4;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = cmd & 0x0F;
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 0);
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffad 	bl	8000574 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 0);
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffa8 	bl	8000574 <lcd_write_nibble>
    if (cmd == 0x01 || cmd == 0x02) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d002      	beq.n	8000630 <lcd_send_cmd+0x38>
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d102      	bne.n	8000636 <lcd_send_cmd+0x3e>
        HAL_Delay(2);
 8000630:	2002      	movs	r0, #2
 8000632:	f001 faff 	bl	8001c34 <HAL_Delay>
    }
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = data >> 4;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	091b      	lsrs	r3, r3, #4
 800064c:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = data & 0x0F;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 1);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff8a 	bl	8000574 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 1);
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff85 	bl	8000574 <lcd_write_nibble>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <lcd_init>:

void lcd_init() {
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000676:	2032      	movs	r0, #50	@ 0x32
 8000678:	f001 fadc 	bl	8001c34 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2003      	movs	r0, #3
 8000680:	f7ff ff78 	bl	8000574 <lcd_write_nibble>
    HAL_Delay(5);
 8000684:	2005      	movs	r0, #5
 8000686:	f001 fad5 	bl	8001c34 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2003      	movs	r0, #3
 800068e:	f7ff ff71 	bl	8000574 <lcd_write_nibble>
    HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 face 	bl	8001c34 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	2003      	movs	r0, #3
 800069c:	f7ff ff6a 	bl	8000574 <lcd_write_nibble>
    HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f001 fac7 	bl	8001c34 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff ff63 	bl	8000574 <lcd_write_nibble>
    lcd_send_cmd(0x28);
 80006ae:	2028      	movs	r0, #40	@ 0x28
 80006b0:	f7ff ffa2 	bl	80005f8 <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 80006b4:	200c      	movs	r0, #12
 80006b6:	f7ff ff9f 	bl	80005f8 <lcd_send_cmd>
    lcd_send_cmd(0x06);
 80006ba:	2006      	movs	r0, #6
 80006bc:	f7ff ff9c 	bl	80005f8 <lcd_send_cmd>
    lcd_send_cmd(0x01);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff99 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f001 fab4 	bl	8001c34 <HAL_Delay>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_write_string>:

void lcd_write_string(char *str) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80006d8:	e006      	b.n	80006e8 <lcd_write_string+0x18>
        lcd_send_data(*str++);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffab 	bl	800063e <lcd_send_data>
    while (*str) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f4      	bne.n	80006da <lcd_write_string+0xa>
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3b01      	subs	r3, #1
 8000710:	2b03      	cmp	r3, #3
 8000712:	d817      	bhi.n	8000744 <lcd_set_cursor+0x48>
 8000714:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <lcd_set_cursor+0x20>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000733 	.word	0x08000733
 8000724:	08000739 	.word	0x08000739
 8000728:	0800073f 	.word	0x0800073f
        case 1:
            address = 0x80;
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	73fb      	strb	r3, [r7, #15]
            break;
 8000730:	e00a      	b.n	8000748 <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000732:	23c0      	movs	r3, #192	@ 0xc0
 8000734:	73fb      	strb	r3, [r7, #15]
            break;
 8000736:	e007      	b.n	8000748 <lcd_set_cursor+0x4c>
        case 3:
            address = 0x94;
 8000738:	2394      	movs	r3, #148	@ 0x94
 800073a:	73fb      	strb	r3, [r7, #15]
            break;
 800073c:	e004      	b.n	8000748 <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 800073e:	23d4      	movs	r3, #212	@ 0xd4
 8000740:	73fb      	strb	r3, [r7, #15]
            break;
 8000742:	e001      	b.n	8000748 <lcd_set_cursor+0x4c>
        default:
            address = 0x80;
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4413      	add	r3, r2
 800074e:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff4d 	bl	80005f8 <lcd_send_cmd>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop

08000768 <lcd_clear>:

void lcd_clear(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff43 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(2);
 8000772:	2002      	movs	r0, #2
 8000774:	f001 fa5e 	bl	8001c34 <HAL_Delay>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <ALARM_LED>:
    {
        Reset_USART2();
    }
}

void ALARM_LED(uint8_t LED) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    // Убедитесь, что LED в допустимом диапазоне
    if (LED < 1 || LED > 7) return;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d063      	beq.n	8000854 <ALARM_LED+0xd8>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b07      	cmp	r3, #7
 8000790:	d860      	bhi.n	8000854 <ALARM_LED+0xd8>

    uint32_t current_time = HAL_GetTick();
 8000792:	f001 fa43 	bl	8001c1c <HAL_GetTick>
 8000796:	60f8      	str	r0, [r7, #12]

    // Проверка, прошло ли достаточно времени для переключения светодиода
    if ((current_time - led_last_toggle_time[LED]) >= TOGLE_TIME) {
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a30      	ldr	r2, [pc, #192]	@ (800085c <ALARM_LED+0xe0>)
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007a8:	d355      	bcc.n	8000856 <ALARM_LED+0xda>
        // Переключите состояние светодиода
        switch (LED) {
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d84a      	bhi.n	8000848 <ALARM_LED+0xcc>
 80007b2:	a201      	add	r2, pc, #4	@ (adr r2, 80007b8 <ALARM_LED+0x3c>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	080007e9 	.word	0x080007e9
 80007c0:	08000809 	.word	0x08000809
 80007c4:	08000829 	.word	0x08000829
            case 1:
                LED_1_Togle;
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4824      	ldr	r0, [pc, #144]	@ (8000860 <ALARM_LED+0xe4>)
 80007ce:	f001 ff33 	bl	8002638 <HAL_GPIO_TogglePin>
                led_state[1] = !led_state[1];  // Обновить состояние светодиода
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <ALARM_LED+0xe8>)
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf0c      	ite	eq
 80007da:	2301      	moveq	r3, #1
 80007dc:	2300      	movne	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <ALARM_LED+0xe8>)
 80007e4:	705a      	strb	r2, [r3, #1]
                break;
 80007e6:	e02f      	b.n	8000848 <ALARM_LED+0xcc>
            case 2:
            	LED_2_Togle;
 80007e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ec:	481c      	ldr	r0, [pc, #112]	@ (8000860 <ALARM_LED+0xe4>)
 80007ee:	f001 ff23 	bl	8002638 <HAL_GPIO_TogglePin>
                led_state[2] = !led_state[2];
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <ALARM_LED+0xe8>)
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <ALARM_LED+0xe8>)
 8000804:	709a      	strb	r2, [r3, #2]
                break;
 8000806:	e01f      	b.n	8000848 <ALARM_LED+0xcc>
            case 3:
            	LED_3_Togle;
 8000808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080c:	4814      	ldr	r0, [pc, #80]	@ (8000860 <ALARM_LED+0xe4>)
 800080e:	f001 ff13 	bl	8002638 <HAL_GPIO_TogglePin>
                led_state[3] = !led_state[3];
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <ALARM_LED+0xe8>)
 8000814:	78db      	ldrb	r3, [r3, #3]
 8000816:	2b00      	cmp	r3, #0
 8000818:	bf0c      	ite	eq
 800081a:	2301      	moveq	r3, #1
 800081c:	2300      	movne	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <ALARM_LED+0xe8>)
 8000824:	70da      	strb	r2, [r3, #3]
                break;
 8000826:	e00f      	b.n	8000848 <ALARM_LED+0xcc>
            case 4:
				LED_4_Togle;
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f001 ff03 	bl	8002638 <HAL_GPIO_TogglePin>
				led_state[4] = !led_state[4];
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <ALARM_LED+0xe8>)
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <ALARM_LED+0xe8>)
 8000844:	711a      	strb	r2, [r3, #4]
				break;
 8000846:	bf00      	nop
        }

        // Обновите время последнего переключения
        led_last_toggle_time[LED] = current_time;
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <ALARM_LED+0xe0>)
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000852:	e000      	b.n	8000856 <ALARM_LED+0xda>
    if (LED < 1 || LED > 7) return;
 8000854:	bf00      	nop
    }
}
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000310 	.word	0x20000310
 8000860:	48000800 	.word	0x48000800
 8000864:	2000032c 	.word	0x2000032c

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 f97b 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f98b 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fc93 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f000 fc6b 	bl	8001154 <MX_DMA_Init>
  MX_I2C1_Init();
 800087e:	f000 fa1d 	bl	8000cbc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000882:	f000 fa5b 	bl	8000d3c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000886:	f000 fb87 	bl	8000f98 <MX_TIM8_Init>
  MX_TIM2_Init();
 800088a:	f000 fb05 	bl	8000e98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800088e:	f000 fc31 	bl	80010f4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000892:	f000 f9df 	bl	8000c54 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	48a2      	ldr	r0, [pc, #648]	@ (8000b28 <main+0x2c0>)
 800089e:	f001 feb3 	bl	8002608 <HAL_GPIO_WritePin>
   LED_2_ON;
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a8:	489f      	ldr	r0, [pc, #636]	@ (8000b28 <main+0x2c0>)
 80008aa:	f001 fead 	bl	8002608 <HAL_GPIO_WritePin>
   LED_3_ON;
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	489c      	ldr	r0, [pc, #624]	@ (8000b28 <main+0x2c0>)
 80008b6:	f001 fea7 	bl	8002608 <HAL_GPIO_WritePin>
   LED_4_ON;
 80008ba:	2201      	movs	r2, #1
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f001 fea1 	bl	8002608 <HAL_GPIO_WritePin>
   LED_5_ON;
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008cc:	4897      	ldr	r0, [pc, #604]	@ (8000b2c <main+0x2c4>)
 80008ce:	f001 fe9b 	bl	8002608 <HAL_GPIO_WritePin>
   LED_6_ON;
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d8:	4894      	ldr	r0, [pc, #592]	@ (8000b2c <main+0x2c4>)
 80008da:	f001 fe95 	bl	8002608 <HAL_GPIO_WritePin>
   LED_7_ON;
 80008de:	2201      	movs	r2, #1
 80008e0:	2120      	movs	r1, #32
 80008e2:	4892      	ldr	r0, [pc, #584]	@ (8000b2c <main+0x2c4>)
 80008e4:	f001 fe90 	bl	8002608 <HAL_GPIO_WritePin>


   ADC1_Init();
 80008e8:	f7ff fcc2 	bl	8000270 <ADC1_Init>
   ADC2_Init();
 80008ec:	f7ff fd2e 	bl	800034c <ADC2_Init>


   HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	@ 0x64
 80008f2:	f001 f99f 	bl	8001c34 <HAL_Delay>
   lcd_init();
 80008f6:	f7ff febc 	bl	8000672 <lcd_init>
   lcd_clear();
 80008fa:	f7ff ff35 	bl	8000768 <lcd_clear>

   Menu_Init(&menu);
 80008fe:	488c      	ldr	r0, [pc, #560]	@ (8000b30 <main+0x2c8>)
 8000900:	f000 fde8 	bl	80014d4 <Menu_Init>


   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	488b      	ldr	r0, [pc, #556]	@ (8000b34 <main+0x2cc>)
 8000908:	f003 fff6 	bl	80048f8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	488a      	ldr	r0, [pc, #552]	@ (8000b38 <main+0x2d0>)
 8000910:	f003 fff2 	bl	80048f8 <HAL_TIM_PWM_Start>
   LED_1_OFF;
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4883      	ldr	r0, [pc, #524]	@ (8000b28 <main+0x2c0>)
 800091c:	f001 fe74 	bl	8002608 <HAL_GPIO_WritePin>
   LED_2_OFF;
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	4880      	ldr	r0, [pc, #512]	@ (8000b28 <main+0x2c0>)
 8000928:	f001 fe6e 	bl	8002608 <HAL_GPIO_WritePin>
   LED_3_OFF;
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000932:	487d      	ldr	r0, [pc, #500]	@ (8000b28 <main+0x2c0>)
 8000934:	f001 fe68 	bl	8002608 <HAL_GPIO_WritePin>
   LED_4_OFF;
 8000938:	2200      	movs	r2, #0
 800093a:	2180      	movs	r1, #128	@ 0x80
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f001 fe62 	bl	8002608 <HAL_GPIO_WritePin>
   LED_5_OFF;
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800094a:	4878      	ldr	r0, [pc, #480]	@ (8000b2c <main+0x2c4>)
 800094c:	f001 fe5c 	bl	8002608 <HAL_GPIO_WritePin>
   LED_6_OFF;
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	4875      	ldr	r0, [pc, #468]	@ (8000b2c <main+0x2c4>)
 8000958:	f001 fe56 	bl	8002608 <HAL_GPIO_WritePin>
   LED_7_OFF;
 800095c:	2200      	movs	r2, #0
 800095e:	2120      	movs	r1, #32
 8000960:	4872      	ldr	r0, [pc, #456]	@ (8000b2c <main+0x2c4>)
 8000962:	f001 fe51 	bl	8002608 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((lcd_update==true)||((HAL_GetTick()-UpdateMenuTime)>=1000)){
 8000966:	4b75      	ldr	r3, [pc, #468]	@ (8000b3c <main+0x2d4>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d108      	bne.n	8000980 <main+0x118>
 800096e:	f001 f955 	bl	8001c1c <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	4b72      	ldr	r3, [pc, #456]	@ (8000b40 <main+0x2d8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800097e:	d349      	bcc.n	8000a14 <main+0x1ac>
		  lcd_set_cursor(2, 0);
 8000980:	2100      	movs	r1, #0
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff feba 	bl	80006fc <lcd_set_cursor>
		  sprintf(int_to_str, "1-%04d,2-%04d,3-%04d", adc2_data[0],adc2_data[1],adc2_data[2] );
 8000988:	4b6e      	ldr	r3, [pc, #440]	@ (8000b44 <main+0x2dc>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b44 <main+0x2dc>)
 8000990:	885b      	ldrh	r3, [r3, #2]
 8000992:	4619      	mov	r1, r3
 8000994:	4b6b      	ldr	r3, [pc, #428]	@ (8000b44 <main+0x2dc>)
 8000996:	889b      	ldrh	r3, [r3, #4]
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	460b      	mov	r3, r1
 800099c:	496a      	ldr	r1, [pc, #424]	@ (8000b48 <main+0x2e0>)
 800099e:	486b      	ldr	r0, [pc, #428]	@ (8000b4c <main+0x2e4>)
 80009a0:	f005 fe12 	bl	80065c8 <siprintf>
		  lcd_write_string(int_to_str);
 80009a4:	4869      	ldr	r0, [pc, #420]	@ (8000b4c <main+0x2e4>)
 80009a6:	f7ff fe93 	bl	80006d0 <lcd_write_string>

		  lcd_set_cursor(3, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2003      	movs	r0, #3
 80009ae:	f7ff fea5 	bl	80006fc <lcd_set_cursor>
		  sprintf(int_to_str, "1-%04d,2-%04d,3-%04d", adc1_data[0],adc1_data[1],adc1_data[2] );
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <main+0x2e8>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b65      	ldr	r3, [pc, #404]	@ (8000b50 <main+0x2e8>)
 80009ba:	885b      	ldrh	r3, [r3, #2]
 80009bc:	4619      	mov	r1, r3
 80009be:	4b64      	ldr	r3, [pc, #400]	@ (8000b50 <main+0x2e8>)
 80009c0:	889b      	ldrh	r3, [r3, #4]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	460b      	mov	r3, r1
 80009c6:	4960      	ldr	r1, [pc, #384]	@ (8000b48 <main+0x2e0>)
 80009c8:	4860      	ldr	r0, [pc, #384]	@ (8000b4c <main+0x2e4>)
 80009ca:	f005 fdfd 	bl	80065c8 <siprintf>
		  lcd_write_string(int_to_str);
 80009ce:	485f      	ldr	r0, [pc, #380]	@ (8000b4c <main+0x2e4>)
 80009d0:	f7ff fe7e 	bl	80006d0 <lcd_write_string>

		  lcd_set_cursor(4, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2004      	movs	r0, #4
 80009d8:	f7ff fe90 	bl	80006fc <lcd_set_cursor>
		  sprintf(int_to_str, "1-%04d,2-%04d,3-%04d", ADC_1_MAX, ADC_2_MAX, ADC_3_MAX );
 80009dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000b54 <main+0x2ec>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b58 <main+0x2f0>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b5c <main+0x2f4>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	460b      	mov	r3, r1
 80009f0:	4955      	ldr	r1, [pc, #340]	@ (8000b48 <main+0x2e0>)
 80009f2:	4856      	ldr	r0, [pc, #344]	@ (8000b4c <main+0x2e4>)
 80009f4:	f005 fde8 	bl	80065c8 <siprintf>
		  lcd_write_string(int_to_str);
 80009f8:	4854      	ldr	r0, [pc, #336]	@ (8000b4c <main+0x2e4>)
 80009fa:	f7ff fe69 	bl	80006d0 <lcd_write_string>
          lcd_update=false;
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <main+0x2d4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
          adc_count=0;
 8000a04:	4b56      	ldr	r3, [pc, #344]	@ (8000b60 <main+0x2f8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	801a      	strh	r2, [r3, #0]
          UpdateMenuTime= HAL_GetTick();
 8000a0a:	f001 f907 	bl	8001c1c <HAL_GetTick>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a4b      	ldr	r2, [pc, #300]	@ (8000b40 <main+0x2d8>)
 8000a12:	6013      	str	r3, [r2, #0]
	        }


	      LED_5_ON;
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a1a:	4844      	ldr	r0, [pc, #272]	@ (8000b2c <main+0x2c4>)
 8000a1c:	f001 fdf4 	bl	8002608 <HAL_GPIO_WritePin>
          Measure++;
 8000a20:	4b50      	ldr	r3, [pc, #320]	@ (8000b64 <main+0x2fc>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b4e      	ldr	r3, [pc, #312]	@ (8000b64 <main+0x2fc>)
 8000a2a:	801a      	strh	r2, [r3, #0]
		  ADC1_StartConversion(adc1_data);
 8000a2c:	4848      	ldr	r0, [pc, #288]	@ (8000b50 <main+0x2e8>)
 8000a2e:	f7ff fced 	bl	800040c <ADC1_StartConversion>

		  ADC2_StartConversion(adc2_data);
 8000a32:	4844      	ldr	r0, [pc, #272]	@ (8000b44 <main+0x2dc>)
 8000a34:	f7ff fd48 	bl	80004c8 <ADC2_StartConversion>
		  LED_5_OFF;
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a3e:	483b      	ldr	r0, [pc, #236]	@ (8000b2c <main+0x2c4>)
 8000a40:	f001 fde2 	bl	8002608 <HAL_GPIO_WritePin>

           if(Measure<=400){
 8000a44:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <main+0x2fc>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000a4c:	d81d      	bhi.n	8000a8a <main+0x222>
		  if(adc2_data[0]>=ADC_1_MID){ADC_1_MID=adc2_data[0];}
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b44 <main+0x2dc>)
 8000a50:	881a      	ldrh	r2, [r3, #0]
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <main+0x300>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d303      	bcc.n	8000a62 <main+0x1fa>
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b44 <main+0x2dc>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <main+0x300>)
 8000a60:	801a      	strh	r2, [r3, #0]
		  if(adc2_data[1]>=ADC_2_MID){ADC_2_MID=adc2_data[1];}
 8000a62:	4b38      	ldr	r3, [pc, #224]	@ (8000b44 <main+0x2dc>)
 8000a64:	885a      	ldrh	r2, [r3, #2]
 8000a66:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <main+0x304>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d303      	bcc.n	8000a76 <main+0x20e>
 8000a6e:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <main+0x2dc>)
 8000a70:	885a      	ldrh	r2, [r3, #2]
 8000a72:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <main+0x304>)
 8000a74:	801a      	strh	r2, [r3, #0]
		  if(adc2_data[2]>=ADC_3_MID){ADC_3_MID=adc2_data[2];} }
 8000a76:	4b33      	ldr	r3, [pc, #204]	@ (8000b44 <main+0x2dc>)
 8000a78:	889a      	ldrh	r2, [r3, #4]
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b70 <main+0x308>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d303      	bcc.n	8000a8a <main+0x222>
 8000a82:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <main+0x2dc>)
 8000a84:	889a      	ldrh	r2, [r3, #4]
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <main+0x308>)
 8000a88:	801a      	strh	r2, [r3, #0]

           if(Measure==401){ADC_1_MAX=ADC_1_MID;ADC_2_MAX=ADC_2_MID;ADC_3_MAX=ADC_3_MID;}
 8000a8a:	4b36      	ldr	r3, [pc, #216]	@ (8000b64 <main+0x2fc>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	f240 1291 	movw	r2, #401	@ 0x191
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10b      	bne.n	8000aae <main+0x246>
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <main+0x300>)
 8000a98:	881a      	ldrh	r2, [r3, #0]
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <main+0x2ec>)
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <main+0x304>)
 8000aa0:	881a      	ldrh	r2, [r3, #0]
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <main+0x2f0>)
 8000aa4:	801a      	strh	r2, [r3, #0]
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <main+0x308>)
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <main+0x2f4>)
 8000aac:	801a      	strh	r2, [r3, #0]



		  if((HAL_GetTick()-UpdatePhaze_1)>= PHAZE_UPDATE){Phaze_1_Error=true; ALARM_LED(1);}else Phaze_1_Error=false;
 8000aae:	f001 f8b5 	bl	8001c1c <HAL_GetTick>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b74 <main+0x30c>)
 8000ab6:	8812      	ldrh	r2, [r2, #0]
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d906      	bls.n	8000ad0 <main+0x268>
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <main+0x310>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fe57 	bl	800077c <ALARM_LED>
 8000ace:	e002      	b.n	8000ad6 <main+0x26e>
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <main+0x310>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		  if((HAL_GetTick()-UpdatePhaze_2)>= PHAZE_UPDATE){Phaze_2_Error=true; ALARM_LED(2);}else Phaze_2_Error=false;
 8000ad6:	f001 f8a1 	bl	8001c1c <HAL_GetTick>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a27      	ldr	r2, [pc, #156]	@ (8000b7c <main+0x314>)
 8000ade:	8812      	ldrh	r2, [r2, #0]
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d906      	bls.n	8000af8 <main+0x290>
 8000aea:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <main+0x318>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	2002      	movs	r0, #2
 8000af2:	f7ff fe43 	bl	800077c <ALARM_LED>
 8000af6:	e002      	b.n	8000afe <main+0x296>
 8000af8:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <main+0x318>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		  if((HAL_GetTick()-UpdatePhaze_3)>= PHAZE_UPDATE){Phaze_3_Error=true; ALARM_LED(3);}else Phaze_3_Error=false;
 8000afe:	f001 f88d 	bl	8001c1c <HAL_GetTick>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a1f      	ldr	r2, [pc, #124]	@ (8000b84 <main+0x31c>)
 8000b06:	8812      	ldrh	r2, [r2, #0]
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d906      	bls.n	8000b20 <main+0x2b8>
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <main+0x320>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f7ff fe2f 	bl	800077c <ALARM_LED>
 8000b1e:	e722      	b.n	8000966 <main+0xfe>
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <main+0x320>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	  if((lcd_update==true)||((HAL_GetTick()-UpdateMenuTime)>=1000)){
 8000b26:	e71e      	b.n	8000966 <main+0xfe>
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	200002fc 	.word	0x200002fc
 8000b34:	20000108 	.word	0x20000108
 8000b38:	200001a0 	.word	0x200001a0
 8000b3c:	20000333 	.word	0x20000333
 8000b40:	20000300 	.word	0x20000300
 8000b44:	2000033c 	.word	0x2000033c
 8000b48:	08006f20 	.word	0x08006f20
 8000b4c:	20000080 	.word	0x20000080
 8000b50:	20000334 	.word	0x20000334
 8000b54:	20000342 	.word	0x20000342
 8000b58:	20000344 	.word	0x20000344
 8000b5c:	20000346 	.word	0x20000346
 8000b60:	20000348 	.word	0x20000348
 8000b64:	2000030a 	.word	0x2000030a
 8000b68:	20000002 	.word	0x20000002
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	20000006 	.word	0x20000006
 8000b74:	20000304 	.word	0x20000304
 8000b78:	2000030c 	.word	0x2000030c
 8000b7c:	20000306 	.word	0x20000306
 8000b80:	2000030d 	.word	0x2000030d
 8000b84:	20000308 	.word	0x20000308
 8000b88:	2000030e 	.word	0x2000030e

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09e      	sub	sp, #120	@ 0x78
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b96:	2228      	movs	r2, #40	@ 0x28
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fd34 	bl	8006608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	223c      	movs	r2, #60	@ 0x3c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 fd26 	bl	8006608 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bda:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bdc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000be0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 f9be 	bl	8002f68 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 fc69 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c10:	2102      	movs	r1, #2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 f9e6 	bl	8003fe4 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c1e:	f000 fc53 	bl	80014c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000c22:	f243 0322 	movw	r3, #12322	@ 0x3022
 8000c26:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fbf4 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c46:	f000 fc3f 	bl	80014c8 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3778      	adds	r7, #120	@ 0x78
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <MX_CAN_Init+0x64>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c60:	2210      	movs	r2, #16
 8000c62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_CAN_Init+0x60>)
 8000ca2:	f000 ffeb 	bl	8001c7c <HAL_CAN_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 fc0c 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000008c 	.word	0x2000008c
 8000cb8:	40006400 	.word	0x40006400

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <MX_I2C1_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200003;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <MX_I2C1_Init+0x7c>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf6:	480e      	ldr	r0, [pc, #56]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000cf8:	f001 fcd0 	bl	800269c <HAL_I2C_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d02:	f000 fbe1 	bl	80014c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000d0a:	f002 f895 	bl	8002e38 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 fbd8 	bl	80014c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8000d18:	2105      	movs	r1, #5
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_I2C1_Init+0x74>)
 8000d1c:	f002 f8d7 	bl	8002ece <HAL_I2CEx_ConfigDigitalFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 fbcf 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000b4 	.word	0x200000b4
 8000d34:	40005400 	.word	0x40005400
 8000d38:	00200003 	.word	0x00200003

08000d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09a      	sub	sp, #104	@ 0x68
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	222c      	movs	r2, #44	@ 0x2c
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 fc46 	bl	8006608 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d7c:	4b44      	ldr	r3, [pc, #272]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d7e:	4a45      	ldr	r2, [pc, #276]	@ (8000e94 <MX_TIM1_Init+0x158>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d82:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b41      	ldr	r3, [pc, #260]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8000d8e:	4b40      	ldr	r3, [pc, #256]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d90:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000d94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da8:	4839      	ldr	r0, [pc, #228]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000daa:	f003 fced 	bl	8004788 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000db4:	f000 fb88 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4832      	ldr	r0, [pc, #200]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000dc6:	f004 f8a9 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dd0:	f000 fb7a 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd4:	482e      	ldr	r0, [pc, #184]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000dd6:	f003 fd2e 	bl	8004836 <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000de0:	f000 fb72 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4826      	ldr	r0, [pc, #152]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000df8:	f004 feaa 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e02:	f000 fb61 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	@ 0x60
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 2000;
 8000e0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4818      	ldr	r0, [pc, #96]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000e2e:	f003 ff61 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000e38:	f000 fb46 	bl	80014c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000e72:	f004 feed 	bl	8005c50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e7c:	f000 fb24 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <MX_TIM1_Init+0x154>)
 8000e82:	f000 fc91 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3768      	adds	r7, #104	@ 0x68
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000108 	.word	0x20000108
 8000e94:	40012c00 	.word	0x40012c00

08000e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec4:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eec:	4829      	ldr	r0, [pc, #164]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000eee:	f003 fc4b 	bl	8004788 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ef8:	f000 fae6 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4822      	ldr	r0, [pc, #136]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000f0a:	f004 f807 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f14:	f000 fad8 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f18:	481e      	ldr	r0, [pc, #120]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000f1a:	f003 fded 	bl	8004af8 <HAL_TIM_IC_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fad0 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000f38:	f004 fe0a 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000f42:	f000 fac1 	bl	80014c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000f52:	230f      	movs	r3, #15
 8000f54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000f5e:	f003 fe2c 	bl	8004bba <HAL_TIM_IC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f68:	f000 faae 	bl	80014c8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	220c      	movs	r2, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_TIM2_Init+0xfc>)
 8000f7c:	f003 fe1d 	bl	8004bba <HAL_TIM_IC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000f86:	f000 fa9f 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	@ 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000154 	.word	0x20000154

08000f98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09a      	sub	sp, #104	@ 0x68
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	222c      	movs	r2, #44	@ 0x2c
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fb18 	bl	8006608 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fd8:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000fda:	4a45      	ldr	r2, [pc, #276]	@ (80010f0 <MX_TIM8_Init+0x158>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fde:	4b43      	ldr	r3, [pc, #268]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000;
 8000fea:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000fec:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000ff0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80010ec <MX_TIM8_Init+0x154>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <MX_TIM8_Init+0x154>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001004:	4839      	ldr	r0, [pc, #228]	@ (80010ec <MX_TIM8_Init+0x154>)
 8001006:	f003 fbbf 	bl	8004788 <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001010:	f000 fa5a 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800101a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800101e:	4619      	mov	r1, r3
 8001020:	4832      	ldr	r0, [pc, #200]	@ (80010ec <MX_TIM8_Init+0x154>)
 8001022:	f003 ff7b 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800102c:	f000 fa4c 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001030:	482e      	ldr	r0, [pc, #184]	@ (80010ec <MX_TIM8_Init+0x154>)
 8001032:	f003 fc00 	bl	8004836 <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800103c:	f000 fa44 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800104c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001050:	4619      	mov	r1, r3
 8001052:	4826      	ldr	r0, [pc, #152]	@ (80010ec <MX_TIM8_Init+0x154>)
 8001054:	f004 fd7c 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800105e:	f000 fa33 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	@ 0x60
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 2000;
 8001066:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001074:	2304      	movs	r3, #4
 8001076:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	4818      	ldr	r0, [pc, #96]	@ (80010ec <MX_TIM8_Init+0x154>)
 800108a:	f003 fe33 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001094:	f000 fa18 	bl	80014c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM8_Init+0x154>)
 80010ce:	f004 fdbf 	bl	8005c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80010d8:	f000 f9f6 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM8_Init+0x154>)
 80010de:	f000 fb63 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3768      	adds	r7, #104	@ 0x68
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001a0 	.word	0x200001a0
 80010f0:	40013400 	.word	0x40013400

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART2_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_USART2_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001100:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001138:	f004 fe08 	bl	8005d4c <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f9c1 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001ec 	.word	0x200001ec
 8001150:	40004400 	.word	0x40004400

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_DMA_Init+0x48>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <MX_DMA_Init+0x48>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_DMA_Init+0x48>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2010      	movs	r0, #16
 8001178:	f000 ff57 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800117c:	2010      	movs	r0, #16
 800117e:	f000 ff70 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2011      	movs	r0, #17
 8001188:	f000 ff4f 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800118c:	2011      	movs	r0, #17
 800118e:	f000 ff68 	bl	8002062 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b52      	ldr	r3, [pc, #328]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a51      	ldr	r2, [pc, #324]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b49      	ldr	r3, [pc, #292]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b46      	ldr	r3, [pc, #280]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a45      	ldr	r2, [pc, #276]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <MX_GPIO_Init+0x160>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <MX_GPIO_Init+0x160>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a3f      	ldr	r2, [pc, #252]	@ (8001300 <MX_GPIO_Init+0x160>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <MX_GPIO_Init+0x160>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800121c:	4839      	ldr	r0, [pc, #228]	@ (8001304 <MX_GPIO_Init+0x164>)
 800121e:	f001 f9f3 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2180      	movs	r1, #128	@ 0x80
 8001226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122a:	f001 f9ed 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_7_Pin|DIRECT_Pin|LED_5_Pin|LED_6_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 6123 	mov.w	r1, #2608	@ 0xa30
 8001234:	4834      	ldr	r0, [pc, #208]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001236:	f001 f9e7 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800123a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	482c      	ldr	r0, [pc, #176]	@ (8001304 <MX_GPIO_Init+0x164>)
 8001254:	f001 f846 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001258:	237f      	movs	r3, #127	@ 0x7f
 800125a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 f839 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f001 f82a 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin DIRECT_Pin LED_5_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|DIRECT_Pin|LED_5_Pin|LED_6_Pin;
 8001290:	f44f 6323 	mov.w	r3, #2608	@ 0xa30
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4817      	ldr	r0, [pc, #92]	@ (8001308 <MX_GPIO_Init+0x168>)
 80012aa:	f001 f81b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80012ae:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4810      	ldr	r0, [pc, #64]	@ (8001308 <MX_GPIO_Init+0x168>)
 80012c6:	f001 f80d 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <MX_GPIO_Init+0x168>)
 80012e2:	f000 ffff 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2028      	movs	r0, #40	@ 0x28
 80012ec:	f000 fe9d 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f0:	2028      	movs	r0, #40	@ 0x28
 80012f2:	f000 feb6 	bl	8002062 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800
 8001308:	48000400 	.word	0x48000400

0800130c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_12) // если прерывание поступило от ножки PA1
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800131c:	d135      	bne.n	800138a <HAL_GPIO_EXTI_Callback+0x7e>
		   {
			if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 800131e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001322:	4861      	ldr	r0, [pc, #388]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001324:	f001 f958 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d11b      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x5a>

					   LED_1_ON;
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001334:	485d      	ldr	r0, [pc, #372]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001336:	f001 f967 	bl	8002608 <HAL_GPIO_WritePin>
                  UpdatePhaze_1=HAL_GetTick();
 800133a:	f000 fc6f 	bl	8001c1c <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001344:	801a      	strh	r2, [r3, #0]
                     adc_count++;
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001350:	801a      	strh	r2, [r3, #0]
                     if(adc_count>=50){adc_count=0;lcd_update=true;}
 8001352:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2b31      	cmp	r3, #49	@ 0x31
 8001358:	d905      	bls.n	8001366 <HAL_GPIO_EXTI_Callback+0x5a>
 800135a:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	4b55      	ldr	r3, [pc, #340]	@ (80014b8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
				   }

			     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 8001366:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800136a:	484f      	ldr	r0, [pc, #316]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 800136c:	f001 f934 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <HAL_GPIO_EXTI_Callback+0x76>
			           LED_1_OFF;
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	484b      	ldr	r0, [pc, #300]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 800137e:	f001 f943 	bl	8002608 <HAL_GPIO_WritePin>


			     }
			     EXTI->PR = EXTI_PR_PR12;
 8001382:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001384:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001388:	615a      	str	r2, [r3, #20]
		   }


	   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001390:	d125      	bne.n	80013de <HAL_GPIO_EXTI_Callback+0xd2>
	   {

		   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 8001392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001396:	4844      	ldr	r0, [pc, #272]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001398:	f001 f91e 	bl	80025d8 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d105      	bne.n	80013ae <HAL_GPIO_EXTI_Callback+0xa2>
	              LED_2_ON;}
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013a8:	4840      	ldr	r0, [pc, #256]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 80013aa:	f001 f92d 	bl	8002608 <HAL_GPIO_WritePin>
		      UpdatePhaze_2=HAL_GetTick();
 80013ae:	f000 fc35 	bl	8001c1c <HAL_GetTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80013b8:	801a      	strh	r2, [r3, #0]


	       if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 80013ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013be:	483a      	ldr	r0, [pc, #232]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 80013c0:	f001 f90a 	bl	80025d8 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <HAL_GPIO_EXTI_Callback+0xca>
	              LED_2_OFF;
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013d0:	4836      	ldr	r0, [pc, #216]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 80013d2:	f001 f919 	bl	8002608 <HAL_GPIO_WritePin>

	         }
	       EXTI->PR = EXTI_PR_PR13;
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80013d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013dc:	615a      	str	r2, [r3, #20]
	   }


	   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013e4:	d12f      	bne.n	8001446 <HAL_GPIO_EXTI_Callback+0x13a>
	     {

		   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 80013e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ea:	482f      	ldr	r0, [pc, #188]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 80013ec:	f001 f8f4 	bl	80025d8 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10b      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0x102>
	           LED_3_ON;
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013fc:	482b      	ldr	r0, [pc, #172]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 80013fe:	f001 f903 	bl	8002608 <HAL_GPIO_WritePin>
	           UpdatePhaze_3=HAL_GetTick();
 8001402:	f000 fc0b 	bl	8001c1c <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800140c:	801a      	strh	r2, [r3, #0]


			  }

		   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 800140e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001412:	4825      	ldr	r0, [pc, #148]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001414:	f001 f8e0 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_GPIO_EXTI_Callback+0x132>
	           LED_3_OFF;
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001426:	f001 f8ef 	bl	8002608 <HAL_GPIO_WritePin>

	           if(adc_count>=50){adc_count=0;lcd_update=true;}
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2b31      	cmp	r3, #49	@ 0x31
 8001430:	d905      	bls.n	800143e <HAL_GPIO_EXTI_Callback+0x132>
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001434:	2200      	movs	r2, #0
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]

			   }
		       EXTI->PR = EXTI_PR_PR14;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001440:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001444:	615a      	str	r2, [r3, #20]
	       }


   if(GPIO_Pin == GPIO_PIN_15) // если прерывание поступило от ножки 15
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800144c:	d128      	bne.n	80014a0 <HAL_GPIO_EXTI_Callback+0x194>
      {
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)){
 800144e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001452:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001454:	f001 f8c0 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10e      	bne.n	800147c <HAL_GPIO_EXTI_Callback+0x170>
          //  button_press = HAL_GetTick();
		   LED_4_ON;
 800145e:	2201      	movs	r2, #1
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	f001 f8cf 	bl	8002608 <HAL_GPIO_WritePin>
		//   Get_Buttons_States(buttons_states);

		    for (uint8_t i = 0; i < 8; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e002      	b.n	8001476 <HAL_GPIO_EXTI_Callback+0x16a>
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b07      	cmp	r3, #7
 800147a:	d9f9      	bls.n	8001470 <HAL_GPIO_EXTI_Callback+0x164>
		  			                   }
		  			               }

	   }

     if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)){
 800147c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001480:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001482:	f001 f8a9 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x18c>
           LED_4_OFF;
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	@ 0x80
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f001 f8b8 	bl	8002608 <HAL_GPIO_WritePin>


            }

        EXTI->PR = EXTI_PR_PR15;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_GPIO_EXTI_Callback+0x1b0>)
 800149a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800149e:	615a      	str	r2, [r3, #20]
        }

}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	48000400 	.word	0x48000400
 80014ac:	48000800 	.word	0x48000800
 80014b0:	20000304 	.word	0x20000304
 80014b4:	20000348 	.word	0x20000348
 80014b8:	20000333 	.word	0x20000333
 80014bc:	40010400 	.word	0x40010400
 80014c0:	20000306 	.word	0x20000306
 80014c4:	20000308 	.word	0x20000308

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>

080014d4 <Menu_Init>:

#include "menu.h"
#include "I2C_display.h"

// Функция инициализации меню
void Menu_Init(Menu *menu) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    menu->currentState = MENU_MAIN_VIEW;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    menu->currentOption = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	705a      	strb	r2, [r3, #1]
    Menu_UpdateDisplay(menu);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f805 	bl	80014f8 <Menu_UpdateDisplay>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <Menu_UpdateDisplay>:
    }

}

// Функция обновления дисплея
void Menu_UpdateDisplay(Menu *menu) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
   // static uint8_t previousState = 255;  // Инициализируем значение, которое не совпадает с MENU_STATE_xxx

    // Проверяем, изменилось ли текущее состояние меню
  //  if (menu->currentState != previousState) {
     //   lcd_clear();  // Очищаем экран только если состояние изменилось
        switch (menu->currentState) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d82b      	bhi.n	8001560 <Menu_UpdateDisplay+0x68>
 8001508:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <Menu_UpdateDisplay+0x18>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	08001531 	.word	0x08001531
 8001518:	08001541 	.word	0x08001541
 800151c:	08001551 	.word	0x08001551
            case MENU_MAIN_VIEW:
                lcd_set_cursor(1, 0);
 8001520:	2100      	movs	r1, #0
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff f8ea 	bl	80006fc <lcd_set_cursor>
                lcd_write_string("Main Menu           ");
 8001528:	4810      	ldr	r0, [pc, #64]	@ (800156c <Menu_UpdateDisplay+0x74>)
 800152a:	f7ff f8d1 	bl	80006d0 <lcd_write_string>

				lcd_set_cursor(4, 0);
				sprintf(int_to_str,"1-%04d,2-%04d,3-%04d", ADC_3_MAX,ADC_3_MIN, ADC_2_MID);
				lcd_write_string(int_to_str);
   */
                break;
 800152e:	e018      	b.n	8001562 <Menu_UpdateDisplay+0x6a>
            case MENU_SUPPLY_VIEW:
                lcd_set_cursor(1, 0);
 8001530:	2100      	movs	r1, #0
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff f8e2 	bl	80006fc <lcd_set_cursor>
                lcd_write_string("Menu Supply         ");
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <Menu_UpdateDisplay+0x78>)
 800153a:	f7ff f8c9 	bl	80006d0 <lcd_write_string>

                break;
 800153e:	e010      	b.n	8001562 <Menu_UpdateDisplay+0x6a>
            case MENU_CONNECT_VIEW:
                lcd_set_cursor(1, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff f8da 	bl	80006fc <lcd_set_cursor>
                lcd_write_string("Menu Connection     ");
 8001548:	480a      	ldr	r0, [pc, #40]	@ (8001574 <Menu_UpdateDisplay+0x7c>)
 800154a:	f7ff f8c1 	bl	80006d0 <lcd_write_string>

                break;
 800154e:	e008      	b.n	8001562 <Menu_UpdateDisplay+0x6a>
            case MENU_ALARM_VIEW:
                lcd_set_cursor(1, 0);
 8001550:	2100      	movs	r1, #0
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff f8d2 	bl	80006fc <lcd_set_cursor>
                lcd_write_string("Menu Alarm          ");
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <Menu_UpdateDisplay+0x80>)
 800155a:	f7ff f8b9 	bl	80006d0 <lcd_write_string>

                break;
 800155e:	e000      	b.n	8001562 <Menu_UpdateDisplay+0x6a>
            default:
                break;
 8001560:	bf00      	nop
        }

        // Обновляем предыдущее состояние
      //  previousState = menu->currentState;
  //  }
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	08006f38 	.word	0x08006f38
 8001570:	08006f50 	.word	0x08006f50
 8001574:	08006f68 	.word	0x08006f68
 8001578:	08006f80 	.word	0x08006f80

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_MspInit+0x44>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_MspInit+0x44>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_MspInit+0x44>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <HAL_MspInit+0x44>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <HAL_MspInit+0x44>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_MspInit+0x44>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a18      	ldr	r2, [pc, #96]	@ (8001644 <HAL_CAN_MspInit+0x80>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d129      	bne.n	800163a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 80015ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_CAN_MspInit+0x84>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001616:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001628:	2309      	movs	r3, #9
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001636:	f000 fe55 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40006400 	.word	0x40006400
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_I2C_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d128      	bne.n	80016c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001686:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <HAL_I2C_MspInit+0x84>)
 80016a4:	f000 fe1e 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b2:	61d3      	str	r3, [r2, #28]
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	@ 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10c      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f6:	4b29      	ldr	r3, [pc, #164]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a28      	ldr	r2, [pc, #160]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 80016fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b26      	ldr	r3, [pc, #152]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800170e:	e03f      	b.n	8001790 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001718:	d129      	bne.n	800176e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800173c:	6153      	str	r3, [r2, #20]
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <HAL_TIM_Base_MspInit+0xcc>)
 8001768:	f000 fdbc 	bl	80022e4 <HAL_GPIO_Init>
}
 800176c:	e010      	b.n	8001790 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM8)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <HAL_TIM_Base_MspInit+0xd0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d10b      	bne.n	8001790 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 800177e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	@ 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	40013400 	.word	0x40013400

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <HAL_TIM_MspPostInit+0xac>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11e      	bne.n	8001808 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017f4:	2306      	movs	r3, #6
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f000 fd6f 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001806:	e020      	b.n	800184a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a13      	ldr	r2, [pc, #76]	@ (800185c <HAL_TIM_MspPostInit+0xb4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11b      	bne.n	800184a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800181c:	6153      	str	r3, [r2, #20]
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182a:	2340      	movs	r3, #64	@ 0x40
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800183a:	2305      	movs	r3, #5
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4806      	ldr	r0, [pc, #24]	@ (8001860 <HAL_TIM_MspPostInit+0xb8>)
 8001846:	f000 fd4d 	bl	80022e4 <HAL_GPIO_Init>
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40013400 	.word	0x40013400
 8001860:	48000400 	.word	0x48000400

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_UART_MspInit+0x154>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f040 8093 	bne.w	80019ae <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001888:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <HAL_UART_MspInit+0x158>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_UART_MspInit+0x158>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_UART_MspInit+0x158>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	4a45      	ldr	r2, [pc, #276]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018aa:	6153      	str	r3, [r2, #20]
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	4a3f      	ldr	r2, [pc, #252]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c2:	6153      	str	r3, [r2, #20]
 80018c4:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_UART_MspInit+0x158>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f0:	f000 fcf8 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018f4:	2308      	movs	r3, #8
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001904:	2307      	movs	r3, #7
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	482c      	ldr	r0, [pc, #176]	@ (80019c0 <HAL_UART_MspInit+0x15c>)
 8001910:	f000 fce8 	bl	80022e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001916:	4a2c      	ldr	r2, [pc, #176]	@ (80019c8 <HAL_UART_MspInit+0x164>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001946:	481f      	ldr	r0, [pc, #124]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 8001948:	f000 fba5 	bl	8002096 <HAL_DMA_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001952:	f7ff fdb9 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1a      	ldr	r2, [pc, #104]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 800195a:	675a      	str	r2, [r3, #116]	@ 0x74
 800195c:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <HAL_UART_MspInit+0x160>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001964:	4a1a      	ldr	r2, [pc, #104]	@ (80019d0 <HAL_UART_MspInit+0x16c>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <HAL_UART_MspInit+0x168>)
 800196a:	2210      	movs	r2, #16
 800196c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_UART_MspInit+0x168>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_UART_MspInit+0x168>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	@ (80019cc <HAL_UART_MspInit+0x168>)
 8001994:	f000 fb7f 	bl	8002096 <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800199e:	f7ff fd93 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <HAL_UART_MspInit+0x168>)
 80019a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80019a8:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_UART_MspInit+0x168>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40021000 	.word	0x40021000
 80019c0:	48000400 	.word	0x48000400
 80019c4:	20000274 	.word	0x20000274
 80019c8:	4002006c 	.word	0x4002006c
 80019cc:	200002b8 	.word	0x200002b8
 80019d0:	40020080 	.word	0x40020080

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <NMI_Handler+0x4>

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 f8e3 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DMA1_Channel6_IRQHandler+0x10>)
 8001a3a:	f000 fb73 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000274 	.word	0x20000274

08001a48 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Channel7_IRQHandler+0x10>)
 8001a4e:	f000 fb69 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002b8 	.word	0x200002b8

08001a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a64:	f000 fe02 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a6c:	f000 fdfe 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a70:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a74:	f000 fdfa 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a7c:	f000 fdf6 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f004 fdb0 	bl	8006618 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000a000 	.word	0x2000a000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	2000034c 	.word	0x2000034c
 8001aec:	200004a0 	.word	0x200004a0

08001af0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b18:	f7ff ffea 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopForever+0xe>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopForever+0x16>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f004 fd6f 	bl	8006624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b46:	f7fe fe8f 	bl	8000868 <main>

08001b4a <LoopForever>:

LoopForever:
    b LoopForever
 8001b4a:	e7fe      	b.n	8001b4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b4c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b58:	08007014 	.word	0x08007014
  ldr r2, =_sbss
 8001b5c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b60:	2000049c 	.word	0x2000049c

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 fa4b 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fcfa 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fa63 	bl	800207e <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 fa2b 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000350 	.word	0x20000350

08001c1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000350 	.word	0x20000350

08001c34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000010 	.word	0x20000010

08001c7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0ed      	b.n	8001e6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fc92 	bl	80015c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff ffb4 	bl	8001c1c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff ffb0 	bl	8001c1c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0c5      	b.n	8001e6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0e5      	beq.n	8001cb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0202 	bic.w	r2, r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7ff ff8e 	bl	8001c1c <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d02:	e012      	b.n	8001d2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d04:	f7ff ff8a 	bl	8001c1c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d90b      	bls.n	8001d2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e09f      	b.n	8001e6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e5      	bne.n	8001d04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e1b      	ldrb	r3, [r3, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e5b      	ldrb	r3, [r3, #25]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e9b      	ldrb	r3, [r3, #26]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0220 	bic.w	r2, r2, #32
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7edb      	ldrb	r3, [r3, #27]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0210 	bic.w	r2, r2, #16
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0210 	orr.w	r2, r2, #16
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7f1b      	ldrb	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0208 	orr.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7f5b      	ldrb	r3, [r3, #29]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0204 	orr.w	r2, r2, #4
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e007      	b.n	8001e34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	@ (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	@ (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e037      	b.n	800211c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8b4 	bl	800226c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2204      	movs	r2, #4
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d024      	beq.n	8002196 <HAL_DMA_IRQHandler+0x72>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01f      	beq.n	8002196 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0204 	bic.w	r2, r2, #4
 8002172:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	2104      	movs	r1, #4
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d06a      	beq.n	8002262 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002194:	e065      	b.n	8002262 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2202      	movs	r2, #2
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d02c      	beq.n	8002200 <HAL_DMA_IRQHandler+0xdc>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d027      	beq.n	8002200 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020a 	bic.w	r2, r2, #10
 80021cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021de:	2102      	movs	r1, #2
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d035      	beq.n	8002262 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021fe:	e030      	b.n	8002262 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	2208      	movs	r2, #8
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d028      	beq.n	8002262 <HAL_DMA_IRQHandler+0x13e>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 020e 	bic.w	r2, r2, #14
 8002228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
    }
  }
}
 8002260:	e7ff      	b.n	8002262 <HAL_DMA_IRQHandler+0x13e>
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <DMA_CalcBaseAndBitshift+0x60>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d80f      	bhi.n	80022a0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <DMA_CalcBaseAndBitshift+0x64>)
 8002288:	4413      	add	r3, r2
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <DMA_CalcBaseAndBitshift+0x68>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	009a      	lsls	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <DMA_CalcBaseAndBitshift+0x6c>)
 800229c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800229e:	e00e      	b.n	80022be <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <DMA_CalcBaseAndBitshift+0x70>)
 80022a8:	4413      	add	r3, r2
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <DMA_CalcBaseAndBitshift+0x68>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	009a      	lsls	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <DMA_CalcBaseAndBitshift+0x74>)
 80022bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40020407 	.word	0x40020407
 80022d0:	bffdfff8 	.word	0xbffdfff8
 80022d4:	cccccccd 	.word	0xcccccccd
 80022d8:	40020000 	.word	0x40020000
 80022dc:	bffdfbf8 	.word	0xbffdfbf8
 80022e0:	40020400 	.word	0x40020400

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e154      	b.n	800259e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8146 	beq.w	8002598 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 0201 	and.w	r2, r3, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a0 	beq.w	8002598 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	4b58      	ldr	r3, [pc, #352]	@ (80025bc <HAL_GPIO_Init+0x2d8>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a57      	ldr	r2, [pc, #348]	@ (80025bc <HAL_GPIO_Init+0x2d8>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b55      	ldr	r3, [pc, #340]	@ (80025bc <HAL_GPIO_Init+0x2d8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a53      	ldr	r2, [pc, #332]	@ (80025c0 <HAL_GPIO_Init+0x2dc>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800249a:	d019      	beq.n	80024d0 <HAL_GPIO_Init+0x1ec>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a49      	ldr	r2, [pc, #292]	@ (80025c4 <HAL_GPIO_Init+0x2e0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_GPIO_Init+0x1e8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a48      	ldr	r2, [pc, #288]	@ (80025c8 <HAL_GPIO_Init+0x2e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00d      	beq.n	80024c8 <HAL_GPIO_Init+0x1e4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a47      	ldr	r2, [pc, #284]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0x1e0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a46      	ldr	r2, [pc, #280]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_GPIO_Init+0x1dc>
 80024bc:	2304      	movs	r3, #4
 80024be:	e008      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c0:	2305      	movs	r3, #5
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024d0:	2300      	movs	r3, #0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e2:	4937      	ldr	r1, [pc, #220]	@ (80025c0 <HAL_GPIO_Init+0x2dc>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f0:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002514:	4a2f      	ldr	r2, [pc, #188]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251a:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800253e:	4a25      	ldr	r2, [pc, #148]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002544:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002568:	4a1a      	ldr	r2, [pc, #104]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f aea3 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	48000800 	.word	0x48000800
 80025cc:	48000c00 	.word	0x48000c00
 80025d0:	48001000 	.word	0x48001000
 80025d4:	40010400 	.word	0x40010400

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002624:	e002      	b.n	800262c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43d9      	mvns	r1, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	400b      	ands	r3, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002682:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fe3e 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e08d      	b.n	80027ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe ffc2 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	@ 0x24
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e006      	b.n	8002724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d108      	bne.n	800273e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e007      	b.n	800274e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800275c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	f040 80fd 	bne.w	80029f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Master_Transmit+0x30>
 8002800:	2302      	movs	r3, #2
 8002802:	e0f6      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280c:	f7ff fa06 	bl	8001c1c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2319      	movs	r3, #25
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f914 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0e1      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	@ 0x21
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2bff      	cmp	r3, #255	@ 0xff
 800285e:	d906      	bls.n	800286e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	22ff      	movs	r2, #255	@ 0xff
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002866:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e007      	b.n	800287e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800287c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	4b4e      	ldr	r3, [pc, #312]	@ (80029fc <HAL_I2C_Master_Transmit+0x228>)
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fa83 	bl	8002dd4 <I2C_TransferConfig>
 80028ce:	e066      	b.n	800299e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <HAL_I2C_Master_Transmit+0x228>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa78 	bl	8002dd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028e4:	e05b      	b.n	800299e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f907 	bl	8002afe <I2C_WaitOnTXISFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07b      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d034      	beq.n	800299e <HAL_I2C_Master_Transmit+0x1ca>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d130      	bne.n	800299e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2200      	movs	r2, #0
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f880 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e04d      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2bff      	cmp	r3, #255	@ 0xff
 800295e:	d90e      	bls.n	800297e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	22ff      	movs	r2, #255	@ 0xff
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	b2da      	uxtb	r2, r3
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa2c 	bl	8002dd4 <I2C_TransferConfig>
 800297c:	e00f      	b.n	800299e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	b2da      	uxtb	r2, r3
 800298e:	8979      	ldrh	r1, [r7, #10]
 8002990:	2300      	movs	r3, #0
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa1b 	bl	8002dd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d19e      	bne.n	80028e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	6a39      	ldr	r1, [r7, #32]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f8ed 	bl	8002b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e01a      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_I2C_Master_Transmit+0x22c>)
 80029d0:	400b      	ands	r3, r1
 80029d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	80002000 	.word	0x80002000
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d103      	bne.n	8002a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d007      	beq.n	8002a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	619a      	str	r2, [r3, #24]
  }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5c:	e03b      	b.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8d6 	bl	8002c14 <I2C_IsErrorOccurred>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e041      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d02d      	beq.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7ff f8cf 	bl	8001c1c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d122      	bne.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d113      	bne.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d0b4      	beq.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b0a:	e033      	b.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f87f 	bl	8002c14 <I2C_IsErrorOccurred>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e031      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d025      	beq.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b28:	f7ff f878 	bl	8001c1c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d302      	bcc.n	8002b3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11a      	bne.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d013      	beq.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e007      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d1c4      	bne.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b98:	e02f      	b.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f838 	bl	8002c14 <I2C_IsErrorOccurred>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02d      	b.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7ff f835 	bl	8001c1c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11a      	bne.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d013      	beq.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d1c8      	bne.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d068      	beq.n	8002d12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2210      	movs	r2, #16
 8002c46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c48:	e049      	b.n	8002cde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d045      	beq.n	8002cde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe ffe3 	bl	8001c1c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_IsErrorOccurred+0x54>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d13a      	bne.n	8002cde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c8a:	d121      	bne.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c92:	d01d      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d01a      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ca8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002caa:	f7fe ffb7 	bl	8001c1c <HAL_GetTick>
 8002cae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb0:	e00e      	b.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cb2:	f7fe ffb3 	bl	8001c1c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b19      	cmp	r3, #25
 8002cbe:	d907      	bls.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cce:	e006      	b.n	8002cde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d1e9      	bne.n	8002cb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d003      	beq.n	8002cf4 <I2C_IsErrorOccurred+0xe0>
 8002cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0aa      	beq.n	8002c4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fe3b 	bl	8002a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <I2C_IsErrorOccurred+0x1bc>)
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	@ 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	4613      	mov	r3, r2
 8002de4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dec:	7a7b      	ldrb	r3, [r7, #9]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	0d5b      	lsrs	r3, r3, #21
 8002e0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <I2C_TransferConfig+0x60>)
 8002e14:	430b      	orrs	r3, r1
 8002e16:	43db      	mvns	r3, r3
 8002e18:	ea02 0103 	and.w	r1, r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	03ff63ff 	.word	0x03ff63ff

08002e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d138      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e032      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	@ 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d139      	bne.n	8002f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e033      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2224      	movs	r2, #36	@ 0x24
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f001 b823 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 817d 	beq.w	800329e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fa4:	4bbc      	ldr	r3, [pc, #752]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00c      	beq.n	8002fca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fb0:	4bb9      	ldr	r3, [pc, #740]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d15c      	bne.n	8003076 <HAL_RCC_OscConfig+0x10e>
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d155      	bne.n	8003076 <HAL_RCC_OscConfig+0x10e>
 8002fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x94>
 8002ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0xc0>
 8002ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003000:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003014:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003018:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003024:	4b9c      	ldr	r3, [pc, #624]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800302c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003030:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800303c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 811f 	beq.w	800329c <HAL_RCC_OscConfig+0x334>
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 8116 	bne.w	800329c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f000 bfaf 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x12e>
 8003088:	4b83      	ldr	r3, [pc, #524]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a82      	ldr	r2, [pc, #520]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e036      	b.n	8003104 <HAL_RCC_OscConfig+0x19c>
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x158>
 80030a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7b      	ldr	r2, [pc, #492]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b79      	ldr	r3, [pc, #484]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a78      	ldr	r2, [pc, #480]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e021      	b.n	8003104 <HAL_RCC_OscConfig+0x19c>
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x184>
 80030d2:	4b71      	ldr	r3, [pc, #452]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a70      	ldr	r2, [pc, #448]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x19c>
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a69      	ldr	r2, [pc, #420]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b67      	ldr	r3, [pc, #412]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a66      	ldr	r2, [pc, #408]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80030fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003102:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003104:	4b64      	ldr	r3, [pc, #400]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	f023 020f 	bic.w	r2, r3, #15
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	495f      	ldr	r1, [pc, #380]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 800311a:	4313      	orrs	r3, r2
 800311c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d059      	beq.n	80031e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe fd75 	bl	8001c1c <HAL_GetTick>
 8003132:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fd70 	bl	8001c1c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	@ 0x64
 8003146:	d902      	bls.n	800314e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	f000 bf43 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 800314e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003152:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003162:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0x218>
 800317a:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e015      	b.n	80031ac <HAL_RCC_OscConfig+0x244>
 8003180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003184:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003198:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800319c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80031a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031b0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80031b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80031c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ab      	beq.n	8003138 <HAL_RCC_OscConfig+0x1d0>
 80031e0:	e05d      	b.n	800329e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fd1b 	bl	8001c1c <HAL_GetTick>
 80031e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fd16 	bl	8001c1c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	@ 0x64
 80031fa:	d902      	bls.n	8003202 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f000 bee9 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003202:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003206:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003216:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x2cc>
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e015      	b.n	8003260 <HAL_RCC_OscConfig+0x2f8>
 8003234:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003238:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800324c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003250:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_RCC_OscConfig+0x330>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003264:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003268:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800326c:	fa92 f2a2 	rbit	r2, r2
 8003270:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003274:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003278:	fab2 f282 	clz	r2, r2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f042 0220 	orr.w	r2, r2, #32
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f002 021f 	and.w	r2, r2, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ab      	bne.n	80031ec <HAL_RCC_OscConfig+0x284>
 8003294:	e003      	b.n	800329e <HAL_RCC_OscConfig+0x336>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 817d 	beq.w	80035ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032b4:	4ba6      	ldr	r3, [pc, #664]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032c0:	4ba3      	ldr	r3, [pc, #652]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d172      	bne.n	80033b2 <HAL_RCC_OscConfig+0x44a>
 80032cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d16c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x44a>
 80032d8:	2302      	movs	r3, #2
 80032da:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80032ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x3a0>
 8003302:	4b93      	ldr	r3, [pc, #588]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0x3c8>
 8003308:	2302      	movs	r3, #2
 800330a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800331a:	2302      	movs	r3, #2
 800331c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003320:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800332c:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003336:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800333a:	fa92 f2a2 	rbit	r2, r2
 800333e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003342:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f002 021f 	and.w	r2, r2, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCC_OscConfig+0x410>
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d002      	beq.n	8003378 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f000 be2e 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b75      	ldr	r3, [pc, #468]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	21f8      	movs	r1, #248	@ 0xf8
 800338e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003396:	fa91 f1a1 	rbit	r1, r1
 800339a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800339e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80033a2:	fab1 f181 	clz	r1, r1
 80033a6:	b2c9      	uxtb	r1, r1
 80033a8:	408b      	lsls	r3, r1
 80033aa:	4969      	ldr	r1, [pc, #420]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b0:	e0fd      	b.n	80035ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8088 	beq.w	80034d4 <HAL_RCC_OscConfig+0x56c>
 80033c4:	2301      	movs	r3, #1
 80033c6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80033d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	461a      	mov	r2, r3
 80033ec:	2301      	movs	r3, #1
 80033ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fc14 	bl	8001c1c <HAL_GetTick>
 80033f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fa:	f7fe fc0f 	bl	8001c1c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	f000 bde2 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003410:	2302      	movs	r3, #2
 8003412:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003422:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d8>
 800343a:	4b45      	ldr	r3, [pc, #276]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e013      	b.n	8003468 <HAL_RCC_OscConfig+0x500>
 8003440:	2302      	movs	r3, #2
 8003442:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003458:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003464:	4b3a      	ldr	r3, [pc, #232]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	2202      	movs	r2, #2
 800346a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800346e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800347a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f002 021f 	and.w	r2, r2, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0af      	beq.n	80033fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	21f8      	movs	r1, #248	@ 0xf8
 80034b0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80034b8:	fa91 f1a1 	rbit	r1, r1
 80034bc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80034c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80034c4:	fab1 f181 	clz	r1, r1
 80034c8:	b2c9      	uxtb	r1, r1
 80034ca:	408b      	lsls	r3, r1
 80034cc:	4920      	ldr	r1, [pc, #128]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
 80034d2:	e06c      	b.n	80035ae <HAL_RCC_OscConfig+0x646>
 80034d4:	2301      	movs	r3, #1
 80034d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80034e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	461a      	mov	r2, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fb8c 	bl	8001c1c <HAL_GetTick>
 8003504:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fb87 	bl	8001c1c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	f000 bd5a 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003520:	2302      	movs	r3, #2
 8003522:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003532:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d104      	bne.n	8003554 <HAL_RCC_OscConfig+0x5ec>
 800354a:	4b01      	ldr	r3, [pc, #4]	@ (8003550 <HAL_RCC_OscConfig+0x5e8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	e015      	b.n	800357c <HAL_RCC_OscConfig+0x614>
 8003550:	40021000 	.word	0x40021000
 8003554:	2302      	movs	r3, #2
 8003556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003566:	2302      	movs	r3, #2
 8003568:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800356c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003578:	4bc8      	ldr	r3, [pc, #800]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2202      	movs	r2, #2
 800357e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003582:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800358e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f042 0220 	orr.w	r2, r2, #32
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f002 021f 	and.w	r2, r2, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ad      	bne.n	800350a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8110 	beq.w	80037e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d079      	beq.n	80036c8 <HAL_RCC_OscConfig+0x760>
 80035d4:	2301      	movs	r3, #1
 80035d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	4bab      	ldr	r3, [pc, #684]	@ (80038a0 <HAL_RCC_OscConfig+0x938>)
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	2301      	movs	r3, #1
 80035fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fb0d 	bl	8001c1c <HAL_GetTick>
 8003602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003608:	f7fe fb08 	bl	8001c1c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d902      	bls.n	800361e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f000 bcdb 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 800361e:	2302      	movs	r3, #2
 8003620:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003638:	2202      	movs	r2, #2
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800365c:	2202      	movs	r2, #2
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f2a3 	rbit	r2, r3
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003676:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003678:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 800367a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003684:	2102      	movs	r1, #2
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f1a3 	rbit	r1, r3
 8003696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800369e:	6019      	str	r1, [r3, #0]
  return result;
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0a0      	beq.n	8003608 <HAL_RCC_OscConfig+0x6a0>
 80036c6:	e08d      	b.n	80037e4 <HAL_RCC_OscConfig+0x87c>
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036ea:	601a      	str	r2, [r3, #0]
  return result;
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_OscConfig+0x938>)
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	2300      	movs	r3, #0
 8003708:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fa87 	bl	8001c1c <HAL_GetTick>
 800370e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fa82 	bl	8001c1c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d902      	bls.n	800372a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	f000 bc55 	b.w	8003fd4 <HAL_RCC_OscConfig+0x106c>
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003732:	2202      	movs	r2, #2
 8003734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800377a:	2202      	movs	r2, #2
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003794:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003796:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037a2:	2102      	movs	r1, #2
 80037a4:	6019      	str	r1, [r3, #0]
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f1a3 	rbit	r1, r3
 80037b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037bc:	6019      	str	r1, [r3, #0]
  return result;
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d197      	bne.n	8003714 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 81a1 	beq.w	8003b3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003800:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b23      	ldr	r3, [pc, #140]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4a22      	ldr	r2, [pc, #136]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003832:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b1a      	ldr	r3, [pc, #104]	@ (80038a4 <HAL_RCC_OscConfig+0x93c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11a      	bne.n	800387c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <HAL_RCC_OscConfig+0x93c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	@ (80038a4 <HAL_RCC_OscConfig+0x93c>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fe f9e3 	bl	8001c1c <HAL_GetTick>
 8003856:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	e009      	b.n	8003870 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385c:	f7fe f9de 	bl	8001c1c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	@ 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e3b1      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <HAL_RCC_OscConfig+0x93c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10d      	bne.n	80038a8 <HAL_RCC_OscConfig+0x940>
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a02      	ldr	r2, [pc, #8]	@ (800389c <HAL_RCC_OscConfig+0x934>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	e03c      	b.n	8003914 <HAL_RCC_OscConfig+0x9ac>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	10908120 	.word	0x10908120
 80038a4:	40007000 	.word	0x40007000
 80038a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x96a>
 80038b8:	4bc1      	ldr	r3, [pc, #772]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4ac0      	ldr	r2, [pc, #768]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	4bbe      	ldr	r3, [pc, #760]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4abd      	ldr	r2, [pc, #756]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	e020      	b.n	8003914 <HAL_RCC_OscConfig+0x9ac>
 80038d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x994>
 80038e2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4ab6      	ldr	r2, [pc, #728]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
 80038ee:	4bb4      	ldr	r3, [pc, #720]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4ab3      	ldr	r2, [pc, #716]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x9ac>
 80038fc:	4bb0      	ldr	r3, [pc, #704]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4aaf      	ldr	r2, [pc, #700]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6213      	str	r3, [r2, #32]
 8003908:	4bad      	ldr	r3, [pc, #692]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4aac      	ldr	r2, [pc, #688]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8081 	beq.w	8003a28 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe f979 	bl	8001c1c <HAL_GetTick>
 800392a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fe f974 	bl	8001c1c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e345      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003974:	2202      	movs	r2, #2
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800398e:	601a      	str	r2, [r3, #0]
  return result;
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003998:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d102      	bne.n	80039b4 <HAL_RCC_OscConfig+0xa4c>
 80039ae:	4b84      	ldr	r3, [pc, #528]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0xa74>
 80039b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039bc:	2202      	movs	r2, #2
 80039be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	4b79      	ldr	r3, [pc, #484]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80039e4:	2102      	movs	r1, #2
 80039e6:	6011      	str	r1, [r2, #0]
 80039e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	fa92 f1a2 	rbit	r1, r2
 80039f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039fa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80039fe:	6011      	str	r1, [r2, #0]
  return result;
 8003a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a04:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f002 021f 	and.w	r2, r2, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d084      	beq.n	8003930 <HAL_RCC_OscConfig+0x9c8>
 8003a26:	e07f      	b.n	8003b28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a28:	f7fe f8f8 	bl	8001c1c <HAL_GetTick>
 8003a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe f8f3 	bl	8001c1c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e2c4      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a52:	2202      	movs	r2, #2
 8003a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a68:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003a76:	2202      	movs	r2, #2
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a90:	601a      	str	r2, [r3, #0]
  return result;
 8003a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a96:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f043 0302 	orr.w	r3, r3, #2
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0xb4e>
 8003ab0:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	e013      	b.n	8003ade <HAL_RCC_OscConfig+0xb76>
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003aee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	fa92 f1a2 	rbit	r1, r2
 8003af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003afc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b00:	6011      	str	r1, [r2, #0]
  return result;
 8003b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b06:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d184      	bne.n	8003a32 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b28:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8242 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <HAL_RCC_OscConfig+0xc58>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	f000 8213 	beq.w	8003f82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 8162 	bne.w	8003e32 <HAL_RCC_OscConfig+0xeca>
 8003b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b72:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003b76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b80:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	fa93 f2a3 	rbit	r2, r3
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003b92:	601a      	str	r2, [r3, #0]
  return result;
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003b9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ba8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe f832 	bl	8001c1c <HAL_GetTick>
 8003bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbc:	e00c      	b.n	8003bd8 <HAL_RCC_OscConfig+0xc70>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe f82a 	bl	8001c1c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1fd      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bdc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003bfc:	601a      	str	r2, [r3, #0]
  return result;
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HAL_RCC_OscConfig+0xcba>
 8003c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	e027      	b.n	8003c72 <HAL_RCC_OscConfig+0xd0a>
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c34:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c68:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c76:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003c7a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c7e:	6011      	str	r1, [r2, #0]
 8003c80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c84:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	fa92 f1a2 	rbit	r1, r2
 8003c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c92:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003c96:	6011      	str	r1, [r2, #0]
  return result;
 8003c98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	fab2 f282 	clz	r2, r2
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	f002 021f 	and.w	r2, r2, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d182      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cbe:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	497f      	ldr	r1, [pc, #508]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
 8003ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003cee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	fa93 f2a3 	rbit	r2, r3
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d0a:	601a      	str	r2, [r3, #0]
  return result;
 8003d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d10:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	461a      	mov	r2, r3
 8003d28:	2301      	movs	r3, #1
 8003d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ff76 	bl	8001c1c <HAL_GetTick>
 8003d30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d34:	e009      	b.n	8003d4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fd ff71 	bl	8001c1c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e144      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	fa93 f2a3 	rbit	r2, r3
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d6e:	601a      	str	r2, [r3, #0]
  return result;
 8003d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d74:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d102      	bne.n	8003d94 <HAL_RCC_OscConfig+0xe2c>
 8003d8e:	4b54      	ldr	r3, [pc, #336]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	e027      	b.n	8003de4 <HAL_RCC_OscConfig+0xe7c>
 8003d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d98:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dbe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003dc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dcc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003dec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003df6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	fa92 f1a2 	rbit	r1, r2
 8003e00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e08:	6011      	str	r1, [r2, #0]
  return result;
 8003e0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e0e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	fab2 f282 	clz	r2, r2
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	f042 0220 	orr.w	r2, r2, #32
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	f002 021f 	and.w	r2, r2, #31
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d082      	beq.n	8003d36 <HAL_RCC_OscConfig+0xdce>
 8003e30:	e0cf      	b.n	8003fd2 <HAL_RCC_OscConfig+0x106a>
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e52:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fed0 	bl	8001c1c <HAL_GetTick>
 8003e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	e009      	b.n	8003e96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd fecb 	bl	8001c1c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e09e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
 8003e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003e9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003eba:	601a      	str	r2, [r3, #0]
  return result;
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d104      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xf7c>
 8003eda:	4b01      	ldr	r3, [pc, #4]	@ (8003ee0 <HAL_RCC_OscConfig+0xf78>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e029      	b.n	8003f34 <HAL_RCC_OscConfig+0xfcc>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	fa93 f2a3 	rbit	r2, r3
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_OscConfig+0x1078>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f38:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f40:	6011      	str	r1, [r2, #0]
 8003f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f46:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fa92 f1a2 	rbit	r1, r2
 8003f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f54:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f58:	6011      	str	r1, [r2, #0]
  return result;
 8003f5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f5e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f042 0220 	orr.w	r2, r2, #32
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f002 021f 	and.w	r2, r2, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d180      	bne.n	8003e82 <HAL_RCC_OscConfig+0xf1a>
 8003f80:	e027      	b.n	8003fd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e01e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_RCC_OscConfig+0x1078>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003fa2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003fba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b09e      	sub	sp, #120	@ 0x78
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e162      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b90      	ldr	r3, [pc, #576]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b8d      	ldr	r3, [pc, #564]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	498b      	ldr	r1, [pc, #556]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b89      	ldr	r3, [pc, #548]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e14a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b82      	ldr	r3, [pc, #520]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	497f      	ldr	r1, [pc, #508]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80dc 	beq.w	8004210 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d13c      	bne.n	80040da <HAL_RCC_ClockConfig+0xf6>
 8004060:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004064:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800406e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_RCC_ClockConfig+0xa6>
 8004084:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	e00f      	b.n	80040aa <HAL_RCC_ClockConfig+0xc6>
 800408a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800408e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	667b      	str	r3, [r7, #100]	@ 0x64
 8004098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800409c:	663b      	str	r3, [r7, #96]	@ 0x60
 800409e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040b2:	fa92 f2a2 	rbit	r2, r2
 80040b6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80040b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040ba:	fab2 f282 	clz	r2, r2
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	f002 021f 	and.w	r2, r2, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f202 	lsl.w	r2, r1, r2
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d17b      	bne.n	80041ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0f3      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d13c      	bne.n	800415c <HAL_RCC_ClockConfig+0x178>
 80040e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_RCC_ClockConfig+0x128>
 8004106:	4b4f      	ldr	r3, [pc, #316]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e00f      	b.n	800412c <HAL_RCC_ClockConfig+0x148>
 800410c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004110:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	647b      	str	r3, [r7, #68]	@ 0x44
 800411a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800411e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004128:	4b46      	ldr	r3, [pc, #280]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004130:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004134:	fa92 f2a2 	rbit	r2, r2
 8004138:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800413a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413c:	fab2 f282 	clz	r2, r2
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	f042 0220 	orr.w	r2, r2, #32
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	f002 021f 	and.w	r2, r2, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13a      	bne.n	80041ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b2      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
 800415c:	2302      	movs	r3, #2
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_RCC_ClockConfig+0x1a0>
 800417e:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	e00d      	b.n	80041a0 <HAL_RCC_ClockConfig+0x1bc>
 8004184:	2302      	movs	r3, #2
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	2302      	movs	r3, #2
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	2202      	movs	r2, #2
 80041a2:	61ba      	str	r2, [r7, #24]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	fa92 f2a2 	rbit	r2, r2
 80041aa:	617a      	str	r2, [r7, #20]
  return result;
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	fab2 f282 	clz	r2, r2
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	f042 0220 	orr.w	r2, r2, #32
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	f002 021f 	and.w	r2, r2, #31
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f202 	lsl.w	r2, r1, r2
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e079      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	491a      	ldr	r1, [pc, #104]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fd fd1c 	bl	8001c1c <HAL_GetTick>
 80041e4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fd fd18 	bl	8001c1c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e061      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d214      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b08      	ldr	r3, [pc, #32]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	4906      	ldr	r1, [pc, #24]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <HAL_RCC_ClockConfig+0x25c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e040      	b.n	80042c2 <HAL_RCC_ClockConfig+0x2de>
 8004240:	40022000 	.word	0x40022000
 8004244:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_RCC_ClockConfig+0x2e8>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	491a      	ldr	r1, [pc, #104]	@ (80042cc <HAL_RCC_ClockConfig+0x2e8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <HAL_RCC_ClockConfig+0x2e8>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4912      	ldr	r1, [pc, #72]	@ (80042cc <HAL_RCC_ClockConfig+0x2e8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004286:	f000 f829 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 800428a:	4601      	mov	r1, r0
 800428c:	4b0f      	ldr	r3, [pc, #60]	@ (80042cc <HAL_RCC_ClockConfig+0x2e8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004294:	22f0      	movs	r2, #240	@ 0xf0
 8004296:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	fa92 f2a2 	rbit	r2, r2
 800429e:	60fa      	str	r2, [r7, #12]
  return result;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	fab2 f282 	clz	r2, r2
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	40d3      	lsrs	r3, r2
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x2ec>)
 80042ac:	5cd3      	ldrb	r3, [r2, r3]
 80042ae:	fa21 f303 	lsr.w	r3, r1, r3
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <HAL_RCC_ClockConfig+0x2f0>)
 80042b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042b6:	4b08      	ldr	r3, [pc, #32]	@ (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd fc6a 	bl	8001b94 <HAL_InitTick>
  
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3778      	adds	r7, #120	@ 0x78
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	08006f98 	.word	0x08006f98
 80042d4:	20000008 	.word	0x20000008
 80042d8:	2000000c 	.word	0x2000000c

080042dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x94>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b04      	cmp	r3, #4
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x30>
 8004306:	2b08      	cmp	r3, #8
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x36>
 800430a:	e026      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800430c:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x98>)
 800430e:	613b      	str	r3, [r7, #16]
      break;
 8004310:	e026      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0c9b      	lsrs	r3, r3, #18
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004320:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x94>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	4a14      	ldr	r2, [pc, #80]	@ (800437c <HAL_RCC_GetSysClockFreq+0xa0>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004338:	4a0e      	ldr	r2, [pc, #56]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x98>)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e004      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xa4>)
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]
      break;
 8004358:	e002      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800435a:	4b0a      	ldr	r3, [pc, #40]	@ (8004384 <HAL_RCC_GetSysClockFreq+0xa8>)
 800435c:	613b      	str	r3, [r7, #16]
      break;
 800435e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004360:	693b      	ldr	r3, [r7, #16]
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	00f42400 	.word	0x00f42400
 8004378:	08006fb0 	.word	0x08006fb0
 800437c:	08006fc0 	.word	0x08006fc0
 8004380:	003d0900 	.word	0x003d0900
 8004384:	007a1200 	.word	0x007a1200

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000008 	.word	0x20000008

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043a6:	f7ff ffef 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043aa:	4601      	mov	r1, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	@ (80043dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80043b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	fa92 f2a2 	rbit	r2, r2
 80043c0:	603a      	str	r2, [r7, #0]
  return result;
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	fab2 f282 	clz	r2, r2
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	40d3      	lsrs	r3, r2
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000
 80043e0:	08006fa8 	.word	0x08006fa8

080043e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043ea:	f7ff ffcd 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043ee:	4601      	mov	r1, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80043f8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80043fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	fa92 f2a2 	rbit	r2, r2
 8004404:	603a      	str	r2, [r7, #0]
  return result;
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	40d3      	lsrs	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08006fa8 	.word	0x08006fa8

08004428 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b092      	sub	sp, #72	@ 0x48
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80d4 	beq.w	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444c:	4b4e      	ldr	r3, [pc, #312]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10e      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b4b      	ldr	r3, [pc, #300]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4a4a      	ldr	r2, [pc, #296]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004462:	61d3      	str	r3, [r2, #28]
 8004464:	4b48      	ldr	r3, [pc, #288]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b45      	ldr	r3, [pc, #276]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b42      	ldr	r3, [pc, #264]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a41      	ldr	r2, [pc, #260]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fd fbc5 	bl	8001c1c <HAL_GetTick>
 8004492:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fd fbc1 	bl	8001c1c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	@ 0x64
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e169      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b4:	4b34      	ldr	r3, [pc, #208]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8084 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d07c      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	2301      	movs	r3, #1
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	4b1d      	ldr	r3, [pc, #116]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	461a      	mov	r2, r3
 8004522:	2300      	movs	r3, #0
 8004524:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004526:	4a18      	ldr	r2, [pc, #96]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800452c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04b      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fd fb71 	bl	8001c1c <HAL_GetTick>
 800453a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd fb6d 	bl	8001c1c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e113      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004554:	2302      	movs	r3, #2
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004560:	2302      	movs	r3, #2
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	61fb      	str	r3, [r7, #28]
  return result;
 800456c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d108      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004582:	4b01      	ldr	r3, [pc, #4]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	e00d      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
 8004590:	10908100 	.word	0x10908100
 8004594:	2302      	movs	r3, #2
 8004596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	4b78      	ldr	r3, [pc, #480]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	2202      	movs	r2, #2
 80045a6:	613a      	str	r2, [r7, #16]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	fa92 f2a2 	rbit	r2, r2
 80045ae:	60fa      	str	r2, [r7, #12]
  return result;
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	fab2 f282 	clz	r2, r2
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	f002 021f 	and.w	r2, r2, #31
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0b7      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	496a      	ldr	r1, [pc, #424]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d105      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e8:	4b66      	ldr	r3, [pc, #408]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4a65      	ldr	r2, [pc, #404]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004600:	4b60      	ldr	r3, [pc, #384]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	f023 0203 	bic.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	495d      	ldr	r1, [pc, #372]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800461e:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4956      	ldr	r1, [pc, #344]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800463c:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	494e      	ldr	r1, [pc, #312]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465a:	4b4a      	ldr	r3, [pc, #296]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4947      	ldr	r1, [pc, #284]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004678:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	493f      	ldr	r1, [pc, #252]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004696:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f023 0220 	bic.w	r2, r3, #32
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4938      	ldr	r1, [pc, #224]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b4:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	4930      	ldr	r1, [pc, #192]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	4929      	ldr	r1, [pc, #164]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f0:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	4921      	ldr	r1, [pc, #132]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800470e:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	491a      	ldr	r1, [pc, #104]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471c:	4313      	orrs	r3, r2
 800471e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	4912      	ldr	r1, [pc, #72]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	490b      	ldr	r1, [pc, #44]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	4903      	ldr	r1, [pc, #12]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3748      	adds	r7, #72	@ 0x48
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000

08004788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e049      	b.n	800482e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc ff90 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 fc72 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e049      	b.n	80048dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f841 	bl	80048e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 fc1b 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start+0x24>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e03c      	b.n	8004996 <HAL_TIM_PWM_Start+0x9e>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d109      	bne.n	8004936 <HAL_TIM_PWM_Start+0x3e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e02f      	b.n	8004996 <HAL_TIM_PWM_Start+0x9e>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d109      	bne.n	8004950 <HAL_TIM_PWM_Start+0x58>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e022      	b.n	8004996 <HAL_TIM_PWM_Start+0x9e>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d109      	bne.n	800496a <HAL_TIM_PWM_Start+0x72>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	bf14      	ite	ne
 8004962:	2301      	movne	r3, #1
 8004964:	2300      	moveq	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e015      	b.n	8004996 <HAL_TIM_PWM_Start+0x9e>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d109      	bne.n	8004984 <HAL_TIM_PWM_Start+0x8c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e008      	b.n	8004996 <HAL_TIM_PWM_Start+0x9e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e097      	b.n	8004ace <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Start+0xb6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ac:	e023      	b.n	80049f6 <HAL_TIM_PWM_Start+0xfe>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d104      	bne.n	80049be <HAL_TIM_PWM_Start+0xc6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049bc:	e01b      	b.n	80049f6 <HAL_TIM_PWM_Start+0xfe>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_PWM_Start+0xd6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049cc:	e013      	b.n	80049f6 <HAL_TIM_PWM_Start+0xfe>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0xe6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049dc:	e00b      	b.n	80049f6 <HAL_TIM_PWM_Start+0xfe>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start+0xf6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ec:	e003      	b.n	80049f6 <HAL_TIM_PWM_Start+0xfe>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f880 	bl	8005b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a33      	ldr	r2, [pc, #204]	@ (8004ad8 <HAL_TIM_PWM_Start+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x13e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a32      	ldr	r2, [pc, #200]	@ (8004adc <HAL_TIM_PWM_Start+0x1e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x13e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ae0 <HAL_TIM_PWM_Start+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x13e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae4 <HAL_TIM_PWM_Start+0x1ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x13e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae8 <HAL_TIM_PWM_Start+0x1f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x142>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_TIM_PWM_Start+0x144>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <HAL_TIM_PWM_Start+0x1e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x194>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a62:	d013      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x194>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_TIM_PWM_Start+0x1f4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x194>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_TIM_PWM_Start+0x1f8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x194>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <HAL_TIM_PWM_Start+0x1e4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x194>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_TIM_PWM_Start+0x1e8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d115      	bne.n	8004ab8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <HAL_TIM_PWM_Start+0x1fc>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d015      	beq.n	8004aca <HAL_TIM_PWM_Start+0x1d2>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d011      	beq.n	8004aca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	e008      	b.n	8004aca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e000      	b.n	8004acc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	00010007 	.word	0x00010007

08004af8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e049      	b.n	8004b9e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f841 	bl	8004ba6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 faba 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e088      	b.n	8004cea <HAL_TIM_IC_ConfigChannel+0x130>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11b      	bne.n	8004c1e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004bf6:	f000 fdcd 	bl	8005794 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 020c 	bic.w	r2, r2, #12
 8004c08:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]
 8004c1c:	e060      	b.n	8004ce0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11c      	bne.n	8004c5e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c34:	f000 fe45 	bl	80058c2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c46:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6999      	ldr	r1, [r3, #24]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	619a      	str	r2, [r3, #24]
 8004c5c:	e040      	b.n	8004ce0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d11b      	bne.n	8004c9c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c74:	f000 fe92 	bl	800599c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 020c 	bic.w	r2, r2, #12
 8004c86:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69d9      	ldr	r1, [r3, #28]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	61da      	str	r2, [r3, #28]
 8004c9a:	e021      	b.n	8004ce0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d11c      	bne.n	8004cdc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004cb2:	f000 feaf 	bl	8005a14 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cc4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69d9      	ldr	r1, [r3, #28]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	021a      	lsls	r2, r3, #8
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	61da      	str	r2, [r3, #28]
 8004cda:	e001      	b.n	8004ce0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0ff      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b14      	cmp	r3, #20
 8004d1e:	f200 80f0 	bhi.w	8004f02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004f03 	.word	0x08004f03
 8004d30:	08004f03 	.word	0x08004f03
 8004d34:	08004f03 	.word	0x08004f03
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004f03 	.word	0x08004f03
 8004d40:	08004f03 	.word	0x08004f03
 8004d44:	08004f03 	.word	0x08004f03
 8004d48:	08004dff 	.word	0x08004dff
 8004d4c:	08004f03 	.word	0x08004f03
 8004d50:	08004f03 	.word	0x08004f03
 8004d54:	08004f03 	.word	0x08004f03
 8004d58:	08004e3f 	.word	0x08004e3f
 8004d5c:	08004f03 	.word	0x08004f03
 8004d60:	08004f03 	.word	0x08004f03
 8004d64:	08004f03 	.word	0x08004f03
 8004d68:	08004e81 	.word	0x08004e81
 8004d6c:	08004f03 	.word	0x08004f03
 8004d70:	08004f03 	.word	0x08004f03
 8004d74:	08004f03 	.word	0x08004f03
 8004d78:	08004ec1 	.word	0x08004ec1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa30 	bl	80051e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
      break;
 8004dba:	e0a5      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 faa0 	bl	8005308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	619a      	str	r2, [r3, #24]
      break;
 8004dfc:	e084      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb09 	bl	800541c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0208 	orr.w	r2, r2, #8
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0204 	bic.w	r2, r2, #4
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      break;
 8004e3c:	e064      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb71 	bl	800552c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	61da      	str	r2, [r3, #28]
      break;
 8004e7e:	e043      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fbba 	bl	8005600 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ebe:	e023      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fbfe 	bl	80056c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      break;
 8004f06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0b6      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x18a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f74:	d03e      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0xd8>
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7a:	f200 8087 	bhi.w	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f82:	f000 8086 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x176>
 8004f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8a:	d87f      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b70      	cmp	r3, #112	@ 0x70
 8004f8e:	d01a      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xaa>
 8004f90:	2b70      	cmp	r3, #112	@ 0x70
 8004f92:	d87b      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f94:	2b60      	cmp	r3, #96	@ 0x60
 8004f96:	d050      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x11e>
 8004f98:	2b60      	cmp	r3, #96	@ 0x60
 8004f9a:	d877      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	2b50      	cmp	r3, #80	@ 0x50
 8004f9e:	d03c      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xfe>
 8004fa0:	2b50      	cmp	r3, #80	@ 0x50
 8004fa2:	d873      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d058      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x13e>
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	d86f      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fac:	2b30      	cmp	r3, #48	@ 0x30
 8004fae:	d064      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb0:	2b30      	cmp	r3, #48	@ 0x30
 8004fb2:	d86b      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d060      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d867      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05c      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d05a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fc4:	e062      	b.n	800508c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd6:	f000 fd75 	bl	8005ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	609a      	str	r2, [r3, #8]
      break;
 8004ff2:	e04f      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005004:	f000 fd5e 	bl	8005ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005016:	609a      	str	r2, [r3, #8]
      break;
 8005018:	e03c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	461a      	mov	r2, r3
 8005028:	f000 fc1c 	bl	8005864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2150      	movs	r1, #80	@ 0x50
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fd2b 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005038:	e02c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	461a      	mov	r2, r3
 8005048:	f000 fc78 	bl	800593c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2160      	movs	r1, #96	@ 0x60
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd1b 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005058:	e01c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	461a      	mov	r2, r3
 8005068:	f000 fbfc 	bl	8005864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2140      	movs	r1, #64	@ 0x40
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fd0b 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005078:	e00c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fd02 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800508a:	e003      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	e000      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a42      	ldr	r2, [pc, #264]	@ (80051cc <TIM_Base_SetConfig+0x11c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00f      	beq.n	80050e8 <TIM_Base_SetConfig+0x38>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ce:	d00b      	beq.n	80050e8 <TIM_Base_SetConfig+0x38>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a3f      	ldr	r2, [pc, #252]	@ (80051d0 <TIM_Base_SetConfig+0x120>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_Base_SetConfig+0x38>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3e      	ldr	r2, [pc, #248]	@ (80051d4 <TIM_Base_SetConfig+0x124>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_Base_SetConfig+0x38>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3d      	ldr	r2, [pc, #244]	@ (80051d8 <TIM_Base_SetConfig+0x128>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d108      	bne.n	80050fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a33      	ldr	r2, [pc, #204]	@ (80051cc <TIM_Base_SetConfig+0x11c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01b      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005108:	d017      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a30      	ldr	r2, [pc, #192]	@ (80051d0 <TIM_Base_SetConfig+0x120>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2f      	ldr	r2, [pc, #188]	@ (80051d4 <TIM_Base_SetConfig+0x124>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2e      	ldr	r2, [pc, #184]	@ (80051d8 <TIM_Base_SetConfig+0x128>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2d      	ldr	r2, [pc, #180]	@ (80051dc <TIM_Base_SetConfig+0x12c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2c      	ldr	r2, [pc, #176]	@ (80051e0 <TIM_Base_SetConfig+0x130>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2b      	ldr	r2, [pc, #172]	@ (80051e4 <TIM_Base_SetConfig+0x134>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a16      	ldr	r2, [pc, #88]	@ (80051cc <TIM_Base_SetConfig+0x11c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0xe8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <TIM_Base_SetConfig+0x128>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0xe8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a16      	ldr	r2, [pc, #88]	@ (80051dc <TIM_Base_SetConfig+0x12c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0xe8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <TIM_Base_SetConfig+0x130>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0xe8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <TIM_Base_SetConfig+0x134>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d103      	bne.n	80051a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f023 0201 	bic.w	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]
  }
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800

080051e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0201 	bic.w	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 0302 	bic.w	r3, r3, #2
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <TIM_OC1_SetConfig+0x10c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00f      	beq.n	8005268 <TIM_OC1_SetConfig+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a2b      	ldr	r2, [pc, #172]	@ (80052f8 <TIM_OC1_SetConfig+0x110>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_OC1_SetConfig+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a2a      	ldr	r2, [pc, #168]	@ (80052fc <TIM_OC1_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC1_SetConfig+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a29      	ldr	r2, [pc, #164]	@ (8005300 <TIM_OC1_SetConfig+0x118>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC1_SetConfig+0x80>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <TIM_OC1_SetConfig+0x11c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10c      	bne.n	8005282 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0308 	bic.w	r3, r3, #8
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <TIM_OC1_SetConfig+0x10c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00f      	beq.n	80052aa <TIM_OC1_SetConfig+0xc2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <TIM_OC1_SetConfig+0x110>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_OC1_SetConfig+0xc2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <TIM_OC1_SetConfig+0x114>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_OC1_SetConfig+0xc2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <TIM_OC1_SetConfig+0x118>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC1_SetConfig+0xc2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a17      	ldr	r2, [pc, #92]	@ (8005304 <TIM_OC1_SetConfig+0x11c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d111      	bne.n	80052ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f023 0210 	bic.w	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0320 	bic.w	r3, r3, #32
 8005356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a28      	ldr	r2, [pc, #160]	@ (8005408 <TIM_OC2_SetConfig+0x100>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC2_SetConfig+0x6c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a27      	ldr	r2, [pc, #156]	@ (800540c <TIM_OC2_SetConfig+0x104>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10d      	bne.n	8005390 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <TIM_OC2_SetConfig+0x100>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00f      	beq.n	80053b8 <TIM_OC2_SetConfig+0xb0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <TIM_OC2_SetConfig+0x104>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_OC2_SetConfig+0xb0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005410 <TIM_OC2_SetConfig+0x108>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_OC2_SetConfig+0xb0>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005414 <TIM_OC2_SetConfig+0x10c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_OC2_SetConfig+0xb0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <TIM_OC2_SetConfig+0x110>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d113      	bne.n	80053e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a27      	ldr	r2, [pc, #156]	@ (8005518 <TIM_OC3_SetConfig+0xfc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC3_SetConfig+0x6a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a26      	ldr	r2, [pc, #152]	@ (800551c <TIM_OC3_SetConfig+0x100>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10d      	bne.n	80054a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005518 <TIM_OC3_SetConfig+0xfc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00f      	beq.n	80054ca <TIM_OC3_SetConfig+0xae>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	@ (800551c <TIM_OC3_SetConfig+0x100>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_OC3_SetConfig+0xae>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005520 <TIM_OC3_SetConfig+0x104>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_OC3_SetConfig+0xae>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a19      	ldr	r2, [pc, #100]	@ (8005524 <TIM_OC3_SetConfig+0x108>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC3_SetConfig+0xae>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <TIM_OC3_SetConfig+0x10c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d113      	bne.n	80054f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a18      	ldr	r2, [pc, #96]	@ (80055ec <TIM_OC4_SetConfig+0xc0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_OC4_SetConfig+0x84>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a17      	ldr	r2, [pc, #92]	@ (80055f0 <TIM_OC4_SetConfig+0xc4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC4_SetConfig+0x84>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <TIM_OC4_SetConfig+0xc8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC4_SetConfig+0x84>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a15      	ldr	r2, [pc, #84]	@ (80055f8 <TIM_OC4_SetConfig+0xcc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC4_SetConfig+0x84>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a14      	ldr	r2, [pc, #80]	@ (80055fc <TIM_OC4_SetConfig+0xd0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d109      	bne.n	80055c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40013400 	.word	0x40013400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400
 80055fc:	40014800 	.word	0x40014800

08005600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800562e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005644:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a17      	ldr	r2, [pc, #92]	@ (80056b4 <TIM_OC5_SetConfig+0xb4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_OC5_SetConfig+0x7a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <TIM_OC5_SetConfig+0xb8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_OC5_SetConfig+0x7a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <TIM_OC5_SetConfig+0xbc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_OC5_SetConfig+0x7a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <TIM_OC5_SetConfig+0xc0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC5_SetConfig+0x7a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <TIM_OC5_SetConfig+0xc4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d109      	bne.n	800568e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40013400 	.word	0x40013400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800

080056c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800570e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	051b      	lsls	r3, r3, #20
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <TIM_OC6_SetConfig+0xb8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC6_SetConfig+0x7c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a17      	ldr	r2, [pc, #92]	@ (8005784 <TIM_OC6_SetConfig+0xbc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC6_SetConfig+0x7c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_OC6_SetConfig+0xc0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC6_SetConfig+0x7c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a15      	ldr	r2, [pc, #84]	@ (800578c <TIM_OC6_SetConfig+0xc4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC6_SetConfig+0x7c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a14      	ldr	r2, [pc, #80]	@ (8005790 <TIM_OC6_SetConfig+0xc8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d109      	bne.n	8005758 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	029b      	lsls	r3, r3, #10
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f023 0201 	bic.w	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4a24      	ldr	r2, [pc, #144]	@ (8005850 <TIM_TI1_SetConfig+0xbc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <TIM_TI1_SetConfig+0x56>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d00f      	beq.n	80057ea <TIM_TI1_SetConfig+0x56>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <TIM_TI1_SetConfig+0xc0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <TIM_TI1_SetConfig+0x56>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a20      	ldr	r2, [pc, #128]	@ (8005858 <TIM_TI1_SetConfig+0xc4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_TI1_SetConfig+0x56>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	@ (800585c <TIM_TI1_SetConfig+0xc8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_TI1_SetConfig+0x56>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <TIM_TI1_SetConfig+0xcc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <TIM_TI1_SetConfig+0x5a>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <TIM_TI1_SetConfig+0x5c>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e003      	b.n	800580e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	b2db      	uxtb	r3, r3
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f003 030a 	and.w	r3, r3, #10
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40013400 	.word	0x40013400
 8005860:	40014000 	.word	0x40014000

08005864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 030a 	bic.w	r3, r3, #10
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	b29b      	uxth	r3, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005914:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	621a      	str	r2, [r3, #32]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	031b      	lsls	r3, r3, #12
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f023 0303 	bic.w	r3, r3, #3
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005a66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	031b      	lsls	r3, r3, #12
 8005a6c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f043 0307 	orr.w	r3, r3, #7
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2201      	movs	r2, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e063      	b.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2a      	ldr	r2, [pc, #168]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d108      	bne.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bda:	d013      	beq.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a18      	ldr	r2, [pc, #96]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a12      	ldr	r2, [pc, #72]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10c      	bne.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40013400 	.word	0x40013400
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40014000 	.word	0x40014000

08005c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e065      	b.n	8005d38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a14      	ldr	r2, [pc, #80]	@ (8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d115      	bne.n	8005d26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	051b      	lsls	r3, r3, #20
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40013400 	.word	0x40013400

08005d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e040      	b.n	8005de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb fd78 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2224      	movs	r2, #36	@ 0x24
 8005d78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9fc 	bl	8006190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f825 	bl	8005de8 <UART_SetConfig>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e01b      	b.n	8005de0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa7b 	bl	80062d4 <UART_CheckIdleState>
 8005dde:	4603      	mov	r3, r0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005e16:	f023 030c 	bic.w	r3, r3, #12
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4aa7      	ldr	r2, [pc, #668]	@ (8006100 <UART_SetConfig+0x318>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d120      	bne.n	8005eaa <UART_SetConfig+0xc2>
 8005e68:	4ba6      	ldr	r3, [pc, #664]	@ (8006104 <UART_SetConfig+0x31c>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d817      	bhi.n	8005ea4 <UART_SetConfig+0xbc>
 8005e74:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <UART_SetConfig+0x94>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005e9f 	.word	0x08005e9f
 8005e88:	08005e93 	.word	0x08005e93
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e0b5      	b.n	8005ffe <UART_SetConfig+0x216>
 8005e92:	2302      	movs	r3, #2
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e0b2      	b.n	8005ffe <UART_SetConfig+0x216>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e0af      	b.n	8005ffe <UART_SetConfig+0x216>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e0ac      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e0a9      	b.n	8005ffe <UART_SetConfig+0x216>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a96      	ldr	r2, [pc, #600]	@ (8006108 <UART_SetConfig+0x320>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d124      	bne.n	8005efe <UART_SetConfig+0x116>
 8005eb4:	4b93      	ldr	r3, [pc, #588]	@ (8006104 <UART_SetConfig+0x31c>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec0:	d011      	beq.n	8005ee6 <UART_SetConfig+0xfe>
 8005ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec6:	d817      	bhi.n	8005ef8 <UART_SetConfig+0x110>
 8005ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ecc:	d011      	beq.n	8005ef2 <UART_SetConfig+0x10a>
 8005ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed2:	d811      	bhi.n	8005ef8 <UART_SetConfig+0x110>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0xf8>
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005edc:	d006      	beq.n	8005eec <UART_SetConfig+0x104>
 8005ede:	e00b      	b.n	8005ef8 <UART_SetConfig+0x110>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e08b      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e088      	b.n	8005ffe <UART_SetConfig+0x216>
 8005eec:	2304      	movs	r3, #4
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e085      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e082      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e07f      	b.n	8005ffe <UART_SetConfig+0x216>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a82      	ldr	r2, [pc, #520]	@ (800610c <UART_SetConfig+0x324>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d124      	bne.n	8005f52 <UART_SetConfig+0x16a>
 8005f08:	4b7e      	ldr	r3, [pc, #504]	@ (8006104 <UART_SetConfig+0x31c>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005f10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f14:	d011      	beq.n	8005f3a <UART_SetConfig+0x152>
 8005f16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f1a:	d817      	bhi.n	8005f4c <UART_SetConfig+0x164>
 8005f1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f20:	d011      	beq.n	8005f46 <UART_SetConfig+0x15e>
 8005f22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f26:	d811      	bhi.n	8005f4c <UART_SetConfig+0x164>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <UART_SetConfig+0x14c>
 8005f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f30:	d006      	beq.n	8005f40 <UART_SetConfig+0x158>
 8005f32:	e00b      	b.n	8005f4c <UART_SetConfig+0x164>
 8005f34:	2300      	movs	r3, #0
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e061      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e05e      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f40:	2304      	movs	r3, #4
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e05b      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f46:	2308      	movs	r3, #8
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e058      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e055      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6e      	ldr	r2, [pc, #440]	@ (8006110 <UART_SetConfig+0x328>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d124      	bne.n	8005fa6 <UART_SetConfig+0x1be>
 8005f5c:	4b69      	ldr	r3, [pc, #420]	@ (8006104 <UART_SetConfig+0x31c>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f68:	d011      	beq.n	8005f8e <UART_SetConfig+0x1a6>
 8005f6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f6e:	d817      	bhi.n	8005fa0 <UART_SetConfig+0x1b8>
 8005f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f74:	d011      	beq.n	8005f9a <UART_SetConfig+0x1b2>
 8005f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f7a:	d811      	bhi.n	8005fa0 <UART_SetConfig+0x1b8>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <UART_SetConfig+0x1a0>
 8005f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f84:	d006      	beq.n	8005f94 <UART_SetConfig+0x1ac>
 8005f86:	e00b      	b.n	8005fa0 <UART_SetConfig+0x1b8>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e037      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e034      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f94:	2304      	movs	r3, #4
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e031      	b.n	8005ffe <UART_SetConfig+0x216>
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	77fb      	strb	r3, [r7, #31]
 8005f9e:	e02e      	b.n	8005ffe <UART_SetConfig+0x216>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e02b      	b.n	8005ffe <UART_SetConfig+0x216>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5a      	ldr	r2, [pc, #360]	@ (8006114 <UART_SetConfig+0x32c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d124      	bne.n	8005ffa <UART_SetConfig+0x212>
 8005fb0:	4b54      	ldr	r3, [pc, #336]	@ (8006104 <UART_SetConfig+0x31c>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005fb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fbc:	d011      	beq.n	8005fe2 <UART_SetConfig+0x1fa>
 8005fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fc2:	d817      	bhi.n	8005ff4 <UART_SetConfig+0x20c>
 8005fc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fc8:	d011      	beq.n	8005fee <UART_SetConfig+0x206>
 8005fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fce:	d811      	bhi.n	8005ff4 <UART_SetConfig+0x20c>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <UART_SetConfig+0x1f4>
 8005fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fd8:	d006      	beq.n	8005fe8 <UART_SetConfig+0x200>
 8005fda:	e00b      	b.n	8005ff4 <UART_SetConfig+0x20c>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x216>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e00a      	b.n	8005ffe <UART_SetConfig+0x216>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e007      	b.n	8005ffe <UART_SetConfig+0x216>
 8005fee:	2308      	movs	r3, #8
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e004      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e001      	b.n	8005ffe <UART_SetConfig+0x216>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006006:	d15b      	bne.n	80060c0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	2b08      	cmp	r3, #8
 800600c:	d827      	bhi.n	800605e <UART_SetConfig+0x276>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x22c>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	0800605f 	.word	0x0800605f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800605f 	.word	0x0800605f
 800602c:	0800605f 	.word	0x0800605f
 8006030:	0800605f 	.word	0x0800605f
 8006034:	08006057 	.word	0x08006057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fe f9b2 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800603c:	61b8      	str	r0, [r7, #24]
        break;
 800603e:	e013      	b.n	8006068 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fe f9d0 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
 8006044:	61b8      	str	r0, [r7, #24]
        break;
 8006046:	e00f      	b.n	8006068 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006048:	4b33      	ldr	r3, [pc, #204]	@ (8006118 <UART_SetConfig+0x330>)
 800604a:	61bb      	str	r3, [r7, #24]
        break;
 800604c:	e00c      	b.n	8006068 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604e:	f7fe f945 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 8006052:	61b8      	str	r0, [r7, #24]
        break;
 8006054:	e008      	b.n	8006068 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800605a:	61bb      	str	r3, [r7, #24]
        break;
 800605c:	e004      	b.n	8006068 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	77bb      	strb	r3, [r7, #30]
        break;
 8006066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8082 	beq.w	8006174 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	005a      	lsls	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b0f      	cmp	r3, #15
 800608a:	d916      	bls.n	80060ba <UART_SetConfig+0x2d2>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006092:	d212      	bcs.n	80060ba <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f023 030f 	bic.w	r3, r3, #15
 800609c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	89fa      	ldrh	r2, [r7, #14]
 80060b6:	60da      	str	r2, [r3, #12]
 80060b8:	e05c      	b.n	8006174 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	77bb      	strb	r3, [r7, #30]
 80060be:	e059      	b.n	8006174 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d835      	bhi.n	8006132 <UART_SetConfig+0x34a>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <UART_SetConfig+0x2e4>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	08006133 	.word	0x08006133
 80060dc:	08006123 	.word	0x08006123
 80060e0:	08006133 	.word	0x08006133
 80060e4:	08006133 	.word	0x08006133
 80060e8:	08006133 	.word	0x08006133
 80060ec:	0800612b 	.word	0x0800612b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f0:	f7fe f956 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80060f4:	61b8      	str	r0, [r7, #24]
        break;
 80060f6:	e021      	b.n	800613c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f8:	f7fe f974 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
 80060fc:	61b8      	str	r0, [r7, #24]
        break;
 80060fe:	e01d      	b.n	800613c <UART_SetConfig+0x354>
 8006100:	40013800 	.word	0x40013800
 8006104:	40021000 	.word	0x40021000
 8006108:	40004400 	.word	0x40004400
 800610c:	40004800 	.word	0x40004800
 8006110:	40004c00 	.word	0x40004c00
 8006114:	40005000 	.word	0x40005000
 8006118:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800611c:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <UART_SetConfig+0x3a4>)
 800611e:	61bb      	str	r3, [r7, #24]
        break;
 8006120:	e00c      	b.n	800613c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006122:	f7fe f8db 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 8006126:	61b8      	str	r0, [r7, #24]
        break;
 8006128:	e008      	b.n	800613c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800612e:	61bb      	str	r3, [r7, #24]
        break;
 8006130:	e004      	b.n	800613c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	77bb      	strb	r3, [r7, #30]
        break;
 800613a:	bf00      	nop
    }

    if (pclk != 0U)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d018      	beq.n	8006174 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	085a      	lsrs	r2, r3, #1
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	441a      	add	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b0f      	cmp	r3, #15
 800615a:	d909      	bls.n	8006170 <UART_SetConfig+0x388>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006162:	d205      	bcs.n	8006170 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	b29a      	uxth	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e001      	b.n	8006174 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006180:	7fbb      	ldrb	r3, [r7, #30]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	007a1200 	.word	0x007a1200

08006190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628e:	d10a      	bne.n	80062a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b098      	sub	sp, #96	@ 0x60
 80062d8:	af02      	add	r7, sp, #8
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e4:	f7fb fc9a 	bl	8001c1c <HAL_GetTick>
 80062e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d12e      	bne.n	8006356 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f88c 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d021      	beq.n	8006356 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006326:	653b      	str	r3, [r7, #80]	@ 0x50
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006330:	647b      	str	r3, [r7, #68]	@ 0x44
 8006332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800633e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e062      	b.n	800641c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d149      	bne.n	80063f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800636c:	2200      	movs	r2, #0
 800636e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f856 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03c      	beq.n	80063f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	623b      	str	r3, [r7, #32]
   return(result);
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
 800639e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e6      	bne.n	800637e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063d0:	61fa      	str	r2, [r7, #28]
 80063d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	617b      	str	r3, [r7, #20]
   return(result);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e5      	bne.n	80063b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e011      	b.n	800641c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3758      	adds	r7, #88	@ 0x58
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	e04f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d04b      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fb fbed 	bl	8001c1c <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <UART_WaitOnFlagUntilTimeout+0x30>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e04e      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d037      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b80      	cmp	r3, #128	@ 0x80
 800646a:	d034      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d031      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d110      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f838 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2208      	movs	r2, #8
 8006492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e029      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064b0:	d111      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f81e 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00f      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0a0      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fe:	b480      	push	{r7}
 8006500:	b095      	sub	sp, #84	@ 0x54
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800651a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006524:	643b      	str	r3, [r7, #64]	@ 0x40
 8006526:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800652a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	61fb      	str	r3, [r7, #28]
   return(result);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800655e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006570:	2b01      	cmp	r3, #1
 8006572:	d118      	bne.n	80065a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	60bb      	str	r3, [r7, #8]
   return(result);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0310 	bic.w	r3, r3, #16
 8006588:	647b      	str	r3, [r7, #68]	@ 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065ba:	bf00      	nop
 80065bc:	3754      	adds	r7, #84	@ 0x54
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <siprintf>:
 80065c8:	b40e      	push	{r1, r2, r3}
 80065ca:	b500      	push	{lr}
 80065cc:	b09c      	sub	sp, #112	@ 0x70
 80065ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80065d0:	9002      	str	r0, [sp, #8]
 80065d2:	9006      	str	r0, [sp, #24]
 80065d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065d8:	4809      	ldr	r0, [pc, #36]	@ (8006600 <siprintf+0x38>)
 80065da:	9107      	str	r1, [sp, #28]
 80065dc:	9104      	str	r1, [sp, #16]
 80065de:	4909      	ldr	r1, [pc, #36]	@ (8006604 <siprintf+0x3c>)
 80065e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e4:	9105      	str	r1, [sp, #20]
 80065e6:	6800      	ldr	r0, [r0, #0]
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	a902      	add	r1, sp, #8
 80065ec:	f000 f994 	bl	8006918 <_svfiprintf_r>
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	b01c      	add	sp, #112	@ 0x70
 80065f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065fc:	b003      	add	sp, #12
 80065fe:	4770      	bx	lr
 8006600:	20000014 	.word	0x20000014
 8006604:	ffff0208 	.word	0xffff0208

08006608 <memset>:
 8006608:	4402      	add	r2, r0
 800660a:	4603      	mov	r3, r0
 800660c:	4293      	cmp	r3, r2
 800660e:	d100      	bne.n	8006612 <memset+0xa>
 8006610:	4770      	bx	lr
 8006612:	f803 1b01 	strb.w	r1, [r3], #1
 8006616:	e7f9      	b.n	800660c <memset+0x4>

08006618 <__errno>:
 8006618:	4b01      	ldr	r3, [pc, #4]	@ (8006620 <__errno+0x8>)
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000014 	.word	0x20000014

08006624 <__libc_init_array>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4d0d      	ldr	r5, [pc, #52]	@ (800665c <__libc_init_array+0x38>)
 8006628:	4c0d      	ldr	r4, [pc, #52]	@ (8006660 <__libc_init_array+0x3c>)
 800662a:	1b64      	subs	r4, r4, r5
 800662c:	10a4      	asrs	r4, r4, #2
 800662e:	2600      	movs	r6, #0
 8006630:	42a6      	cmp	r6, r4
 8006632:	d109      	bne.n	8006648 <__libc_init_array+0x24>
 8006634:	4d0b      	ldr	r5, [pc, #44]	@ (8006664 <__libc_init_array+0x40>)
 8006636:	4c0c      	ldr	r4, [pc, #48]	@ (8006668 <__libc_init_array+0x44>)
 8006638:	f000 fc66 	bl	8006f08 <_init>
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	2600      	movs	r6, #0
 8006642:	42a6      	cmp	r6, r4
 8006644:	d105      	bne.n	8006652 <__libc_init_array+0x2e>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f855 3b04 	ldr.w	r3, [r5], #4
 800664c:	4798      	blx	r3
 800664e:	3601      	adds	r6, #1
 8006650:	e7ee      	b.n	8006630 <__libc_init_array+0xc>
 8006652:	f855 3b04 	ldr.w	r3, [r5], #4
 8006656:	4798      	blx	r3
 8006658:	3601      	adds	r6, #1
 800665a:	e7f2      	b.n	8006642 <__libc_init_array+0x1e>
 800665c:	0800700c 	.word	0x0800700c
 8006660:	0800700c 	.word	0x0800700c
 8006664:	0800700c 	.word	0x0800700c
 8006668:	08007010 	.word	0x08007010

0800666c <__retarget_lock_acquire_recursive>:
 800666c:	4770      	bx	lr

0800666e <__retarget_lock_release_recursive>:
 800666e:	4770      	bx	lr

08006670 <_free_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	2900      	cmp	r1, #0
 8006676:	d041      	beq.n	80066fc <_free_r+0x8c>
 8006678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667c:	1f0c      	subs	r4, r1, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb8      	it	lt
 8006682:	18e4      	addlt	r4, r4, r3
 8006684:	f000 f8e0 	bl	8006848 <__malloc_lock>
 8006688:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <_free_r+0x90>)
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	b933      	cbnz	r3, 800669c <_free_r+0x2c>
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	6014      	str	r4, [r2, #0]
 8006692:	4628      	mov	r0, r5
 8006694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006698:	f000 b8dc 	b.w	8006854 <__malloc_unlock>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d908      	bls.n	80066b2 <_free_r+0x42>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf01      	itttt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	1809      	addeq	r1, r1, r0
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	e7ed      	b.n	800668e <_free_r+0x1e>
 80066b2:	461a      	mov	r2, r3
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b10b      	cbz	r3, 80066bc <_free_r+0x4c>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x42>
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	1850      	adds	r0, r2, r1
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x6c>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	4401      	add	r1, r0
 80066c8:	1850      	adds	r0, r2, r1
 80066ca:	4283      	cmp	r3, r0
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	d1e0      	bne.n	8006692 <_free_r+0x22>
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	4408      	add	r0, r1
 80066d8:	6010      	str	r0, [r2, #0]
 80066da:	e7da      	b.n	8006692 <_free_r+0x22>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x74>
 80066de:	230c      	movs	r3, #12
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	e7d6      	b.n	8006692 <_free_r+0x22>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	1821      	adds	r1, r4, r0
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf04      	itt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	6063      	str	r3, [r4, #4]
 80066f2:	bf04      	itt	eq
 80066f4:	1809      	addeq	r1, r1, r0
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	6054      	str	r4, [r2, #4]
 80066fa:	e7ca      	b.n	8006692 <_free_r+0x22>
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	bf00      	nop
 8006700:	20000498 	.word	0x20000498

08006704 <sbrk_aligned>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	4e0f      	ldr	r6, [pc, #60]	@ (8006744 <sbrk_aligned+0x40>)
 8006708:	460c      	mov	r4, r1
 800670a:	6831      	ldr	r1, [r6, #0]
 800670c:	4605      	mov	r5, r0
 800670e:	b911      	cbnz	r1, 8006716 <sbrk_aligned+0x12>
 8006710:	f000 fba6 	bl	8006e60 <_sbrk_r>
 8006714:	6030      	str	r0, [r6, #0]
 8006716:	4621      	mov	r1, r4
 8006718:	4628      	mov	r0, r5
 800671a:	f000 fba1 	bl	8006e60 <_sbrk_r>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d103      	bne.n	800672a <sbrk_aligned+0x26>
 8006722:	f04f 34ff 	mov.w	r4, #4294967295
 8006726:	4620      	mov	r0, r4
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	1cc4      	adds	r4, r0, #3
 800672c:	f024 0403 	bic.w	r4, r4, #3
 8006730:	42a0      	cmp	r0, r4
 8006732:	d0f8      	beq.n	8006726 <sbrk_aligned+0x22>
 8006734:	1a21      	subs	r1, r4, r0
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fb92 	bl	8006e60 <_sbrk_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d1f2      	bne.n	8006726 <sbrk_aligned+0x22>
 8006740:	e7ef      	b.n	8006722 <sbrk_aligned+0x1e>
 8006742:	bf00      	nop
 8006744:	20000494 	.word	0x20000494

08006748 <_malloc_r>:
 8006748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800674c:	1ccd      	adds	r5, r1, #3
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	2d00      	cmp	r5, #0
 800675c:	4606      	mov	r6, r0
 800675e:	db01      	blt.n	8006764 <_malloc_r+0x1c>
 8006760:	42a9      	cmp	r1, r5
 8006762:	d904      	bls.n	800676e <_malloc_r+0x26>
 8006764:	230c      	movs	r3, #12
 8006766:	6033      	str	r3, [r6, #0]
 8006768:	2000      	movs	r0, #0
 800676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006844 <_malloc_r+0xfc>
 8006772:	f000 f869 	bl	8006848 <__malloc_lock>
 8006776:	f8d8 3000 	ldr.w	r3, [r8]
 800677a:	461c      	mov	r4, r3
 800677c:	bb44      	cbnz	r4, 80067d0 <_malloc_r+0x88>
 800677e:	4629      	mov	r1, r5
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff ffbf 	bl	8006704 <sbrk_aligned>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	4604      	mov	r4, r0
 800678a:	d158      	bne.n	800683e <_malloc_r+0xf6>
 800678c:	f8d8 4000 	ldr.w	r4, [r8]
 8006790:	4627      	mov	r7, r4
 8006792:	2f00      	cmp	r7, #0
 8006794:	d143      	bne.n	800681e <_malloc_r+0xd6>
 8006796:	2c00      	cmp	r4, #0
 8006798:	d04b      	beq.n	8006832 <_malloc_r+0xea>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	4639      	mov	r1, r7
 800679e:	4630      	mov	r0, r6
 80067a0:	eb04 0903 	add.w	r9, r4, r3
 80067a4:	f000 fb5c 	bl	8006e60 <_sbrk_r>
 80067a8:	4581      	cmp	r9, r0
 80067aa:	d142      	bne.n	8006832 <_malloc_r+0xea>
 80067ac:	6821      	ldr	r1, [r4, #0]
 80067ae:	1a6d      	subs	r5, r5, r1
 80067b0:	4629      	mov	r1, r5
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff ffa6 	bl	8006704 <sbrk_aligned>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d03a      	beq.n	8006832 <_malloc_r+0xea>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	442b      	add	r3, r5
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	f8d8 3000 	ldr.w	r3, [r8]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	bb62      	cbnz	r2, 8006824 <_malloc_r+0xdc>
 80067ca:	f8c8 7000 	str.w	r7, [r8]
 80067ce:	e00f      	b.n	80067f0 <_malloc_r+0xa8>
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	1b52      	subs	r2, r2, r5
 80067d4:	d420      	bmi.n	8006818 <_malloc_r+0xd0>
 80067d6:	2a0b      	cmp	r2, #11
 80067d8:	d917      	bls.n	800680a <_malloc_r+0xc2>
 80067da:	1961      	adds	r1, r4, r5
 80067dc:	42a3      	cmp	r3, r4
 80067de:	6025      	str	r5, [r4, #0]
 80067e0:	bf18      	it	ne
 80067e2:	6059      	strne	r1, [r3, #4]
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	bf08      	it	eq
 80067e8:	f8c8 1000 	streq.w	r1, [r8]
 80067ec:	5162      	str	r2, [r4, r5]
 80067ee:	604b      	str	r3, [r1, #4]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f82f 	bl	8006854 <__malloc_unlock>
 80067f6:	f104 000b 	add.w	r0, r4, #11
 80067fa:	1d23      	adds	r3, r4, #4
 80067fc:	f020 0007 	bic.w	r0, r0, #7
 8006800:	1ac2      	subs	r2, r0, r3
 8006802:	bf1c      	itt	ne
 8006804:	1a1b      	subne	r3, r3, r0
 8006806:	50a3      	strne	r3, [r4, r2]
 8006808:	e7af      	b.n	800676a <_malloc_r+0x22>
 800680a:	6862      	ldr	r2, [r4, #4]
 800680c:	42a3      	cmp	r3, r4
 800680e:	bf0c      	ite	eq
 8006810:	f8c8 2000 	streq.w	r2, [r8]
 8006814:	605a      	strne	r2, [r3, #4]
 8006816:	e7eb      	b.n	80067f0 <_malloc_r+0xa8>
 8006818:	4623      	mov	r3, r4
 800681a:	6864      	ldr	r4, [r4, #4]
 800681c:	e7ae      	b.n	800677c <_malloc_r+0x34>
 800681e:	463c      	mov	r4, r7
 8006820:	687f      	ldr	r7, [r7, #4]
 8006822:	e7b6      	b.n	8006792 <_malloc_r+0x4a>
 8006824:	461a      	mov	r2, r3
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	42a3      	cmp	r3, r4
 800682a:	d1fb      	bne.n	8006824 <_malloc_r+0xdc>
 800682c:	2300      	movs	r3, #0
 800682e:	6053      	str	r3, [r2, #4]
 8006830:	e7de      	b.n	80067f0 <_malloc_r+0xa8>
 8006832:	230c      	movs	r3, #12
 8006834:	6033      	str	r3, [r6, #0]
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f80c 	bl	8006854 <__malloc_unlock>
 800683c:	e794      	b.n	8006768 <_malloc_r+0x20>
 800683e:	6005      	str	r5, [r0, #0]
 8006840:	e7d6      	b.n	80067f0 <_malloc_r+0xa8>
 8006842:	bf00      	nop
 8006844:	20000498 	.word	0x20000498

08006848 <__malloc_lock>:
 8006848:	4801      	ldr	r0, [pc, #4]	@ (8006850 <__malloc_lock+0x8>)
 800684a:	f7ff bf0f 	b.w	800666c <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	20000490 	.word	0x20000490

08006854 <__malloc_unlock>:
 8006854:	4801      	ldr	r0, [pc, #4]	@ (800685c <__malloc_unlock+0x8>)
 8006856:	f7ff bf0a 	b.w	800666e <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	20000490 	.word	0x20000490

08006860 <__ssputs_r>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	688e      	ldr	r6, [r1, #8]
 8006866:	461f      	mov	r7, r3
 8006868:	42be      	cmp	r6, r7
 800686a:	680b      	ldr	r3, [r1, #0]
 800686c:	4682      	mov	sl, r0
 800686e:	460c      	mov	r4, r1
 8006870:	4690      	mov	r8, r2
 8006872:	d82d      	bhi.n	80068d0 <__ssputs_r+0x70>
 8006874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006878:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800687c:	d026      	beq.n	80068cc <__ssputs_r+0x6c>
 800687e:	6965      	ldr	r5, [r4, #20]
 8006880:	6909      	ldr	r1, [r1, #16]
 8006882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006886:	eba3 0901 	sub.w	r9, r3, r1
 800688a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800688e:	1c7b      	adds	r3, r7, #1
 8006890:	444b      	add	r3, r9
 8006892:	106d      	asrs	r5, r5, #1
 8006894:	429d      	cmp	r5, r3
 8006896:	bf38      	it	cc
 8006898:	461d      	movcc	r5, r3
 800689a:	0553      	lsls	r3, r2, #21
 800689c:	d527      	bpl.n	80068ee <__ssputs_r+0x8e>
 800689e:	4629      	mov	r1, r5
 80068a0:	f7ff ff52 	bl	8006748 <_malloc_r>
 80068a4:	4606      	mov	r6, r0
 80068a6:	b360      	cbz	r0, 8006902 <__ssputs_r+0xa2>
 80068a8:	6921      	ldr	r1, [r4, #16]
 80068aa:	464a      	mov	r2, r9
 80068ac:	f000 fae8 	bl	8006e80 <memcpy>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	6126      	str	r6, [r4, #16]
 80068be:	6165      	str	r5, [r4, #20]
 80068c0:	444e      	add	r6, r9
 80068c2:	eba5 0509 	sub.w	r5, r5, r9
 80068c6:	6026      	str	r6, [r4, #0]
 80068c8:	60a5      	str	r5, [r4, #8]
 80068ca:	463e      	mov	r6, r7
 80068cc:	42be      	cmp	r6, r7
 80068ce:	d900      	bls.n	80068d2 <__ssputs_r+0x72>
 80068d0:	463e      	mov	r6, r7
 80068d2:	6820      	ldr	r0, [r4, #0]
 80068d4:	4632      	mov	r2, r6
 80068d6:	4641      	mov	r1, r8
 80068d8:	f000 faa8 	bl	8006e2c <memmove>
 80068dc:	68a3      	ldr	r3, [r4, #8]
 80068de:	1b9b      	subs	r3, r3, r6
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	4433      	add	r3, r6
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	462a      	mov	r2, r5
 80068f0:	f000 fad4 	bl	8006e9c <_realloc_r>
 80068f4:	4606      	mov	r6, r0
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d1e0      	bne.n	80068bc <__ssputs_r+0x5c>
 80068fa:	6921      	ldr	r1, [r4, #16]
 80068fc:	4650      	mov	r0, sl
 80068fe:	f7ff feb7 	bl	8006670 <_free_r>
 8006902:	230c      	movs	r3, #12
 8006904:	f8ca 3000 	str.w	r3, [sl]
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e7e9      	b.n	80068ea <__ssputs_r+0x8a>
	...

08006918 <_svfiprintf_r>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	4698      	mov	r8, r3
 800691e:	898b      	ldrh	r3, [r1, #12]
 8006920:	061b      	lsls	r3, r3, #24
 8006922:	b09d      	sub	sp, #116	@ 0x74
 8006924:	4607      	mov	r7, r0
 8006926:	460d      	mov	r5, r1
 8006928:	4614      	mov	r4, r2
 800692a:	d510      	bpl.n	800694e <_svfiprintf_r+0x36>
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	b973      	cbnz	r3, 800694e <_svfiprintf_r+0x36>
 8006930:	2140      	movs	r1, #64	@ 0x40
 8006932:	f7ff ff09 	bl	8006748 <_malloc_r>
 8006936:	6028      	str	r0, [r5, #0]
 8006938:	6128      	str	r0, [r5, #16]
 800693a:	b930      	cbnz	r0, 800694a <_svfiprintf_r+0x32>
 800693c:	230c      	movs	r3, #12
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b01d      	add	sp, #116	@ 0x74
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	2340      	movs	r3, #64	@ 0x40
 800694c:	616b      	str	r3, [r5, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	9309      	str	r3, [sp, #36]	@ 0x24
 8006952:	2320      	movs	r3, #32
 8006954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006958:	f8cd 800c 	str.w	r8, [sp, #12]
 800695c:	2330      	movs	r3, #48	@ 0x30
 800695e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006afc <_svfiprintf_r+0x1e4>
 8006962:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006966:	f04f 0901 	mov.w	r9, #1
 800696a:	4623      	mov	r3, r4
 800696c:	469a      	mov	sl, r3
 800696e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006972:	b10a      	cbz	r2, 8006978 <_svfiprintf_r+0x60>
 8006974:	2a25      	cmp	r2, #37	@ 0x25
 8006976:	d1f9      	bne.n	800696c <_svfiprintf_r+0x54>
 8006978:	ebba 0b04 	subs.w	fp, sl, r4
 800697c:	d00b      	beq.n	8006996 <_svfiprintf_r+0x7e>
 800697e:	465b      	mov	r3, fp
 8006980:	4622      	mov	r2, r4
 8006982:	4629      	mov	r1, r5
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff ff6b 	bl	8006860 <__ssputs_r>
 800698a:	3001      	adds	r0, #1
 800698c:	f000 80a7 	beq.w	8006ade <_svfiprintf_r+0x1c6>
 8006990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006992:	445a      	add	r2, fp
 8006994:	9209      	str	r2, [sp, #36]	@ 0x24
 8006996:	f89a 3000 	ldrb.w	r3, [sl]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 809f 	beq.w	8006ade <_svfiprintf_r+0x1c6>
 80069a0:	2300      	movs	r3, #0
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069aa:	f10a 0a01 	add.w	sl, sl, #1
 80069ae:	9304      	str	r3, [sp, #16]
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80069b8:	4654      	mov	r4, sl
 80069ba:	2205      	movs	r2, #5
 80069bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c0:	484e      	ldr	r0, [pc, #312]	@ (8006afc <_svfiprintf_r+0x1e4>)
 80069c2:	f7f9 fc05 	bl	80001d0 <memchr>
 80069c6:	9a04      	ldr	r2, [sp, #16]
 80069c8:	b9d8      	cbnz	r0, 8006a02 <_svfiprintf_r+0xea>
 80069ca:	06d0      	lsls	r0, r2, #27
 80069cc:	bf44      	itt	mi
 80069ce:	2320      	movmi	r3, #32
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d4:	0711      	lsls	r1, r2, #28
 80069d6:	bf44      	itt	mi
 80069d8:	232b      	movmi	r3, #43	@ 0x2b
 80069da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069de:	f89a 3000 	ldrb.w	r3, [sl]
 80069e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80069e4:	d015      	beq.n	8006a12 <_svfiprintf_r+0xfa>
 80069e6:	9a07      	ldr	r2, [sp, #28]
 80069e8:	4654      	mov	r4, sl
 80069ea:	2000      	movs	r0, #0
 80069ec:	f04f 0c0a 	mov.w	ip, #10
 80069f0:	4621      	mov	r1, r4
 80069f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f6:	3b30      	subs	r3, #48	@ 0x30
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	d94b      	bls.n	8006a94 <_svfiprintf_r+0x17c>
 80069fc:	b1b0      	cbz	r0, 8006a2c <_svfiprintf_r+0x114>
 80069fe:	9207      	str	r2, [sp, #28]
 8006a00:	e014      	b.n	8006a2c <_svfiprintf_r+0x114>
 8006a02:	eba0 0308 	sub.w	r3, r0, r8
 8006a06:	fa09 f303 	lsl.w	r3, r9, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	46a2      	mov	sl, r4
 8006a10:	e7d2      	b.n	80069b8 <_svfiprintf_r+0xa0>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	9103      	str	r1, [sp, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfbb      	ittet	lt
 8006a1e:	425b      	neglt	r3, r3
 8006a20:	f042 0202 	orrlt.w	r2, r2, #2
 8006a24:	9307      	strge	r3, [sp, #28]
 8006a26:	9307      	strlt	r3, [sp, #28]
 8006a28:	bfb8      	it	lt
 8006a2a:	9204      	strlt	r2, [sp, #16]
 8006a2c:	7823      	ldrb	r3, [r4, #0]
 8006a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a30:	d10a      	bne.n	8006a48 <_svfiprintf_r+0x130>
 8006a32:	7863      	ldrb	r3, [r4, #1]
 8006a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a36:	d132      	bne.n	8006a9e <_svfiprintf_r+0x186>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	9203      	str	r2, [sp, #12]
 8006a40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a44:	3402      	adds	r4, #2
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b0c <_svfiprintf_r+0x1f4>
 8006a4c:	7821      	ldrb	r1, [r4, #0]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	4650      	mov	r0, sl
 8006a52:	f7f9 fbbd 	bl	80001d0 <memchr>
 8006a56:	b138      	cbz	r0, 8006a68 <_svfiprintf_r+0x150>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	eba0 000a 	sub.w	r0, r0, sl
 8006a5e:	2240      	movs	r2, #64	@ 0x40
 8006a60:	4082      	lsls	r2, r0
 8006a62:	4313      	orrs	r3, r2
 8006a64:	3401      	adds	r4, #1
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6c:	4824      	ldr	r0, [pc, #144]	@ (8006b00 <_svfiprintf_r+0x1e8>)
 8006a6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a72:	2206      	movs	r2, #6
 8006a74:	f7f9 fbac 	bl	80001d0 <memchr>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d036      	beq.n	8006aea <_svfiprintf_r+0x1d2>
 8006a7c:	4b21      	ldr	r3, [pc, #132]	@ (8006b04 <_svfiprintf_r+0x1ec>)
 8006a7e:	bb1b      	cbnz	r3, 8006ac8 <_svfiprintf_r+0x1b0>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	3307      	adds	r3, #7
 8006a84:	f023 0307 	bic.w	r3, r3, #7
 8006a88:	3308      	adds	r3, #8
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8e:	4433      	add	r3, r6
 8006a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a92:	e76a      	b.n	800696a <_svfiprintf_r+0x52>
 8006a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a98:	460c      	mov	r4, r1
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	e7a8      	b.n	80069f0 <_svfiprintf_r+0xd8>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	3401      	adds	r4, #1
 8006aa2:	9305      	str	r3, [sp, #20]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f04f 0c0a 	mov.w	ip, #10
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab0:	3a30      	subs	r2, #48	@ 0x30
 8006ab2:	2a09      	cmp	r2, #9
 8006ab4:	d903      	bls.n	8006abe <_svfiprintf_r+0x1a6>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0c6      	beq.n	8006a48 <_svfiprintf_r+0x130>
 8006aba:	9105      	str	r1, [sp, #20]
 8006abc:	e7c4      	b.n	8006a48 <_svfiprintf_r+0x130>
 8006abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e7f0      	b.n	8006aaa <_svfiprintf_r+0x192>
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4b0e      	ldr	r3, [pc, #56]	@ (8006b08 <_svfiprintf_r+0x1f0>)
 8006ad0:	a904      	add	r1, sp, #16
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f3af 8000 	nop.w
 8006ad8:	1c42      	adds	r2, r0, #1
 8006ada:	4606      	mov	r6, r0
 8006adc:	d1d6      	bne.n	8006a8c <_svfiprintf_r+0x174>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	065b      	lsls	r3, r3, #25
 8006ae2:	f53f af2d 	bmi.w	8006940 <_svfiprintf_r+0x28>
 8006ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ae8:	e72c      	b.n	8006944 <_svfiprintf_r+0x2c>
 8006aea:	ab03      	add	r3, sp, #12
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	462a      	mov	r2, r5
 8006af0:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <_svfiprintf_r+0x1f0>)
 8006af2:	a904      	add	r1, sp, #16
 8006af4:	4638      	mov	r0, r7
 8006af6:	f000 f879 	bl	8006bec <_printf_i>
 8006afa:	e7ed      	b.n	8006ad8 <_svfiprintf_r+0x1c0>
 8006afc:	08006fd0 	.word	0x08006fd0
 8006b00:	08006fda 	.word	0x08006fda
 8006b04:	00000000 	.word	0x00000000
 8006b08:	08006861 	.word	0x08006861
 8006b0c:	08006fd6 	.word	0x08006fd6

08006b10 <_printf_common>:
 8006b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	4616      	mov	r6, r2
 8006b16:	4698      	mov	r8, r3
 8006b18:	688a      	ldr	r2, [r1, #8]
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	bfb8      	it	lt
 8006b24:	4613      	movlt	r3, r2
 8006b26:	6033      	str	r3, [r6, #0]
 8006b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	b10a      	cbz	r2, 8006b36 <_printf_common+0x26>
 8006b32:	3301      	adds	r3, #1
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	0699      	lsls	r1, r3, #26
 8006b3a:	bf42      	ittt	mi
 8006b3c:	6833      	ldrmi	r3, [r6, #0]
 8006b3e:	3302      	addmi	r3, #2
 8006b40:	6033      	strmi	r3, [r6, #0]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	f015 0506 	ands.w	r5, r5, #6
 8006b48:	d106      	bne.n	8006b58 <_printf_common+0x48>
 8006b4a:	f104 0a19 	add.w	sl, r4, #25
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	6832      	ldr	r2, [r6, #0]
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	42ab      	cmp	r3, r5
 8006b56:	dc26      	bgt.n	8006ba6 <_printf_common+0x96>
 8006b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	3b00      	subs	r3, #0
 8006b60:	bf18      	it	ne
 8006b62:	2301      	movne	r3, #1
 8006b64:	0692      	lsls	r2, r2, #26
 8006b66:	d42b      	bmi.n	8006bc0 <_printf_common+0xb0>
 8006b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c8      	blx	r9
 8006b72:	3001      	adds	r0, #1
 8006b74:	d01e      	beq.n	8006bb4 <_printf_common+0xa4>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6922      	ldr	r2, [r4, #16]
 8006b7a:	f003 0306 	and.w	r3, r3, #6
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	bf02      	ittt	eq
 8006b82:	68e5      	ldreq	r5, [r4, #12]
 8006b84:	6833      	ldreq	r3, [r6, #0]
 8006b86:	1aed      	subeq	r5, r5, r3
 8006b88:	68a3      	ldr	r3, [r4, #8]
 8006b8a:	bf0c      	ite	eq
 8006b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b90:	2500      	movne	r5, #0
 8006b92:	4293      	cmp	r3, r2
 8006b94:	bfc4      	itt	gt
 8006b96:	1a9b      	subgt	r3, r3, r2
 8006b98:	18ed      	addgt	r5, r5, r3
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	341a      	adds	r4, #26
 8006b9e:	42b5      	cmp	r5, r6
 8006ba0:	d11a      	bne.n	8006bd8 <_printf_common+0xc8>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e008      	b.n	8006bb8 <_printf_common+0xa8>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4652      	mov	r2, sl
 8006baa:	4641      	mov	r1, r8
 8006bac:	4638      	mov	r0, r7
 8006bae:	47c8      	blx	r9
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d103      	bne.n	8006bbc <_printf_common+0xac>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	e7c6      	b.n	8006b4e <_printf_common+0x3e>
 8006bc0:	18e1      	adds	r1, r4, r3
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	2030      	movs	r0, #48	@ 0x30
 8006bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bca:	4422      	add	r2, r4
 8006bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	e7c7      	b.n	8006b68 <_printf_common+0x58>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4622      	mov	r2, r4
 8006bdc:	4641      	mov	r1, r8
 8006bde:	4638      	mov	r0, r7
 8006be0:	47c8      	blx	r9
 8006be2:	3001      	adds	r0, #1
 8006be4:	d0e6      	beq.n	8006bb4 <_printf_common+0xa4>
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7d9      	b.n	8006b9e <_printf_common+0x8e>
	...

08006bec <_printf_i>:
 8006bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	7e0f      	ldrb	r7, [r1, #24]
 8006bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bf4:	2f78      	cmp	r7, #120	@ 0x78
 8006bf6:	4691      	mov	r9, r2
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c02:	d807      	bhi.n	8006c14 <_printf_i+0x28>
 8006c04:	2f62      	cmp	r7, #98	@ 0x62
 8006c06:	d80a      	bhi.n	8006c1e <_printf_i+0x32>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	f000 80d2 	beq.w	8006db2 <_printf_i+0x1c6>
 8006c0e:	2f58      	cmp	r7, #88	@ 0x58
 8006c10:	f000 80b9 	beq.w	8006d86 <_printf_i+0x19a>
 8006c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c1c:	e03a      	b.n	8006c94 <_printf_i+0xa8>
 8006c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c22:	2b15      	cmp	r3, #21
 8006c24:	d8f6      	bhi.n	8006c14 <_printf_i+0x28>
 8006c26:	a101      	add	r1, pc, #4	@ (adr r1, 8006c2c <_printf_i+0x40>)
 8006c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c99 	.word	0x08006c99
 8006c34:	08006c15 	.word	0x08006c15
 8006c38:	08006c15 	.word	0x08006c15
 8006c3c:	08006c15 	.word	0x08006c15
 8006c40:	08006c15 	.word	0x08006c15
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006c15 	.word	0x08006c15
 8006c4c:	08006c15 	.word	0x08006c15
 8006c50:	08006c15 	.word	0x08006c15
 8006c54:	08006c15 	.word	0x08006c15
 8006c58:	08006d99 	.word	0x08006d99
 8006c5c:	08006cc3 	.word	0x08006cc3
 8006c60:	08006d53 	.word	0x08006d53
 8006c64:	08006c15 	.word	0x08006c15
 8006c68:	08006c15 	.word	0x08006c15
 8006c6c:	08006dbb 	.word	0x08006dbb
 8006c70:	08006c15 	.word	0x08006c15
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006c15 	.word	0x08006c15
 8006c7c:	08006c15 	.word	0x08006c15
 8006c80:	08006d5b 	.word	0x08006d5b
 8006c84:	6833      	ldr	r3, [r6, #0]
 8006c86:	1d1a      	adds	r2, r3, #4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6032      	str	r2, [r6, #0]
 8006c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c94:	2301      	movs	r3, #1
 8006c96:	e09d      	b.n	8006dd4 <_printf_i+0x1e8>
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	6820      	ldr	r0, [r4, #0]
 8006c9c:	1d19      	adds	r1, r3, #4
 8006c9e:	6031      	str	r1, [r6, #0]
 8006ca0:	0606      	lsls	r6, r0, #24
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_i+0xbc>
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	e003      	b.n	8006cb0 <_printf_i+0xc4>
 8006ca8:	0645      	lsls	r5, r0, #25
 8006caa:	d5fb      	bpl.n	8006ca4 <_printf_i+0xb8>
 8006cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	da03      	bge.n	8006cbc <_printf_i+0xd0>
 8006cb4:	232d      	movs	r3, #45	@ 0x2d
 8006cb6:	426d      	negs	r5, r5
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cbc:	4859      	ldr	r0, [pc, #356]	@ (8006e24 <_printf_i+0x238>)
 8006cbe:	230a      	movs	r3, #10
 8006cc0:	e011      	b.n	8006ce6 <_printf_i+0xfa>
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	0608      	lsls	r0, r1, #24
 8006cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ccc:	d402      	bmi.n	8006cd4 <_printf_i+0xe8>
 8006cce:	0649      	lsls	r1, r1, #25
 8006cd0:	bf48      	it	mi
 8006cd2:	b2ad      	uxthmi	r5, r5
 8006cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cd6:	4853      	ldr	r0, [pc, #332]	@ (8006e24 <_printf_i+0x238>)
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	bf14      	ite	ne
 8006cdc:	230a      	movne	r3, #10
 8006cde:	2308      	moveq	r3, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ce6:	6866      	ldr	r6, [r4, #4]
 8006ce8:	60a6      	str	r6, [r4, #8]
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	bfa2      	ittt	ge
 8006cee:	6821      	ldrge	r1, [r4, #0]
 8006cf0:	f021 0104 	bicge.w	r1, r1, #4
 8006cf4:	6021      	strge	r1, [r4, #0]
 8006cf6:	b90d      	cbnz	r5, 8006cfc <_printf_i+0x110>
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	d04b      	beq.n	8006d94 <_printf_i+0x1a8>
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d02:	fb03 5711 	mls	r7, r3, r1, r5
 8006d06:	5dc7      	ldrb	r7, [r0, r7]
 8006d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d0c:	462f      	mov	r7, r5
 8006d0e:	42bb      	cmp	r3, r7
 8006d10:	460d      	mov	r5, r1
 8006d12:	d9f4      	bls.n	8006cfe <_printf_i+0x112>
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d10b      	bne.n	8006d30 <_printf_i+0x144>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07df      	lsls	r7, r3, #31
 8006d1c:	d508      	bpl.n	8006d30 <_printf_i+0x144>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6861      	ldr	r1, [r4, #4]
 8006d22:	4299      	cmp	r1, r3
 8006d24:	bfde      	ittt	le
 8006d26:	2330      	movle	r3, #48	@ 0x30
 8006d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d30:	1b92      	subs	r2, r2, r6
 8006d32:	6122      	str	r2, [r4, #16]
 8006d34:	f8cd a000 	str.w	sl, [sp]
 8006d38:	464b      	mov	r3, r9
 8006d3a:	aa03      	add	r2, sp, #12
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f7ff fee6 	bl	8006b10 <_printf_common>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d14a      	bne.n	8006dde <_printf_i+0x1f2>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	b004      	add	sp, #16
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	f043 0320 	orr.w	r3, r3, #32
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	4833      	ldr	r0, [pc, #204]	@ (8006e28 <_printf_i+0x23c>)
 8006d5c:	2778      	movs	r7, #120	@ 0x78
 8006d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6831      	ldr	r1, [r6, #0]
 8006d66:	061f      	lsls	r7, r3, #24
 8006d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d6c:	d402      	bmi.n	8006d74 <_printf_i+0x188>
 8006d6e:	065f      	lsls	r7, r3, #25
 8006d70:	bf48      	it	mi
 8006d72:	b2ad      	uxthmi	r5, r5
 8006d74:	6031      	str	r1, [r6, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	bf44      	itt	mi
 8006d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d7e:	6023      	strmi	r3, [r4, #0]
 8006d80:	b11d      	cbz	r5, 8006d8a <_printf_i+0x19e>
 8006d82:	2310      	movs	r3, #16
 8006d84:	e7ac      	b.n	8006ce0 <_printf_i+0xf4>
 8006d86:	4827      	ldr	r0, [pc, #156]	@ (8006e24 <_printf_i+0x238>)
 8006d88:	e7e9      	b.n	8006d5e <_printf_i+0x172>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f023 0320 	bic.w	r3, r3, #32
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	e7f6      	b.n	8006d82 <_printf_i+0x196>
 8006d94:	4616      	mov	r6, r2
 8006d96:	e7bd      	b.n	8006d14 <_printf_i+0x128>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	6961      	ldr	r1, [r4, #20]
 8006d9e:	1d18      	adds	r0, r3, #4
 8006da0:	6030      	str	r0, [r6, #0]
 8006da2:	062e      	lsls	r6, r5, #24
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	d501      	bpl.n	8006dac <_printf_i+0x1c0>
 8006da8:	6019      	str	r1, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <_printf_i+0x1c6>
 8006dac:	0668      	lsls	r0, r5, #25
 8006dae:	d5fb      	bpl.n	8006da8 <_printf_i+0x1bc>
 8006db0:	8019      	strh	r1, [r3, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6123      	str	r3, [r4, #16]
 8006db6:	4616      	mov	r6, r2
 8006db8:	e7bc      	b.n	8006d34 <_printf_i+0x148>
 8006dba:	6833      	ldr	r3, [r6, #0]
 8006dbc:	1d1a      	adds	r2, r3, #4
 8006dbe:	6032      	str	r2, [r6, #0]
 8006dc0:	681e      	ldr	r6, [r3, #0]
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7f9 fa02 	bl	80001d0 <memchr>
 8006dcc:	b108      	cbz	r0, 8006dd2 <_printf_i+0x1e6>
 8006dce:	1b80      	subs	r0, r0, r6
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ddc:	e7aa      	b.n	8006d34 <_printf_i+0x148>
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	4632      	mov	r2, r6
 8006de2:	4649      	mov	r1, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	47d0      	blx	sl
 8006de8:	3001      	adds	r0, #1
 8006dea:	d0ad      	beq.n	8006d48 <_printf_i+0x15c>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	079b      	lsls	r3, r3, #30
 8006df0:	d413      	bmi.n	8006e1a <_printf_i+0x22e>
 8006df2:	68e0      	ldr	r0, [r4, #12]
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	4298      	cmp	r0, r3
 8006df8:	bfb8      	it	lt
 8006dfa:	4618      	movlt	r0, r3
 8006dfc:	e7a6      	b.n	8006d4c <_printf_i+0x160>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4632      	mov	r2, r6
 8006e02:	4649      	mov	r1, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	47d0      	blx	sl
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d09d      	beq.n	8006d48 <_printf_i+0x15c>
 8006e0c:	3501      	adds	r5, #1
 8006e0e:	68e3      	ldr	r3, [r4, #12]
 8006e10:	9903      	ldr	r1, [sp, #12]
 8006e12:	1a5b      	subs	r3, r3, r1
 8006e14:	42ab      	cmp	r3, r5
 8006e16:	dcf2      	bgt.n	8006dfe <_printf_i+0x212>
 8006e18:	e7eb      	b.n	8006df2 <_printf_i+0x206>
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	f104 0619 	add.w	r6, r4, #25
 8006e20:	e7f5      	b.n	8006e0e <_printf_i+0x222>
 8006e22:	bf00      	nop
 8006e24:	08006fe1 	.word	0x08006fe1
 8006e28:	08006ff2 	.word	0x08006ff2

08006e2c <memmove>:
 8006e2c:	4288      	cmp	r0, r1
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	eb01 0402 	add.w	r4, r1, r2
 8006e34:	d902      	bls.n	8006e3c <memmove+0x10>
 8006e36:	4284      	cmp	r4, r0
 8006e38:	4623      	mov	r3, r4
 8006e3a:	d807      	bhi.n	8006e4c <memmove+0x20>
 8006e3c:	1e43      	subs	r3, r0, #1
 8006e3e:	42a1      	cmp	r1, r4
 8006e40:	d008      	beq.n	8006e54 <memmove+0x28>
 8006e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e4a:	e7f8      	b.n	8006e3e <memmove+0x12>
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4601      	mov	r1, r0
 8006e50:	428a      	cmp	r2, r1
 8006e52:	d100      	bne.n	8006e56 <memmove+0x2a>
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e5e:	e7f7      	b.n	8006e50 <memmove+0x24>

08006e60 <_sbrk_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d06      	ldr	r5, [pc, #24]	@ (8006e7c <_sbrk_r+0x1c>)
 8006e64:	2300      	movs	r3, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	f7fa fe0a 	bl	8001a84 <_sbrk>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_sbrk_r+0x1a>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_sbrk_r+0x1a>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	2000048c 	.word	0x2000048c

08006e80 <memcpy>:
 8006e80:	440a      	add	r2, r1
 8006e82:	4291      	cmp	r1, r2
 8006e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e88:	d100      	bne.n	8006e8c <memcpy+0xc>
 8006e8a:	4770      	bx	lr
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e96:	4291      	cmp	r1, r2
 8006e98:	d1f9      	bne.n	8006e8e <memcpy+0xe>
 8006e9a:	bd10      	pop	{r4, pc}

08006e9c <_realloc_r>:
 8006e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	4615      	mov	r5, r2
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	b921      	cbnz	r1, 8006eb2 <_realloc_r+0x16>
 8006ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	4611      	mov	r1, r2
 8006eae:	f7ff bc4b 	b.w	8006748 <_malloc_r>
 8006eb2:	b92a      	cbnz	r2, 8006ec0 <_realloc_r+0x24>
 8006eb4:	f7ff fbdc 	bl	8006670 <_free_r>
 8006eb8:	2400      	movs	r4, #0
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	f000 f81a 	bl	8006ef8 <_malloc_usable_size_r>
 8006ec4:	4285      	cmp	r5, r0
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	d802      	bhi.n	8006ed0 <_realloc_r+0x34>
 8006eca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ece:	d8f4      	bhi.n	8006eba <_realloc_r+0x1e>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7ff fc38 	bl	8006748 <_malloc_r>
 8006ed8:	4607      	mov	r7, r0
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d0ec      	beq.n	8006eb8 <_realloc_r+0x1c>
 8006ede:	42b5      	cmp	r5, r6
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	bf28      	it	cs
 8006ee6:	4632      	movcs	r2, r6
 8006ee8:	f7ff ffca 	bl	8006e80 <memcpy>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7ff fbbe 	bl	8006670 <_free_r>
 8006ef4:	463c      	mov	r4, r7
 8006ef6:	e7e0      	b.n	8006eba <_realloc_r+0x1e>

08006ef8 <_malloc_usable_size_r>:
 8006ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efc:	1f18      	subs	r0, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfbc      	itt	lt
 8006f02:	580b      	ldrlt	r3, [r1, r0]
 8006f04:	18c0      	addlt	r0, r0, r3
 8006f06:	4770      	bx	lr

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
