
PFC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800d0d8  0800d0d8  0000e0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d510  0800d510  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d510  0800d510  0000e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d518  0800d518  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d518  0800d518  0000e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d51c  0800d51c  0000e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d520  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1dc  2**0
                  CONTENTS
 10 .bss          00000820  200001dc  200001dc  0000f1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  0000f1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001974c  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037b4  00000000  00000000  00028958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a4  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005067  00000000  00000000  0002e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d793  00000000  00000000  00033753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c432c  00000000  00000000  00050ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00115212  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a0c  00000000  00000000  00115298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0011bca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0c0 	.word	0x0800d0c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d0c0 	.word	0x0800d0c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <lcd_write_nibble>:
        I2C_send((uint8_t)(*str), 1);
        str++;
    }
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
    uint8_t data = nibble << D4_BIT;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
    data |= rs << RS_BIT;
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	73fb      	strb	r3, [r7, #15]
    data |= backlight_state << BL_BIT;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <lcd_write_nibble+0x7c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	73fb      	strb	r3, [r7, #15]
    data |= 1 << EN_BIT;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000be8:	f107 020f 	add.w	r2, r7, #15
 8000bec:	2364      	movs	r3, #100	@ 0x64
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	214e      	movs	r1, #78	@ 0x4e
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <lcd_write_nibble+0x80>)
 8000bf6:	f004 fc1b 	bl	8005430 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f002 f972 	bl	8002ee4 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000c0a:	f107 020f 	add.w	r2, r7, #15
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	214e      	movs	r1, #78	@ 0x4e
 8000c16:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <lcd_write_nibble+0x80>)
 8000c18:	f004 fc0a 	bl	8005430 <HAL_I2C_Master_Transmit>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200002e8 	.word	0x200002e8

08000c2c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = cmd >> 4;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = cmd & 0x0F;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 0);
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffad 	bl	8000ba8 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 0);
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffa8 	bl	8000ba8 <lcd_write_nibble>
    if (cmd == 0x01 || cmd == 0x02) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d002      	beq.n	8000c64 <lcd_send_cmd+0x38>
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <lcd_send_cmd+0x3e>
        HAL_Delay(2);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f002 f93d 	bl	8002ee4 <HAL_Delay>
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = data >> 4;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = data & 0x0F;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 1);
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff8a 	bl	8000ba8 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 1);
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff85 	bl	8000ba8 <lcd_write_nibble>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <lcd_init>:

void lcd_init() {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000caa:	2032      	movs	r0, #50	@ 0x32
 8000cac:	f002 f91a 	bl	8002ee4 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f7ff ff78 	bl	8000ba8 <lcd_write_nibble>
    HAL_Delay(5);
 8000cb8:	2005      	movs	r0, #5
 8000cba:	f002 f913 	bl	8002ee4 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff ff71 	bl	8000ba8 <lcd_write_nibble>
    HAL_Delay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 f90c 	bl	8002ee4 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff ff6a 	bl	8000ba8 <lcd_write_nibble>
    HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f002 f905 	bl	8002ee4 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff ff63 	bl	8000ba8 <lcd_write_nibble>
    lcd_send_cmd(0x28);
 8000ce2:	2028      	movs	r0, #40	@ 0x28
 8000ce4:	f7ff ffa2 	bl	8000c2c <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8000ce8:	200c      	movs	r0, #12
 8000cea:	f7ff ff9f 	bl	8000c2c <lcd_send_cmd>
    lcd_send_cmd(0x06);
 8000cee:	2006      	movs	r0, #6
 8000cf0:	f7ff ff9c 	bl	8000c2c <lcd_send_cmd>
    lcd_send_cmd(0x01);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff99 	bl	8000c2c <lcd_send_cmd>
    HAL_Delay(2);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f002 f8f2 	bl	8002ee4 <HAL_Delay>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <lcd_write_string>:

void lcd_write_string(char *str) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000d0c:	e006      	b.n	8000d1c <lcd_write_string+0x18>
        lcd_send_data(*str++);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffab 	bl	8000c72 <lcd_send_data>
    while (*str) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f4      	bne.n	8000d0e <lcd_write_string+0xa>
    }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d817      	bhi.n	8000d78 <lcd_set_cursor+0x48>
 8000d48:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <lcd_set_cursor+0x20>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d67 	.word	0x08000d67
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d73 	.word	0x08000d73
        case 1:
            address = 0x80;
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	73fb      	strb	r3, [r7, #15]
            break;
 8000d64:	e00a      	b.n	8000d7c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000d66:	23c0      	movs	r3, #192	@ 0xc0
 8000d68:	73fb      	strb	r3, [r7, #15]
            break;
 8000d6a:	e007      	b.n	8000d7c <lcd_set_cursor+0x4c>
        case 3:
            address = 0x94;
 8000d6c:	2394      	movs	r3, #148	@ 0x94
 8000d6e:	73fb      	strb	r3, [r7, #15]
            break;
 8000d70:	e004      	b.n	8000d7c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000d72:	23d4      	movs	r3, #212	@ 0xd4
 8000d74:	73fb      	strb	r3, [r7, #15]
            break;
 8000d76:	e001      	b.n	8000d7c <lcd_set_cursor+0x4c>
        default:
            address = 0x80;
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	4413      	add	r3, r2
 8000d82:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff4d 	bl	8000c2c <lcd_send_cmd>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop

08000d9c <lcd_clear>:

void lcd_clear(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff ff43 	bl	8000c2c <lcd_send_cmd>
    HAL_Delay(2);
 8000da6:	2002      	movs	r0, #2
 8000da8:	f002 f89c 	bl	8002ee4 <HAL_Delay>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <ReadButtons>:
    HAL_I2C_Master_Transmit(&hi2c1, IND_ADDRESS << 1, &ind_data, 1, HAL_MAX_DELAY);
}



void ReadButtons(uint8_t *buttons) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
    HAL_I2C_Master_Receive(&hi2c1, BUTTONS_ADDRESS<< 1, buttons, 1, HAL_MAX_DELAY);
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	2148      	movs	r1, #72	@ 0x48
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <ReadButtons+0x24>)
 8000dc6:	f004 fc4b 	bl	8005660 <HAL_I2C_Master_Receive>

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002e8 	.word	0x200002e8

08000dd8 <Get_Buttons_States>:


void Get_Buttons_States(uint8_t *buttons_states) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    uint8_t buttons;
    ReadButtons(&buttons);
 8000de0:	f107 030e 	add.w	r3, r7, #14
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffe3 	bl	8000db0 <ReadButtons>
    for (uint8_t pin = 0; pin < 8; pin++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e013      	b.n	8000e18 <Get_Buttons_States+0x40>
    	buttons_states[pin] = !((buttons >> pin) & 0x01);
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	461a      	mov	r2, r3
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	fa42 f303 	asr.w	r3, r2, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2d9      	uxtb	r1, r3
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	460a      	mov	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
    for (uint8_t pin = 0; pin < 8; pin++) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b07      	cmp	r3, #7
 8000e1c:	d9e8      	bls.n	8000df0 <Get_Buttons_States+0x18>

    }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Registers_handler>:
#include "I2C_interface.h"

extern RX_BUFFER_SIZE;
extern uint8_t SLAVE_ID;

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]

			 if (rxFrame[0] == SLAVE_ID) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <Registers_handler+0xd8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d138      	bne.n	8000eb2 <Registers_handler+0x8a>
                       uint8_t opCode = rxFrame[1];
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	757b      	strb	r3, [r7, #21]

				  			  switch (opCode) {
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d852      	bhi.n	8000ef4 <Registers_handler+0xcc>
 8000e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <Registers_handler+0x2c>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ef5 	.word	0x08000ef5
 8000e58:	08000ef5 	.word	0x08000ef5
 8000e5c:	08000e95 	.word	0x08000e95
 8000e60:	08000ef5 	.word	0x08000ef5
 8000e64:	08000ef5 	.word	0x08000ef5
 8000e68:	08000e9f 	.word	0x08000e9f
 8000e6c:	08000ef5 	.word	0x08000ef5
 8000e70:	08000ef5 	.word	0x08000ef5
 8000e74:	08000ef5 	.word	0x08000ef5
 8000e78:	08000ef5 	.word	0x08000ef5
 8000e7c:	08000ef5 	.word	0x08000ef5
 8000e80:	08000ef5 	.word	0x08000ef5
 8000e84:	08000ef5 	.word	0x08000ef5
 8000e88:	08000ef5 	.word	0x08000ef5
 8000e8c:	08000ef5 	.word	0x08000ef5
 8000e90:	08000ea9 	.word	0x08000ea9
							   break;


				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart2,data_reg);
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	481b      	ldr	r0, [pc, #108]	@ (8000f04 <Registers_handler+0xdc>)
 8000e98:	f001 fa3c 	bl	8002314 <handleReadHoldingRegs>
				  			   break;
 8000e9c:	e02b      	b.n	8000ef6 <Registers_handler+0xce>
				  			   break;


				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4818      	ldr	r0, [pc, #96]	@ (8000f04 <Registers_handler+0xdc>)
 8000ea2:	f001 fab5 	bl	8002410 <handleWriteMulyipleHandlingRegister>

                               break;
 8000ea6:	e026      	b.n	8000ef6 <Registers_handler+0xce>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4816      	ldr	r0, [pc, #88]	@ (8000f04 <Registers_handler+0xdc>)
 8000eac:	f001 fab0 	bl	8002410 <handleWriteMulyipleHandlingRegister>

                               break;
 8000eb0:	e021      	b.n	8000ef6 <Registers_handler+0xce>
				  			   break;
				  			     }

				  			 }
			                  else{
			                            for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	82fb      	strh	r3, [r7, #22]
 8000eb6:	e007      	b.n	8000ec8 <Registers_handler+0xa0>
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	8afb      	ldrh	r3, [r7, #22]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	82fb      	strh	r3, [r7, #22]
 8000ec8:	8afb      	ldrh	r3, [r7, #22]
 8000eca:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ecc:	d9f4      	bls.n	8000eb8 <Registers_handler+0x90>
			 				  			    	     RX_2;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <Registers_handler+0xe0>)
 8000ed4:	f004 f9c6 	bl	8005264 <HAL_GPIO_WritePin>
			 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame,64 );
 8000ed8:	2240      	movs	r2, #64	@ 0x40
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <Registers_handler+0xdc>)
 8000ede:	f009 fa54 	bl	800a38a <HAL_UARTEx_ReceiveToIdle_DMA>
			 				  			    			    // Включение прерывания IDLE
			 				  			   __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);}
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <Registers_handler+0xdc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <Registers_handler+0xdc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0210 	orr.w	r2, r2, #16
 8000ef0:	601a      	str	r2, [r3, #0]

                          }
 8000ef2:	e000      	b.n	8000ef6 <Registers_handler+0xce>
				  			   break;
 8000ef4:	bf00      	nop
                          }
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000006 	.word	0x20000006
 8000f04:	2000046c 	.word	0x2000046c
 8000f08:	48000400 	.word	0x48000400

08000f0c <Check_USART2_Timeout>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Check_USART2_Timeout(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8000f10:	f001 ffdc 	bl	8002ecc <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <Check_USART2_Timeout+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f20:	d301      	bcc.n	8000f26 <Check_USART2_Timeout+0x1a>
    {

        Reset_USART2();
 8000f22:	f000 f87b 	bl	800101c <Reset_USART2>
    }
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000058c 	.word	0x2000058c

08000f30 <ALARM_LED>:


void ALARM_LED(uint8_t LED) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    // Убедитесь, что LED в допустимом диапазоне
    if (LED < 1 || LED > 7) return;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d063      	beq.n	8001008 <ALARM_LED+0xd8>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d860      	bhi.n	8001008 <ALARM_LED+0xd8>

    uint32_t current_time = HAL_GetTick();
 8000f46:	f001 ffc1 	bl	8002ecc <HAL_GetTick>
 8000f4a:	60f8      	str	r0, [r7, #12]

    // Проверка, прошло ли достаточно времени для переключения светодиода
    if ((current_time - led_last_toggle_time[LED]) >= TOGLE_TIME) {
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4a30      	ldr	r2, [pc, #192]	@ (8001010 <ALARM_LED+0xe0>)
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f5c:	d355      	bcc.n	800100a <ALARM_LED+0xda>
        // Переключите состояние светодиода
        switch (LED) {
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d84a      	bhi.n	8000ffc <ALARM_LED+0xcc>
 8000f66:	a201      	add	r2, pc, #4	@ (adr r2, 8000f6c <ALARM_LED+0x3c>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f9d 	.word	0x08000f9d
 8000f74:	08000fbd 	.word	0x08000fbd
 8000f78:	08000fdd 	.word	0x08000fdd
            case 1:
                LED_1_Togle;
 8000f7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f80:	4824      	ldr	r0, [pc, #144]	@ (8001014 <ALARM_LED+0xe4>)
 8000f82:	f004 f987 	bl	8005294 <HAL_GPIO_TogglePin>
                led_state[1] = !led_state[1];  // Обновить состояние светодиода
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <ALARM_LED+0xe8>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <ALARM_LED+0xe8>)
 8000f98:	705a      	strb	r2, [r3, #1]
                break;
 8000f9a:	e02f      	b.n	8000ffc <ALARM_LED+0xcc>
            case 2:
            	LED_2_Togle;
 8000f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa0:	481c      	ldr	r0, [pc, #112]	@ (8001014 <ALARM_LED+0xe4>)
 8000fa2:	f004 f977 	bl	8005294 <HAL_GPIO_TogglePin>
                led_state[2] = !led_state[2];
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <ALARM_LED+0xe8>)
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <ALARM_LED+0xe8>)
 8000fb8:	709a      	strb	r2, [r3, #2]
                break;
 8000fba:	e01f      	b.n	8000ffc <ALARM_LED+0xcc>
            case 3:
            	LED_3_Togle;
 8000fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc0:	4814      	ldr	r0, [pc, #80]	@ (8001014 <ALARM_LED+0xe4>)
 8000fc2:	f004 f967 	bl	8005294 <HAL_GPIO_TogglePin>
                led_state[3] = !led_state[3];
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <ALARM_LED+0xe8>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <ALARM_LED+0xe8>)
 8000fd8:	70da      	strb	r2, [r3, #3]
                break;
 8000fda:	e00f      	b.n	8000ffc <ALARM_LED+0xcc>
            case 4:
				LED_4_Togle;
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f004 f957 	bl	8005294 <HAL_GPIO_TogglePin>
				led_state[4] = !led_state[4];
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <ALARM_LED+0xe8>)
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <ALARM_LED+0xe8>)
 8000ff8:	711a      	strb	r2, [r3, #4]
				break;
 8000ffa:	bf00      	nop
        }

        // Обновите время последнего переключения
        led_last_toggle_time[LED] = current_time;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4904      	ldr	r1, [pc, #16]	@ (8001010 <ALARM_LED+0xe0>)
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001006:	e000      	b.n	800100a <ALARM_LED+0xda>
    if (LED < 1 || LED > 7) return;
 8001008:	bf00      	nop
    }
}
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200005a0 	.word	0x200005a0
 8001014:	48000800 	.word	0x48000800
 8001018:	200005bc 	.word	0x200005bc

0800101c <Reset_USART2>:

void Reset_USART2(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    // Остановите передачу и прием, если они активны
    HAL_UART_DMAStop(&huart2);
 8001020:	4827      	ldr	r0, [pc, #156]	@ (80010c0 <Reset_USART2+0xa4>)
 8001022:	f007 ffc9 	bl	8008fb8 <HAL_UART_DMAStop>
    HAL_DMA_Abort(&hdma_usart2_rx);
 8001026:	4827      	ldr	r0, [pc, #156]	@ (80010c4 <Reset_USART2+0xa8>)
 8001028:	f003 fdf5 	bl	8004c16 <HAL_DMA_Abort>
    HAL_DMA_Abort(&hdma_usart2_tx);
 800102c:	4826      	ldr	r0, [pc, #152]	@ (80010c8 <Reset_USART2+0xac>)
 800102e:	f003 fdf2 	bl	8004c16 <HAL_DMA_Abort>

    // Отключите прерывания
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <Reset_USART2+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <Reset_USART2+0xa4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0210 	bic.w	r2, r2, #16
 8001040:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <Reset_USART2+0xa4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <Reset_USART2+0xa4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001050:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <Reset_USART2+0xa4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <Reset_USART2+0xa4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0220 	bic.w	r2, r2, #32
 8001060:	601a      	str	r2, [r3, #0]

    // Сбросьте периферийный модуль USART2
    __HAL_RCC_USART2_FORCE_RESET();
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <Reset_USART2+0xb0>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <Reset_USART2+0xb0>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	6113      	str	r3, [r2, #16]
    HAL_Delay(1); // Дождитесь завершения сброса
 800106e:	2001      	movs	r0, #1
 8001070:	f001 ff38 	bl	8002ee4 <HAL_Delay>
    __HAL_RCC_USART2_RELEASE_RESET();
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <Reset_USART2+0xb0>)
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <Reset_USART2+0xb0>)
 800107a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800107e:	6113      	str	r3, [r2, #16]

    // �?нициализируйте периферийный модуль USART2 заново
   // HAL_UART_Init(&huart2);
    MX_DMA_Init();
 8001080:	f000 fd06 	bl	8001a90 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001084:	f000 fcd4 	bl	8001a30 <MX_USART2_UART_Init>
    // Настройте DMA и запустите прием
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, RX_BUFFER_SIZE);
 8001088:	2240      	movs	r2, #64	@ 0x40
 800108a:	4911      	ldr	r1, [pc, #68]	@ (80010d0 <Reset_USART2+0xb4>)
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <Reset_USART2+0xa4>)
 800108e:	f009 f97c 	bl	800a38a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <Reset_USART2+0xa4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <Reset_USART2+0xa4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0210 	orr.w	r2, r2, #16
 80010a0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <Reset_USART2+0xa8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <Reset_USART2+0xa8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0204 	bic.w	r2, r2, #4
 80010b0:	601a      	str	r2, [r3, #0]

    // Обновление времени последней активности
    lastActivityTime = HAL_GetTick();
 80010b2:	f001 ff0b 	bl	8002ecc <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <Reset_USART2+0xb8>)
 80010ba:	6013      	str	r3, [r2, #0]

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000046c 	.word	0x2000046c
 80010c4:	200004f4 	.word	0x200004f4
 80010c8:	20000538 	.word	0x20000538
 80010cc:	40021000 	.word	0x40021000
 80010d0:	20000664 	.word	0x20000664
 80010d4:	2000058c 	.word	0x2000058c

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f001 fe9c 	bl	8002e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f90c 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f000 fd0e 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e8:	f000 fcd2 	bl	8001a90 <MX_DMA_Init>
  MX_TIM1_Init();
 80010ec:	f000 fa94 	bl	8001618 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010f0:	f000 f968 	bl	80013c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010f4:	f000 fa50 	bl	8001598 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80010f8:	f000 fc9a 	bl	8001a30 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80010fc:	f000 f9d2 	bl	80014a4 <MX_ADC2_Init>
  MX_TIM8_Init();
 8001100:	f000 fc06 	bl	8001910 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001104:	f000 fb34 	bl	8001770 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001108:	f000 fbb4 	bl	8001874 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001110:	f001 fee8 	bl	8002ee4 <HAL_Delay>
   LED_1_ON;
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800111a:	4864      	ldr	r0, [pc, #400]	@ (80012ac <main+0x1d4>)
 800111c:	f004 f8a2 	bl	8005264 <HAL_GPIO_WritePin>
   LED_2_ON;
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001126:	4861      	ldr	r0, [pc, #388]	@ (80012ac <main+0x1d4>)
 8001128:	f004 f89c 	bl	8005264 <HAL_GPIO_WritePin>
   LED_3_ON;
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001132:	485e      	ldr	r0, [pc, #376]	@ (80012ac <main+0x1d4>)
 8001134:	f004 f896 	bl	8005264 <HAL_GPIO_WritePin>
   LED_4_ON;
 8001138:	2201      	movs	r2, #1
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f004 f890 	bl	8005264 <HAL_GPIO_WritePin>
   LED_5_ON;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800114a:	4859      	ldr	r0, [pc, #356]	@ (80012b0 <main+0x1d8>)
 800114c:	f004 f88a 	bl	8005264 <HAL_GPIO_WritePin>
   LED_6_ON;
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001156:	4856      	ldr	r0, [pc, #344]	@ (80012b0 <main+0x1d8>)
 8001158:	f004 f884 	bl	8005264 <HAL_GPIO_WritePin>
   LED_7_ON;
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	4853      	ldr	r0, [pc, #332]	@ (80012b0 <main+0x1d8>)
 8001162:	f004 f87f 	bl	8005264 <HAL_GPIO_WritePin>
   TX_2;
 8001166:	2201      	movs	r2, #1
 8001168:	2110      	movs	r1, #16
 800116a:	4851      	ldr	r0, [pc, #324]	@ (80012b0 <main+0x1d8>)
 800116c:	f004 f87a 	bl	8005264 <HAL_GPIO_WritePin>





          HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, RX_BUFFER_SIZE);
 8001170:	2240      	movs	r2, #64	@ 0x40
 8001172:	4950      	ldr	r1, [pc, #320]	@ (80012b4 <main+0x1dc>)
 8001174:	4850      	ldr	r0, [pc, #320]	@ (80012b8 <main+0x1e0>)
 8001176:	f009 f908 	bl	800a38a <HAL_UARTEx_ReceiveToIdle_DMA>
          __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800117a:	4b50      	ldr	r3, [pc, #320]	@ (80012bc <main+0x1e4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b4e      	ldr	r3, [pc, #312]	@ (80012bc <main+0x1e4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0204 	bic.w	r2, r2, #4
 8001188:	601a      	str	r2, [r3, #0]




 HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800118a:	2100      	movs	r1, #0
 800118c:	484c      	ldr	r0, [pc, #304]	@ (80012c0 <main+0x1e8>)
 800118e:	f002 fd2f 	bl	8003bf0 <HAL_ADCEx_Calibration_Start>
 HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001192:	2100      	movs	r1, #0
 8001194:	484b      	ldr	r0, [pc, #300]	@ (80012c4 <main+0x1ec>)
 8001196:	f002 fd2b 	bl	8003bf0 <HAL_ADCEx_Calibration_Start>
 HAL_Delay(100);
 800119a:	2064      	movs	r0, #100	@ 0x64
 800119c:	f001 fea2 	bl	8002ee4 <HAL_Delay>
 RX_2;
 80011a0:	2200      	movs	r2, #0
 80011a2:	2110      	movs	r1, #16
 80011a4:	4842      	ldr	r0, [pc, #264]	@ (80012b0 <main+0x1d8>)
 80011a6:	f004 f85d 	bl	8005264 <HAL_GPIO_WritePin>



 HAL_Delay(100);
 80011aa:	2064      	movs	r0, #100	@ 0x64
 80011ac:	f001 fe9a 	bl	8002ee4 <HAL_Delay>
 lcd_init();
 80011b0:	f7ff fd79 	bl	8000ca6 <lcd_init>
 lcd_clear();
 80011b4:	f7ff fdf2 	bl	8000d9c <lcd_clear>
 Menu_Init(&menu);
 80011b8:	4843      	ldr	r0, [pc, #268]	@ (80012c8 <main+0x1f0>)
 80011ba:	f000 fef1 	bl	8001fa0 <Menu_Init>
 HAL_TIM_Base_Start_IT(&htim3);
 80011be:	4843      	ldr	r0, [pc, #268]	@ (80012cc <main+0x1f4>)
 80011c0:	f006 faea 	bl	8007798 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc2, (uint16_t*)adc_buffer_1,ADC_BUFFER_SIZE);
 80011c4:	2240      	movs	r2, #64	@ 0x40
 80011c6:	4942      	ldr	r1, [pc, #264]	@ (80012d0 <main+0x1f8>)
 80011c8:	483d      	ldr	r0, [pc, #244]	@ (80012c0 <main+0x1e8>)
 80011ca:	f002 f8ad 	bl	8003328 <HAL_ADC_Start_DMA>
  HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	@ 0x64
 80011d0:	f001 fe88 	bl	8002ee4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((HAL_GetTick()-UpdateMenuTime)>=1000){
 80011d4:	f001 fe7a 	bl	8002ecc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b3e      	ldr	r3, [pc, #248]	@ (80012d4 <main+0x1fc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e4:	d307      	bcc.n	80011f6 <main+0x11e>
	  Menu_UpdateDisplay(&menu);
 80011e6:	4838      	ldr	r0, [pc, #224]	@ (80012c8 <main+0x1f0>)
 80011e8:	f000 ff6a 	bl	80020c0 <Menu_UpdateDisplay>
       UpdateMenuTime= HAL_GetTick();
 80011ec:	f001 fe6e 	bl	8002ecc <HAL_GetTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a38      	ldr	r2, [pc, #224]	@ (80012d4 <main+0x1fc>)
 80011f4:	6013      	str	r3, [r2, #0]

	//  MX_ADC1_Init();
	//  Read_ADC_Values(adc_values, 6);


	  if((HAL_GetTick()-UpdatePhaze_1)>= PHAZE_UPDATE){Phaze_1_Error=true; ALARM_LED(1);}else Phaze_1_Error=false;
 80011f6:	f001 fe69 	bl	8002ecc <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <main+0x200>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001206:	d306      	bcc.n	8001216 <main+0x13e>
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <main+0x204>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe8e 	bl	8000f30 <ALARM_LED>
 8001214:	e002      	b.n	800121c <main+0x144>
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <main+0x204>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	  if((HAL_GetTick()-UpdatePhaze_2)>= PHAZE_UPDATE){Phaze_2_Error=true; ALARM_LED(2);}else Phaze_2_Error=false;
 800121c:	f001 fe56 	bl	8002ecc <HAL_GetTick>
 8001220:	4603      	mov	r3, r0
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <main+0x208>)
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800122c:	d306      	bcc.n	800123c <main+0x164>
 800122e:	4b2d      	ldr	r3, [pc, #180]	@ (80012e4 <main+0x20c>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff fe7b 	bl	8000f30 <ALARM_LED>
 800123a:	e002      	b.n	8001242 <main+0x16a>
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <main+0x20c>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
	  if((HAL_GetTick()-UpdatePhaze_3)>= PHAZE_UPDATE){Phaze_3_Error=true; ALARM_LED(3);}else Phaze_3_Error=false;
 8001242:	f001 fe43 	bl	8002ecc <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <main+0x210>)
 800124a:	8812      	ldrh	r2, [r2, #0]
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001252:	d306      	bcc.n	8001262 <main+0x18a>
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <main+0x214>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	2003      	movs	r0, #3
 800125c:	f7ff fe68 	bl	8000f30 <ALARM_LED>
 8001260:	e002      	b.n	8001268 <main+0x190>
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <main+0x214>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]



   //    UpdateMenuTime= HAL_GetTick();

	  Check_USART2_Timeout();
 8001268:	f7ff fe50 	bl	8000f0c <Check_USART2_Timeout>
	  if(adc_flag==1){
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <main+0x218>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d1af      	bne.n	80011d4 <main+0xfc>

		//  IND_1_ON;

        //  MX_ADC1_Init();
		//  Read_ADC_Values(adc_values, 6);
          Get_Buttons_States(buttons_states);
 8001274:	481f      	ldr	r0, [pc, #124]	@ (80012f4 <main+0x21c>)
 8001276:	f7ff fdaf 	bl	8000dd8 <Get_Buttons_States>
          data_reg[0]=170;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <main+0x220>)
 800127c:	22aa      	movs	r2, #170	@ 0xaa
 800127e:	801a      	strh	r2, [r3, #0]
          data_reg[1]=63;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <main+0x220>)
 8001282:	223f      	movs	r2, #63	@ 0x3f
 8001284:	805a      	strh	r2, [r3, #2]
          data_reg[3]=31;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <main+0x220>)
 8001288:	221f      	movs	r2, #31
 800128a:	80da      	strh	r2, [r3, #6]
          data_reg[4]=25;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <main+0x220>)
 800128e:	2219      	movs	r2, #25
 8001290:	811a      	strh	r2, [r3, #8]
               //   IND_1_OFF;




	  	          adc_buffer_1[0]=0;
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <main+0x1f8>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	  	          adc_buffer_1[1]=0;
 8001298:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <main+0x1f8>)
 800129a:	2200      	movs	r2, #0
 800129c:	805a      	strh	r2, [r3, #2]
	  	          adc_buffer_1[2]=0;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <main+0x1f8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	809a      	strh	r2, [r3, #4]


 		          adc_flag=0;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <main+0x218>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	  if((HAL_GetTick()-UpdateMenuTime)>=1000){
 80012aa:	e793      	b.n	80011d4 <main+0xfc>
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000400 	.word	0x48000400
 80012b4:	20000664 	.word	0x20000664
 80012b8:	2000046c 	.word	0x2000046c
 80012bc:	200004f4 	.word	0x200004f4
 80012c0:	20000254 	.word	0x20000254
 80012c4:	20000204 	.word	0x20000204
 80012c8:	2000057c 	.word	0x2000057c
 80012cc:	200003d4 	.word	0x200003d4
 80012d0:	200005c8 	.word	0x200005c8
 80012d4:	20000590 	.word	0x20000590
 80012d8:	20000594 	.word	0x20000594
 80012dc:	2000059a 	.word	0x2000059a
 80012e0:	20000596 	.word	0x20000596
 80012e4:	2000059b 	.word	0x2000059b
 80012e8:	20000598 	.word	0x20000598
 80012ec:	2000059c 	.word	0x2000059c
 80012f0:	20000588 	.word	0x20000588
 80012f4:	20000580 	.word	0x20000580
 80012f8:	200007a4 	.word	0x200007a4

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09e      	sub	sp, #120	@ 0x78
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001306:	2228      	movs	r2, #40	@ 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f009 fe0d 	bl	800af2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	223c      	movs	r2, #60	@ 0x3c
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f009 fdff 	bl	800af2a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001334:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001336:	2301      	movs	r3, #1
 8001338:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	2301      	movs	r3, #1
 800133c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001346:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001348:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800134c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fdb8 	bl	8005ec8 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800135e:	f000 fe19 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001372:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f005 fde0 	bl	8006f44 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800138a:	f000 fe03 	bl	8001f94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800138e:	f243 03a2 	movw	r3, #12450	@ 0x30a2
 8001392:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800139e:	2310      	movs	r3, #16
 80013a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 ffeb 	bl	8007388 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b8:	f000 fdec 	bl	8001f94 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3778      	adds	r7, #120	@ 0x78
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 80013e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fa:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001402:	2200      	movs	r2, #0
 8001404:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001416:	2201      	movs	r2, #1
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001430:	2204      	movs	r2, #4
 8001432:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001436:	2200      	movs	r2, #0
 8001438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 800143c:	2200      	movs	r2, #0
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001442:	f001 fd91 	bl	8002f68 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 fda2 	bl	8001f94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 800145c:	f002 ff4c 	bl	80042f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001466:	f000 fd95 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800146a:	2301      	movs	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146e:	2301      	movs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001476:	2303      	movs	r3, #3
 8001478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <MX_ADC1_Init+0xdc>)
 8001488:	f002 fc4c 	bl	8003d24 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001492:	f000 fd7f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000204 	.word	0x20000204

080014a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014bc:	4a35      	ldr	r2, [pc, #212]	@ (8001594 <MX_ADC2_Init+0xf0>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c0:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014c6:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014cc:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014f8:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <MX_ADC2_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001500:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <MX_ADC2_Init+0xec>)
 8001502:	2204      	movs	r2, #4
 8001504:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_ADC2_Init+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800150c:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MX_ADC2_Init+0xec>)
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001512:	481f      	ldr	r0, [pc, #124]	@ (8001590 <MX_ADC2_Init+0xec>)
 8001514:	f001 fd28 	bl	8002f68 <HAL_ADC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800151e:	f000 fd39 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001522:	2301      	movs	r3, #1
 8001524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001526:	2301      	movs	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4814      	ldr	r0, [pc, #80]	@ (8001590 <MX_ADC2_Init+0xec>)
 8001540:	f002 fbf0 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800154a:	f000 fd23 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800154e:	2302      	movs	r3, #2
 8001550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001552:	2302      	movs	r3, #2
 8001554:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_ADC2_Init+0xec>)
 800155c:	f002 fbe2 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001566:	f000 fd15 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800156a:	2303      	movs	r3, #3
 800156c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800156e:	2303      	movs	r3, #3
 8001570:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_ADC2_Init+0xec>)
 8001578:	f002 fbd4 	bl	8003d24 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001582:	f000 fd07 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000254 	.word	0x20000254
 8001594:	50000100 	.word	0x50000100

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_I2C1_Init+0x74>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <MX_I2C1_Init+0x78>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C18DCC;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_I2C1_Init+0x74>)
 80015a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <MX_I2C1_Init+0x7c>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_I2C1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_I2C1_Init+0x74>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_I2C1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_I2C1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d2:	480e      	ldr	r0, [pc, #56]	@ (800160c <MX_I2C1_Init+0x74>)
 80015d4:	f003 fe90 	bl	80052f8 <HAL_I2C_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015de:	f000 fcd9 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <MX_I2C1_Init+0x74>)
 80015e6:	f004 fbd7 	bl	8005d98 <HAL_I2CEx_ConfigAnalogFilter>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f0:	f000 fcd0 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_I2C1_Init+0x74>)
 80015f8:	f004 fc19 	bl	8005e2e <HAL_I2CEx_ConfigDigitalFilter>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 fcc7 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002e8 	.word	0x200002e8
 8001610:	40005400 	.word	0x40005400
 8001614:	10c18dcc 	.word	0x10c18dcc

08001618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09a      	sub	sp, #104	@ 0x68
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	222c      	movs	r2, #44	@ 0x2c
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f009 fc69 	bl	800af2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <MX_TIM1_Init+0x150>)
 800165a:	4a44      	ldr	r2, [pc, #272]	@ (800176c <MX_TIM1_Init+0x154>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800166a:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <MX_TIM1_Init+0x150>)
 800166c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <MX_TIM1_Init+0x150>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167e:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001684:	4838      	ldr	r0, [pc, #224]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001686:	f006 f82f 	bl	80076e8 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001690:	f000 fc80 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001698:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800169e:	4619      	mov	r1, r3
 80016a0:	4831      	ldr	r0, [pc, #196]	@ (8001768 <MX_TIM1_Init+0x150>)
 80016a2:	f006 fc4d 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016ac:	f000 fc72 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b0:	482d      	ldr	r0, [pc, #180]	@ (8001768 <MX_TIM1_Init+0x150>)
 80016b2:	f006 f8db 	bl	800786c <HAL_TIM_PWM_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016bc:	f000 fc6a 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4825      	ldr	r0, [pc, #148]	@ (8001768 <MX_TIM1_Init+0x150>)
 80016d4:	f007 fa8a 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016de:	f000 fc59 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 80016e6:	2332      	movs	r3, #50	@ 0x32
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4818      	ldr	r0, [pc, #96]	@ (8001768 <MX_TIM1_Init+0x150>)
 8001708:	f006 fb06 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001712:	f000 fc3f 	bl	8001f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	@ (8001768 <MX_TIM1_Init+0x150>)
 800174c:	f007 face 	bl	8008cec <HAL_TIMEx_ConfigBreakDeadTime>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001756:	f000 fc1d 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175a:	4803      	ldr	r0, [pc, #12]	@ (8001768 <MX_TIM1_Init+0x150>)
 800175c:	f001 f8b4 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3768      	adds	r7, #104	@ 0x68
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000033c 	.word	0x2000033c
 800176c:	40012c00 	.word	0x40012c00

08001770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	@ 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <MX_TIM2_Init+0x100>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017a4:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017b2:	f04f 32ff 	mov.w	r2, #4294967295
 80017b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c4:	482a      	ldr	r0, [pc, #168]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017c6:	f005 ff8f 	bl	80076e8 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80017d0:	f000 fbe0 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	4619      	mov	r1, r3
 80017e0:	4823      	ldr	r0, [pc, #140]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017e2:	f006 fbad 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80017ec:	f000 fbd2 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017f0:	481f      	ldr	r0, [pc, #124]	@ (8001870 <MX_TIM2_Init+0x100>)
 80017f2:	f006 f892 	bl	800791a <HAL_TIM_IC_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017fc:	f000 fbca 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4818      	ldr	r0, [pc, #96]	@ (8001870 <MX_TIM2_Init+0x100>)
 8001810:	f007 f9ec 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800181a:	f000 fbbb 	bl	8001f94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 800182a:	230c      	movs	r3, #12
 800182c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2208      	movs	r2, #8
 8001832:	4619      	mov	r1, r3
 8001834:	480e      	ldr	r0, [pc, #56]	@ (8001870 <MX_TIM2_Init+0x100>)
 8001836:	f006 f9d3 	bl	8007be0 <HAL_TIM_IC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001840:	f000 fba8 	bl	8001f94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001844:	2302      	movs	r3, #2
 8001846:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001848:	2302      	movs	r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	220c      	movs	r2, #12
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_TIM2_Init+0x100>)
 8001858:	f006 f9c2 	bl	8007be0 <HAL_TIM_IC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8001862:	f000 fb97 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	@ 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000388 	.word	0x20000388

08001874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <MX_TIM3_Init+0x94>)
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <MX_TIM3_Init+0x98>)
 8001896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <MX_TIM3_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018a6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80018aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b8:	4813      	ldr	r0, [pc, #76]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018ba:	f005 ff15 	bl	80076e8 <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018c4:	f000 fb66 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018d6:	f006 fb33 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018e0:	f000 fb58 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018f2:	f007 f97b 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018fc:	f000 fb4a 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200003d4 	.word	0x200003d4
 800190c:	40000400 	.word	0x40000400

08001910 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b096      	sub	sp, #88	@ 0x58
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	222c      	movs	r2, #44	@ 0x2c
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f009 faf4 	bl	800af2a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001944:	4a39      	ldr	r2, [pc, #228]	@ (8001a2c <MX_TIM8_Init+0x11c>)
 8001946:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001948:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <MX_TIM8_Init+0x118>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001954:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800195a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <MX_TIM8_Init+0x118>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <MX_TIM8_Init+0x118>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800196e:	482e      	ldr	r0, [pc, #184]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001970:	f005 ff7c 	bl	800786c <HAL_TIM_PWM_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800197a:	f000 fb0b 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800198a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800198e:	4619      	mov	r1, r3
 8001990:	4825      	ldr	r0, [pc, #148]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001992:	f007 f92b 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 fafa 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a0:	2360      	movs	r3, #96	@ 0x60
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4818      	ldr	r0, [pc, #96]	@ (8001a28 <MX_TIM8_Init+0x118>)
 80019c6:	f006 f9a7 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019d0:	f000 fae0 	bl	8001f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001a0a:	f007 f96f 	bl	8008cec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001a14:	f000 fabe 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <MX_TIM8_Init+0x118>)
 8001a1a:	f000 ff55 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001a1e:	bf00      	nop
 8001a20:	3758      	adds	r7, #88	@ 0x58
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000420 	.word	0x20000420
 8001a2c:	40013400 	.word	0x40013400

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	@ (8001a8c <MX_USART2_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a74:	f007 f9d6 	bl	8008e24 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f000 fa89 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000046c 	.word	0x2000046c
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a13      	ldr	r2, [pc, #76]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_DMA_Init+0x70>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2106      	movs	r1, #6
 8001aca:	2010      	movs	r0, #16
 8001acc:	f002 ffc7 	bl	8004a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ad0:	2010      	movs	r0, #16
 8001ad2:	f002 ffe0 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 6, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2106      	movs	r1, #6
 8001ada:	2011      	movs	r0, #17
 8001adc:	f002 ffbf 	bl	8004a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ae0:	2011      	movs	r0, #17
 8001ae2:	f002 ffd8 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2038      	movs	r0, #56	@ 0x38
 8001aec:	f002 ffb7 	bl	8004a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001af0:	2038      	movs	r0, #56	@ 0x38
 8001af2:	f002 ffd0 	bl	8004a96 <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b48      	ldr	r3, [pc, #288]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b32:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a44      	ldr	r2, [pc, #272]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6153      	str	r3, [r2, #20]
 8001b6e:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <MX_GPIO_Init+0x144>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b80:	4832      	ldr	r0, [pc, #200]	@ (8001c4c <MX_GPIO_Init+0x148>)
 8001b82:	f003 fb6f 	bl	8005264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2180      	movs	r1, #128	@ 0x80
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8e:	f003 fb69 	bl	8005264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5_Pin|DIRECT_Pin|LED_7_Pin|LED_6_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 6123 	mov.w	r1, #2608	@ 0xa30
 8001b98:	482d      	ldr	r0, [pc, #180]	@ (8001c50 <MX_GPIO_Init+0x14c>)
 8001b9a:	f003 fb63 	bl	8005264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8001b9e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4825      	ldr	r0, [pc, #148]	@ (8001c4c <MX_GPIO_Init+0x148>)
 8001bb8:	f003 f9c2 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd6:	f003 f9b3 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5_Pin DIRECT_Pin LED_7_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = LED_5_Pin|DIRECT_Pin|LED_7_Pin|LED_6_Pin;
 8001bda:	f44f 6323 	mov.w	r3, #2608	@ 0xa30
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4817      	ldr	r0, [pc, #92]	@ (8001c50 <MX_GPIO_Init+0x14c>)
 8001bf4:	f003 f9a4 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Phaze_A_Pin Phaze_B_Pin Phaze_C_Pin */
  GPIO_InitStruct.Pin = Phaze_A_Pin|Phaze_B_Pin|Phaze_C_Pin;
 8001bf8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bfe:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4810      	ldr	r0, [pc, #64]	@ (8001c50 <MX_GPIO_Init+0x14c>)
 8001c10:	f003 f996 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_UI_Pin */
  GPIO_InitStruct.Pin = INT_UI_Pin;
 8001c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c1a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_UI_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <MX_GPIO_Init+0x14c>)
 8001c2c:	f003 f988 	bl	8004f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2105      	movs	r1, #5
 8001c34:	2028      	movs	r0, #40	@ 0x28
 8001c36:	f002 ff12 	bl	8004a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3a:	2028      	movs	r0, #40	@ 0x28
 8001c3c:	f002 ff2b 	bl	8004a96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000400 	.word	0x48000400

08001c54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10a      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	 LED_5_ON;
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c6c:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c6e:	f003 faf9 	bl	8005264 <HAL_GPIO_WritePin>
    	 HAL_ADC_Start_DMA(&hadc2, (uint16_t*)adc_buffer_1,ADC_BUFFER_SIZE);
 8001c72:	2240      	movs	r2, #64	@ 0x40
 8001c74:	4905      	ldr	r1, [pc, #20]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c78:	f001 fb56 	bl	8003328 <HAL_ADC_Start_DMA>

    }
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40000400 	.word	0x40000400
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	200005c8 	.word	0x200005c8
 8001c90:	20000254 	.word	0x20000254

08001c94 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca4:	d124      	bne.n	8001cf0 <HAL_TIM_IC_CaptureCallback+0x5c>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7f1b      	ldrb	r3, [r3, #28]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d120      	bne.n	8001cf0 <HAL_TIM_IC_CaptureCallback+0x5c>
        {

        	 period = 0;
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
             TIM2->CNT = 0;
 8001cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	@ 0x24
             period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	480f      	ldr	r0, [pc, #60]	@ (8001cfc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001cc0:	f006 fa08 	bl	80080d4 <HAL_TIM_ReadCapturedValue>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]
             PulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);
 8001cca:	210c      	movs	r1, #12
 8001ccc:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001cce:	f006 fa01 	bl	80080d4 <HAL_TIM_ReadCapturedValue>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001cd6:	6013      	str	r3, [r2, #0]
             f=32000000/period;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
             {                        }

    }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000648 	.word	0x20000648
 8001cfc:	20000388 	.word	0x20000388
 8001d00:	2000064c 	.word	0x2000064c
 8001d04:	01e84800 	.word	0x01e84800
 8001d08:	20000660 	.word	0x20000660

08001d0c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_12) // если прерывание поступило от ножки PA1
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d1c:	d121      	bne.n	8001d62 <HAL_GPIO_EXTI_Callback+0x56>
		   {
			if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 8001d1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d22:	4854      	ldr	r0, [pc, #336]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d24:	f003 fa86 	bl	8005234 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10b      	bne.n	8001d46 <HAL_GPIO_EXTI_Callback+0x3a>

					   LED_1_ON;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d34:	4850      	ldr	r0, [pc, #320]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d36:	f003 fa95 	bl	8005264 <HAL_GPIO_WritePin>
                  UpdatePhaze_1=HAL_GetTick();
 8001d3a:	f001 f8c7 	bl	8002ecc <HAL_GetTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b4e      	ldr	r3, [pc, #312]	@ (8001e7c <HAL_GPIO_EXTI_Callback+0x170>)
 8001d44:	801a      	strh	r2, [r3, #0]


				   }

			     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 8001d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d4a:	484a      	ldr	r0, [pc, #296]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d4c:	f003 fa72 	bl	8005234 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_GPIO_EXTI_Callback+0x56>
			           LED_1_OFF;
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d5c:	4846      	ldr	r0, [pc, #280]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d5e:	f003 fa81 	bl	8005264 <HAL_GPIO_WritePin>

			     }
		   }


	   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d68:	d121      	bne.n	8001dae <HAL_GPIO_EXTI_Callback+0xa2>
	   {

		   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 8001d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6e:	4841      	ldr	r0, [pc, #260]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d70:	f003 fa60 	bl	8005234 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_GPIO_EXTI_Callback+0x7a>
	              LED_2_ON;}
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d80:	483d      	ldr	r0, [pc, #244]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d82:	f003 fa6f 	bl	8005264 <HAL_GPIO_WritePin>
		      UpdatePhaze_2=HAL_GetTick();
 8001d86:	f001 f8a1 	bl	8002ecc <HAL_GetTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x174>)
 8001d90:	801a      	strh	r2, [r3, #0]


	       if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 8001d92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d96:	4837      	ldr	r0, [pc, #220]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d98:	f003 fa4c 	bl	8005234 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_GPIO_EXTI_Callback+0xa2>
	              LED_2_OFF;
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001da8:	4833      	ldr	r0, [pc, #204]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001daa:	f003 fa5b 	bl	8005264 <HAL_GPIO_WritePin>
	            //  ADC_2_MAX=0;
	             // EXTI->PR = EXTI_PR_PR13;
	         }}


	   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001db4:	d121      	bne.n	8001dfa <HAL_GPIO_EXTI_Callback+0xee>
	     {

		   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 8001db6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dba:	482e      	ldr	r0, [pc, #184]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001dbc:	f003 fa3a 	bl	8005234 <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10b      	bne.n	8001dde <HAL_GPIO_EXTI_Callback+0xd2>
	           LED_3_ON;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dcc:	482a      	ldr	r0, [pc, #168]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001dce:	f003 fa49 	bl	8005264 <HAL_GPIO_WritePin>
	           UpdatePhaze_3=HAL_GetTick();
 8001dd2:	f001 f87b 	bl	8002ecc <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_GPIO_EXTI_Callback+0x178>)
 8001ddc:	801a      	strh	r2, [r3, #0]


			  }

		   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 8001dde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001de2:	4824      	ldr	r0, [pc, #144]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001de4:	f003 fa26 	bl	8005234 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_GPIO_EXTI_Callback+0xee>
	           LED_3_OFF;
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df4:	4820      	ldr	r0, [pc, #128]	@ (8001e78 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001df6:	f003 fa35 	bl	8005264 <HAL_GPIO_WritePin>
			   }
		       //EXTI->PR = EXTI_PR_PR14;
	       }


   if(GPIO_Pin == GPIO_PIN_15) // если прерывание поступило от ножки 15
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e00:	d134      	bne.n	8001e6c <HAL_GPIO_EXTI_Callback+0x160>
      {
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)){
 8001e02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e06:	481b      	ldr	r0, [pc, #108]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001e08:	f003 fa14 	bl	8005234 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d11a      	bne.n	8001e48 <HAL_GPIO_EXTI_Callback+0x13c>
          //  button_press = HAL_GetTick();
		   LED_4_ON;
 8001e12:	2201      	movs	r2, #1
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1a:	f003 fa23 	bl	8005264 <HAL_GPIO_WritePin>
		//   Get_Buttons_States(buttons_states);

		    for (uint8_t i = 0; i < 8; i++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e00e      	b.n	8001e42 <HAL_GPIO_EXTI_Callback+0x136>
		  			     if (buttons_states[i]) {
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <HAL_GPIO_EXTI_Callback+0x130>
		  			         Menu_HandleButtonPress(&menu, i + 1);
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	4815      	ldr	r0, [pc, #84]	@ (8001e8c <HAL_GPIO_EXTI_Callback+0x180>)
 8001e38:	f000 f8c4 	bl	8001fc4 <Menu_HandleButtonPress>
		    for (uint8_t i = 0; i < 8; i++) {
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	d9ed      	bls.n	8001e24 <HAL_GPIO_EXTI_Callback+0x118>
		  			                   }
		  			               }
		     //EXTI->PR = EXTI_PR_PR15;
	   }

     if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)){
 8001e48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e4c:	4809      	ldr	r0, [pc, #36]	@ (8001e74 <HAL_GPIO_EXTI_Callback+0x168>)
 8001e4e:	f003 f9f1 	bl	8005234 <HAL_GPIO_ReadPin>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_GPIO_EXTI_Callback+0x158>
           LED_4_OFF;
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	@ 0x80
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e60:	f003 fa00 	bl	8005264 <HAL_GPIO_WritePin>


            }

        EXTI->PR = EXTI_PR_PR15;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_GPIO_EXTI_Callback+0x184>)
 8001e66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e6a:	615a      	str	r2, [r3, #20]
        }

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	20000594 	.word	0x20000594
 8001e80:	20000596 	.word	0x20000596
 8001e84:	20000598 	.word	0x20000598
 8001e88:	20000580 	.word	0x20000580
 8001e8c:	2000057c 	.word	0x2000057c
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]


	    RX_2;
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	4810      	ldr	r0, [pc, #64]	@ (8001ee4 <HAL_UART_TxCpltCallback+0x50>)
 8001ea2:	f003 f9df 	bl	8005264 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001ea6:	f001 f811 	bl	8002ecc <HAL_GetTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <HAL_UART_TxCpltCallback+0x54>)
 8001eae:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame,RX_BUFFER_SIZE);
 8001eb0:	2240      	movs	r2, #64	@ 0x40
 8001eb2:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_UART_TxCpltCallback+0x58>)
 8001eb4:	480e      	ldr	r0, [pc, #56]	@ (8001ef0 <HAL_UART_TxCpltCallback+0x5c>)
 8001eb6:	f008 fa68 	bl	800a38a <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_UART_TxCpltCallback+0x5c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_UART_TxCpltCallback+0x5c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0210 	orr.w	r2, r2, #16
 8001ec8:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_UART_TxCpltCallback+0x60>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_UART_TxCpltCallback+0x60>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0204 	bic.w	r2, r2, #4
 8001ed8:	601a      	str	r2, [r3, #0]

}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	2000058c 	.word	0x2000058c
 8001eec:	20000664 	.word	0x20000664
 8001ef0:	2000046c 	.word	0x2000046c
 8001ef4:	200004f4 	.word	0x200004f4

08001ef8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <HAL_UARTEx_RxEventCallback+0x48>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d114      	bne.n	8001f38 <HAL_UARTEx_RxEventCallback+0x40>
	{
		lastActivityTime = HAL_GetTick();
 8001f0e:	f000 ffdd 	bl	8002ecc <HAL_GetTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001f16:	6013      	str	r3, [r2, #0]


	    __HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x50>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x50>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	601a      	str	r2, [r3, #0]

	    HAL_DMA_Abort(&hdma_usart2_rx);
 8001f28:	4808      	ldr	r0, [pc, #32]	@ (8001f4c <HAL_UARTEx_RxEventCallback+0x54>)
 8001f2a:	f002 fe74 	bl	8004c16 <HAL_DMA_Abort>

	    Registers_handler(rxFrame, data_reg, rcv_data_reg);
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x58>)
 8001f30:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001f32:	4809      	ldr	r0, [pc, #36]	@ (8001f58 <HAL_UARTEx_RxEventCallback+0x60>)
 8001f34:	f7fe ff78 	bl	8000e28 <Registers_handler>

	}
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40004400 	.word	0x40004400
 8001f44:	2000058c 	.word	0x2000058c
 8001f48:	2000046c 	.word	0x2000046c
 8001f4c:	200004f4 	.word	0x200004f4
 8001f50:	20000824 	.word	0x20000824
 8001f54:	200007a4 	.word	0x200007a4
 8001f58:	20000664 	.word	0x20000664

08001f5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

    if(hadc->Instance == ADC2) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <HAL_ADC_ConvCpltCallback+0x24>

        HAL_ADC_Stop_DMA(&hadc2);
 8001f6e:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <HAL_ADC_ConvCpltCallback+0x30>)
 8001f70:	f001 faf6 	bl	8003560 <HAL_ADC_Stop_DMA>
     //   ADC_2_MID=temp_min[1];
     //   ADC_3_MID=temp_min[2];}

       VAC1= (ADC_1_MAX-ADC_1_MID)*0.25/0.707;
       */
       LED_5_OFF;
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f7c:	f003 f972 	bl	8005264 <HAL_GPIO_WritePin>
    }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	50000100 	.word	0x50000100
 8001f8c:	20000254 	.word	0x20000254
 8001f90:	48000400 	.word	0x48000400

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <Error_Handler+0x8>

08001fa0 <Menu_Init>:

#include "menu.h"
#include "I2C_display.h"

// Функция инициализации меню
void Menu_Init(Menu *menu) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    menu->currentState = MENU_MAIN_VIEW;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    menu->currentOption = 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
    Menu_UpdateDisplay(menu);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f883 	bl	80020c0 <Menu_UpdateDisplay>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <Menu_HandleButtonPress>:

// Функция обработки нажатий кнопок
void Menu_HandleButtonPress(Menu *menu, uint8_t button) {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]


    switch (button) {
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d862      	bhi.n	800209e <Menu_HandleButtonPress+0xda>
 8001fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <Menu_HandleButtonPress+0x1c>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08002015 	.word	0x08002015
 8001fe8:	08002031 	.word	0x08002031
 8001fec:	0800206d 	.word	0x0800206d
        case 1: // Вверх по меню
        	 menu->currentState--;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	701a      	strb	r2, [r3, #0]
            if ((menu->currentState <=0)||(menu->currentState>=MENU_STATE_COUNT)) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <Menu_HandleButtonPress+0x48>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d94a      	bls.n	80020a2 <Menu_HandleButtonPress+0xde>

                menu->currentState = MENU_MAIN_VIEW;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002012:	e046      	b.n	80020a2 <Menu_HandleButtonPress+0xde>
        case 2: // Вниз по меню
            menu->currentState++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	701a      	strb	r2, [r3, #0]
            if (menu->currentState >= MENU_STATE_COUNT) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d93e      	bls.n	80020a6 <Menu_HandleButtonPress+0xe2>
                menu->currentState = MENU_MAIN_VIEW;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800202e:	e03a      	b.n	80020a6 <Menu_HandleButtonPress+0xe2>
        case 3: // Инкрементирование
                   if (menu->currentState == MENU_MAIN_VIEW) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d112      	bne.n	800205e <Menu_HandleButtonPress+0x9a>
                       pwm_buck += 10;
 8002038:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	330a      	adds	r3, #10
 800203e:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 8002040:	6013      	str	r3, [r2, #0]
                       if ((pwm_buck > 2000)||(pwm_buck <=0 )) {
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800204a:	d803      	bhi.n	8002054 <Menu_HandleButtonPress+0x90>
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d12a      	bne.n	80020aa <Menu_HandleButtonPress+0xe6>
                           pwm_buck =2000;
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 8002056:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800205a:	601a      	str	r2, [r3, #0]
                       }
                   } else {
                       menu->currentOption++;
                   }
                   break;
 800205c:	e025      	b.n	80020aa <Menu_HandleButtonPress+0xe6>
                       menu->currentOption++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	705a      	strb	r2, [r3, #1]
                   break;
 800206a:	e01e      	b.n	80020aa <Menu_HandleButtonPress+0xe6>
               case 4: // Декрементирование
                   if (menu->currentState == MENU_MAIN_VIEW) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <Menu_HandleButtonPress+0xcc>
                       pwm_buck -= 10;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3b0a      	subs	r3, #10
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 800207c:	6013      	str	r3, [r2, #0]
                       if ((pwm_buck <0)||(pwm_buck>2000)) {
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002086:	d912      	bls.n	80020ae <Menu_HandleButtonPress+0xea>
                           pwm_buck = 0;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <Menu_HandleButtonPress+0xf8>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
                       }
                   } else {
                       menu->currentOption--;
                   }
                   break;
 800208e:	e00e      	b.n	80020ae <Menu_HandleButtonPress+0xea>
                       menu->currentOption--;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	3b01      	subs	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	705a      	strb	r2, [r3, #1]
                   break;
 800209c:	e007      	b.n	80020ae <Menu_HandleButtonPress+0xea>
               default:
                   break;
 800209e:	bf00      	nop
 80020a0:	e006      	b.n	80020b0 <Menu_HandleButtonPress+0xec>
            break;
 80020a2:	bf00      	nop
 80020a4:	e004      	b.n	80020b0 <Menu_HandleButtonPress+0xec>
            break;
 80020a6:	bf00      	nop
 80020a8:	e002      	b.n	80020b0 <Menu_HandleButtonPress+0xec>
                   break;
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <Menu_HandleButtonPress+0xec>
                   break;
 80020ae:	bf00      	nop
    }

}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200005c4 	.word	0x200005c4

080020c0 <Menu_UpdateDisplay>:

// Функция обновления дисплея
void Menu_UpdateDisplay(Menu *menu) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af04      	add	r7, sp, #16
 80020c6:	6078      	str	r0, [r7, #4]
   // static uint8_t previousState = 255;  // Инициализируем значение, которое не совпадает с MENU_STATE_xxx

    // Проверяем, изменилось ли текущее состояние меню
  //  if (menu->currentState != previousState) {
     //   lcd_clear();  // Очищаем экран только если состояние изменилось
        switch (menu->currentState) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d870      	bhi.n	80021b2 <Menu_UpdateDisplay+0xf2>
 80020d0:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <Menu_UpdateDisplay+0x18>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	08002183 	.word	0x08002183
 80020e0:	08002193 	.word	0x08002193
 80020e4:	080021a3 	.word	0x080021a3
            case MENU_MAIN_VIEW:
                lcd_set_cursor(1, 0);
 80020e8:	2100      	movs	r1, #0
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7fe fe20 	bl	8000d30 <lcd_set_cursor>
                lcd_write_string("Main Menu           ");
 80020f0:	4832      	ldr	r0, [pc, #200]	@ (80021bc <Menu_UpdateDisplay+0xfc>)
 80020f2:	f7fe fe07 	bl	8000d04 <lcd_write_string>
            	lcd_set_cursor(4, 0);
            	sprintf(int_to_str,"1-%04d,2-%04d,3-%04d", adc_buffer_1[0],adc_buffer_1[1],adc_buffer_1[2]);
            	lcd_write_string(int_to_str);

            */
            	 lcd_set_cursor(2, 0);
 80020f6:	2100      	movs	r1, #0
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7fe fe19 	bl	8000d30 <lcd_set_cursor>
            	 sprintf(int_to_str, "1-%04d,2-%0.1f,3-%04d", ADC_1_MAX, VAC1, ADC_1_MID );
 80020fe:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <Menu_UpdateDisplay+0x100>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461c      	mov	r4, r3
 8002104:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <Menu_UpdateDisplay+0x104>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	492d      	ldr	r1, [pc, #180]	@ (80021c8 <Menu_UpdateDisplay+0x108>)
 8002114:	8809      	ldrh	r1, [r1, #0]
 8002116:	9102      	str	r1, [sp, #8]
 8002118:	e9cd 2300 	strd	r2, r3, [sp]
 800211c:	4622      	mov	r2, r4
 800211e:	492b      	ldr	r1, [pc, #172]	@ (80021cc <Menu_UpdateDisplay+0x10c>)
 8002120:	482b      	ldr	r0, [pc, #172]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 8002122:	f008 fe9f 	bl	800ae64 <siprintf>
            	 lcd_write_string(int_to_str);
 8002126:	482a      	ldr	r0, [pc, #168]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 8002128:	f7fe fdec 	bl	8000d04 <lcd_write_string>

				lcd_set_cursor(3, 0);
 800212c:	2100      	movs	r1, #0
 800212e:	2003      	movs	r0, #3
 8002130:	f7fe fdfe 	bl	8000d30 <lcd_set_cursor>
				sprintf(int_to_str,"1-%04d,2-%04d,3-%04d", ADC_2_MAX,ADC_2_MIN, ADC_2_MID);
 8002134:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <Menu_UpdateDisplay+0x114>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <Menu_UpdateDisplay+0x118>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <Menu_UpdateDisplay+0x11c>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	4925      	ldr	r1, [pc, #148]	@ (80021e0 <Menu_UpdateDisplay+0x120>)
 800214a:	4821      	ldr	r0, [pc, #132]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 800214c:	f008 fe8a 	bl	800ae64 <siprintf>
				lcd_write_string(int_to_str);
 8002150:	481f      	ldr	r0, [pc, #124]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 8002152:	f7fe fdd7 	bl	8000d04 <lcd_write_string>

				lcd_set_cursor(4, 0);
 8002156:	2100      	movs	r1, #0
 8002158:	2004      	movs	r0, #4
 800215a:	f7fe fde9 	bl	8000d30 <lcd_set_cursor>
				sprintf(int_to_str,"1-%04d,2-%04d,3-%04d", ADC_3_MAX,ADC_3_MIN, ADC_2_MID);
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <Menu_UpdateDisplay+0x124>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <Menu_UpdateDisplay+0x128>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <Menu_UpdateDisplay+0x11c>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	460b      	mov	r3, r1
 8002172:	491b      	ldr	r1, [pc, #108]	@ (80021e0 <Menu_UpdateDisplay+0x120>)
 8002174:	4816      	ldr	r0, [pc, #88]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 8002176:	f008 fe75 	bl	800ae64 <siprintf>
				lcd_write_string(int_to_str);
 800217a:	4815      	ldr	r0, [pc, #84]	@ (80021d0 <Menu_UpdateDisplay+0x110>)
 800217c:	f7fe fdc2 	bl	8000d04 <lcd_write_string>

                break;
 8002180:	e018      	b.n	80021b4 <Menu_UpdateDisplay+0xf4>
            case MENU_SUPPLY_VIEW:
                lcd_set_cursor(1, 0);
 8002182:	2100      	movs	r1, #0
 8002184:	2001      	movs	r0, #1
 8002186:	f7fe fdd3 	bl	8000d30 <lcd_set_cursor>
                lcd_write_string("Menu Supply         ");
 800218a:	4818      	ldr	r0, [pc, #96]	@ (80021ec <Menu_UpdateDisplay+0x12c>)
 800218c:	f7fe fdba 	bl	8000d04 <lcd_write_string>

                break;
 8002190:	e010      	b.n	80021b4 <Menu_UpdateDisplay+0xf4>
            case MENU_CONNECT_VIEW:
                lcd_set_cursor(1, 0);
 8002192:	2100      	movs	r1, #0
 8002194:	2001      	movs	r0, #1
 8002196:	f7fe fdcb 	bl	8000d30 <lcd_set_cursor>
                lcd_write_string("Menu Connection     ");
 800219a:	4815      	ldr	r0, [pc, #84]	@ (80021f0 <Menu_UpdateDisplay+0x130>)
 800219c:	f7fe fdb2 	bl	8000d04 <lcd_write_string>

                break;
 80021a0:	e008      	b.n	80021b4 <Menu_UpdateDisplay+0xf4>
            case MENU_ALARM_VIEW:
                lcd_set_cursor(1, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7fe fdc3 	bl	8000d30 <lcd_set_cursor>
                lcd_write_string("Menu Alarm          ");
 80021aa:	4812      	ldr	r0, [pc, #72]	@ (80021f4 <Menu_UpdateDisplay+0x134>)
 80021ac:	f7fe fdaa 	bl	8000d04 <lcd_write_string>

                break;
 80021b0:	e000      	b.n	80021b4 <Menu_UpdateDisplay+0xf4>
            default:
                break;
 80021b2:	bf00      	nop
        }

        // Обновляем предыдущее состояние
      //  previousState = menu->currentState;
  //  }
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	0800d0d8 	.word	0x0800d0d8
 80021c0:	20000650 	.word	0x20000650
 80021c4:	2000065c 	.word	0x2000065c
 80021c8:	20000002 	.word	0x20000002
 80021cc:	0800d0f0 	.word	0x0800d0f0
 80021d0:	200001f8 	.word	0x200001f8
 80021d4:	20000652 	.word	0x20000652
 80021d8:	20000656 	.word	0x20000656
 80021dc:	20000004 	.word	0x20000004
 80021e0:	0800d108 	.word	0x0800d108
 80021e4:	20000654 	.word	0x20000654
 80021e8:	20000658 	.word	0x20000658
 80021ec:	0800d120 	.word	0x0800d120
 80021f0:	0800d138 	.word	0x0800d138
 80021f4:	0800d150 	.word	0x0800d150

080021f8 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8002204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002208:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	74fb      	strb	r3, [r7, #19]
 800220e:	e023      	b.n	8002258 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4053      	eors	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8002220:	2301      	movs	r3, #1
 8002222:	74bb      	strb	r3, [r7, #18]
 8002224:	e012      	b.n	800224c <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	617b      	str	r3, [r7, #20]
			if (flag)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8002246:	7cbb      	ldrb	r3, [r7, #18]
 8002248:	3301      	adds	r3, #1
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	7cbb      	ldrb	r3, [r7, #18]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d9e9      	bls.n	8002226 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	3301      	adds	r3, #1
 8002256:	74fb      	strb	r3, [r7, #19]
 8002258:	7cfa      	ldrb	r2, [r7, #19]
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3d7      	bcc.n	8002210 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	b29b      	uxth	r3, r3
 8002274:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	b29b      	uxth	r3, r3

}
 800227a:	4618      	mov	r0, r3
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4619      	mov	r1, r3
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	f7ff ffac 	bl	80021f8 <calcCRC16ModBus>
 80022a0:	4603      	mov	r3, r0
 80022a2:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	3301      	adds	r3, #1
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4413      	add	r3, r2
 80022ac:	8afa      	ldrh	r2, [r7, #22]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80022b2:	8afb      	ldrh	r3, [r7, #22]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b299      	uxth	r1, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]

    TX_2;
 80022c2:	2201      	movs	r2, #1
 80022c4:	2110      	movs	r1, #16
 80022c6:	4811      	ldr	r0, [pc, #68]	@ (800230c <sendModBusRequest+0x84>)
 80022c8:	f002 ffcc 	bl	8005264 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3302      	adds	r3, #2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f006 fdf1 	bl	8008ec0 <HAL_UART_Transmit_DMA>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <sendModBusRequest+0x6c>

	        RX_2;
 80022e4:	2200      	movs	r2, #0
 80022e6:	2110      	movs	r1, #16
 80022e8:	4808      	ldr	r0, [pc, #32]	@ (800230c <sendModBusRequest+0x84>)
 80022ea:	f002 ffbb 	bl	8005264 <HAL_GPIO_WritePin>

	        Error_Handler();
 80022ee:	f7ff fe51 	bl	8001f94 <Error_Handler>
 80022f2:	e005      	b.n	8002300 <sendModBusRequest+0x78>
	    }

	 else{
		  LED_1_OFF;
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022fa:	4805      	ldr	r0, [pc, #20]	@ (8002310 <sendModBusRequest+0x88>)
 80022fc:	f002 ffb2 	bl	8005264 <HAL_GPIO_WritePin>
	  }

}
 8002300:	bf00      	nop
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800

08002314 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800231e:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <handleReadHoldingRegs+0xf0>)
 8002320:	789b      	ldrb	r3, [r3, #2]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <handleReadHoldingRegs+0xf0>)
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b21b      	sxth	r3, r3
 8002330:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8002332:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <handleReadHoldingRegs+0xf0>)
 8002334:	791b      	ldrb	r3, [r3, #4]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <handleReadHoldingRegs+0xf0>)
 800233c:	795b      	ldrb	r3, [r3, #5]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21b      	sxth	r3, r3
 8002344:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 8002346:	8afb      	ldrh	r3, [r7, #22]
 8002348:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 800234c:	3b31      	subs	r3, #49	@ 0x31
 800234e:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 8002350:	8afa      	ldrh	r2, [r7, #22]
 8002352:	897b      	ldrh	r3, [r7, #10]
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002360:	d905      	bls.n	800236e <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8002362:	2103      	movs	r1, #3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f8d3 	bl	8002510 <sendModbusException>
		return MODBUS_ERROR;
 800236a:	2300      	movs	r3, #0
 800236c:	e045      	b.n	80023fa <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	2b3c      	cmp	r3, #60	@ 0x3c
 8002372:	d905      	bls.n	8002380 <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8002374:	2102      	movs	r1, #2
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8ca 	bl	8002510 <sendModbusException>
		return MODBUS_ERROR;
 800237c:	2300      	movs	r3, #0
 800237e:	e03c      	b.n	80023fa <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <handleReadHoldingRegs+0xf4>)
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <handleReadHoldingRegs+0xf8>)
 8002386:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8002388:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <handleReadHoldingRegs+0xf0>)
 800238a:	785a      	ldrb	r2, [r3, #1]
 800238c:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <handleReadHoldingRegs+0xf8>)
 800238e:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <handleReadHoldingRegs+0xf8>)
 800239a:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800239c:	2303      	movs	r3, #3
 800239e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e01d      	b.n	80023e2 <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80023a6:	8afb      	ldrh	r3, [r7, #22]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b299      	uxth	r1, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	613a      	str	r2, [r7, #16]
 80023ba:	b2c9      	uxtb	r1, r1
 80023bc:	4a13      	ldr	r2, [pc, #76]	@ (800240c <handleReadHoldingRegs+0xf8>)
 80023be:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80023c0:	8afb      	ldrh	r3, [r7, #22]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	8819      	ldrh	r1, [r3, #0]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	613a      	str	r2, [r7, #16]
 80023d0:	b2c9      	uxtb	r1, r1
 80023d2:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <handleReadHoldingRegs+0xf8>)
 80023d4:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	3301      	adds	r3, #1
 80023da:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3301      	adds	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	dbdd      	blt.n	80023a6 <handleReadHoldingRegs+0x92>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <handleReadHoldingRegs+0xf8>)
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff48 	bl	8002288 <sendModBusRequest>
	return 1;
 80023f8:	2301      	movs	r3, #1

}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000664 	.word	0x20000664
 8002408:	20000006 	.word	0x20000006
 800240c:	200006a4 	.word	0x200006a4

08002410 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800241a:	4b3a      	ldr	r3, [pc, #232]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 800241c:	789b      	ldrb	r3, [r3, #2]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b38      	ldr	r3, [pc, #224]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002424:	78db      	ldrb	r3, [r3, #3]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21b      	sxth	r3, r3
 800242c:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 800242e:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002430:	791b      	ldrb	r3, [r3, #4]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	b21a      	sxth	r2, r3
 8002436:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002438:	795b      	ldrb	r3, [r3, #5]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21b      	sxth	r3, r3
 8002440:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <handleWriteMulyipleHandlingRegister+0x3e>
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	2b7b      	cmp	r3, #123	@ 0x7b
 800244c:	d905      	bls.n	800245a <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 800244e:	2103      	movs	r1, #3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f85d 	bl	8002510 <sendModbusException>
		return MODBUS_ERROR;
 8002456:	2300      	movs	r3, #0
 8002458:	e04f      	b.n	80024fa <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 800245a:	8afa      	ldrh	r2, [r7, #22]
 800245c:	897b      	ldrh	r3, [r7, #10]
 800245e:	4413      	add	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	2b3c      	cmp	r3, #60	@ 0x3c
 800246a:	d905      	bls.n	8002478 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800246c:	2102      	movs	r1, #2
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f84e 	bl	8002510 <sendModbusException>
		return MODBUS_ERROR;
 8002474:	2300      	movs	r3, #0
 8002476:	e040      	b.n	80024fa <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8002478:	2307      	movs	r3, #7
 800247a:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e019      	b.n	80024b6 <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	613a      	str	r2, [r7, #16]
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b21a      	sxth	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	6139      	str	r1, [r7, #16]
 8002496:	491b      	ldr	r1, [pc, #108]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b219      	sxth	r1, r3
 80024a0:	8afb      	ldrh	r3, [r7, #22]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	82fa      	strh	r2, [r7, #22]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	b28a      	uxth	r2, r1
 80024ae:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	897b      	ldrh	r3, [r7, #10]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	dbe1      	blt.n	8002482 <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <handleWriteMulyipleHandlingRegister+0xf8>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024c4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024c8:	785a      	ldrb	r2, [r3, #1]
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024cc:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024d0:	789a      	ldrb	r2, [r3, #2]
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024d4:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024d8:	78da      	ldrb	r2, [r3, #3]
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024dc:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024e0:	791a      	ldrb	r2, [r3, #4]
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024e4:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024e8:	795a      	ldrb	r2, [r3, #5]
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024ec:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 80024ee:	2206      	movs	r2, #6
 80024f0:	4906      	ldr	r1, [pc, #24]	@ (800250c <handleWriteMulyipleHandlingRegister+0xfc>)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fec8 	bl	8002288 <sendModBusRequest>
	return 1;   // success
 80024f8:	2301      	movs	r3, #1

}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000664 	.word	0x20000664
 8002508:	20000006 	.word	0x20000006
 800250c:	200006a4 	.word	0x200006a4

08002510 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <sendModbusException+0x3c>)
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <sendModbusException+0x40>)
 8002522:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <sendModbusException+0x3c>)
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <sendModbusException+0x40>)
 8002530:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8002532:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <sendModbusException+0x40>)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8002538:	2203      	movs	r2, #3
 800253a:	4905      	ldr	r1, [pc, #20]	@ (8002550 <sendModbusException+0x40>)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fea3 	bl	8002288 <sendModBusRequest>
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000664 	.word	0x20000664
 8002550:	200006a4 	.word	0x200006a4

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_MspInit+0x50>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_MspInit+0x50>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6193      	str	r3, [r2, #24]
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_MspInit+0x50>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_MspInit+0x50>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_MspInit+0x50>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_MspInit+0x50>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2005      	movs	r0, #5
 8002590:	f002 fa65 	bl	8004a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002594:	2005      	movs	r0, #5
 8002596:	f002 fa7e 	bl	8004a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	@ 0x30
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c8:	d136      	bne.n	8002638 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 80025d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025dc:	4b4b      	ldr	r3, [pc, #300]	@ (800270c <HAL_ADC_MspInit+0x164>)
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4a4a      	ldr	r2, [pc, #296]	@ (800270c <HAL_ADC_MspInit+0x164>)
 80025e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	6153      	str	r3, [r2, #20]
 80025e8:	4b48      	ldr	r3, [pc, #288]	@ (800270c <HAL_ADC_MspInit+0x164>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b45      	ldr	r3, [pc, #276]	@ (800270c <HAL_ADC_MspInit+0x164>)
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	4a44      	ldr	r2, [pc, #272]	@ (800270c <HAL_ADC_MspInit+0x164>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fe:	6153      	str	r3, [r2, #20]
 8002600:	4b42      	ldr	r3, [pc, #264]	@ (800270c <HAL_ADC_MspInit+0x164>)
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800260c:	230f      	movs	r3, #15
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4619      	mov	r1, r3
 800261e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002622:	f002 fc8d 	bl	8004f40 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2012      	movs	r0, #18
 800262c:	f002 fa17 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002630:	2012      	movs	r0, #18
 8002632:	f002 fa30 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002636:	e063      	b.n	8002700 <HAL_ADC_MspInit+0x158>
  else if(hadc->Instance==ADC2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a34      	ldr	r2, [pc, #208]	@ (8002710 <HAL_ADC_MspInit+0x168>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d15e      	bne.n	8002700 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 800264a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_ADC_MspInit+0x160>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10b      	bne.n	800266c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_ADC_MspInit+0x164>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <HAL_ADC_MspInit+0x164>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6153      	str	r3, [r2, #20]
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_ADC_MspInit+0x164>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266c:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_ADC_MspInit+0x164>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4a26      	ldr	r2, [pc, #152]	@ (800270c <HAL_ADC_MspInit+0x164>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002676:	6153      	str	r3, [r2, #20]
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_ADC_MspInit+0x164>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002684:	2370      	movs	r3, #112	@ 0x70
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800269a:	f002 fc51 	bl	8004f40 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_ADC_MspInit+0x170>)
 80026a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026bc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026d4:	480f      	ldr	r0, [pc, #60]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026d6:	f002 f9f8 	bl	8004aca <HAL_DMA_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 80026e0:	f7ff fc58 	bl	8001f94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <HAL_ADC_MspInit+0x16c>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2012      	movs	r0, #18
 80026f6:	f002 f9b2 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026fa:	2012      	movs	r0, #18
 80026fc:	f002 f9cb 	bl	8004a96 <HAL_NVIC_EnableIRQ>
}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	@ 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200008a4 	.word	0x200008a4
 800270c:	40021000 	.word	0x40021000
 8002710:	50000100 	.word	0x50000100
 8002714:	200002a4 	.word	0x200002a4
 8002718:	40020408 	.word	0x40020408

0800271c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <HAL_I2C_MspInit+0x7c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d128      	bne.n	8002790 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_I2C_MspInit+0x80>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4a16      	ldr	r2, [pc, #88]	@ (800279c <HAL_I2C_MspInit+0x80>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002748:	6153      	str	r3, [r2, #20]
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_I2C_MspInit+0x80>)
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002756:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800275a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275c:	2312      	movs	r3, #18
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002768:	2304      	movs	r3, #4
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	480b      	ldr	r0, [pc, #44]	@ (80027a0 <HAL_I2C_MspInit+0x84>)
 8002774:	f002 fbe4 	bl	8004f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_I2C_MspInit+0x80>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_I2C_MspInit+0x80>)
 800277e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002782:	61d3      	str	r3, [r2, #28]
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_I2C_MspInit+0x80>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40005400 	.word	0x40005400
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000400 	.word	0x48000400

080027a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002878 <HAL_TIM_Base_MspInit+0xd4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10c      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a2c      	ldr	r2, [pc, #176]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027de:	e047      	b.n	8002870 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e8:	d129      	bne.n	800283e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a23      	ldr	r2, [pc, #140]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b21      	ldr	r3, [pc, #132]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_INT_Pin;
 800281a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800282c:	2301      	movs	r3, #1
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM_INT_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	4812      	ldr	r0, [pc, #72]	@ (8002880 <HAL_TIM_Base_MspInit+0xdc>)
 8002838:	f002 fb82 	bl	8004f40 <HAL_GPIO_Init>
}
 800283c:	e018      	b.n	8002870 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <HAL_TIM_Base_MspInit+0xe0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d113      	bne.n	8002870 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a0b      	ldr	r2, [pc, #44]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 800284e:	f043 0302 	orr.w	r3, r3, #2
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	201d      	movs	r0, #29
 8002866:	f002 f8fa 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800286a:	201d      	movs	r0, #29
 800286c:	f002 f913 	bl	8004a96 <HAL_NVIC_EnableIRQ>
}
 8002870:	bf00      	nop
 8002872:	3730      	adds	r7, #48	@ 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40021000 	.word	0x40021000
 8002880:	48000400 	.word	0x48000400
 8002884:	40000400 	.word	0x40000400

08002888 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_TIM_PWM_MspInit+0x38>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10b      	bne.n	80028b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40013400 	.word	0x40013400
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a23      	ldr	r2, [pc, #140]	@ (8002974 <HAL_TIM_MspPostInit+0xac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d11e      	bne.n	8002928 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f4:	6153      	str	r3, [r2, #20]
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002914:	2306      	movs	r3, #6
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f002 fb0d 	bl	8004f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002926:	e020      	b.n	800296a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <HAL_TIM_MspPostInit+0xb4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d11b      	bne.n	800296a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800293c:	6153      	str	r3, [r2, #20]
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_TIM_MspPostInit+0xb0>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800294a:	2340      	movs	r3, #64	@ 0x40
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800295a:	2305      	movs	r3, #5
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4806      	ldr	r0, [pc, #24]	@ (8002980 <HAL_TIM_MspPostInit+0xb8>)
 8002966:	f002 faeb 	bl	8004f40 <HAL_GPIO_Init>
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40013400 	.word	0x40013400
 8002980:	48000400 	.word	0x48000400

08002984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a50      	ldr	r2, [pc, #320]	@ (8002ae4 <HAL_UART_MspInit+0x160>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 809a 	bne.w	8002adc <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b2:	61d3      	str	r3, [r2, #28]
 80029b4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c0:	4b49      	ldr	r3, [pc, #292]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a48      	ldr	r2, [pc, #288]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ca:	6153      	str	r3, [r2, #20]
 80029cc:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e2:	6153      	str	r3, [r2, #20]
 80029e4:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_UART_MspInit+0x164>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a02:	2307      	movs	r3, #7
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a10:	f002 fa96 	bl	8004f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a14:	2308      	movs	r3, #8
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a24:	2307      	movs	r3, #7
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	482f      	ldr	r0, [pc, #188]	@ (8002aec <HAL_UART_MspInit+0x168>)
 8002a30:	f002 fa86 	bl	8004f40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a36:	4a2f      	ldr	r2, [pc, #188]	@ (8002af4 <HAL_UART_MspInit+0x170>)
 8002a38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a40:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a46:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a48:	2280      	movs	r2, #128	@ 0x80
 8002a4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4c:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5e:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a64:	4822      	ldr	r0, [pc, #136]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a66:	f002 f830 	bl	8004aca <HAL_DMA_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002a70:	f7ff fa90 	bl	8001f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a78:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_UART_MspInit+0x16c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002a82:	4a1e      	ldr	r2, [pc, #120]	@ (8002afc <HAL_UART_MspInit+0x178>)
 8002a84:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002a88:	2210      	movs	r2, #16
 8002a8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a9e:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ab0:	4811      	ldr	r0, [pc, #68]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002ab2:	f002 f80a 	bl	8004aca <HAL_DMA_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002abc:	f7ff fa6a 	bl	8001f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002ac4:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <HAL_UART_MspInit+0x174>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2026      	movs	r0, #38	@ 0x26
 8002ad2:	f001 ffc4 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ad6:	2026      	movs	r0, #38	@ 0x26
 8002ad8:	f001 ffdd 	bl	8004a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	@ 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40004400 	.word	0x40004400
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	200004f4 	.word	0x200004f4
 8002af4:	4002006c 	.word	0x4002006c
 8002af8:	20000538 	.word	0x20000538
 8002afc:	40020080 	.word	0x40020080

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <NMI_Handler+0x4>

08002b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <MemManage_Handler+0x4>

08002b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b56:	f000 f9a5 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <DMA1_Channel6_IRQHandler+0x10>)
 8002b72:	f002 f8cc 	bl	8004d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200004f4 	.word	0x200004f4

08002b80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <DMA1_Channel7_IRQHandler+0x10>)
 8002b86:	f002 f8c2 	bl	8004d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000538 	.word	0x20000538

08002b94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b98:	4803      	ldr	r0, [pc, #12]	@ (8002ba8 <ADC1_2_IRQHandler+0x14>)
 8002b9a:	f000 fd43 	bl	8003624 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002b9e:	4803      	ldr	r0, [pc, #12]	@ (8002bac <ADC1_2_IRQHandler+0x18>)
 8002ba0:	f000 fd40 	bl	8003624 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000204 	.word	0x20000204
 8002bac:	20000254 	.word	0x20000254

08002bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <TIM3_IRQHandler+0x10>)
 8002bb6:	f004 ff11 	bl	80079dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200003d4 	.word	0x200003d4

08002bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <USART2_IRQHandler+0x10>)
 8002bca:	f006 fa87 	bl	80090dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000046c 	.word	0x2000046c

08002bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Phaze_A_Pin);
 8002bdc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002be0:	f002 fb72 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Phaze_B_Pin);
 8002be4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002be8:	f002 fb6e 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Phaze_C_Pin);
 8002bec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bf0:	f002 fb6a 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_UI_Pin);
 8002bf4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002bf8:	f002 fb66 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c04:	4802      	ldr	r0, [pc, #8]	@ (8002c10 <DMA2_Channel1_IRQHandler+0x10>)
 8002c06:	f002 f882 	bl	8004d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200002a4 	.word	0x200002a4

08002c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_kill>:

int _kill(int pid, int sig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c2e:	f008 f9cf 	bl	800afd0 <__errno>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2216      	movs	r2, #22
 8002c36:	601a      	str	r2, [r3, #0]
  return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_exit>:

void _exit (int status)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ffe7 	bl	8002c24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c56:	bf00      	nop
 8002c58:	e7fd      	b.n	8002c56 <_exit+0x12>

08002c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e00a      	b.n	8002c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c6c:	f3af 8000 	nop.w
 8002c70:	4601      	mov	r1, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	60ba      	str	r2, [r7, #8]
 8002c78:	b2ca      	uxtb	r2, r1
 8002c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf0      	blt.n	8002c6c <_read+0x12>
  }

  return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e009      	b.n	8002cba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	60ba      	str	r2, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dbf1      	blt.n	8002ca6 <_write+0x12>
  }
  return len;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_close>:

int _close(int file)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cf4:	605a      	str	r2, [r3, #4]
  return 0;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_isatty>:

int _isatty(int file)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d0c:	2301      	movs	r3, #1
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <_sbrk+0x5c>)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <_sbrk+0x60>)
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <_sbrk+0x64>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <_sbrk+0x68>)
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d207      	bcs.n	8002d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d64:	f008 f934 	bl	800afd0 <__errno>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e009      	b.n	8002d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <_sbrk+0x64>)
 8002d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2000a000 	.word	0x2000a000
 8002d94:	00000400 	.word	0x00000400
 8002d98:	200008a8 	.word	0x200008a8
 8002d9c:	20000a00 	.word	0x20000a00

08002da0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dfc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dc8:	f7ff ffea 	bl	8002da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dcc:	480c      	ldr	r0, [pc, #48]	@ (8002e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dce:	490d      	ldr	r1, [pc, #52]	@ (8002e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <LoopForever+0xe>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd4:	e002      	b.n	8002ddc <LoopCopyDataInit>

08002dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dda:	3304      	adds	r3, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de0:	d3f9      	bcc.n	8002dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002de4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e10 <LoopForever+0x16>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de8:	e001      	b.n	8002dee <LoopFillZerobss>

08002dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dec:	3204      	adds	r2, #4

08002dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df0:	d3fb      	bcc.n	8002dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002df2:	f008 f8f3 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002df6:	f7fe f96f 	bl	80010d8 <main>

08002dfa <LoopForever>:

LoopForever:
    b LoopForever
 8002dfa:	e7fe      	b.n	8002dfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dfc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e08:	0800d520 	.word	0x0800d520
  ldr r2, =_sbss
 8002e0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e10:	200009fc 	.word	0x200009fc

08002e14 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC3_IRQHandler>
	...

08002e18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <HAL_Init+0x28>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	@ (8002e40 <HAL_Init+0x28>)
 8002e22:	f043 0310 	orr.w	r3, r3, #16
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f001 fe0d 	bl	8004a48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	200f      	movs	r0, #15
 8002e30:	f000 f808 	bl	8002e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff fb8e 	bl	8002554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000

08002e44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fe25 	bl	8004ab2 <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f001 fded 	bl	8004a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	@ (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	20000010 	.word	0x20000010
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000010 	.word	0x20000010
 8002ec8:	200008ac 	.word	0x200008ac

08002ecc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	200008ac 	.word	0x200008ac

08002ee4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000010 	.word	0x20000010

08002f2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b09a      	sub	sp, #104	@ 0x68
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e1c9      	b.n	800331c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d176      	bne.n	8003088 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d152      	bne.n	8003048 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff faf3 	bl	80025a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d13b      	bne.n	8003048 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 fb4d 	bl	8004670 <ADC_Disable>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d12f      	bne.n	8003048 <HAL_ADC_Init+0xe0>
 8002fe8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12b      	bne.n	8003048 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff8:	f023 0302 	bic.w	r3, r3, #2
 8002ffc:	f043 0202 	orr.w	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003012:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003022:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003024:	4b86      	ldr	r3, [pc, #536]	@ (8003240 <HAL_ADC_Init+0x2d8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a86      	ldr	r2, [pc, #536]	@ (8003244 <HAL_ADC_Init+0x2dc>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9a      	lsrs	r2, r3, #18
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800303a:	e002      	b.n	8003042 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003064:	d110      	bne.n	8003088 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f023 0312 	bic.w	r3, r3, #18
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8136 	bne.w	8003302 <HAL_ADC_Init+0x39a>
 8003096:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 8131 	bne.w	8003302 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8129 	bne.w	8003302 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030b8:	f043 0202 	orr.w	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_Init+0x16c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <HAL_ADC_Init+0x2e0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_Init+0x170>
 80030d4:	4b5d      	ldr	r3, [pc, #372]	@ (800324c <HAL_ADC_Init+0x2e4>)
 80030d6:	e000      	b.n	80030da <HAL_ADC_Init+0x172>
 80030d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003250 <HAL_ADC_Init+0x2e8>)
 80030da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e4:	d102      	bne.n	80030ec <HAL_ADC_Init+0x184>
 80030e6:	4b58      	ldr	r3, [pc, #352]	@ (8003248 <HAL_ADC_Init+0x2e0>)
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e01a      	b.n	8003122 <HAL_ADC_Init+0x1ba>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <HAL_ADC_Init+0x2e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d103      	bne.n	80030fe <HAL_ADC_Init+0x196>
 80030f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e011      	b.n	8003122 <HAL_ADC_Init+0x1ba>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a54      	ldr	r2, [pc, #336]	@ (8003254 <HAL_ADC_Init+0x2ec>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d102      	bne.n	800310e <HAL_ADC_Init+0x1a6>
 8003108:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_ADC_Init+0x2f0>)
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e009      	b.n	8003122 <HAL_ADC_Init+0x1ba>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a51      	ldr	r2, [pc, #324]	@ (8003258 <HAL_ADC_Init+0x2f0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d102      	bne.n	800311e <HAL_ADC_Init+0x1b6>
 8003118:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <HAL_ADC_Init+0x2ec>)
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e001      	b.n	8003122 <HAL_ADC_Init+0x1ba>
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d108      	bne.n	8003142 <HAL_ADC_Init+0x1da>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Init+0x1da>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_ADC_Init+0x1dc>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11c      	bne.n	8003182 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003148:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800314a:	2b00      	cmp	r3, #0
 800314c:	d010      	beq.n	8003170 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_ADC_Init+0x202>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x202>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_ADC_Init+0x204>
 800316a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800316c:	2b00      	cmp	r3, #0
 800316e:	d108      	bne.n	8003182 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	431a      	orrs	r2, r3
 800317e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003180:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7e5b      	ldrb	r3, [r3, #25]
 8003186:	035b      	lsls	r3, r3, #13
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800318c:	2a01      	cmp	r2, #1
 800318e:	d002      	beq.n	8003196 <HAL_ADC_Init+0x22e>
 8003190:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003194:	e000      	b.n	8003198 <HAL_ADC_Init+0x230>
 8003196:	2200      	movs	r2, #0
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031a8:	4313      	orrs	r3, r2
 80031aa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d11b      	bne.n	80031ee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7e5b      	ldrb	r3, [r3, #25]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	045a      	lsls	r2, r3, #17
 80031c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80031d0:	e00d      	b.n	80031ee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d03a      	beq.n	800326c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <HAL_ADC_Init+0x2ec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_ADC_Init+0x2a2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_ADC_Init+0x2f0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d128      	bne.n	800325c <HAL_ADC_Init+0x2f4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8003212:	d012      	beq.n	800323a <HAL_ADC_Init+0x2d2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800321c:	d00a      	beq.n	8003234 <HAL_ADC_Init+0x2cc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8003226:	d002      	beq.n	800322e <HAL_ADC_Init+0x2c6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	e018      	b.n	8003260 <HAL_ADC_Init+0x2f8>
 800322e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003232:	e015      	b.n	8003260 <HAL_ADC_Init+0x2f8>
 8003234:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8003238:	e012      	b.n	8003260 <HAL_ADC_Init+0x2f8>
 800323a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800323e:	e00f      	b.n	8003260 <HAL_ADC_Init+0x2f8>
 8003240:	20000008 	.word	0x20000008
 8003244:	431bde83 	.word	0x431bde83
 8003248:	50000100 	.word	0x50000100
 800324c:	50000300 	.word	0x50000300
 8003250:	50000700 	.word	0x50000700
 8003254:	50000400 	.word	0x50000400
 8003258:	50000500 	.word	0x50000500
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003264:	4313      	orrs	r3, r2
 8003266:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003268:	4313      	orrs	r3, r2
 800326a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d114      	bne.n	80032a4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003288:	f023 0302 	bic.w	r3, r3, #2
 800328c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7e1b      	ldrb	r3, [r3, #24]
 8003292:	039a      	lsls	r2, r3, #14
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4313      	orrs	r3, r2
 800329e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032a0:	4313      	orrs	r3, r2
 80032a2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <HAL_ADC_Init+0x3bc>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10c      	bne.n	80032da <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f023 010f 	bic.w	r1, r3, #15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032d8:	e007      	b.n	80032ea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020f 	bic.w	r2, r2, #15
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f023 0303 	bic.w	r3, r3, #3
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003300:	e00a      	b.n	8003318 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f023 0312 	bic.w	r3, r3, #18
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003318:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800331c:	4618      	mov	r0, r3
 800331e:	3768      	adds	r7, #104	@ 0x68
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	fff0c007 	.word	0xfff0c007

08003328 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80f7 	bne.w	8003536 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Start_DMA+0x2e>
 8003352:	2302      	movs	r3, #2
 8003354:	e0f2      	b.n	800353c <HAL_ADC_Start_DMA+0x214>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003366:	d004      	beq.n	8003372 <HAL_ADC_Start_DMA+0x4a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a75      	ldr	r2, [pc, #468]	@ (8003544 <HAL_ADC_Start_DMA+0x21c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d109      	bne.n	8003386 <HAL_ADC_Start_DMA+0x5e>
 8003372:	4b75      	ldr	r3, [pc, #468]	@ (8003548 <HAL_ADC_Start_DMA+0x220>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e008      	b.n	8003398 <HAL_ADC_Start_DMA+0x70>
 8003386:	4b71      	ldr	r3, [pc, #452]	@ (800354c <HAL_ADC_Start_DMA+0x224>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80c5 	beq.w	8003528 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f001 f902 	bl	80045a8 <ADC_Enable>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80b7 	bne.w	800351e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start_DMA+0xb0>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003544 <HAL_ADC_Start_DMA+0x21c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d106      	bne.n	80033e6 <HAL_ADC_Start_DMA+0xbe>
 80033d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003548 <HAL_ADC_Start_DMA+0x220>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_ADC_Start_DMA+0xde>
 80033e4:	e005      	b.n	80033f2 <HAL_ADC_Start_DMA+0xca>
 80033e6:	4b59      	ldr	r3, [pc, #356]	@ (800354c <HAL_ADC_Start_DMA+0x224>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_ADC_Start_DMA+0xde>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fa:	d004      	beq.n	8003406 <HAL_ADC_Start_DMA+0xde>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a53      	ldr	r2, [pc, #332]	@ (8003550 <HAL_ADC_Start_DMA+0x228>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d115      	bne.n	8003432 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d036      	beq.n	800348e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003428:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003430:	e02d      	b.n	800348e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d004      	beq.n	8003452 <HAL_ADC_Start_DMA+0x12a>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a3d      	ldr	r2, [pc, #244]	@ (8003544 <HAL_ADC_Start_DMA+0x21c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10a      	bne.n	8003468 <HAL_ADC_Start_DMA+0x140>
 8003452:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e008      	b.n	800347a <HAL_ADC_Start_DMA+0x152>
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_ADC_Start_DMA+0x228>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003486:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349a:	d106      	bne.n	80034aa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a0:	f023 0206 	bic.w	r2, r3, #6
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80034a8:	e002      	b.n	80034b0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	4a25      	ldr	r2, [pc, #148]	@ (8003554 <HAL_ADC_Start_DMA+0x22c>)
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <HAL_ADC_Start_DMA+0x230>)
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	4a23      	ldr	r2, [pc, #140]	@ (800355c <HAL_ADC_Start_DMA+0x234>)
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	221c      	movs	r2, #28
 80034d6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0210 	orr.w	r2, r2, #16
 80034e6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3340      	adds	r3, #64	@ 0x40
 8003502:	4619      	mov	r1, r3
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f001 fb26 	bl	8004b58 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0204 	orr.w	r2, r2, #4
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	e00d      	b.n	800353a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003526:	e008      	b.n	800353a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003534:	e001      	b.n	800353a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	50000100 	.word	0x50000100
 8003548:	50000300 	.word	0x50000300
 800354c:	50000700 	.word	0x50000700
 8003550:	50000400 	.word	0x50000400
 8003554:	080044dd 	.word	0x080044dd
 8003558:	08004557 	.word	0x08004557
 800355c:	08004573 	.word	0x08004573

08003560 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADC_Stop_DMA+0x1a>
 8003576:	2302      	movs	r3, #2
 8003578:	e050      	b.n	800361c <HAL_ADC_Stop_DMA+0xbc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003582:	216c      	movs	r1, #108	@ 0x6c
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f001 f8d9 	bl	800473c <ADC_ConversionStop>
 800358a:	4603      	mov	r3, r0
 800358c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d13e      	bne.n	8003612 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d10f      	bne.n	80035d0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fb2e 	bl	8004c16 <HAL_DMA_Abort>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f001 f842 	bl	8004670 <ADC_Disable>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e002      	b.n	80035f8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 f83c 	bl	8004670 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_ADC_IRQHandler+0x38>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80bc 	beq.w	80037e0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b6 	beq.w	80037e0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x7c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a90      	ldr	r2, [pc, #576]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d106      	bne.n	80036ae <HAL_ADC_IRQHandler+0x8a>
 80036a0:	4b8f      	ldr	r3, [pc, #572]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d03e      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 80036ac:	e005      	b.n	80036ba <HAL_ADC_IRQHandler+0x96>
 80036ae:	4b8d      	ldr	r3, [pc, #564]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d037      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c2:	d004      	beq.n	80036ce <HAL_ADC_IRQHandler+0xaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a84      	ldr	r2, [pc, #528]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_IRQHandler+0xb8>
 80036ce:	4b84      	ldr	r3, [pc, #528]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d027      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 80036da:	e005      	b.n	80036e8 <HAL_ADC_IRQHandler+0xc4>
 80036dc:	4b81      	ldr	r3, [pc, #516]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d020      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f0:	d004      	beq.n	80036fc <HAL_ADC_IRQHandler+0xd8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a79      	ldr	r2, [pc, #484]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d106      	bne.n	800370a <HAL_ADC_IRQHandler+0xe6>
 80036fc:	4b78      	ldr	r3, [pc, #480]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2b09      	cmp	r3, #9
 8003706:	d010      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 8003708:	e005      	b.n	8003716 <HAL_ADC_IRQHandler+0xf2>
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2b09      	cmp	r3, #9
 8003714:	d009      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800371e:	d004      	beq.n	800372a <HAL_ADC_IRQHandler+0x106>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a70      	ldr	r2, [pc, #448]	@ (80038e8 <HAL_ADC_IRQHandler+0x2c4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d104      	bne.n	8003734 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e00f      	b.n	8003754 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800373c:	d004      	beq.n	8003748 <HAL_ADC_IRQHandler+0x124>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a66      	ldr	r2, [pc, #408]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d102      	bne.n	800374e <HAL_ADC_IRQHandler+0x12a>
 8003748:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800374c:	e000      	b.n	8003750 <HAL_ADC_IRQHandler+0x12c>
 800374e:	4b66      	ldr	r3, [pc, #408]	@ (80038e8 <HAL_ADC_IRQHandler+0x2c4>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800375e:	2b00      	cmp	r3, #0
 8003760:	d137      	bne.n	80037d2 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003768:	2b00      	cmp	r3, #0
 800376a:	d132      	bne.n	80037d2 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02d      	beq.n	80037d2 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 020c 	bic.w	r2, r2, #12
 8003792:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d112      	bne.n	80037d2 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80037b8:	e00b      	b.n	80037d2 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe fbc2 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	220c      	movs	r2, #12
 80037de:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_ADC_IRQHandler+0x1d0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8138 	beq.w	8003a70 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8132 	beq.w	8003a70 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003820:	d004      	beq.n	800382c <HAL_ADC_IRQHandler+0x208>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d106      	bne.n	800383a <HAL_ADC_IRQHandler+0x216>
 800382c:	4b2c      	ldr	r3, [pc, #176]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2b00      	cmp	r3, #0
 8003836:	d03e      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 8003838:	e005      	b.n	8003846 <HAL_ADC_IRQHandler+0x222>
 800383a:	4b2a      	ldr	r3, [pc, #168]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2b00      	cmp	r3, #0
 8003844:	d037      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384e:	d004      	beq.n	800385a <HAL_ADC_IRQHandler+0x236>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a21      	ldr	r2, [pc, #132]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d106      	bne.n	8003868 <HAL_ADC_IRQHandler+0x244>
 800385a:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2b05      	cmp	r3, #5
 8003864:	d027      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 8003866:	e005      	b.n	8003874 <HAL_ADC_IRQHandler+0x250>
 8003868:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2b05      	cmp	r3, #5
 8003872:	d020      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800387c:	d004      	beq.n	8003888 <HAL_ADC_IRQHandler+0x264>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a16      	ldr	r2, [pc, #88]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d106      	bne.n	8003896 <HAL_ADC_IRQHandler+0x272>
 8003888:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_ADC_IRQHandler+0x2bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2b09      	cmp	r3, #9
 8003892:	d010      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 8003894:	e005      	b.n	80038a2 <HAL_ADC_IRQHandler+0x27e>
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <HAL_ADC_IRQHandler+0x2c0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2b09      	cmp	r3, #9
 80038a0:	d009      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038aa:	d004      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x292>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	@ (80038e8 <HAL_ADC_IRQHandler+0x2c4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d104      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e018      	b.n	80038f2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c8:	d004      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x2b0>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <HAL_ADC_IRQHandler+0x2b8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10b      	bne.n	80038ec <HAL_ADC_IRQHandler+0x2c8>
 80038d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038d8:	e009      	b.n	80038ee <HAL_ADC_IRQHandler+0x2ca>
 80038da:	bf00      	nop
 80038dc:	50000100 	.word	0x50000100
 80038e0:	50000300 	.word	0x50000300
 80038e4:	50000700 	.word	0x50000700
 80038e8:	50000400 	.word	0x50000400
 80038ec:	4b92      	ldr	r3, [pc, #584]	@ (8003b38 <HAL_ADC_IRQHandler+0x514>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 80b0 	bne.w	8003a62 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 80a3 	bne.w	8003a62 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 809d 	bne.w	8003a62 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8097 	beq.w	8003a62 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800393c:	d004      	beq.n	8003948 <HAL_ADC_IRQHandler+0x324>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7e      	ldr	r2, [pc, #504]	@ (8003b3c <HAL_ADC_IRQHandler+0x518>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d106      	bne.n	8003956 <HAL_ADC_IRQHandler+0x332>
 8003948:	4b7d      	ldr	r3, [pc, #500]	@ (8003b40 <HAL_ADC_IRQHandler+0x51c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03e      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 8003954:	e005      	b.n	8003962 <HAL_ADC_IRQHandler+0x33e>
 8003956:	4b7b      	ldr	r3, [pc, #492]	@ (8003b44 <HAL_ADC_IRQHandler+0x520>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2b00      	cmp	r3, #0
 8003960:	d037      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800396a:	d004      	beq.n	8003976 <HAL_ADC_IRQHandler+0x352>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a72      	ldr	r2, [pc, #456]	@ (8003b3c <HAL_ADC_IRQHandler+0x518>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d106      	bne.n	8003984 <HAL_ADC_IRQHandler+0x360>
 8003976:	4b72      	ldr	r3, [pc, #456]	@ (8003b40 <HAL_ADC_IRQHandler+0x51c>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2b06      	cmp	r3, #6
 8003980:	d027      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 8003982:	e005      	b.n	8003990 <HAL_ADC_IRQHandler+0x36c>
 8003984:	4b6f      	ldr	r3, [pc, #444]	@ (8003b44 <HAL_ADC_IRQHandler+0x520>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2b06      	cmp	r3, #6
 800398e:	d020      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x380>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a67      	ldr	r2, [pc, #412]	@ (8003b3c <HAL_ADC_IRQHandler+0x518>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d106      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x38e>
 80039a4:	4b66      	ldr	r3, [pc, #408]	@ (8003b40 <HAL_ADC_IRQHandler+0x51c>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	d010      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 80039b0:	e005      	b.n	80039be <HAL_ADC_IRQHandler+0x39a>
 80039b2:	4b64      	ldr	r3, [pc, #400]	@ (8003b44 <HAL_ADC_IRQHandler+0x520>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	d009      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c6:	d004      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x3ae>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003b38 <HAL_ADC_IRQHandler+0x514>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d104      	bne.n	80039dc <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e00f      	b.n	80039fc <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e4:	d004      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x3cc>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a54      	ldr	r2, [pc, #336]	@ (8003b3c <HAL_ADC_IRQHandler+0x518>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d102      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x3d2>
 80039f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039f4:	e000      	b.n	80039f8 <HAL_ADC_IRQHandler+0x3d4>
 80039f6:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <HAL_ADC_IRQHandler+0x514>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12d      	bne.n	8003a62 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11a      	bne.n	8003a4a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a22:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d112      	bne.n	8003a62 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a48:	e00b      	b.n	8003a62 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f936 	bl	8003cd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2260      	movs	r2, #96	@ 0x60
 8003a6e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d011      	beq.n	8003a9e <HAL_ADC_IRQHandler+0x47a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fa55 	bl	8002f40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <HAL_ADC_IRQHandler+0x4aa>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f91c 	bl	8003cfc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003acc:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_ADC_IRQHandler+0x4da>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f90e 	bl	8003d10 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d04f      	beq.n	8003ba8 <HAL_ADC_IRQHandler+0x584>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04a      	beq.n	8003ba8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e02d      	b.n	8003b7c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_IRQHandler+0x510>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a03      	ldr	r2, [pc, #12]	@ (8003b3c <HAL_ADC_IRQHandler+0x518>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d109      	bne.n	8003b48 <HAL_ADC_IRQHandler+0x524>
 8003b34:	4b02      	ldr	r3, [pc, #8]	@ (8003b40 <HAL_ADC_IRQHandler+0x51c>)
 8003b36:	e008      	b.n	8003b4a <HAL_ADC_IRQHandler+0x526>
 8003b38:	50000400 	.word	0x50000400
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000300 	.word	0x50000300
 8003b44:	50000700 	.word	0x50000700
 8003b48:	4b28      	ldr	r3, [pc, #160]	@ (8003bec <HAL_ADC_IRQHandler+0x5c8>)
 8003b4a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10a      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e007      	b.n	8003b7c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003b78:	2301      	movs	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10e      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff f9da 	bl	8002f54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x5c0>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bcc:	f043 0208 	orr.w	r2, r3, #8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f882 	bl	8003ce8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	50000700 	.word	0x50000700

08003bf0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_ADCEx_Calibration_Start+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e05f      	b.n	8003ccc <HAL_ADCEx_Calibration_Start+0xdc>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd2b 	bl	8004670 <ADC_Disable>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d14e      	bne.n	8003cc2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8003c38:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c4e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c5e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003c60:	f7ff f934 	bl	8002ecc <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003c66:	e01c      	b.n	8003ca2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c68:	f7ff f930 	bl	8002ecc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b0a      	cmp	r3, #10
 8003c74:	d915      	bls.n	8003ca2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c84:	d10d      	bne.n	8003ca2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f023 0312 	bic.w	r3, r3, #18
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e014      	b.n	8003ccc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb0:	d0da      	beq.n	8003c68 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b09b      	sub	sp, #108	@ 0x6c
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x22>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e2c8      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x5b4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 82ac 	bne.w	80042b6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d81c      	bhi.n	8003da0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	461a      	mov	r2, r3
 8003d7a:	231f      	movs	r3, #31
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	4019      	ands	r1, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa00 f203 	lsl.w	r2, r0, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d9e:	e063      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d81e      	bhi.n	8003de6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	221f      	movs	r2, #31
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	4019      	ands	r1, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	3b1e      	subs	r3, #30
 8003dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003de4:	e040      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b0e      	cmp	r3, #14
 8003dec:	d81e      	bhi.n	8003e2c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	3b3c      	subs	r3, #60	@ 0x3c
 8003e02:	221f      	movs	r2, #31
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	4019      	ands	r1, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	3b3c      	subs	r3, #60	@ 0x3c
 8003e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e2a:	e01d      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	3b5a      	subs	r3, #90	@ 0x5a
 8003e40:	221f      	movs	r2, #31
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	4019      	ands	r1, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	3b5a      	subs	r3, #90	@ 0x5a
 8003e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80e5 	bne.w	8004042 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b09      	cmp	r3, #9
 8003e7e:	d91c      	bls.n	8003eba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6999      	ldr	r1, [r3, #24]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	3b1e      	subs	r3, #30
 8003e92:	2207      	movs	r2, #7
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	4019      	ands	r1, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6898      	ldr	r0, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3b1e      	subs	r3, #30
 8003eac:	fa00 f203 	lsl.w	r2, r0, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	e019      	b.n	8003eee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6959      	ldr	r1, [r3, #20]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	2207      	movs	r2, #7
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	4019      	ands	r1, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6898      	ldr	r0, [r3, #8]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d84f      	bhi.n	8003fb0 <HAL_ADC_ConfigChannel+0x28c>
 8003f10:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <HAL_ADC_ConfigChannel+0x1f4>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f8f 	.word	0x08003f8f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f2e:	4b99      	ldr	r3, [pc, #612]	@ (8004194 <HAL_ADC_ConfigChannel+0x470>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	0691      	lsls	r1, r2, #26
 8003f38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f46:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f48:	e07b      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f50:	4b90      	ldr	r3, [pc, #576]	@ (8004194 <HAL_ADC_ConfigChannel+0x470>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	0691      	lsls	r1, r2, #26
 8003f5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f68:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f6a:	e06a      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f72:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_ADC_ConfigChannel+0x470>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	0691      	lsls	r1, r2, #26
 8003f7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f8a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f8c:	e059      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f94:	4b7f      	ldr	r3, [pc, #508]	@ (8004194 <HAL_ADC_ConfigChannel+0x470>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	0691      	lsls	r1, r2, #26
 8003f9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003fac:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fae:	e048      	b.n	8004042 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	069b      	lsls	r3, r3, #26
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d107      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fd2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	069b      	lsls	r3, r3, #26
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ff6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800401a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	069b      	lsls	r3, r3, #26
 800402c:	429a      	cmp	r2, r3
 800402e:	d107      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800403e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8004040:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x33e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x33e>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_ADC_ConfigChannel+0x340>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 8131 	bne.w	80042cc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d00f      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	400a      	ands	r2, r1
 800408c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004090:	e049      	b.n	8004126 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2201      	movs	r2, #1
 80040a0:	409a      	lsls	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d91c      	bls.n	80040ee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6999      	ldr	r1, [r3, #24]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	3b1b      	subs	r3, #27
 80040c6:	2207      	movs	r2, #7
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	4019      	ands	r1, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6898      	ldr	r0, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	3b1b      	subs	r3, #27
 80040e0:	fa00 f203 	lsl.w	r2, r0, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
 80040ec:	e01b      	b.n	8004126 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6959      	ldr	r1, [r3, #20]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	2207      	movs	r2, #7
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	4019      	ands	r1, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6898      	ldr	r0, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	fa00 f203 	lsl.w	r2, r0, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800412e:	d004      	beq.n	800413a <HAL_ADC_ConfigChannel+0x416>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	@ (8004198 <HAL_ADC_ConfigChannel+0x474>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_ADC_ConfigChannel+0x41a>
 800413a:	4b18      	ldr	r3, [pc, #96]	@ (800419c <HAL_ADC_ConfigChannel+0x478>)
 800413c:	e000      	b.n	8004140 <HAL_ADC_ConfigChannel+0x41c>
 800413e:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <HAL_ADC_ConfigChannel+0x47c>)
 8004140:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d105      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800414a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d015      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800415a:	2b11      	cmp	r3, #17
 800415c:	d105      	bne.n	800416a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800415e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800416e:	2b12      	cmp	r3, #18
 8004170:	f040 80ac 	bne.w	80042cc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 80a5 	bne.w	80042cc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418a:	d10b      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x480>
 800418c:	4b02      	ldr	r3, [pc, #8]	@ (8004198 <HAL_ADC_ConfigChannel+0x474>)
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e023      	b.n	80041da <HAL_ADC_ConfigChannel+0x4b6>
 8004192:	bf00      	nop
 8004194:	83fff000 	.word	0x83fff000
 8004198:	50000100 	.word	0x50000100
 800419c:	50000300 	.word	0x50000300
 80041a0:	50000700 	.word	0x50000700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a4e      	ldr	r2, [pc, #312]	@ (80042e4 <HAL_ADC_ConfigChannel+0x5c0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d103      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x492>
 80041ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e011      	b.n	80041da <HAL_ADC_ConfigChannel+0x4b6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4b      	ldr	r2, [pc, #300]	@ (80042e8 <HAL_ADC_ConfigChannel+0x5c4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d102      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x4a2>
 80041c0:	4b4a      	ldr	r3, [pc, #296]	@ (80042ec <HAL_ADC_ConfigChannel+0x5c8>)
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e009      	b.n	80041da <HAL_ADC_ConfigChannel+0x4b6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a48      	ldr	r2, [pc, #288]	@ (80042ec <HAL_ADC_ConfigChannel+0x5c8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d102      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x4b2>
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <HAL_ADC_ConfigChannel+0x5c4>)
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e001      	b.n	80041da <HAL_ADC_ConfigChannel+0x4b6>
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d108      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x4d6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x4d6>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_ADC_ConfigChannel+0x4d8>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d150      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004200:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x4fe>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x4fe>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_ADC_ConfigChannel+0x500>
 8004222:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004224:	2b00      	cmp	r3, #0
 8004226:	d13c      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d11d      	bne.n	800426c <HAL_ADC_ConfigChannel+0x548>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004238:	d118      	bne.n	800426c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800423a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004244:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004246:	4b2a      	ldr	r3, [pc, #168]	@ (80042f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_ADC_ConfigChannel+0x5d0>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	0c9a      	lsrs	r2, r3, #18
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800425c:	e002      	b.n	8004264 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f9      	bne.n	800425e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800426a:	e02e      	b.n	80042ca <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b11      	cmp	r3, #17
 8004272:	d10b      	bne.n	800428c <HAL_ADC_ConfigChannel+0x568>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800427c:	d106      	bne.n	800428c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800427e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004288:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800428a:	e01e      	b.n	80042ca <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b12      	cmp	r3, #18
 8004292:	d11a      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800429c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042a0:	e013      	b.n	80042ca <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80042b4:	e00a      	b.n	80042cc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80042c8:	e000      	b.n	80042cc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042ca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80042d8:	4618      	mov	r0, r3
 80042da:	376c      	adds	r7, #108	@ 0x6c
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000400 	.word	0x50000400
 80042ec:	50000500 	.word	0x50000500
 80042f0:	20000008 	.word	0x20000008
 80042f4:	431bde83 	.word	0x431bde83

080042f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b099      	sub	sp, #100	@ 0x64
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004310:	d102      	bne.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	e01a      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6a      	ldr	r2, [pc, #424]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d103      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e011      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a67      	ldr	r2, [pc, #412]	@ (80044cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d102      	bne.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004334:	4b66      	ldr	r3, [pc, #408]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	e009      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a64      	ldr	r2, [pc, #400]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d102      	bne.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004344:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	e001      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0b0      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004362:	2302      	movs	r3, #2
 8004364:	e0a9      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 808d 	bne.w	8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 8086 	bne.w	8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004394:	d004      	beq.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4b      	ldr	r2, [pc, #300]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043a0:	4b4c      	ldr	r3, [pc, #304]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80043a2:	e000      	b.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043a4:	4b4c      	ldr	r3, [pc, #304]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80043a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d040      	beq.n	8004432 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043c2:	035b      	lsls	r3, r3, #13
 80043c4:	430b      	orrs	r3, r1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d108      	bne.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d15c      	bne.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800440e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004410:	2b00      	cmp	r3, #0
 8004412:	d14b      	bne.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	6811      	ldr	r1, [r2, #0]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	430a      	orrs	r2, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800442e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004430:	e03c      	b.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d123      	bne.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004480:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004482:	2b00      	cmp	r3, #0
 8004484:	d112      	bne.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800448e:	f023 030f 	bic.w	r3, r3, #15
 8004492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004494:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004496:	e009      	b.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80044aa:	e000      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80044b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80044ba:	4618      	mov	r0, r3
 80044bc:	3764      	adds	r7, #100	@ 0x64
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	50000100 	.word	0x50000100
 80044cc:	50000400 	.word	0x50000400
 80044d0:	50000500 	.word	0x50000500
 80044d4:	50000300 	.word	0x50000300
 80044d8:	50000700 	.word	0x50000700

080044dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d126      	bne.n	8004544 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800450c:	2b00      	cmp	r3, #0
 800450e:	d115      	bne.n	800453c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004514:	2b00      	cmp	r3, #0
 8004516:	d111      	bne.n	800453c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7fd fd0d 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004542:	e004      	b.n	800454e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fe fce1 	bl	8002f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fe fcdb 	bl	8002f54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <ADC_Enable+0x2c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <ADC_Enable+0x2c>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <ADC_Enable+0x2e>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d143      	bne.n	8004662 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <ADC_Enable+0xc4>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e02f      	b.n	8004664 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004614:	f7fe fc5a 	bl	8002ecc <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800461a:	e01b      	b.n	8004654 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800461c:	f7fe fc56 	bl	8002ecc <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d914      	bls.n	8004654 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d00d      	beq.n	8004654 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	f043 0210 	orr.w	r2, r3, #16
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	f043 0201 	orr.w	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e007      	b.n	8004664 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d1dc      	bne.n	800461c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	8000003f 	.word	0x8000003f

08004670 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d108      	bne.n	800469c <ADC_Disable+0x2c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <ADC_Disable+0x2c>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <ADC_Disable+0x2e>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d047      	beq.n	8004732 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030d 	and.w	r3, r3, #13
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10f      	bne.n	80046d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0202 	orr.w	r2, r2, #2
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2203      	movs	r2, #3
 80046c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80046c8:	f7fe fc00 	bl	8002ecc <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046ce:	e029      	b.n	8004724 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e023      	b.n	8004734 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046ec:	f7fe fbee 	bl	8002ecc <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d914      	bls.n	8004724 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10d      	bne.n	8004724 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d0dc      	beq.n	80046ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 809b 	beq.w	8004898 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004770:	d12a      	bne.n	80047c8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004776:	2b01      	cmp	r3, #1
 8004778:	d126      	bne.n	80047c8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800477e:	2b01      	cmp	r3, #1
 8004780:	d122      	bne.n	80047c8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004782:	230c      	movs	r3, #12
 8004784:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004786:	e014      	b.n	80047b2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4a46      	ldr	r2, [pc, #280]	@ (80048a4 <ADC_ConversionStop+0x168>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d90d      	bls.n	80047ac <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e076      	b.n	800489a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3301      	adds	r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d1e3      	bne.n	8004788 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2240      	movs	r2, #64	@ 0x40
 80047c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b60      	cmp	r3, #96	@ 0x60
 80047cc:	d015      	beq.n	80047fa <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d10e      	bne.n	80047fa <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0210 	orr.w	r2, r2, #16
 80047f8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d015      	beq.n	800482c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	d10e      	bne.n	800482c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0220 	orr.w	r2, r2, #32
 800482a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b60      	cmp	r3, #96	@ 0x60
 8004830:	d005      	beq.n	800483e <ADC_ConversionStop+0x102>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b6c      	cmp	r3, #108	@ 0x6c
 8004836:	d105      	bne.n	8004844 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004838:	230c      	movs	r3, #12
 800483a:	617b      	str	r3, [r7, #20]
        break;
 800483c:	e005      	b.n	800484a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800483e:	2308      	movs	r3, #8
 8004840:	617b      	str	r3, [r7, #20]
        break;
 8004842:	e002      	b.n	800484a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004844:	2304      	movs	r3, #4
 8004846:	617b      	str	r3, [r7, #20]
        break;
 8004848:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800484a:	f7fe fb3f 	bl	8002ecc <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004850:	e01b      	b.n	800488a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004852:	f7fe fb3b 	bl	8002ecc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b0b      	cmp	r3, #11
 800485e:	d914      	bls.n	800488a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f043 0210 	orr.w	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e007      	b.n	800489a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1dc      	bne.n	8004852 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	000993ff 	.word	0x000993ff

080048a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048da:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	60d3      	str	r3, [r2, #12]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <__NVIC_GetPriorityGrouping+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 0307 	and.w	r3, r3, #7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db0b      	blt.n	8004936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4907      	ldr	r1, [pc, #28]	@ (8004944 <__NVIC_EnableIRQ+0x38>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2001      	movs	r0, #1
 800492e:	fa00 f202 	lsl.w	r2, r0, r2
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e100 	.word	0xe000e100

08004948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db0a      	blt.n	8004972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	490c      	ldr	r1, [pc, #48]	@ (8004994 <__NVIC_SetPriority+0x4c>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	440b      	add	r3, r1
 800496c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004970:	e00a      	b.n	8004988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4908      	ldr	r1, [pc, #32]	@ (8004998 <__NVIC_SetPriority+0x50>)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3b04      	subs	r3, #4
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	440b      	add	r3, r1
 8004986:	761a      	strb	r2, [r3, #24]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000e100 	.word	0xe000e100
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	@ 0x24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0307 	rsb	r3, r3, #7
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf28      	it	cs
 80049ba:	2304      	movcs	r3, #4
 80049bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d902      	bls.n	80049cc <NVIC_EncodePriority+0x30>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3b03      	subs	r3, #3
 80049ca:	e000      	b.n	80049ce <NVIC_EncodePriority+0x32>
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	401a      	ands	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	43d9      	mvns	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	4313      	orrs	r3, r2
         );
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3724      	adds	r7, #36	@ 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a14:	d301      	bcc.n	8004a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00f      	b.n	8004a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <SysTick_Config+0x40>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a22:	210f      	movs	r1, #15
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	f7ff ff8e 	bl	8004948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <SysTick_Config+0x40>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a32:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <SysTick_Config+0x40>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e010 	.word	0xe000e010

08004a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff29 	bl	80048a8 <__NVIC_SetPriorityGrouping>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a70:	f7ff ff3e 	bl	80048f0 <__NVIC_GetPriorityGrouping>
 8004a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f7ff ff8e 	bl	800499c <NVIC_EncodePriority>
 8004a80:	4602      	mov	r2, r0
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a86:	4611      	mov	r1, r2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff5d 	bl	8004948 <__NVIC_SetPriority>
}
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff31 	bl	800490c <__NVIC_EnableIRQ>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ffa2 	bl	8004a04 <SysTick_Config>
 8004ac0:	4603      	mov	r3, r0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e037      	b.n	8004b50 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004af6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9c8 	bl	8004ec8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_DMA_Start_IT+0x20>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e04a      	b.n	8004c0e <HAL_DMA_Start_IT+0xb6>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d13a      	bne.n	8004c00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f95c 	bl	8004e6c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 020e 	orr.w	r2, r2, #14
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e00f      	b.n	8004bee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 020a 	orr.w	r2, r2, #10
 8004bdc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0204 	bic.w	r2, r2, #4
 8004bec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e005      	b.n	8004c0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e02e      	b.n	8004c86 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d008      	beq.n	8004c44 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e020      	b.n	8004c86 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 020e 	bic.w	r2, r2, #14
 8004c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d005      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2204      	movs	r2, #4
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e027      	b.n	8004d04 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020e 	bic.w	r2, r2, #14
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cdc:	2101      	movs	r1, #1
 8004cde:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
    }
  }
  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d024      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x72>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01f      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0204 	bic.w	r2, r2, #4
 8004d5c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	2104      	movs	r1, #4
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06a      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d7e:	e065      	b.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	2202      	movs	r2, #2
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02c      	beq.n	8004dea <HAL_DMA_IRQHandler+0xdc>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d027      	beq.n	8004dea <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 020a 	bic.w	r2, r2, #10
 8004db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	2102      	movs	r1, #2
 8004dca:	fa01 f202 	lsl.w	r2, r1, r2
 8004dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d035      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004de8:	e030      	b.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	2208      	movs	r2, #8
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d028      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020e 	bic.w	r2, r2, #14
 8004e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
    }
  }
}
 8004e4a:	e7ff      	b.n	8004e4c <HAL_DMA_IRQHandler+0x13e>
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d108      	bne.n	8004eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004eaa:	e007      	b.n	8004ebc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x60>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d80f      	bhi.n	8004efc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <DMA_CalcBaseAndBitshift+0x64>)
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4a12      	ldr	r2, [pc, #72]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x68>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f34 <DMA_CalcBaseAndBitshift+0x6c>)
 8004ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004efa:	e00e      	b.n	8004f1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <DMA_CalcBaseAndBitshift+0x70>)
 8004f04:	4413      	add	r3, r2
 8004f06:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x68>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	009a      	lsls	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x74>)
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40020407 	.word	0x40020407
 8004f2c:	bffdfff8 	.word	0xbffdfff8
 8004f30:	cccccccd 	.word	0xcccccccd
 8004f34:	40020000 	.word	0x40020000
 8004f38:	bffdfbf8 	.word	0xbffdfbf8
 8004f3c:	40020400 	.word	0x40020400

08004f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4e:	e154      	b.n	80051fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8146 	beq.w	80051f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d005      	beq.n	8004f80 <HAL_GPIO_Init+0x40>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d130      	bne.n	8004fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0201 	and.w	r2, r3, #1
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d017      	beq.n	800501e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4013      	ands	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d123      	bne.n	8005072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	08da      	lsrs	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3208      	adds	r2, #8
 8005032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	220f      	movs	r2, #15
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43db      	mvns	r3, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3208      	adds	r2, #8
 800506c:	6939      	ldr	r1, [r7, #16]
 800506e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0203 	and.w	r2, r3, #3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80a0 	beq.w	80051f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b4:	4b58      	ldr	r3, [pc, #352]	@ (8005218 <HAL_GPIO_Init+0x2d8>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4a57      	ldr	r2, [pc, #348]	@ (8005218 <HAL_GPIO_Init+0x2d8>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6193      	str	r3, [r2, #24]
 80050c0:	4b55      	ldr	r3, [pc, #340]	@ (8005218 <HAL_GPIO_Init+0x2d8>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050cc:	4a53      	ldr	r2, [pc, #332]	@ (800521c <HAL_GPIO_Init+0x2dc>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	3302      	adds	r3, #2
 80050d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	220f      	movs	r2, #15
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050f6:	d019      	beq.n	800512c <HAL_GPIO_Init+0x1ec>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a49      	ldr	r2, [pc, #292]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_GPIO_Init+0x1e8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a48      	ldr	r2, [pc, #288]	@ (8005224 <HAL_GPIO_Init+0x2e4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00d      	beq.n	8005124 <HAL_GPIO_Init+0x1e4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a47      	ldr	r2, [pc, #284]	@ (8005228 <HAL_GPIO_Init+0x2e8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <HAL_GPIO_Init+0x1e0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a46      	ldr	r2, [pc, #280]	@ (800522c <HAL_GPIO_Init+0x2ec>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_GPIO_Init+0x1dc>
 8005118:	2304      	movs	r3, #4
 800511a:	e008      	b.n	800512e <HAL_GPIO_Init+0x1ee>
 800511c:	2305      	movs	r3, #5
 800511e:	e006      	b.n	800512e <HAL_GPIO_Init+0x1ee>
 8005120:	2303      	movs	r3, #3
 8005122:	e004      	b.n	800512e <HAL_GPIO_Init+0x1ee>
 8005124:	2302      	movs	r3, #2
 8005126:	e002      	b.n	800512e <HAL_GPIO_Init+0x1ee>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <HAL_GPIO_Init+0x1ee>
 800512c:	2300      	movs	r3, #0
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	f002 0203 	and.w	r2, r2, #3
 8005134:	0092      	lsls	r2, r2, #2
 8005136:	4093      	lsls	r3, r2
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800513e:	4937      	ldr	r1, [pc, #220]	@ (800521c <HAL_GPIO_Init+0x2dc>)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	3302      	adds	r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800514c:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	43db      	mvns	r3, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005170:	4a2f      	ldr	r2, [pc, #188]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005176:	4b2e      	ldr	r3, [pc, #184]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	43db      	mvns	r3, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800519a:	4a25      	ldr	r2, [pc, #148]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051a0:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ca:	4b19      	ldr	r3, [pc, #100]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f aea3 	bne.w	8004f50 <HAL_GPIO_Init+0x10>
  }
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40021000 	.word	0x40021000
 800521c:	40010000 	.word	0x40010000
 8005220:	48000400 	.word	0x48000400
 8005224:	48000800 	.word	0x48000800
 8005228:	48000c00 	.word	0x48000c00
 800522c:	48001000 	.word	0x48001000
 8005230:	40010400 	.word	0x40010400

08005234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	e001      	b.n	8005256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
 8005270:	4613      	mov	r3, r2
 8005272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005274:	787b      	ldrb	r3, [r7, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800527a:	887a      	ldrh	r2, [r7, #2]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005280:	e002      	b.n	8005288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052a6:	887a      	ldrh	r2, [r7, #2]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	041a      	lsls	r2, r3, #16
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	43d9      	mvns	r1, r3
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	400b      	ands	r3, r1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	619a      	str	r2, [r3, #24]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052de:	4a05      	ldr	r2, [pc, #20]	@ (80052f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fc fd10 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40010400 	.word	0x40010400

080052f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e08d      	b.n	8005426 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fd f9fc 	bl	800271c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	@ 0x24
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005348:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005358:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	e006      	b.n	8005380 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800537e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d108      	bne.n	800539a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	e007      	b.n	80053aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
 8005440:	4613      	mov	r3, r2
 8005442:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b20      	cmp	r3, #32
 800544e:	f040 80fd 	bne.w	800564c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_I2C_Master_Transmit+0x30>
 800545c:	2302      	movs	r3, #2
 800545e:	e0f6      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005468:	f7fd fd30 	bl	8002ecc <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2319      	movs	r3, #25
 8005474:	2201      	movs	r2, #1
 8005476:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa0a 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0e1      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2221      	movs	r2, #33	@ 0x21
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2210      	movs	r2, #16
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	893a      	ldrh	r2, [r7, #8]
 80054aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2bff      	cmp	r3, #255	@ 0xff
 80054ba:	d906      	bls.n	80054ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	22ff      	movs	r2, #255	@ 0xff
 80054c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80054c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e007      	b.n	80054da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80054d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005516:	b2db      	uxtb	r3, r3
 8005518:	3301      	adds	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	8979      	ldrh	r1, [r7, #10]
 800551e:	4b4e      	ldr	r3, [pc, #312]	@ (8005658 <HAL_I2C_Master_Transmit+0x228>)
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fc05 	bl	8005d34 <I2C_TransferConfig>
 800552a:	e066      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005530:	b2da      	uxtb	r2, r3
 8005532:	8979      	ldrh	r1, [r7, #10]
 8005534:	4b48      	ldr	r3, [pc, #288]	@ (8005658 <HAL_I2C_Master_Transmit+0x228>)
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fbfa 	bl	8005d34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005540:	e05b      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	6a39      	ldr	r1, [r7, #32]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9fd 	bl	8005946 <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07b      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d034      	beq.n	80055fa <HAL_I2C_Master_Transmit+0x1ca>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d130      	bne.n	80055fa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2200      	movs	r2, #0
 80055a0:	2180      	movs	r1, #128	@ 0x80
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f976 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e04d      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2bff      	cmp	r3, #255	@ 0xff
 80055ba:	d90e      	bls.n	80055da <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	22ff      	movs	r2, #255	@ 0xff
 80055c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fbae 	bl	8005d34 <I2C_TransferConfig>
 80055d8:	e00f      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	8979      	ldrh	r1, [r7, #10]
 80055ec:	2300      	movs	r3, #0
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fb9d 	bl	8005d34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d19e      	bne.n	8005542 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	6a39      	ldr	r1, [r7, #32]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9e3 	bl	80059d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e01a      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2220      	movs	r2, #32
 800561e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <HAL_I2C_Master_Transmit+0x22c>)
 800562c:	400b      	ands	r3, r1
 800562e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e000      	b.n	800564e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
  }
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	80002000 	.word	0x80002000
 800565c:	fe00e800 	.word	0xfe00e800

08005660 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	461a      	mov	r2, r3
 800566c:	460b      	mov	r3, r1
 800566e:	817b      	strh	r3, [r7, #10]
 8005670:	4613      	mov	r3, r2
 8005672:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b20      	cmp	r3, #32
 800567e:	f040 80db 	bne.w	8005838 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_I2C_Master_Receive+0x30>
 800568c:	2302      	movs	r3, #2
 800568e:	e0d4      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005698:	f7fd fc18 	bl	8002ecc <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2319      	movs	r3, #25
 80056a4:	2201      	movs	r2, #1
 80056a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f8f2 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0bf      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2222      	movs	r2, #34	@ 0x22
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2210      	movs	r2, #16
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	893a      	ldrh	r2, [r7, #8]
 80056da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2bff      	cmp	r3, #255	@ 0xff
 80056ea:	d90e      	bls.n	800570a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	8979      	ldrh	r1, [r7, #10]
 80056fa:	4b52      	ldr	r3, [pc, #328]	@ (8005844 <HAL_I2C_Master_Receive+0x1e4>)
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fb16 	bl	8005d34 <I2C_TransferConfig>
 8005708:	e06d      	b.n	80057e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	8979      	ldrh	r1, [r7, #10]
 800571c:	4b49      	ldr	r3, [pc, #292]	@ (8005844 <HAL_I2C_Master_Receive+0x1e4>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fb05 	bl	8005d34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800572a:	e05c      	b.n	80057e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	6a39      	ldr	r1, [r7, #32]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f993 	bl	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e07c      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d034      	beq.n	80057e6 <HAL_I2C_Master_Receive+0x186>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	d130      	bne.n	80057e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2200      	movs	r2, #0
 800578c:	2180      	movs	r1, #128	@ 0x80
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f880 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e04d      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2bff      	cmp	r3, #255	@ 0xff
 80057a6:	d90e      	bls.n	80057c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	8979      	ldrh	r1, [r7, #10]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fab8 	bl	8005d34 <I2C_TransferConfig>
 80057c4:	e00f      	b.n	80057e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	8979      	ldrh	r1, [r7, #10]
 80057d8:	2300      	movs	r3, #0
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 faa7 	bl	8005d34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d19d      	bne.n	800572c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	6a39      	ldr	r1, [r7, #32]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f8ed 	bl	80059d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e01a      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2220      	movs	r2, #32
 800580a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <HAL_I2C_Master_Receive+0x1e8>)
 8005818:	400b      	ands	r3, r1
 800581a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	80002400 	.word	0x80002400
 8005848:	fe00e800 	.word	0xfe00e800

0800584c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	d103      	bne.n	800586a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d007      	beq.n	8005888 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	619a      	str	r2, [r3, #24]
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a4:	e03b      	b.n	800591e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f962 	bl	8005b74 <I2C_IsErrorOccurred>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d02d      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fd fb03 	bl	8002ecc <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d122      	bne.n	800591e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d113      	bne.n	800591e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e00f      	b.n	800593e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	429a      	cmp	r2, r3
 800593a:	d0b4      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005952:	e033      	b.n	80059bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f90b 	bl	8005b74 <I2C_IsErrorOccurred>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e031      	b.n	80059cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d025      	beq.n	80059bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fd faac 	bl	8002ecc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d11a      	bne.n	80059bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d013      	beq.n	80059bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d1c4      	bne.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059e0:	e02f      	b.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f8c4 	bl	8005b74 <I2C_IsErrorOccurred>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e02d      	b.n	8005a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fd fa69 	bl	8002ecc <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11a      	bne.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d013      	beq.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e007      	b.n	8005a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d1c8      	bne.n	80059e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005a6c:	e071      	b.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f87e 	bl	8005b74 <I2C_IsErrorOccurred>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d13b      	bne.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d138      	bne.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d105      	bne.n	8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d121      	bne.n	8005b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b24      	ldr	r3, [pc, #144]	@ (8005b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
 8005b00:	e002      	b.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005b08:	f7fd f9e0 	bl	8002ecc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d119      	bne.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d00f      	beq.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d002      	beq.n	8005b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d083      	beq.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	fe00e800 	.word	0xfe00e800

08005b74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	@ 0x28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d068      	beq.n	8005c72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ba8:	e049      	b.n	8005c3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d045      	beq.n	8005c3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fd f98b 	bl	8002ecc <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_IsErrorOccurred+0x54>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d13a      	bne.n	8005c3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bea:	d121      	bne.n	8005c30 <I2C_IsErrorOccurred+0xbc>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bf2:	d01d      	beq.n	8005c30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d01a      	beq.n	8005c30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c0a:	f7fd f95f 	bl	8002ecc <HAL_GetTick>
 8005c0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c10:	e00e      	b.n	8005c30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c12:	f7fd f95b 	bl	8002ecc <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b19      	cmp	r3, #25
 8005c1e:	d907      	bls.n	8005c30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	f043 0320 	orr.w	r3, r3, #32
 8005c26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c2e:	e006      	b.n	8005c3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d1e9      	bne.n	8005c12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d003      	beq.n	8005c54 <I2C_IsErrorOccurred+0xe0>
 8005c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0aa      	beq.n	8005baa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2220      	movs	r2, #32
 8005c62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01c      	beq.n	8005d22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fdaf 	bl	800584c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <I2C_IsErrorOccurred+0x1bc>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	fe00e800 	.word	0xfe00e800

08005d34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	817b      	strh	r3, [r7, #10]
 8005d42:	4613      	mov	r3, r2
 8005d44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d4c:	7a7b      	ldrb	r3, [r7, #9]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	0d5b      	lsrs	r3, r3, #21
 8005d6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005d72:	4b08      	ldr	r3, [pc, #32]	@ (8005d94 <I2C_TransferConfig+0x60>)
 8005d74:	430b      	orrs	r3, r1
 8005d76:	43db      	mvns	r3, r3
 8005d78:	ea02 0103 	and.w	r1, r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	03ff63ff 	.word	0x03ff63ff

08005d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d138      	bne.n	8005e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e032      	b.n	8005e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	@ 0x24
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e000      	b.n	8005e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e20:	2302      	movs	r3, #2
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d139      	bne.n	8005eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e033      	b.n	8005eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2224      	movs	r2, #36	@ 0x24
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ed4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ed8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f001 b823 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 817d 	beq.w	80061fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f04:	4bbc      	ldr	r3, [pc, #752]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d00c      	beq.n	8005f2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f10:	4bb9      	ldr	r3, [pc, #740]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d15c      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x10e>
 8005f1c:	4bb6      	ldr	r3, [pc, #728]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f28:	d155      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x10e>
 8005f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005f36:	fa93 f3a3 	rbit	r3, r3
 8005f3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f42:	fab3 f383 	clz	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d102      	bne.n	8005f5c <HAL_RCC_OscConfig+0x94>
 8005f56:	4ba8      	ldr	r3, [pc, #672]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	e015      	b.n	8005f88 <HAL_RCC_OscConfig+0xc0>
 8005f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005f68:	fa93 f3a3 	rbit	r3, r3
 8005f6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005f78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005f7c:	fa93 f3a3 	rbit	r3, r3
 8005f80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005f84:	4b9c      	ldr	r3, [pc, #624]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005f90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005f94:	fa92 f2a2 	rbit	r2, r2
 8005f98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005f9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005fa0:	fab2 f282 	clz	r2, r2
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	f042 0220 	orr.w	r2, r2, #32
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	f002 021f 	and.w	r2, r2, #31
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 811f 	beq.w	80061fc <HAL_RCC_OscConfig+0x334>
 8005fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 8116 	bne.w	80061fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f000 bfaf 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe6:	d106      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x12e>
 8005fe8:	4b83      	ldr	r3, [pc, #524]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a82      	ldr	r2, [pc, #520]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	e036      	b.n	8006064 <HAL_RCC_OscConfig+0x19c>
 8005ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0x158>
 8006006:	4b7c      	ldr	r3, [pc, #496]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a7b      	ldr	r2, [pc, #492]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b79      	ldr	r3, [pc, #484]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a78      	ldr	r2, [pc, #480]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e021      	b.n	8006064 <HAL_RCC_OscConfig+0x19c>
 8006020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x184>
 8006032:	4b71      	ldr	r3, [pc, #452]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a70      	ldr	r2, [pc, #448]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	4b6e      	ldr	r3, [pc, #440]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a6d      	ldr	r2, [pc, #436]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e00b      	b.n	8006064 <HAL_RCC_OscConfig+0x19c>
 800604c:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a69      	ldr	r2, [pc, #420]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	4b67      	ldr	r3, [pc, #412]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a66      	ldr	r2, [pc, #408]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800605e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006062:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006064:	4b64      	ldr	r3, [pc, #400]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	f023 020f 	bic.w	r2, r3, #15
 800606c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006070:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	495f      	ldr	r1, [pc, #380]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800607a:	4313      	orrs	r3, r2
 800607c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006082:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d059      	beq.n	8006142 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fc ff1d 	bl	8002ecc <HAL_GetTick>
 8006092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006098:	f7fc ff18 	bl	8002ecc <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b64      	cmp	r3, #100	@ 0x64
 80060a6:	d902      	bls.n	80060ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	f000 bf43 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 80060ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060b2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80060ba:	fa93 f3a3 	rbit	r3, r3
 80060be:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80060c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c6:	fab3 f383 	clz	r3, r3
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_RCC_OscConfig+0x218>
 80060da:	4b47      	ldr	r3, [pc, #284]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	e015      	b.n	800610c <HAL_RCC_OscConfig+0x244>
 80060e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060e4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80060ec:	fa93 f3a3 	rbit	r3, r3
 80060f0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80060f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060f8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80060fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8006108:	4b3b      	ldr	r3, [pc, #236]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006110:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006114:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006118:	fa92 f2a2 	rbit	r2, r2
 800611c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006120:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006124:	fab2 f282 	clz	r2, r2
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	f042 0220 	orr.w	r2, r2, #32
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	f002 021f 	and.w	r2, r2, #31
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f202 	lsl.w	r2, r1, r2
 800613a:	4013      	ands	r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ab      	beq.n	8006098 <HAL_RCC_OscConfig+0x1d0>
 8006140:	e05d      	b.n	80061fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fc fec3 	bl	8002ecc <HAL_GetTick>
 8006146:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614a:	e00a      	b.n	8006162 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800614c:	f7fc febe 	bl	8002ecc <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b64      	cmp	r3, #100	@ 0x64
 800615a:	d902      	bls.n	8006162 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	f000 bee9 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006162:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006166:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800616e:	fa93 f3a3 	rbit	r3, r3
 8006172:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8006176:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	fab3 f383 	clz	r3, r3
 800617e:	b2db      	uxtb	r3, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d102      	bne.n	8006194 <HAL_RCC_OscConfig+0x2cc>
 800618e:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	e015      	b.n	80061c0 <HAL_RCC_OscConfig+0x2f8>
 8006194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006198:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80061a0:	fa93 f3a3 	rbit	r3, r3
 80061a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80061a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061ac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80061b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80061b4:	fa93 f3a3 	rbit	r3, r3
 80061b8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80061bc:	4b0e      	ldr	r3, [pc, #56]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061c4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80061c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80061cc:	fa92 f2a2 	rbit	r2, r2
 80061d0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80061d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80061d8:	fab2 f282 	clz	r2, r2
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	f042 0220 	orr.w	r2, r2, #32
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	f002 021f 	and.w	r2, r2, #31
 80061e8:	2101      	movs	r1, #1
 80061ea:	fa01 f202 	lsl.w	r2, r1, r2
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ab      	bne.n	800614c <HAL_RCC_OscConfig+0x284>
 80061f4:	e003      	b.n	80061fe <HAL_RCC_OscConfig+0x336>
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 817d 	beq.w	800650e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006214:	4ba6      	ldr	r3, [pc, #664]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006220:	4ba3      	ldr	r3, [pc, #652]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b08      	cmp	r3, #8
 800622a:	d172      	bne.n	8006312 <HAL_RCC_OscConfig+0x44a>
 800622c:	4ba0      	ldr	r3, [pc, #640]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d16c      	bne.n	8006312 <HAL_RCC_OscConfig+0x44a>
 8006238:	2302      	movs	r3, #2
 800623a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800624a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624e:	fab3 f383 	clz	r3, r3
 8006252:	b2db      	uxtb	r3, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d102      	bne.n	8006268 <HAL_RCC_OscConfig+0x3a0>
 8006262:	4b93      	ldr	r3, [pc, #588]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	e013      	b.n	8006290 <HAL_RCC_OscConfig+0x3c8>
 8006268:	2302      	movs	r3, #2
 800626a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006272:	fa93 f3a3 	rbit	r3, r3
 8006276:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800627a:	2302      	movs	r3, #2
 800627c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006280:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006284:	fa93 f3a3 	rbit	r3, r3
 8006288:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800628c:	4b88      	ldr	r3, [pc, #544]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	2202      	movs	r2, #2
 8006292:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8006296:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800629a:	fa92 f2a2 	rbit	r2, r2
 800629e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80062a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80062a6:	fab2 f282 	clz	r2, r2
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	f042 0220 	orr.w	r2, r2, #32
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	f002 021f 	and.w	r2, r2, #31
 80062b6:	2101      	movs	r1, #1
 80062b8:	fa01 f202 	lsl.w	r2, r1, r2
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCC_OscConfig+0x410>
 80062c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d002      	beq.n	80062d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f000 be2e 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d8:	4b75      	ldr	r3, [pc, #468]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	21f8      	movs	r1, #248	@ 0xf8
 80062ee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80062f6:	fa91 f1a1 	rbit	r1, r1
 80062fa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80062fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006302:	fab1 f181 	clz	r1, r1
 8006306:	b2c9      	uxtb	r1, r1
 8006308:	408b      	lsls	r3, r1
 800630a:	4969      	ldr	r1, [pc, #420]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006310:	e0fd      	b.n	800650e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006316:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 8088 	beq.w	8006434 <HAL_RCC_OscConfig+0x56c>
 8006324:	2301      	movs	r3, #1
 8006326:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006336:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006344:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	461a      	mov	r2, r3
 800634c:	2301      	movs	r3, #1
 800634e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006350:	f7fc fdbc 	bl	8002ecc <HAL_GetTick>
 8006354:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	e00a      	b.n	8006370 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635a:	f7fc fdb7 	bl	8002ecc <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d902      	bls.n	8006370 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	f000 bde2 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006370:	2302      	movs	r3, #2
 8006372:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006382:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	fab3 f383 	clz	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4d8>
 800639a:	4b45      	ldr	r3, [pc, #276]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	e013      	b.n	80063c8 <HAL_RCC_OscConfig+0x500>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80063aa:	fa93 f3a3 	rbit	r3, r3
 80063ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80063b2:	2302      	movs	r3, #2
 80063b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80063b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80063bc:	fa93 f3a3 	rbit	r3, r3
 80063c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80063c4:	4b3a      	ldr	r3, [pc, #232]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	2202      	movs	r2, #2
 80063ca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80063ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80063d2:	fa92 f2a2 	rbit	r2, r2
 80063d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80063da:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80063de:	fab2 f282 	clz	r2, r2
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	f042 0220 	orr.w	r2, r2, #32
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	f002 021f 	and.w	r2, r2, #31
 80063ee:	2101      	movs	r1, #1
 80063f0:	fa01 f202 	lsl.w	r2, r1, r2
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0af      	beq.n	800635a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	4b2d      	ldr	r3, [pc, #180]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	21f8      	movs	r1, #248	@ 0xf8
 8006410:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006414:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006418:	fa91 f1a1 	rbit	r1, r1
 800641c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006420:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006424:	fab1 f181 	clz	r1, r1
 8006428:	b2c9      	uxtb	r1, r1
 800642a:	408b      	lsls	r3, r1
 800642c:	4920      	ldr	r1, [pc, #128]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 800642e:	4313      	orrs	r3, r2
 8006430:	600b      	str	r3, [r1, #0]
 8006432:	e06c      	b.n	800650e <HAL_RCC_OscConfig+0x646>
 8006434:	2301      	movs	r3, #1
 8006436:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800643e:	fa93 f3a3 	rbit	r3, r3
 8006442:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006446:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006454:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	461a      	mov	r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7fc fd34 	bl	8002ecc <HAL_GetTick>
 8006464:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006468:	e00a      	b.n	8006480 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800646a:	f7fc fd2f 	bl	8002ecc <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d902      	bls.n	8006480 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	f000 bd5a 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006480:	2302      	movs	r3, #2
 8006482:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d104      	bne.n	80064b4 <HAL_RCC_OscConfig+0x5ec>
 80064aa:	4b01      	ldr	r3, [pc, #4]	@ (80064b0 <HAL_RCC_OscConfig+0x5e8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	e015      	b.n	80064dc <HAL_RCC_OscConfig+0x614>
 80064b0:	40021000 	.word	0x40021000
 80064b4:	2302      	movs	r3, #2
 80064b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064be:	fa93 f3a3 	rbit	r3, r3
 80064c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80064c6:	2302      	movs	r3, #2
 80064c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80064cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064d0:	fa93 f3a3 	rbit	r3, r3
 80064d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80064d8:	4bc8      	ldr	r3, [pc, #800]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	2202      	movs	r2, #2
 80064de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80064e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80064e6:	fa92 f2a2 	rbit	r2, r2
 80064ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80064ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80064f2:	fab2 f282 	clz	r2, r2
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	f042 0220 	orr.w	r2, r2, #32
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	f002 021f 	and.w	r2, r2, #31
 8006502:	2101      	movs	r1, #1
 8006504:	fa01 f202 	lsl.w	r2, r1, r2
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1ad      	bne.n	800646a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006512:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8110 	beq.w	8006744 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d079      	beq.n	8006628 <HAL_RCC_OscConfig+0x760>
 8006534:	2301      	movs	r3, #1
 8006536:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	4bab      	ldr	r3, [pc, #684]	@ (8006800 <HAL_RCC_OscConfig+0x938>)
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	461a      	mov	r2, r3
 800655a:	2301      	movs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655e:	f7fc fcb5 	bl	8002ecc <HAL_GetTick>
 8006562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006568:	f7fc fcb0 	bl	8002ecc <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d902      	bls.n	800657e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	f000 bcdb 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 800657e:	2302      	movs	r3, #2
 8006580:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006584:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006588:	fa93 f3a3 	rbit	r3, r3
 800658c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006594:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006598:	2202      	movs	r2, #2
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	fa93 f2a3 	rbit	r2, r3
 80065aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	2202      	movs	r2, #2
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	fa93 f2a3 	rbit	r2, r3
 80065ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d8:	4b88      	ldr	r3, [pc, #544]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 80065da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80065e4:	2102      	movs	r1, #2
 80065e6:	6019      	str	r1, [r3, #0]
 80065e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	fa93 f1a3 	rbit	r1, r3
 80065f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065fe:	6019      	str	r1, [r3, #0]
  return result;
 8006600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006604:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	fab3 f383 	clz	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	2101      	movs	r1, #1
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	4013      	ands	r3, r2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0a0      	beq.n	8006568 <HAL_RCC_OscConfig+0x6a0>
 8006626:	e08d      	b.n	8006744 <HAL_RCC_OscConfig+0x87c>
 8006628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800662c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006638:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	fa93 f2a3 	rbit	r2, r3
 8006642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006646:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800664a:	601a      	str	r2, [r3, #0]
  return result;
 800664c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006650:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006654:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006656:	fab3 f383 	clz	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	4b68      	ldr	r3, [pc, #416]	@ (8006800 <HAL_RCC_OscConfig+0x938>)
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666a:	f7fc fc2f 	bl	8002ecc <HAL_GetTick>
 800666e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006672:	e00a      	b.n	800668a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006674:	f7fc fc2a 	bl	8002ecc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d902      	bls.n	800668a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	f000 bc55 	b.w	8006f34 <HAL_RCC_OscConfig+0x106c>
 800668a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800668e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006692:	2202      	movs	r2, #2
 8006694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800669a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	fa93 f2a3 	rbit	r2, r3
 80066a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80066b6:	2202      	movs	r2, #2
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	fa93 f2a3 	rbit	r2, r3
 80066c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066da:	2202      	movs	r2, #2
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	fa93 f2a3 	rbit	r2, r3
 80066ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80066f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f6:	4b41      	ldr	r3, [pc, #260]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 80066f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006702:	2102      	movs	r1, #2
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800670a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	fa93 f1a3 	rbit	r1, r3
 8006714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006718:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800671c:	6019      	str	r1, [r3, #0]
  return result;
 800671e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006722:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	fab3 f383 	clz	r3, r3
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2101      	movs	r1, #1
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d197      	bne.n	8006674 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 81a1 	beq.w	8006a9c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675a:	2300      	movs	r3, #0
 800675c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006760:	4b26      	ldr	r3, [pc, #152]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d116      	bne.n	800679a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676c:	4b23      	ldr	r3, [pc, #140]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	4a22      	ldr	r2, [pc, #136]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006776:	61d3      	str	r3, [r2, #28]
 8006778:	4b20      	ldr	r3, [pc, #128]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006784:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800678e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006792:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679a:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <HAL_RCC_OscConfig+0x93c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11a      	bne.n	80067dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a6:	4b17      	ldr	r3, [pc, #92]	@ (8006804 <HAL_RCC_OscConfig+0x93c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a16      	ldr	r2, [pc, #88]	@ (8006804 <HAL_RCC_OscConfig+0x93c>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b2:	f7fc fb8b 	bl	8002ecc <HAL_GetTick>
 80067b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ba:	e009      	b.n	80067d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067bc:	f7fc fb86 	bl	8002ecc <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b64      	cmp	r3, #100	@ 0x64
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e3b1      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <HAL_RCC_OscConfig+0x93c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0ef      	beq.n	80067bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10d      	bne.n	8006808 <HAL_RCC_OscConfig+0x940>
 80067ec:	4b03      	ldr	r3, [pc, #12]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4a02      	ldr	r2, [pc, #8]	@ (80067fc <HAL_RCC_OscConfig+0x934>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6213      	str	r3, [r2, #32]
 80067f8:	e03c      	b.n	8006874 <HAL_RCC_OscConfig+0x9ac>
 80067fa:	bf00      	nop
 80067fc:	40021000 	.word	0x40021000
 8006800:	10908120 	.word	0x10908120
 8006804:	40007000 	.word	0x40007000
 8006808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10c      	bne.n	8006832 <HAL_RCC_OscConfig+0x96a>
 8006818:	4bc1      	ldr	r3, [pc, #772]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	4ac0      	ldr	r2, [pc, #768]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	6213      	str	r3, [r2, #32]
 8006824:	4bbe      	ldr	r3, [pc, #760]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4abd      	ldr	r2, [pc, #756]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800682a:	f023 0304 	bic.w	r3, r3, #4
 800682e:	6213      	str	r3, [r2, #32]
 8006830:	e020      	b.n	8006874 <HAL_RCC_OscConfig+0x9ac>
 8006832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b05      	cmp	r3, #5
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0x994>
 8006842:	4bb7      	ldr	r3, [pc, #732]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	4ab6      	ldr	r2, [pc, #728]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	6213      	str	r3, [r2, #32]
 800684e:	4bb4      	ldr	r3, [pc, #720]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	4ab3      	ldr	r2, [pc, #716]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	6213      	str	r3, [r2, #32]
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0x9ac>
 800685c:	4bb0      	ldr	r3, [pc, #704]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4aaf      	ldr	r2, [pc, #700]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	6213      	str	r3, [r2, #32]
 8006868:	4bad      	ldr	r3, [pc, #692]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	4aac      	ldr	r2, [pc, #688]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800686e:	f023 0304 	bic.w	r3, r3, #4
 8006872:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8081 	beq.w	8006988 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006886:	f7fc fb21 	bl	8002ecc <HAL_GetTick>
 800688a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006890:	f7fc fb1c 	bl	8002ecc <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e345      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
 80068a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068b0:	2202      	movs	r2, #2
 80068b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	fa93 f2a3 	rbit	r2, r3
 80068c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80068d4:	2202      	movs	r2, #2
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	fa93 f2a3 	rbit	r2, r3
 80068e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80068ee:	601a      	str	r2, [r3, #0]
  return result;
 80068f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80068f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d102      	bne.n	8006914 <HAL_RCC_OscConfig+0xa4c>
 800690e:	4b84      	ldr	r3, [pc, #528]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	e013      	b.n	800693c <HAL_RCC_OscConfig+0xa74>
 8006914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006918:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800691c:	2202      	movs	r2, #2
 800691e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006924:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	fa93 f2a3 	rbit	r2, r3
 800692e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006932:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	4b79      	ldr	r3, [pc, #484]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006940:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006944:	2102      	movs	r1, #2
 8006946:	6011      	str	r1, [r2, #0]
 8006948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800694c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	fa92 f1a2 	rbit	r1, r2
 8006956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800695a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800695e:	6011      	str	r1, [r2, #0]
  return result;
 8006960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006964:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	fab2 f282 	clz	r2, r2
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	f002 021f 	and.w	r2, r2, #31
 800697a:	2101      	movs	r1, #1
 800697c:	fa01 f202 	lsl.w	r2, r1, r2
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d084      	beq.n	8006890 <HAL_RCC_OscConfig+0x9c8>
 8006986:	e07f      	b.n	8006a88 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006988:	f7fc faa0 	bl	8002ecc <HAL_GetTick>
 800698c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006990:	e00b      	b.n	80069aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fc fa9b 	bl	8002ecc <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e2c4      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
 80069aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80069b2:	2202      	movs	r2, #2
 80069b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fa93 f2a3 	rbit	r2, r3
 80069c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80069d6:	2202      	movs	r2, #2
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	fa93 f2a3 	rbit	r2, r3
 80069e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80069f0:	601a      	str	r2, [r3, #0]
  return result;
 80069f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80069fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069fc:	fab3 f383 	clz	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f043 0302 	orr.w	r3, r3, #2
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCC_OscConfig+0xb4e>
 8006a10:	4b43      	ldr	r3, [pc, #268]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	e013      	b.n	8006a3e <HAL_RCC_OscConfig+0xb76>
 8006a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006a1e:	2202      	movs	r2, #2
 8006a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a26:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	fa93 f2a3 	rbit	r2, r3
 8006a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a34:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a42:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006a46:	2102      	movs	r1, #2
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a4e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	fa92 f1a2 	rbit	r1, r2
 8006a58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a5c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006a60:	6011      	str	r1, [r2, #0]
  return result;
 8006a62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a66:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006a6a:	6812      	ldr	r2, [r2, #0]
 8006a6c:	fab2 f282 	clz	r2, r2
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	f002 021f 	and.w	r2, r2, #31
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d184      	bne.n	8006992 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a88:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d105      	bne.n	8006a9c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a90:	4b23      	ldr	r3, [pc, #140]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	4a22      	ldr	r2, [pc, #136]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8242 	beq.w	8006f32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aae:	4b1c      	ldr	r3, [pc, #112]	@ (8006b20 <HAL_RCC_OscConfig+0xc58>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	f000 8213 	beq.w	8006ee2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	f040 8162 	bne.w	8006d92 <HAL_RCC_OscConfig+0xeca>
 8006ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ad2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006ad6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	fa93 f2a3 	rbit	r2, r3
 8006aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006af2:	601a      	str	r2, [r3, #0]
  return result;
 8006af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006af8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006afc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	fab3 f383 	clz	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fc f9da 	bl	8002ecc <HAL_GetTick>
 8006b18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b1c:	e00c      	b.n	8006b38 <HAL_RCC_OscConfig+0xc70>
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b24:	f7fc f9d2 	bl	8002ecc <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e1fd      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	fa93 f2a3 	rbit	r2, r3
 8006b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006b5c:	601a      	str	r2, [r3, #0]
  return result;
 8006b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006b66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCC_OscConfig+0xcba>
 8006b7c:	4bb0      	ldr	r3, [pc, #704]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	e027      	b.n	8006bd2 <HAL_RCC_OscConfig+0xd0a>
 8006b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006b8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	fa93 f2a3 	rbit	r2, r3
 8006b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ba2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	fa93 f2a3 	rbit	r2, r3
 8006bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bc8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	4b9c      	ldr	r3, [pc, #624]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bd6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006bda:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006bde:	6011      	str	r1, [r2, #0]
 8006be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006be4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	fa92 f1a2 	rbit	r1, r2
 8006bee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bf2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006bf6:	6011      	str	r1, [r2, #0]
  return result;
 8006bf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bfc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	fab2 f282 	clz	r2, r2
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	f042 0220 	orr.w	r2, r2, #32
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	f002 021f 	and.w	r2, r2, #31
 8006c12:	2101      	movs	r1, #1
 8006c14:	fa01 f202 	lsl.w	r2, r1, r2
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d182      	bne.n	8006b24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c1e:	4b88      	ldr	r3, [pc, #544]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	497f      	ldr	r1, [pc, #508]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	604b      	str	r3, [r1, #4]
 8006c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c4a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006c4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c58:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	fa93 f2a3 	rbit	r2, r3
 8006c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006c6a:	601a      	str	r2, [r3, #0]
  return result;
 8006c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c70:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006c74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c76:	fab3 f383 	clz	r3, r3
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006c80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	461a      	mov	r2, r3
 8006c88:	2301      	movs	r3, #1
 8006c8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8c:	f7fc f91e 	bl	8002ecc <HAL_GetTick>
 8006c90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c94:	e009      	b.n	8006caa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c96:	f7fc f919 	bl	8002ecc <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e144      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cbc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	fa93 f2a3 	rbit	r2, r3
 8006cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006cce:	601a      	str	r2, [r3, #0]
  return result;
 8006cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cd4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006cd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cda:	fab3 f383 	clz	r3, r3
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d102      	bne.n	8006cf4 <HAL_RCC_OscConfig+0xe2c>
 8006cee:	4b54      	ldr	r3, [pc, #336]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	e027      	b.n	8006d44 <HAL_RCC_OscConfig+0xe7c>
 8006cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cf8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	fa93 f2a3 	rbit	r2, r3
 8006d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	fa93 f2a3 	rbit	r2, r3
 8006d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	4b3f      	ldr	r3, [pc, #252]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006d4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	fa92 f1a2 	rbit	r1, r2
 8006d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006d68:	6011      	str	r1, [r2, #0]
  return result;
 8006d6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	fab2 f282 	clz	r2, r2
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	f042 0220 	orr.w	r2, r2, #32
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	f002 021f 	and.w	r2, r2, #31
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f202 	lsl.w	r2, r1, r2
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d082      	beq.n	8006c96 <HAL_RCC_OscConfig+0xdce>
 8006d90:	e0cf      	b.n	8006f32 <HAL_RCC_OscConfig+0x106a>
 8006d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006d9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006da4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	fa93 f2a3 	rbit	r2, r3
 8006dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006db2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006db6:	601a      	str	r2, [r3, #0]
  return result;
 8006db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dbc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006dc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	fab3 f383 	clz	r3, r3
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006dcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd8:	f7fc f878 	bl	8002ecc <HAL_GetTick>
 8006ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006de0:	e009      	b.n	8006df6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de2:	f7fc f873 	bl	8002ecc <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e09e      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
 8006df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dfa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006dfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	fa93 f2a3 	rbit	r2, r3
 8006e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006e1a:	601a      	str	r2, [r3, #0]
  return result;
 8006e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006e24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e26:	fab3 f383 	clz	r3, r3
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d104      	bne.n	8006e44 <HAL_RCC_OscConfig+0xf7c>
 8006e3a:	4b01      	ldr	r3, [pc, #4]	@ (8006e40 <HAL_RCC_OscConfig+0xf78>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	e029      	b.n	8006e94 <HAL_RCC_OscConfig+0xfcc>
 8006e40:	40021000 	.word	0x40021000
 8006e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006e4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	fa93 f2a3 	rbit	r2, r3
 8006e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006e72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	fa93 f2a3 	rbit	r2, r3
 8006e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <HAL_RCC_OscConfig+0x1078>)
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006e98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006e9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006ea0:	6011      	str	r1, [r2, #0]
 8006ea2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ea6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	fa92 f1a2 	rbit	r1, r2
 8006eb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006eb4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006eb8:	6011      	str	r1, [r2, #0]
  return result;
 8006eba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ebe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	fab2 f282 	clz	r2, r2
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	f042 0220 	orr.w	r2, r2, #32
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	f002 021f 	and.w	r2, r2, #31
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d180      	bne.n	8006de2 <HAL_RCC_OscConfig+0xf1a>
 8006ee0:	e027      	b.n	8006f32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e01e      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ef6:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <HAL_RCC_OscConfig+0x1078>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006efe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006f02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d10b      	bne.n	8006f2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006f16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006f1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000

08006f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b09e      	sub	sp, #120	@ 0x78
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e162      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b90      	ldr	r3, [pc, #576]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d910      	bls.n	8006f8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 0207 	bic.w	r2, r3, #7
 8006f72:	498b      	ldr	r1, [pc, #556]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b89      	ldr	r3, [pc, #548]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e14a      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f98:	4b82      	ldr	r3, [pc, #520]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	497f      	ldr	r1, [pc, #508]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80dc 	beq.w	8007170 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d13c      	bne.n	800703a <HAL_RCC_ClockConfig+0xf6>
 8006fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fc8:	fa93 f3a3 	rbit	r3, r3
 8006fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fd0:	fab3 f383 	clz	r3, r3
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <HAL_RCC_ClockConfig+0xa6>
 8006fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	e00f      	b.n	800700a <HAL_RCC_ClockConfig+0xc6>
 8006fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ff2:	fa93 f3a3 	rbit	r3, r3
 8006ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007000:	fa93 f3a3 	rbit	r3, r3
 8007004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007006:	4b67      	ldr	r3, [pc, #412]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800700e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007012:	fa92 f2a2 	rbit	r2, r2
 8007016:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800701a:	fab2 f282 	clz	r2, r2
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	f042 0220 	orr.w	r2, r2, #32
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	f002 021f 	and.w	r2, r2, #31
 800702a:	2101      	movs	r1, #1
 800702c:	fa01 f202 	lsl.w	r2, r1, r2
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d17b      	bne.n	800712e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0f3      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d13c      	bne.n	80070bc <HAL_RCC_ClockConfig+0x178>
 8007042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007046:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800704a:	fa93 f3a3 	rbit	r3, r3
 800704e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007052:	fab3 f383 	clz	r3, r3
 8007056:	b2db      	uxtb	r3, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	d102      	bne.n	800706c <HAL_RCC_ClockConfig+0x128>
 8007066:	4b4f      	ldr	r3, [pc, #316]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	e00f      	b.n	800708c <HAL_RCC_ClockConfig+0x148>
 800706c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007070:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007074:	fa93 f3a3 	rbit	r3, r3
 8007078:	647b      	str	r3, [r7, #68]	@ 0x44
 800707a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800707e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007088:	4b46      	ldr	r3, [pc, #280]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007090:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007092:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007094:	fa92 f2a2 	rbit	r2, r2
 8007098:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800709a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800709c:	fab2 f282 	clz	r2, r2
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	f042 0220 	orr.w	r2, r2, #32
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	f002 021f 	and.w	r2, r2, #31
 80070ac:	2101      	movs	r1, #1
 80070ae:	fa01 f202 	lsl.w	r2, r1, r2
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d13a      	bne.n	800712e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0b2      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
 80070bc:	2302      	movs	r3, #2
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	fa93 f3a3 	rbit	r3, r3
 80070c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ca:	fab3 f383 	clz	r3, r3
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d102      	bne.n	80070e4 <HAL_RCC_ClockConfig+0x1a0>
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	e00d      	b.n	8007100 <HAL_RCC_ClockConfig+0x1bc>
 80070e4:	2302      	movs	r3, #2
 80070e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	fa93 f3a3 	rbit	r3, r3
 80070ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f0:	2302      	movs	r3, #2
 80070f2:	623b      	str	r3, [r7, #32]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	fa93 f3a3 	rbit	r3, r3
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	4b29      	ldr	r3, [pc, #164]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	2202      	movs	r2, #2
 8007102:	61ba      	str	r2, [r7, #24]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	fa92 f2a2 	rbit	r2, r2
 800710a:	617a      	str	r2, [r7, #20]
  return result;
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	fab2 f282 	clz	r2, r2
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	f042 0220 	orr.w	r2, r2, #32
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	f002 021f 	and.w	r2, r2, #31
 800711e:	2101      	movs	r1, #1
 8007120:	fa01 f202 	lsl.w	r2, r1, r2
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e079      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800712e:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f023 0203 	bic.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	491a      	ldr	r1, [pc, #104]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 800713c:	4313      	orrs	r3, r2
 800713e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007140:	f7fb fec4 	bl	8002ecc <HAL_GetTick>
 8007144:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	e00a      	b.n	800715e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007148:	f7fb fec0 	bl	8002ecc <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e061      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715e:	4b11      	ldr	r3, [pc, #68]	@ (80071a4 <HAL_RCC_ClockConfig+0x260>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f003 020c 	and.w	r2, r3, #12
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	429a      	cmp	r2, r3
 800716e:	d1eb      	bne.n	8007148 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d214      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b08      	ldr	r3, [pc, #32]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 0207 	bic.w	r2, r3, #7
 8007186:	4906      	ldr	r1, [pc, #24]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800718e:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <HAL_RCC_ClockConfig+0x25c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e040      	b.n	8007222 <HAL_RCC_ClockConfig+0x2de>
 80071a0:	40022000 	.word	0x40022000
 80071a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b4:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <HAL_RCC_ClockConfig+0x2e8>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	491a      	ldr	r1, [pc, #104]	@ (800722c <HAL_RCC_ClockConfig+0x2e8>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d2:	4b16      	ldr	r3, [pc, #88]	@ (800722c <HAL_RCC_ClockConfig+0x2e8>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4912      	ldr	r1, [pc, #72]	@ (800722c <HAL_RCC_ClockConfig+0x2e8>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80071e6:	f000 f829 	bl	800723c <HAL_RCC_GetSysClockFreq>
 80071ea:	4601      	mov	r1, r0
 80071ec:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <HAL_RCC_ClockConfig+0x2e8>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071f4:	22f0      	movs	r2, #240	@ 0xf0
 80071f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	fa92 f2a2 	rbit	r2, r2
 80071fe:	60fa      	str	r2, [r7, #12]
  return result;
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	fab2 f282 	clz	r2, r2
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	40d3      	lsrs	r3, r2
 800720a:	4a09      	ldr	r2, [pc, #36]	@ (8007230 <HAL_RCC_ClockConfig+0x2ec>)
 800720c:	5cd3      	ldrb	r3, [r2, r3]
 800720e:	fa21 f303 	lsr.w	r3, r1, r3
 8007212:	4a08      	ldr	r2, [pc, #32]	@ (8007234 <HAL_RCC_ClockConfig+0x2f0>)
 8007214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007216:	4b08      	ldr	r3, [pc, #32]	@ (8007238 <HAL_RCC_ClockConfig+0x2f4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fb fe12 	bl	8002e44 <HAL_InitTick>
  
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3778      	adds	r7, #120	@ 0x78
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	0800d168 	.word	0x0800d168
 8007234:	20000008 	.word	0x20000008
 8007238:	2000000c 	.word	0x2000000c

0800723c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007256:	4b1e      	ldr	r3, [pc, #120]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	2b04      	cmp	r3, #4
 8007264:	d002      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x30>
 8007266:	2b08      	cmp	r3, #8
 8007268:	d003      	beq.n	8007272 <HAL_RCC_GetSysClockFreq+0x36>
 800726a:	e026      	b.n	80072ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800726c:	4b19      	ldr	r3, [pc, #100]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800726e:	613b      	str	r3, [r7, #16]
      break;
 8007270:	e026      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	0c9b      	lsrs	r3, r3, #18
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	4a17      	ldr	r2, [pc, #92]	@ (80072d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800727c:	5cd3      	ldrb	r3, [r2, r3]
 800727e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007280:	4b13      	ldr	r3, [pc, #76]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	4a14      	ldr	r2, [pc, #80]	@ (80072dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007298:	4a0e      	ldr	r2, [pc, #56]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	fbb2 f2f3 	udiv	r2, r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e004      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a0c      	ldr	r2, [pc, #48]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	613b      	str	r3, [r7, #16]
      break;
 80072b8:	e002      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072ba:	4b0a      	ldr	r3, [pc, #40]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80072bc:	613b      	str	r3, [r7, #16]
      break;
 80072be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072c0:	693b      	ldr	r3, [r7, #16]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	0800d180 	.word	0x0800d180
 80072dc:	0800d190 	.word	0x0800d190
 80072e0:	003d0900 	.word	0x003d0900
 80072e4:	007a1200 	.word	0x007a1200

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ec:	4b03      	ldr	r3, [pc, #12]	@ (80072fc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000008 	.word	0x20000008

08007300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007306:	f7ff ffef 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 800730a:	4601      	mov	r1, r0
 800730c:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007314:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007318:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	fa92 f2a2 	rbit	r2, r2
 8007320:	603a      	str	r2, [r7, #0]
  return result;
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	fab2 f282 	clz	r2, r2
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	40d3      	lsrs	r3, r2
 800732c:	4a04      	ldr	r2, [pc, #16]	@ (8007340 <HAL_RCC_GetPCLK1Freq+0x40>)
 800732e:	5cd3      	ldrb	r3, [r2, r3]
 8007330:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000
 8007340:	0800d178 	.word	0x0800d178

08007344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800734a:	f7ff ffcd 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 800734e:	4601      	mov	r1, r0
 8007350:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007358:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800735c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	fa92 f2a2 	rbit	r2, r2
 8007364:	603a      	str	r2, [r7, #0]
  return result;
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	fab2 f282 	clz	r2, r2
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	40d3      	lsrs	r3, r2
 8007370:	4a04      	ldr	r2, [pc, #16]	@ (8007384 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007372:	5cd3      	ldrb	r3, [r2, r3]
 8007374:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40021000 	.word	0x40021000
 8007384:	0800d178 	.word	0x0800d178

08007388 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b092      	sub	sp, #72	@ 0x48
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80d4 	beq.w	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ac:	4b4e      	ldr	r3, [pc, #312]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10e      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073b8:	4b4b      	ldr	r3, [pc, #300]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4a4a      	ldr	r2, [pc, #296]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073c2:	61d3      	str	r3, [r2, #28]
 80073c4:	4b48      	ldr	r3, [pc, #288]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d6:	4b45      	ldr	r3, [pc, #276]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d118      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073e2:	4b42      	ldr	r3, [pc, #264]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a41      	ldr	r2, [pc, #260]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ee:	f7fb fd6d 	bl	8002ecc <HAL_GetTick>
 80073f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f4:	e008      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073f6:	f7fb fd69 	bl	8002ecc <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b64      	cmp	r3, #100	@ 0x64
 8007402:	d901      	bls.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e169      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007408:	4b38      	ldr	r3, [pc, #224]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f0      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007414:	4b34      	ldr	r3, [pc, #208]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800741c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800741e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8084 	beq.w	800752e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800742e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007430:	429a      	cmp	r2, r3
 8007432:	d07c      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007434:	4b2c      	ldr	r3, [pc, #176]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800743c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800743e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007442:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	fa93 f3a3 	rbit	r3, r3
 800744a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800744e:	fab3 f383 	clz	r3, r3
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	461a      	mov	r2, r3
 800745e:	2301      	movs	r3, #1
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746a:	fa93 f3a3 	rbit	r3, r3
 800746e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007472:	fab3 f383 	clz	r3, r3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	461a      	mov	r2, r3
 8007482:	2300      	movs	r3, #0
 8007484:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007486:	4a18      	ldr	r2, [pc, #96]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800748c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d04b      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007496:	f7fb fd19 	bl	8002ecc <HAL_GetTick>
 800749a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fb fd15 	bl	8002ecc <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e113      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80074b4:	2302      	movs	r3, #2
 80074b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c0:	2302      	movs	r3, #2
 80074c2:	623b      	str	r3, [r7, #32]
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	fa93 f3a3 	rbit	r3, r3
 80074ca:	61fb      	str	r3, [r7, #28]
  return result;
 80074cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ce:	fab3 f383 	clz	r3, r3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d108      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80074e2:	4b01      	ldr	r3, [pc, #4]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	e00d      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80074e8:	40021000 	.word	0x40021000
 80074ec:	40007000 	.word	0x40007000
 80074f0:	10908100 	.word	0x10908100
 80074f4:	2302      	movs	r3, #2
 80074f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	fa93 f3a3 	rbit	r3, r3
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	4b78      	ldr	r3, [pc, #480]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	2202      	movs	r2, #2
 8007506:	613a      	str	r2, [r7, #16]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	fa92 f2a2 	rbit	r2, r2
 800750e:	60fa      	str	r2, [r7, #12]
  return result;
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	fab2 f282 	clz	r2, r2
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	f002 021f 	and.w	r2, r2, #31
 8007522:	2101      	movs	r1, #1
 8007524:	fa01 f202 	lsl.w	r2, r1, r2
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0b7      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800752e:	4b6d      	ldr	r3, [pc, #436]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	496a      	ldr	r1, [pc, #424]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007540:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007544:	2b01      	cmp	r3, #1
 8007546:	d105      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007548:	4b66      	ldr	r3, [pc, #408]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	4a65      	ldr	r2, [pc, #404]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007552:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d008      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007560:	4b60      	ldr	r3, [pc, #384]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	f023 0203 	bic.w	r2, r3, #3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	495d      	ldr	r1, [pc, #372]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800756e:	4313      	orrs	r3, r2
 8007570:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800757e:	4b59      	ldr	r3, [pc, #356]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007582:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4956      	ldr	r1, [pc, #344]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800759c:	4b51      	ldr	r3, [pc, #324]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	494e      	ldr	r1, [pc, #312]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ba:	4b4a      	ldr	r3, [pc, #296]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	f023 0210 	bic.w	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	4947      	ldr	r1, [pc, #284]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80075d8:	4b42      	ldr	r3, [pc, #264]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	493f      	ldr	r1, [pc, #252]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075f6:	4b3b      	ldr	r3, [pc, #236]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fa:	f023 0220 	bic.w	r2, r3, #32
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4938      	ldr	r1, [pc, #224]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007614:	4b33      	ldr	r3, [pc, #204]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	4930      	ldr	r1, [pc, #192]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007632:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4929      	ldr	r1, [pc, #164]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764c:	2b00      	cmp	r3, #0
 800764e:	d008      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007650:	4b24      	ldr	r3, [pc, #144]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4921      	ldr	r1, [pc, #132]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800766e:	4b1d      	ldr	r3, [pc, #116]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007672:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	491a      	ldr	r1, [pc, #104]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800768c:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	4912      	ldr	r1, [pc, #72]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80076aa:	4b0e      	ldr	r3, [pc, #56]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	490b      	ldr	r1, [pc, #44]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d4:	4903      	ldr	r1, [pc, #12]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3748      	adds	r7, #72	@ 0x48
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40021000 	.word	0x40021000

080076e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e049      	b.n	800778e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fb f848 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f000 fd36 	bl	8008198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d001      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e04a      	b.n	8007846 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a21      	ldr	r2, [pc, #132]	@ (8007854 <HAL_TIM_Base_Start_IT+0xbc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x6c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077da:	d013      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x6c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <HAL_TIM_Base_Start_IT+0xc0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x6c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <HAL_TIM_Base_Start_IT+0xc4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x6c>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007860 <HAL_TIM_Base_Start_IT+0xc8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x6c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <HAL_TIM_Base_Start_IT+0xcc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d115      	bne.n	8007830 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	4b17      	ldr	r3, [pc, #92]	@ (8007868 <HAL_TIM_Base_Start_IT+0xd0>)
 800780c:	4013      	ands	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b06      	cmp	r3, #6
 8007814:	d015      	beq.n	8007842 <HAL_TIM_Base_Start_IT+0xaa>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781c:	d011      	beq.n	8007842 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782e:	e008      	b.n	8007842 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e000      	b.n	8007844 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40013400 	.word	0x40013400
 8007864:	40014000 	.word	0x40014000
 8007868:	00010007 	.word	0x00010007

0800786c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e049      	b.n	8007912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fa fff8 	bl	8002888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f000 fc74 	bl	8008198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e049      	b.n	80079c0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f841 	bl	80079c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f000 fc1d 	bl	8008198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0202 	mvn.w	r2, #2
 8007a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fa f934 	bl	8001c94 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb94 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb9b 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0204 	mvn.w	r2, #4
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fa f90e 	bl	8001c94 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb6e 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb75 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01b      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0208 	mvn.w	r2, #8
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2204      	movs	r2, #4
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fa f8e8 	bl	8001c94 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fb48 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb4f 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d020      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01b      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0210 	mvn.w	r2, #16
 8007af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2208      	movs	r2, #8
 8007afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fa f8c2 	bl	8001c94 <HAL_TIM_IC_CaptureCallback>
 8007b10:	e005      	b.n	8007b1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb22 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb29 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0201 	mvn.w	r2, #1
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa f886 	bl	8001c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f948 	bl	8008dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00c      	beq.n	8007b90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f940 	bl	8008e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fae8 	bl	8008184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0220 	mvn.w	r2, #32
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f908 	bl	8008de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e088      	b.n	8007d10 <HAL_TIM_IC_ConfigChannel+0x130>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007c1c:	f000 fe2e 	bl	800887c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 020c 	bic.w	r2, r2, #12
 8007c2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6999      	ldr	r1, [r3, #24]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	619a      	str	r2, [r3, #24]
 8007c42:	e060      	b.n	8007d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d11c      	bne.n	8007c84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007c5a:	f000 fea6 	bl	80089aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6999      	ldr	r1, [r3, #24]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	021a      	lsls	r2, r3, #8
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	619a      	str	r2, [r3, #24]
 8007c82:	e040      	b.n	8007d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d11b      	bne.n	8007cc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007c9a:	f000 fef3 	bl	8008a84 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 020c 	bic.w	r2, r2, #12
 8007cac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	61da      	str	r2, [r3, #28]
 8007cc0:	e021      	b.n	8007d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b0c      	cmp	r3, #12
 8007cc6:	d11c      	bne.n	8007d02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007cd8:	f000 ff10 	bl	8008afc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007cea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69d9      	ldr	r1, [r3, #28]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	021a      	lsls	r2, r3, #8
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	61da      	str	r2, [r3, #28]
 8007d00:	e001      	b.n	8007d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e0ff      	b.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b14      	cmp	r3, #20
 8007d42:	f200 80f0 	bhi.w	8007f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007f27 	.word	0x08007f27
 8007d54:	08007f27 	.word	0x08007f27
 8007d58:	08007f27 	.word	0x08007f27
 8007d5c:	08007de1 	.word	0x08007de1
 8007d60:	08007f27 	.word	0x08007f27
 8007d64:	08007f27 	.word	0x08007f27
 8007d68:	08007f27 	.word	0x08007f27
 8007d6c:	08007e23 	.word	0x08007e23
 8007d70:	08007f27 	.word	0x08007f27
 8007d74:	08007f27 	.word	0x08007f27
 8007d78:	08007f27 	.word	0x08007f27
 8007d7c:	08007e63 	.word	0x08007e63
 8007d80:	08007f27 	.word	0x08007f27
 8007d84:	08007f27 	.word	0x08007f27
 8007d88:	08007f27 	.word	0x08007f27
 8007d8c:	08007ea5 	.word	0x08007ea5
 8007d90:	08007f27 	.word	0x08007f27
 8007d94:	08007f27 	.word	0x08007f27
 8007d98:	08007f27 	.word	0x08007f27
 8007d9c:	08007ee5 	.word	0x08007ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fa92 	bl	80082d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0208 	orr.w	r2, r2, #8
 8007dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0204 	bic.w	r2, r2, #4
 8007dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6999      	ldr	r1, [r3, #24]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	619a      	str	r2, [r3, #24]
      break;
 8007dde:	e0a5      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb02 	bl	80083f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	021a      	lsls	r2, r3, #8
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	619a      	str	r2, [r3, #24]
      break;
 8007e20:	e084      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fb6b 	bl	8008504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0208 	orr.w	r2, r2, #8
 8007e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0204 	bic.w	r2, r2, #4
 8007e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69d9      	ldr	r1, [r3, #28]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	61da      	str	r2, [r3, #28]
      break;
 8007e60:	e064      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fbd3 	bl	8008614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69d9      	ldr	r1, [r3, #28]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	021a      	lsls	r2, r3, #8
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	61da      	str	r2, [r3, #28]
      break;
 8007ea2:	e043      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fc1c 	bl	80086e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0204 	bic.w	r2, r2, #4
 8007ece:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ee2:	e023      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fc60 	bl	80087b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007efe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	021a      	lsls	r2, r3, #8
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f24:	e002      	b.n	8007f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop

08007f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0b6      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x18a>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f98:	d03e      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0xd8>
 8007f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f9e:	f200 8087 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa6:	f000 8086 	beq.w	80080b6 <HAL_TIM_ConfigClockSource+0x176>
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fae:	d87f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fb0:	2b70      	cmp	r3, #112	@ 0x70
 8007fb2:	d01a      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0xaa>
 8007fb4:	2b70      	cmp	r3, #112	@ 0x70
 8007fb6:	d87b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fb8:	2b60      	cmp	r3, #96	@ 0x60
 8007fba:	d050      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x11e>
 8007fbc:	2b60      	cmp	r3, #96	@ 0x60
 8007fbe:	d877      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fc0:	2b50      	cmp	r3, #80	@ 0x50
 8007fc2:	d03c      	beq.n	800803e <HAL_TIM_ConfigClockSource+0xfe>
 8007fc4:	2b50      	cmp	r3, #80	@ 0x50
 8007fc6:	d873      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d058      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x13e>
 8007fcc:	2b40      	cmp	r3, #64	@ 0x40
 8007fce:	d86f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fd0:	2b30      	cmp	r3, #48	@ 0x30
 8007fd2:	d064      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15e>
 8007fd4:	2b30      	cmp	r3, #48	@ 0x30
 8007fd6:	d86b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d060      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15e>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d867      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d05c      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15e>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d05a      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15e>
 8007fe8:	e062      	b.n	80080b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ffa:	f000 fdd7 	bl	8008bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800800c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	609a      	str	r2, [r3, #8]
      break;
 8008016:	e04f      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008028:	f000 fdc0 	bl	8008bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800803a:	609a      	str	r2, [r3, #8]
      break;
 800803c:	e03c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fc7e 	bl	800894c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2150      	movs	r1, #80	@ 0x50
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fd8d 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 800805c:	e02c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fcda 	bl	8008a24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2160      	movs	r1, #96	@ 0x60
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fd7d 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 800807c:	e01c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fc5e 	bl	800894c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2140      	movs	r1, #64	@ 0x40
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fd6d 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 800809c:	e00c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f000 fd64 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80080ae:	e003      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e000      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80080b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b0c      	cmp	r3, #12
 80080e6:	d831      	bhi.n	800814c <HAL_TIM_ReadCapturedValue+0x78>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008125 	.word	0x08008125
 80080f4:	0800814d 	.word	0x0800814d
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	0800814d 	.word	0x0800814d
 8008100:	0800812f 	.word	0x0800812f
 8008104:	0800814d 	.word	0x0800814d
 8008108:	0800814d 	.word	0x0800814d
 800810c:	0800814d 	.word	0x0800814d
 8008110:	08008139 	.word	0x08008139
 8008114:	0800814d 	.word	0x0800814d
 8008118:	0800814d 	.word	0x0800814d
 800811c:	0800814d 	.word	0x0800814d
 8008120:	08008143 	.word	0x08008143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812a:	60fb      	str	r3, [r7, #12]

      break;
 800812c:	e00f      	b.n	800814e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	60fb      	str	r3, [r7, #12]

      break;
 8008136:	e00a      	b.n	800814e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813e:	60fb      	str	r3, [r7, #12]

      break;
 8008140:	e005      	b.n	800814e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008148:	60fb      	str	r3, [r7, #12]

      break;
 800814a:	e000      	b.n	800814e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800814c:	bf00      	nop
  }

  return tmpreg;
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a42      	ldr	r2, [pc, #264]	@ (80082b4 <TIM_Base_SetConfig+0x11c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00f      	beq.n	80081d0 <TIM_Base_SetConfig+0x38>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b6:	d00b      	beq.n	80081d0 <TIM_Base_SetConfig+0x38>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a3f      	ldr	r2, [pc, #252]	@ (80082b8 <TIM_Base_SetConfig+0x120>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d007      	beq.n	80081d0 <TIM_Base_SetConfig+0x38>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a3e      	ldr	r2, [pc, #248]	@ (80082bc <TIM_Base_SetConfig+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_Base_SetConfig+0x38>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a3d      	ldr	r2, [pc, #244]	@ (80082c0 <TIM_Base_SetConfig+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d108      	bne.n	80081e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a33      	ldr	r2, [pc, #204]	@ (80082b4 <TIM_Base_SetConfig+0x11c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01b      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f0:	d017      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a30      	ldr	r2, [pc, #192]	@ (80082b8 <TIM_Base_SetConfig+0x120>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2f      	ldr	r2, [pc, #188]	@ (80082bc <TIM_Base_SetConfig+0x124>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00f      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2e      	ldr	r2, [pc, #184]	@ (80082c0 <TIM_Base_SetConfig+0x128>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00b      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a2d      	ldr	r2, [pc, #180]	@ (80082c4 <TIM_Base_SetConfig+0x12c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d007      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2c      	ldr	r2, [pc, #176]	@ (80082c8 <TIM_Base_SetConfig+0x130>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_Base_SetConfig+0x8a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2b      	ldr	r2, [pc, #172]	@ (80082cc <TIM_Base_SetConfig+0x134>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d108      	bne.n	8008234 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a16      	ldr	r2, [pc, #88]	@ (80082b4 <TIM_Base_SetConfig+0x11c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_Base_SetConfig+0xe8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a17      	ldr	r2, [pc, #92]	@ (80082c0 <TIM_Base_SetConfig+0x128>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_Base_SetConfig+0xe8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a16      	ldr	r2, [pc, #88]	@ (80082c4 <TIM_Base_SetConfig+0x12c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_Base_SetConfig+0xe8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a15      	ldr	r2, [pc, #84]	@ (80082c8 <TIM_Base_SetConfig+0x130>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0xe8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a14      	ldr	r2, [pc, #80]	@ (80082cc <TIM_Base_SetConfig+0x134>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d103      	bne.n	8008288 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b01      	cmp	r3, #1
 8008298:	d105      	bne.n	80082a6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f023 0201 	bic.w	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	611a      	str	r2, [r3, #16]
  }
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40000800 	.word	0x40000800
 80082c0:	40013400 	.word	0x40013400
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40014400 	.word	0x40014400
 80082cc:	40014800 	.word	0x40014800

080082d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f023 0201 	bic.w	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0303 	bic.w	r3, r3, #3
 800830a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f023 0302 	bic.w	r3, r3, #2
 800831c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a2c      	ldr	r2, [pc, #176]	@ (80083dc <TIM_OC1_SetConfig+0x10c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00f      	beq.n	8008350 <TIM_OC1_SetConfig+0x80>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a2b      	ldr	r2, [pc, #172]	@ (80083e0 <TIM_OC1_SetConfig+0x110>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00b      	beq.n	8008350 <TIM_OC1_SetConfig+0x80>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a2a      	ldr	r2, [pc, #168]	@ (80083e4 <TIM_OC1_SetConfig+0x114>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_OC1_SetConfig+0x80>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a29      	ldr	r2, [pc, #164]	@ (80083e8 <TIM_OC1_SetConfig+0x118>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC1_SetConfig+0x80>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a28      	ldr	r2, [pc, #160]	@ (80083ec <TIM_OC1_SetConfig+0x11c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10c      	bne.n	800836a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0308 	bic.w	r3, r3, #8
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f023 0304 	bic.w	r3, r3, #4
 8008368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a1b      	ldr	r2, [pc, #108]	@ (80083dc <TIM_OC1_SetConfig+0x10c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00f      	beq.n	8008392 <TIM_OC1_SetConfig+0xc2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a1a      	ldr	r2, [pc, #104]	@ (80083e0 <TIM_OC1_SetConfig+0x110>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00b      	beq.n	8008392 <TIM_OC1_SetConfig+0xc2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a19      	ldr	r2, [pc, #100]	@ (80083e4 <TIM_OC1_SetConfig+0x114>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_OC1_SetConfig+0xc2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a18      	ldr	r2, [pc, #96]	@ (80083e8 <TIM_OC1_SetConfig+0x118>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_OC1_SetConfig+0xc2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <TIM_OC1_SetConfig+0x11c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d111      	bne.n	80083b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	621a      	str	r2, [r3, #32]
}
 80083d0:	bf00      	nop
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40013400 	.word	0x40013400
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40014400 	.word	0x40014400
 80083ec:	40014800 	.word	0x40014800

080083f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f023 0210 	bic.w	r2, r3, #16
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800842a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0320 	bic.w	r3, r3, #32
 800843e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a28      	ldr	r2, [pc, #160]	@ (80084f0 <TIM_OC2_SetConfig+0x100>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_OC2_SetConfig+0x6c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a27      	ldr	r2, [pc, #156]	@ (80084f4 <TIM_OC2_SetConfig+0x104>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d10d      	bne.n	8008478 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <TIM_OC2_SetConfig+0x100>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00f      	beq.n	80084a0 <TIM_OC2_SetConfig+0xb0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <TIM_OC2_SetConfig+0x104>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00b      	beq.n	80084a0 <TIM_OC2_SetConfig+0xb0>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a1b      	ldr	r2, [pc, #108]	@ (80084f8 <TIM_OC2_SetConfig+0x108>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_OC2_SetConfig+0xb0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a1a      	ldr	r2, [pc, #104]	@ (80084fc <TIM_OC2_SetConfig+0x10c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_OC2_SetConfig+0xb0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a19      	ldr	r2, [pc, #100]	@ (8008500 <TIM_OC2_SetConfig+0x110>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d113      	bne.n	80084c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	621a      	str	r2, [r3, #32]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40013400 	.word	0x40013400
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40014400 	.word	0x40014400
 8008500:	40014800 	.word	0x40014800

08008504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a27      	ldr	r2, [pc, #156]	@ (8008600 <TIM_OC3_SetConfig+0xfc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_OC3_SetConfig+0x6a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a26      	ldr	r2, [pc, #152]	@ (8008604 <TIM_OC3_SetConfig+0x100>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d10d      	bne.n	800858a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008588:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1c      	ldr	r2, [pc, #112]	@ (8008600 <TIM_OC3_SetConfig+0xfc>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00f      	beq.n	80085b2 <TIM_OC3_SetConfig+0xae>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1b      	ldr	r2, [pc, #108]	@ (8008604 <TIM_OC3_SetConfig+0x100>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <TIM_OC3_SetConfig+0xae>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1a      	ldr	r2, [pc, #104]	@ (8008608 <TIM_OC3_SetConfig+0x104>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d007      	beq.n	80085b2 <TIM_OC3_SetConfig+0xae>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a19      	ldr	r2, [pc, #100]	@ (800860c <TIM_OC3_SetConfig+0x108>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_OC3_SetConfig+0xae>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <TIM_OC3_SetConfig+0x10c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d113      	bne.n	80085da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800

08008614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800864e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	021b      	lsls	r3, r3, #8
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	031b      	lsls	r3, r3, #12
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a18      	ldr	r2, [pc, #96]	@ (80086d4 <TIM_OC4_SetConfig+0xc0>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00f      	beq.n	8008698 <TIM_OC4_SetConfig+0x84>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a17      	ldr	r2, [pc, #92]	@ (80086d8 <TIM_OC4_SetConfig+0xc4>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_OC4_SetConfig+0x84>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <TIM_OC4_SetConfig+0xc8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_OC4_SetConfig+0x84>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a15      	ldr	r2, [pc, #84]	@ (80086e0 <TIM_OC4_SetConfig+0xcc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_OC4_SetConfig+0x84>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a14      	ldr	r2, [pc, #80]	@ (80086e4 <TIM_OC4_SetConfig+0xd0>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d109      	bne.n	80086ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800869e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	019b      	lsls	r3, r3, #6
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40013400 	.word	0x40013400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800

080086e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800872c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a17      	ldr	r2, [pc, #92]	@ (800879c <TIM_OC5_SetConfig+0xb4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00f      	beq.n	8008762 <TIM_OC5_SetConfig+0x7a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a16      	ldr	r2, [pc, #88]	@ (80087a0 <TIM_OC5_SetConfig+0xb8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00b      	beq.n	8008762 <TIM_OC5_SetConfig+0x7a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <TIM_OC5_SetConfig+0xbc>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d007      	beq.n	8008762 <TIM_OC5_SetConfig+0x7a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a14      	ldr	r2, [pc, #80]	@ (80087a8 <TIM_OC5_SetConfig+0xc0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d003      	beq.n	8008762 <TIM_OC5_SetConfig+0x7a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a13      	ldr	r2, [pc, #76]	@ (80087ac <TIM_OC5_SetConfig+0xc4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d109      	bne.n	8008776 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40013400 	.word	0x40013400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800

080087b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	051b      	lsls	r3, r3, #20
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a18      	ldr	r2, [pc, #96]	@ (8008868 <TIM_OC6_SetConfig+0xb8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00f      	beq.n	800882c <TIM_OC6_SetConfig+0x7c>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a17      	ldr	r2, [pc, #92]	@ (800886c <TIM_OC6_SetConfig+0xbc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <TIM_OC6_SetConfig+0x7c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a16      	ldr	r2, [pc, #88]	@ (8008870 <TIM_OC6_SetConfig+0xc0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <TIM_OC6_SetConfig+0x7c>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a15      	ldr	r2, [pc, #84]	@ (8008874 <TIM_OC6_SetConfig+0xc4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_OC6_SetConfig+0x7c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a14      	ldr	r2, [pc, #80]	@ (8008878 <TIM_OC6_SetConfig+0xc8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d109      	bne.n	8008840 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	029b      	lsls	r3, r3, #10
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40013400 	.word	0x40013400
 8008870:	40014000 	.word	0x40014000
 8008874:	40014400 	.word	0x40014400
 8008878:	40014800 	.word	0x40014800

0800887c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f023 0201 	bic.w	r2, r3, #1
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4a24      	ldr	r2, [pc, #144]	@ (8008938 <TIM_TI1_SetConfig+0xbc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d013      	beq.n	80088d2 <TIM_TI1_SetConfig+0x56>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b0:	d00f      	beq.n	80088d2 <TIM_TI1_SetConfig+0x56>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4a21      	ldr	r2, [pc, #132]	@ (800893c <TIM_TI1_SetConfig+0xc0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <TIM_TI1_SetConfig+0x56>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4a20      	ldr	r2, [pc, #128]	@ (8008940 <TIM_TI1_SetConfig+0xc4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d007      	beq.n	80088d2 <TIM_TI1_SetConfig+0x56>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008944 <TIM_TI1_SetConfig+0xc8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_TI1_SetConfig+0x56>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008948 <TIM_TI1_SetConfig+0xcc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d101      	bne.n	80088d6 <TIM_TI1_SetConfig+0x5a>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <TIM_TI1_SetConfig+0x5c>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d008      	beq.n	80088ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f023 0303 	bic.w	r3, r3, #3
 80088e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e003      	b.n	80088f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	b2db      	uxtb	r3, r3
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f023 030a 	bic.w	r3, r3, #10
 8008910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f003 030a 	and.w	r3, r3, #10
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	621a      	str	r2, [r3, #32]
}
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40000400 	.word	0x40000400
 8008940:	40000800 	.word	0x40000800
 8008944:	40013400 	.word	0x40013400
 8008948:	40014000 	.word	0x40014000

0800894c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	f023 0201 	bic.w	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f023 030a 	bic.w	r3, r3, #10
 8008988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b087      	sub	sp, #28
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	f023 0210 	bic.w	r2, r3, #16
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	031b      	lsls	r3, r3, #12
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	621a      	str	r2, [r3, #32]
}
 8008a18:	bf00      	nop
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f023 0210 	bic.w	r2, r3, #16
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	031b      	lsls	r3, r3, #12
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	621a      	str	r2, [r3, #32]
}
 8008a78:	bf00      	nop
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ac0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	031b      	lsls	r3, r3, #12
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	031b      	lsls	r3, r3, #12
 8008b54:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 0307 	orr.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e063      	b.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2b      	ldr	r2, [pc, #172]	@ (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2a      	ldr	r2, [pc, #168]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d018      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c76:	d013      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00e      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a17      	ldr	r2, [pc, #92]	@ (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d009      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a12      	ldr	r2, [pc, #72]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d004      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d10c      	bne.n	8008cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40013400 	.word	0x40013400
 8008ce0:	40000400 	.word	0x40000400
 8008ce4:	40000800 	.word	0x40000800
 8008ce8:	40014000 	.word	0x40014000

08008cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e065      	b.n	8008dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	041b      	lsls	r3, r3, #16
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a16      	ldr	r2, [pc, #88]	@ (8008de0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d004      	beq.n	8008d96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a14      	ldr	r2, [pc, #80]	@ (8008de4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d115      	bne.n	8008dc2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	051b      	lsls	r3, r3, #20
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	40012c00 	.word	0x40012c00
 8008de4:	40013400 	.word	0x40013400

08008de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e040      	b.n	8008eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7f9 fd9c 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	@ 0x24
 8008e50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0201 	bic.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fe18 	bl	8009aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc41 	bl	80096f8 <UART_SetConfig>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e01b      	b.n	8008eb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fe97 	bl	8009be4 <UART_CheckIdleState>
 8008eb6:	4603      	mov	r3, r0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	@ 0x28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d165      	bne.n	8008fa2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <HAL_UART_Transmit_DMA+0x22>
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e05e      	b.n	8008fa4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	88fa      	ldrh	r2, [r7, #6]
 8008ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	88fa      	ldrh	r2, [r7, #6]
 8008ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2221      	movs	r2, #33	@ 0x21
 8008f08:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d027      	beq.n	8008f62 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f16:	4a25      	ldr	r2, [pc, #148]	@ (8008fac <HAL_UART_Transmit_DMA+0xec>)
 8008f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f1e:	4a24      	ldr	r2, [pc, #144]	@ (8008fb0 <HAL_UART_Transmit_DMA+0xf0>)
 8008f20:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f26:	4a23      	ldr	r2, [pc, #140]	@ (8008fb4 <HAL_UART_Transmit_DMA+0xf4>)
 8008f28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f2e:	2200      	movs	r2, #0
 8008f30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3328      	adds	r3, #40	@ 0x28
 8008f42:	461a      	mov	r2, r3
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	f7fb fe07 	bl	8004b58 <HAL_DMA_Start_IT>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2210      	movs	r2, #16
 8008f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e020      	b.n	8008fa4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2240      	movs	r2, #64	@ 0x40
 8008f68:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f8a:	623a      	str	r2, [r7, #32]
 8008f8c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	69f9      	ldr	r1, [r7, #28]
 8008f90:	6a3a      	ldr	r2, [r7, #32]
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e5      	bne.n	8008f6a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e000      	b.n	8008fa4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008fa2:	2302      	movs	r3, #2
  }
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3728      	adds	r7, #40	@ 0x28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	0800a065 	.word	0x0800a065
 8008fb0:	0800a0f9 	.word	0x0800a0f9
 8008fb4:	0800a279 	.word	0x0800a279

08008fb8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b090      	sub	sp, #64	@ 0x40
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fcc:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd8:	2b80      	cmp	r3, #128	@ 0x80
 8008fda:	d139      	bne.n	8009050 <HAL_UART_DMAStop+0x98>
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fde:	2b21      	cmp	r3, #33	@ 0x21
 8008fe0:	d136      	bne.n	8009050 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901a:	2b00      	cmp	r3, #0
 800901c:	d015      	beq.n	800904a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009022:	4618      	mov	r0, r3
 8009024:	f7fb fdf7 	bl	8004c16 <HAL_DMA_Abort>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00d      	beq.n	800904a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009032:	4618      	mov	r0, r3
 8009034:	f7fb ff0e 	bl	8004e54 <HAL_DMA_GetError>
 8009038:	4603      	mov	r3, r0
 800903a:	2b20      	cmp	r3, #32
 800903c:	d105      	bne.n	800904a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2210      	movs	r2, #16
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e044      	b.n	80090d4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 ff80 	bl	8009f50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905a:	2b40      	cmp	r3, #64	@ 0x40
 800905c:	d139      	bne.n	80090d2 <HAL_UART_DMAStop+0x11a>
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	2b22      	cmp	r3, #34	@ 0x22
 8009062:	d136      	bne.n	80090d2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	60bb      	str	r3, [r7, #8]
   return(result);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800907a:	633b      	str	r3, [r7, #48]	@ 0x30
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009084:	61ba      	str	r2, [r7, #24]
 8009086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6979      	ldr	r1, [r7, #20]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	613b      	str	r3, [r7, #16]
   return(result);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e5      	bne.n	8009064 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800909c:	2b00      	cmp	r3, #0
 800909e:	d015      	beq.n	80090cc <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fb fdb6 	bl	8004c16 <HAL_DMA_Abort>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fb fecd 	bl	8004e54 <HAL_DMA_GetError>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d105      	bne.n	80090cc <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2210      	movs	r2, #16
 80090c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e003      	b.n	80090d4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 ff65 	bl	8009f9c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3740      	adds	r7, #64	@ 0x40
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b0ba      	sub	sp, #232	@ 0xe8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009106:	f640 030f 	movw	r3, #2063	@ 0x80f
 800910a:	4013      	ands	r3, r2
 800910c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009114:	2b00      	cmp	r3, #0
 8009116:	d115      	bne.n	8009144 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00f      	beq.n	8009144 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 82ab 	beq.w	8009690 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
      }
      return;
 8009142:	e2a5      	b.n	8009690 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8117 	beq.w	800937c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800914e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800915a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800915e:	4b85      	ldr	r3, [pc, #532]	@ (8009374 <HAL_UART_IRQHandler+0x298>)
 8009160:	4013      	ands	r3, r2
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 810a 	beq.w	800937c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d011      	beq.n	8009198 <HAL_UART_IRQHandler+0xbc>
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2201      	movs	r2, #1
 8009186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800918e:	f043 0201 	orr.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d011      	beq.n	80091c8 <HAL_UART_IRQHandler+0xec>
 80091a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2202      	movs	r2, #2
 80091b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091be:	f043 0204 	orr.w	r2, r3, #4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d011      	beq.n	80091f8 <HAL_UART_IRQHandler+0x11c>
 80091d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2204      	movs	r2, #4
 80091e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ee:	f043 0202 	orr.w	r2, r3, #2
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d017      	beq.n	8009234 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009214:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2208      	movs	r2, #8
 8009222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800922a:	f043 0208 	orr.w	r2, r3, #8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800923c:	2b00      	cmp	r3, #0
 800923e:	d012      	beq.n	8009266 <HAL_UART_IRQHandler+0x18a>
 8009240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009244:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00c      	beq.n	8009266 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800925c:	f043 0220 	orr.w	r2, r3, #32
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8211 	beq.w	8009694 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00d      	beq.n	800929a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800927e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d005      	beq.n	80092be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d04f      	beq.n	800935e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fe6c 	bl	8009f9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d141      	bne.n	8009356 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800930a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d9      	bne.n	80092d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009322:	2b00      	cmp	r3, #0
 8009324:	d013      	beq.n	800934e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932a:	4a13      	ldr	r2, [pc, #76]	@ (8009378 <HAL_UART_IRQHandler+0x29c>)
 800932c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009332:	4618      	mov	r0, r3
 8009334:	f7fb fcad 	bl	8004c92 <HAL_DMA_Abort_IT>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d017      	beq.n	800936e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	e00f      	b.n	800936e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f9c8 	bl	80096e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009354:	e00b      	b.n	800936e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9c4 	bl	80096e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935c:	e007      	b.n	800936e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f9c0 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800936c:	e192      	b.n	8009694 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936e:	bf00      	nop
    return;
 8009370:	e190      	b.n	8009694 <HAL_UART_IRQHandler+0x5b8>
 8009372:	bf00      	nop
 8009374:	04000120 	.word	0x04000120
 8009378:	0800a2f7 	.word	0x0800a2f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009380:	2b01      	cmp	r3, #1
 8009382:	f040 814b 	bne.w	800961c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 8144 	beq.w	800961c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 813d 	beq.w	800961c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2210      	movs	r2, #16
 80093a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b4:	2b40      	cmp	r3, #64	@ 0x40
 80093b6:	f040 80b5 	bne.w	8009524 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8164 	beq.w	8009698 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093da:	429a      	cmp	r2, r3
 80093dc:	f080 815c 	bcs.w	8009698 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	f000 8086 	beq.w	8009502 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800940a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800940e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009412:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009420:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009424:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800942c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1da      	bne.n	80093f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009452:	f023 0301 	bic.w	r3, r3, #1
 8009456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009464:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009468:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800946c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e1      	bne.n	8009440 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800948c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800948e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e3      	bne.n	800947c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e4      	bne.n	80094c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fb fb8a 	bl	8004c16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009514:	b29b      	uxth	r3, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	b29b      	uxth	r3, r3
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7f8 fceb 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009522:	e0b9      	b.n	8009698 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009530:	b29b      	uxth	r3, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80ab 	beq.w	800969c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 80a6 	beq.w	800969c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800955e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009572:	647b      	str	r3, [r7, #68]	@ 0x44
 8009574:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e4      	bne.n	8009550 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	623b      	str	r3, [r7, #32]
   return(result);
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f023 0301 	bic.w	r3, r3, #1
 800959c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3308      	adds	r3, #8
 80095a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0310 	bic.w	r3, r3, #16
 80095e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095f4:	61fb      	str	r3, [r7, #28]
 80095f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	69b9      	ldr	r1, [r7, #24]
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	617b      	str	r3, [r7, #20]
   return(result);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e4      	bne.n	80095d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800960e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7f8 fc6f 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800961a:	e03f      	b.n	800969c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <HAL_UART_IRQHandler+0x56a>
 8009628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800962c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d008      	beq.n	8009646 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800963c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fe99 	bl	800a376 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009644:	e02d      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800964a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00e      	beq.n	8009670 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965a:	2b00      	cmp	r3, #0
 800965c:	d008      	beq.n	8009670 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d01c      	beq.n	80096a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
    }
    return;
 800966e:	e017      	b.n	80096a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d012      	beq.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00c      	beq.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fe4a 	bl	800a322 <UART_EndTransmit_IT>
    return;
 800968e:	e008      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009690:	bf00      	nop
 8009692:	e006      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009694:	bf00      	nop
 8009696:	e004      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009698:	bf00      	nop
 800969a:	e002      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80096a0:	bf00      	nop
  }

}
 80096a2:	37e8      	adds	r7, #232	@ 0xe8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009726:	f023 030c 	bic.w	r3, r3, #12
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	430b      	orrs	r3, r1
 8009732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	430a      	orrs	r2, r1
 800976c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4aa7      	ldr	r2, [pc, #668]	@ (8009a10 <UART_SetConfig+0x318>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d120      	bne.n	80097ba <UART_SetConfig+0xc2>
 8009778:	4ba6      	ldr	r3, [pc, #664]	@ (8009a14 <UART_SetConfig+0x31c>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b03      	cmp	r3, #3
 8009782:	d817      	bhi.n	80097b4 <UART_SetConfig+0xbc>
 8009784:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <UART_SetConfig+0x94>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097a9 	.word	0x080097a9
 8009794:	080097af 	.word	0x080097af
 8009798:	080097a3 	.word	0x080097a3
 800979c:	2301      	movs	r3, #1
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e0b5      	b.n	800990e <UART_SetConfig+0x216>
 80097a2:	2302      	movs	r3, #2
 80097a4:	77fb      	strb	r3, [r7, #31]
 80097a6:	e0b2      	b.n	800990e <UART_SetConfig+0x216>
 80097a8:	2304      	movs	r3, #4
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	e0af      	b.n	800990e <UART_SetConfig+0x216>
 80097ae:	2308      	movs	r3, #8
 80097b0:	77fb      	strb	r3, [r7, #31]
 80097b2:	e0ac      	b.n	800990e <UART_SetConfig+0x216>
 80097b4:	2310      	movs	r3, #16
 80097b6:	77fb      	strb	r3, [r7, #31]
 80097b8:	e0a9      	b.n	800990e <UART_SetConfig+0x216>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a96      	ldr	r2, [pc, #600]	@ (8009a18 <UART_SetConfig+0x320>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d124      	bne.n	800980e <UART_SetConfig+0x116>
 80097c4:	4b93      	ldr	r3, [pc, #588]	@ (8009a14 <UART_SetConfig+0x31c>)
 80097c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097d0:	d011      	beq.n	80097f6 <UART_SetConfig+0xfe>
 80097d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097d6:	d817      	bhi.n	8009808 <UART_SetConfig+0x110>
 80097d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097dc:	d011      	beq.n	8009802 <UART_SetConfig+0x10a>
 80097de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e2:	d811      	bhi.n	8009808 <UART_SetConfig+0x110>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <UART_SetConfig+0xf8>
 80097e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ec:	d006      	beq.n	80097fc <UART_SetConfig+0x104>
 80097ee:	e00b      	b.n	8009808 <UART_SetConfig+0x110>
 80097f0:	2300      	movs	r3, #0
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e08b      	b.n	800990e <UART_SetConfig+0x216>
 80097f6:	2302      	movs	r3, #2
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e088      	b.n	800990e <UART_SetConfig+0x216>
 80097fc:	2304      	movs	r3, #4
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e085      	b.n	800990e <UART_SetConfig+0x216>
 8009802:	2308      	movs	r3, #8
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e082      	b.n	800990e <UART_SetConfig+0x216>
 8009808:	2310      	movs	r3, #16
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e07f      	b.n	800990e <UART_SetConfig+0x216>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a82      	ldr	r2, [pc, #520]	@ (8009a1c <UART_SetConfig+0x324>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d124      	bne.n	8009862 <UART_SetConfig+0x16a>
 8009818:	4b7e      	ldr	r3, [pc, #504]	@ (8009a14 <UART_SetConfig+0x31c>)
 800981a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009820:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009824:	d011      	beq.n	800984a <UART_SetConfig+0x152>
 8009826:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800982a:	d817      	bhi.n	800985c <UART_SetConfig+0x164>
 800982c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009830:	d011      	beq.n	8009856 <UART_SetConfig+0x15e>
 8009832:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009836:	d811      	bhi.n	800985c <UART_SetConfig+0x164>
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <UART_SetConfig+0x14c>
 800983c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009840:	d006      	beq.n	8009850 <UART_SetConfig+0x158>
 8009842:	e00b      	b.n	800985c <UART_SetConfig+0x164>
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e061      	b.n	800990e <UART_SetConfig+0x216>
 800984a:	2302      	movs	r3, #2
 800984c:	77fb      	strb	r3, [r7, #31]
 800984e:	e05e      	b.n	800990e <UART_SetConfig+0x216>
 8009850:	2304      	movs	r3, #4
 8009852:	77fb      	strb	r3, [r7, #31]
 8009854:	e05b      	b.n	800990e <UART_SetConfig+0x216>
 8009856:	2308      	movs	r3, #8
 8009858:	77fb      	strb	r3, [r7, #31]
 800985a:	e058      	b.n	800990e <UART_SetConfig+0x216>
 800985c:	2310      	movs	r3, #16
 800985e:	77fb      	strb	r3, [r7, #31]
 8009860:	e055      	b.n	800990e <UART_SetConfig+0x216>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a6e      	ldr	r2, [pc, #440]	@ (8009a20 <UART_SetConfig+0x328>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d124      	bne.n	80098b6 <UART_SetConfig+0x1be>
 800986c:	4b69      	ldr	r3, [pc, #420]	@ (8009a14 <UART_SetConfig+0x31c>)
 800986e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009870:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009878:	d011      	beq.n	800989e <UART_SetConfig+0x1a6>
 800987a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800987e:	d817      	bhi.n	80098b0 <UART_SetConfig+0x1b8>
 8009880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009884:	d011      	beq.n	80098aa <UART_SetConfig+0x1b2>
 8009886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800988a:	d811      	bhi.n	80098b0 <UART_SetConfig+0x1b8>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <UART_SetConfig+0x1a0>
 8009890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009894:	d006      	beq.n	80098a4 <UART_SetConfig+0x1ac>
 8009896:	e00b      	b.n	80098b0 <UART_SetConfig+0x1b8>
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e037      	b.n	800990e <UART_SetConfig+0x216>
 800989e:	2302      	movs	r3, #2
 80098a0:	77fb      	strb	r3, [r7, #31]
 80098a2:	e034      	b.n	800990e <UART_SetConfig+0x216>
 80098a4:	2304      	movs	r3, #4
 80098a6:	77fb      	strb	r3, [r7, #31]
 80098a8:	e031      	b.n	800990e <UART_SetConfig+0x216>
 80098aa:	2308      	movs	r3, #8
 80098ac:	77fb      	strb	r3, [r7, #31]
 80098ae:	e02e      	b.n	800990e <UART_SetConfig+0x216>
 80098b0:	2310      	movs	r3, #16
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e02b      	b.n	800990e <UART_SetConfig+0x216>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a5a      	ldr	r2, [pc, #360]	@ (8009a24 <UART_SetConfig+0x32c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d124      	bne.n	800990a <UART_SetConfig+0x212>
 80098c0:	4b54      	ldr	r3, [pc, #336]	@ (8009a14 <UART_SetConfig+0x31c>)
 80098c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80098c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80098cc:	d011      	beq.n	80098f2 <UART_SetConfig+0x1fa>
 80098ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80098d2:	d817      	bhi.n	8009904 <UART_SetConfig+0x20c>
 80098d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80098d8:	d011      	beq.n	80098fe <UART_SetConfig+0x206>
 80098da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80098de:	d811      	bhi.n	8009904 <UART_SetConfig+0x20c>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <UART_SetConfig+0x1f4>
 80098e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098e8:	d006      	beq.n	80098f8 <UART_SetConfig+0x200>
 80098ea:	e00b      	b.n	8009904 <UART_SetConfig+0x20c>
 80098ec:	2300      	movs	r3, #0
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e00d      	b.n	800990e <UART_SetConfig+0x216>
 80098f2:	2302      	movs	r3, #2
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e00a      	b.n	800990e <UART_SetConfig+0x216>
 80098f8:	2304      	movs	r3, #4
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e007      	b.n	800990e <UART_SetConfig+0x216>
 80098fe:	2308      	movs	r3, #8
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e004      	b.n	800990e <UART_SetConfig+0x216>
 8009904:	2310      	movs	r3, #16
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e001      	b.n	800990e <UART_SetConfig+0x216>
 800990a:	2310      	movs	r3, #16
 800990c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009916:	d15b      	bne.n	80099d0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009918:	7ffb      	ldrb	r3, [r7, #31]
 800991a:	2b08      	cmp	r3, #8
 800991c:	d827      	bhi.n	800996e <UART_SetConfig+0x276>
 800991e:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x22c>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009949 	.word	0x08009949
 8009928:	08009951 	.word	0x08009951
 800992c:	08009959 	.word	0x08009959
 8009930:	0800996f 	.word	0x0800996f
 8009934:	0800995f 	.word	0x0800995f
 8009938:	0800996f 	.word	0x0800996f
 800993c:	0800996f 	.word	0x0800996f
 8009940:	0800996f 	.word	0x0800996f
 8009944:	08009967 	.word	0x08009967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009948:	f7fd fcda 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 800994c:	61b8      	str	r0, [r7, #24]
        break;
 800994e:	e013      	b.n	8009978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009950:	f7fd fcf8 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8009954:	61b8      	str	r0, [r7, #24]
        break;
 8009956:	e00f      	b.n	8009978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009958:	4b33      	ldr	r3, [pc, #204]	@ (8009a28 <UART_SetConfig+0x330>)
 800995a:	61bb      	str	r3, [r7, #24]
        break;
 800995c:	e00c      	b.n	8009978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800995e:	f7fd fc6d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8009962:	61b8      	str	r0, [r7, #24]
        break;
 8009964:	e008      	b.n	8009978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800996a:	61bb      	str	r3, [r7, #24]
        break;
 800996c:	e004      	b.n	8009978 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	77bb      	strb	r3, [r7, #30]
        break;
 8009976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8082 	beq.w	8009a84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	005a      	lsls	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	085b      	lsrs	r3, r3, #1
 800998a:	441a      	add	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b0f      	cmp	r3, #15
 800999a:	d916      	bls.n	80099ca <UART_SetConfig+0x2d2>
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a2:	d212      	bcs.n	80099ca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f023 030f 	bic.w	r3, r3, #15
 80099ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f003 0307 	and.w	r3, r3, #7
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	4313      	orrs	r3, r2
 80099be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	89fa      	ldrh	r2, [r7, #14]
 80099c6:	60da      	str	r2, [r3, #12]
 80099c8:	e05c      	b.n	8009a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	77bb      	strb	r3, [r7, #30]
 80099ce:	e059      	b.n	8009a84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099d0:	7ffb      	ldrb	r3, [r7, #31]
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d835      	bhi.n	8009a42 <UART_SetConfig+0x34a>
 80099d6:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <UART_SetConfig+0x2e4>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a43 	.word	0x08009a43
 80099ec:	08009a33 	.word	0x08009a33
 80099f0:	08009a43 	.word	0x08009a43
 80099f4:	08009a43 	.word	0x08009a43
 80099f8:	08009a43 	.word	0x08009a43
 80099fc:	08009a3b 	.word	0x08009a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a00:	f7fd fc7e 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 8009a04:	61b8      	str	r0, [r7, #24]
        break;
 8009a06:	e021      	b.n	8009a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7fd fc9c 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	61b8      	str	r0, [r7, #24]
        break;
 8009a0e:	e01d      	b.n	8009a4c <UART_SetConfig+0x354>
 8009a10:	40013800 	.word	0x40013800
 8009a14:	40021000 	.word	0x40021000
 8009a18:	40004400 	.word	0x40004400
 8009a1c:	40004800 	.word	0x40004800
 8009a20:	40004c00 	.word	0x40004c00
 8009a24:	40005000 	.word	0x40005000
 8009a28:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a9c <UART_SetConfig+0x3a4>)
 8009a2e:	61bb      	str	r3, [r7, #24]
        break;
 8009a30:	e00c      	b.n	8009a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a32:	f7fd fc03 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8009a36:	61b8      	str	r0, [r7, #24]
        break;
 8009a38:	e008      	b.n	8009a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a3e:	61bb      	str	r3, [r7, #24]
        break;
 8009a40:	e004      	b.n	8009a4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	77bb      	strb	r3, [r7, #30]
        break;
 8009a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d018      	beq.n	8009a84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	085a      	lsrs	r2, r3, #1
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b0f      	cmp	r3, #15
 8009a6a:	d909      	bls.n	8009a80 <UART_SetConfig+0x388>
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a72:	d205      	bcs.n	8009a80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	60da      	str	r2, [r3, #12]
 8009a7e:	e001      	b.n	8009a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009a90:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	007a1200 	.word	0x007a1200

08009aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aac:	f003 0308 	and.w	r3, r3, #8
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01a      	beq.n	8009bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9e:	d10a      	bne.n	8009bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	605a      	str	r2, [r3, #4]
  }
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b098      	sub	sp, #96	@ 0x60
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bf4:	f7f9 f96a 	bl	8002ecc <HAL_GetTick>
 8009bf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d12e      	bne.n	8009c66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c10:	2200      	movs	r2, #0
 8009c12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f88c 	bl	8009d34 <UART_WaitOnFlagUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d021      	beq.n	8009c66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	e853 3f00 	ldrex	r3, [r3]
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c48:	e841 2300 	strex	r3, r2, [r1]
 8009c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e6      	bne.n	8009c22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e062      	b.n	8009d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d149      	bne.n	8009d08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f856 	bl	8009d34 <UART_WaitOnFlagUntilTimeout>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d03c      	beq.n	8009d08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e6      	bne.n	8009c8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ce0:	61fa      	str	r2, [r7, #28]
 8009ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	69b9      	ldr	r1, [r7, #24]
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	617b      	str	r3, [r7, #20]
   return(result);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e5      	bne.n	8009cc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e011      	b.n	8009d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3758      	adds	r7, #88	@ 0x58
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	4613      	mov	r3, r2
 8009d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d44:	e04f      	b.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d04b      	beq.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4e:	f7f9 f8bd 	bl	8002ecc <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d302      	bcc.n	8009d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e04e      	b.n	8009e06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d037      	beq.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b80      	cmp	r3, #128	@ 0x80
 8009d7a:	d034      	beq.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b40      	cmp	r3, #64	@ 0x40
 8009d80:	d031      	beq.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d110      	bne.n	8009db2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2208      	movs	r2, #8
 8009d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f8ff 	bl	8009f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2208      	movs	r2, #8
 8009da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e029      	b.n	8009e06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dc0:	d111      	bne.n	8009de6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 f8e5 	bl	8009f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e00f      	b.n	8009e06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69da      	ldr	r2, [r3, #28]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4013      	ands	r3, r2
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bf0c      	ite	eq
 8009df6:	2301      	moveq	r3, #1
 8009df8:	2300      	movne	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d0a0      	beq.n	8009d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b096      	sub	sp, #88	@ 0x58
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2222      	movs	r2, #34	@ 0x22
 8009e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d028      	beq.n	8009e96 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e48:	4a3e      	ldr	r2, [pc, #248]	@ (8009f44 <UART_Start_Receive_DMA+0x134>)
 8009e4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e50:	4a3d      	ldr	r2, [pc, #244]	@ (8009f48 <UART_Start_Receive_DMA+0x138>)
 8009e52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e58:	4a3c      	ldr	r2, [pc, #240]	@ (8009f4c <UART_Start_Receive_DMA+0x13c>)
 8009e5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e60:	2200      	movs	r2, #0
 8009e62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3324      	adds	r3, #36	@ 0x24
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e74:	461a      	mov	r2, r3
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	f7fa fe6e 	bl	8004b58 <HAL_DMA_Start_IT>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2210      	movs	r2, #16
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e051      	b.n	8009f3a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d018      	beq.n	8009ed0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ebe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e6      	bne.n	8009e9e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3308      	adds	r3, #8
 8009eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ef0:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e5      	bne.n	8009ed0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	613b      	str	r3, [r7, #16]
   return(result);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3308      	adds	r3, #8
 8009f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f24:	623a      	str	r2, [r7, #32]
 8009f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	69f9      	ldr	r1, [r7, #28]
 8009f2a:	6a3a      	ldr	r2, [r7, #32]
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e5      	bne.n	8009f04 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3758      	adds	r7, #88	@ 0x58
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	0800a115 	.word	0x0800a115
 8009f48:	0800a23b 	.word	0x0800a23b
 8009f4c:	0800a279 	.word	0x0800a279

08009f50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b089      	sub	sp, #36	@ 0x24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	61bb      	str	r3, [r7, #24]
 8009f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6979      	ldr	r1, [r7, #20]
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	613b      	str	r3, [r7, #16]
   return(result);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e6      	bne.n	8009f58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009f90:	bf00      	nop
 8009f92:	3724      	adds	r7, #36	@ 0x24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b095      	sub	sp, #84	@ 0x54
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e6      	bne.n	8009fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e5      	bne.n	8009fd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d118      	bne.n	800a044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f023 0310 	bic.w	r3, r3, #16
 800a026:	647b      	str	r3, [r7, #68]	@ 0x44
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	613b      	str	r3, [r7, #16]
   return(result);
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e6      	bne.n	800a012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a058:	bf00      	nop
 800a05a:	3754      	adds	r7, #84	@ 0x54
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b090      	sub	sp, #64	@ 0x40
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	2b20      	cmp	r3, #32
 800a078:	d037      	beq.n	800a0ea <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	623b      	str	r3, [r7, #32]
   return(result);
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a098:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e5      	bne.n	800a082 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	61fb      	str	r3, [r7, #28]
 800a0d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	69b9      	ldr	r1, [r7, #24]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e6      	bne.n	800a0b6 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0e8:	e002      	b.n	800a0f0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800a0ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a0ec:	f7f7 fed2 	bl	8001e94 <HAL_UART_TxCpltCallback>
}
 800a0f0:	bf00      	nop
 800a0f2:	3740      	adds	r7, #64	@ 0x40
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a104:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff face 	bl	80096a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b09c      	sub	sp, #112	@ 0x70
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a120:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	2b20      	cmp	r3, #32
 800a128:	d071      	beq.n	800a20e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a13a:	e853 3f00 	ldrex	r3, [r3]
 800a13e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a146:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a150:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a152:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a158:	e841 2300 	strex	r3, r2, [r1]
 800a15c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a15e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e6      	bne.n	800a132 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3308      	adds	r3, #8
 800a16a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a176:	f023 0301 	bic.w	r3, r3, #1
 800a17a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a17c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3308      	adds	r3, #8
 800a182:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a184:	647a      	str	r2, [r7, #68]	@ 0x44
 800a186:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e5      	bne.n	800a164 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3308      	adds	r3, #8
 800a19e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e5      	bne.n	800a198 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d118      	bne.n	800a20e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f023 0310 	bic.w	r3, r3, #16
 800a1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	69b9      	ldr	r1, [r7, #24]
 800a200:	69fa      	ldr	r2, [r7, #28]
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	617b      	str	r3, [r7, #20]
   return(result);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e6      	bne.n	800a1dc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a20e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a210:	2200      	movs	r2, #0
 800a212:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d107      	bne.n	800a22c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a222:	4619      	mov	r1, r3
 800a224:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a226:	f7f7 fe67 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a22a:	e002      	b.n	800a232 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a22c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a22e:	f7ff fa45 	bl	80096bc <HAL_UART_RxCpltCallback>
}
 800a232:	bf00      	nop
 800a234:	3770      	adds	r7, #112	@ 0x70
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2201      	movs	r2, #1
 800a24c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a252:	2b01      	cmp	r3, #1
 800a254:	d109      	bne.n	800a26a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4619      	mov	r1, r3
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7f7 fe48 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a268:	e002      	b.n	800a270 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff fa30 	bl	80096d0 <HAL_UART_RxHalfCpltCallback>
}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a284:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a28a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a292:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a29e:	2b80      	cmp	r3, #128	@ 0x80
 800a2a0:	d109      	bne.n	800a2b6 <UART_DMAError+0x3e>
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b21      	cmp	r3, #33	@ 0x21
 800a2a6:	d106      	bne.n	800a2b6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a2b0:	6978      	ldr	r0, [r7, #20]
 800a2b2:	f7ff fe4d 	bl	8009f50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c0:	2b40      	cmp	r3, #64	@ 0x40
 800a2c2:	d109      	bne.n	800a2d8 <UART_DMAError+0x60>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b22      	cmp	r3, #34	@ 0x22
 800a2c8:	d106      	bne.n	800a2d8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f7ff fe62 	bl	8009f9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2de:	f043 0210 	orr.w	r2, r3, #16
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2e8:	6978      	ldr	r0, [r7, #20]
 800a2ea:	f7ff f9fb 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ee:	bf00      	nop
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7ff f9e5 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b088      	sub	sp, #32
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60bb      	str	r3, [r7, #8]
   return(result);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	613b      	str	r3, [r7, #16]
   return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f7 fd93 	bl	8001e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36e:	bf00      	nop
 800a370:	3720      	adds	r7, #32
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b08c      	sub	sp, #48	@ 0x30
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	4613      	mov	r3, r2
 800a396:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d142      	bne.n	800a428 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e03b      	b.n	800a42a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a3be:	88fb      	ldrh	r3, [r7, #6]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f7ff fd23 	bl	8009e10 <UART_Start_Receive_DMA>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a3d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d124      	bne.n	800a422 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d11d      	bne.n	800a41c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2210      	movs	r2, #16
 800a3e6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f043 0310 	orr.w	r3, r3, #16
 800a3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
 800a408:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6a39      	ldr	r1, [r7, #32]
 800a40c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	61fb      	str	r3, [r7, #28]
   return(result);
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e6      	bne.n	800a3e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a41a:	e002      	b.n	800a422 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a426:	e000      	b.n	800a42a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a428:	2302      	movs	r3, #2
  }
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3730      	adds	r7, #48	@ 0x30
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <__cvt>:
 800a432:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a436:	ec57 6b10 	vmov	r6, r7, d0
 800a43a:	2f00      	cmp	r7, #0
 800a43c:	460c      	mov	r4, r1
 800a43e:	4619      	mov	r1, r3
 800a440:	463b      	mov	r3, r7
 800a442:	bfbb      	ittet	lt
 800a444:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a448:	461f      	movlt	r7, r3
 800a44a:	2300      	movge	r3, #0
 800a44c:	232d      	movlt	r3, #45	@ 0x2d
 800a44e:	700b      	strb	r3, [r1, #0]
 800a450:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a452:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a456:	4691      	mov	r9, r2
 800a458:	f023 0820 	bic.w	r8, r3, #32
 800a45c:	bfbc      	itt	lt
 800a45e:	4632      	movlt	r2, r6
 800a460:	4616      	movlt	r6, r2
 800a462:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a466:	d005      	beq.n	800a474 <__cvt+0x42>
 800a468:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a46c:	d100      	bne.n	800a470 <__cvt+0x3e>
 800a46e:	3401      	adds	r4, #1
 800a470:	2102      	movs	r1, #2
 800a472:	e000      	b.n	800a476 <__cvt+0x44>
 800a474:	2103      	movs	r1, #3
 800a476:	ab03      	add	r3, sp, #12
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	ab02      	add	r3, sp, #8
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	ec47 6b10 	vmov	d0, r6, r7
 800a482:	4653      	mov	r3, sl
 800a484:	4622      	mov	r2, r4
 800a486:	f000 fe5b 	bl	800b140 <_dtoa_r>
 800a48a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a48e:	4605      	mov	r5, r0
 800a490:	d119      	bne.n	800a4c6 <__cvt+0x94>
 800a492:	f019 0f01 	tst.w	r9, #1
 800a496:	d00e      	beq.n	800a4b6 <__cvt+0x84>
 800a498:	eb00 0904 	add.w	r9, r0, r4
 800a49c:	2200      	movs	r2, #0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a8:	b108      	cbz	r0, 800a4ae <__cvt+0x7c>
 800a4aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4ae:	2230      	movs	r2, #48	@ 0x30
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	454b      	cmp	r3, r9
 800a4b4:	d31e      	bcc.n	800a4f4 <__cvt+0xc2>
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ba:	1b5b      	subs	r3, r3, r5
 800a4bc:	4628      	mov	r0, r5
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	b004      	add	sp, #16
 800a4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4ca:	eb00 0904 	add.w	r9, r0, r4
 800a4ce:	d1e5      	bne.n	800a49c <__cvt+0x6a>
 800a4d0:	7803      	ldrb	r3, [r0, #0]
 800a4d2:	2b30      	cmp	r3, #48	@ 0x30
 800a4d4:	d10a      	bne.n	800a4ec <__cvt+0xba>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f6 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4e2:	b918      	cbnz	r0, 800a4ec <__cvt+0xba>
 800a4e4:	f1c4 0401 	rsb	r4, r4, #1
 800a4e8:	f8ca 4000 	str.w	r4, [sl]
 800a4ec:	f8da 3000 	ldr.w	r3, [sl]
 800a4f0:	4499      	add	r9, r3
 800a4f2:	e7d3      	b.n	800a49c <__cvt+0x6a>
 800a4f4:	1c59      	adds	r1, r3, #1
 800a4f6:	9103      	str	r1, [sp, #12]
 800a4f8:	701a      	strb	r2, [r3, #0]
 800a4fa:	e7d9      	b.n	800a4b0 <__cvt+0x7e>

0800a4fc <__exponent>:
 800a4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4fe:	2900      	cmp	r1, #0
 800a500:	bfba      	itte	lt
 800a502:	4249      	neglt	r1, r1
 800a504:	232d      	movlt	r3, #45	@ 0x2d
 800a506:	232b      	movge	r3, #43	@ 0x2b
 800a508:	2909      	cmp	r1, #9
 800a50a:	7002      	strb	r2, [r0, #0]
 800a50c:	7043      	strb	r3, [r0, #1]
 800a50e:	dd29      	ble.n	800a564 <__exponent+0x68>
 800a510:	f10d 0307 	add.w	r3, sp, #7
 800a514:	461d      	mov	r5, r3
 800a516:	270a      	movs	r7, #10
 800a518:	461a      	mov	r2, r3
 800a51a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a51e:	fb07 1416 	mls	r4, r7, r6, r1
 800a522:	3430      	adds	r4, #48	@ 0x30
 800a524:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a528:	460c      	mov	r4, r1
 800a52a:	2c63      	cmp	r4, #99	@ 0x63
 800a52c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a530:	4631      	mov	r1, r6
 800a532:	dcf1      	bgt.n	800a518 <__exponent+0x1c>
 800a534:	3130      	adds	r1, #48	@ 0x30
 800a536:	1e94      	subs	r4, r2, #2
 800a538:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a53c:	1c41      	adds	r1, r0, #1
 800a53e:	4623      	mov	r3, r4
 800a540:	42ab      	cmp	r3, r5
 800a542:	d30a      	bcc.n	800a55a <__exponent+0x5e>
 800a544:	f10d 0309 	add.w	r3, sp, #9
 800a548:	1a9b      	subs	r3, r3, r2
 800a54a:	42ac      	cmp	r4, r5
 800a54c:	bf88      	it	hi
 800a54e:	2300      	movhi	r3, #0
 800a550:	3302      	adds	r3, #2
 800a552:	4403      	add	r3, r0
 800a554:	1a18      	subs	r0, r3, r0
 800a556:	b003      	add	sp, #12
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a55e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a562:	e7ed      	b.n	800a540 <__exponent+0x44>
 800a564:	2330      	movs	r3, #48	@ 0x30
 800a566:	3130      	adds	r1, #48	@ 0x30
 800a568:	7083      	strb	r3, [r0, #2]
 800a56a:	70c1      	strb	r1, [r0, #3]
 800a56c:	1d03      	adds	r3, r0, #4
 800a56e:	e7f1      	b.n	800a554 <__exponent+0x58>

0800a570 <_printf_float>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	b08d      	sub	sp, #52	@ 0x34
 800a576:	460c      	mov	r4, r1
 800a578:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a57c:	4616      	mov	r6, r2
 800a57e:	461f      	mov	r7, r3
 800a580:	4605      	mov	r5, r0
 800a582:	f000 fcdb 	bl	800af3c <_localeconv_r>
 800a586:	6803      	ldr	r3, [r0, #0]
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f5 fe70 	bl	8000270 <strlen>
 800a590:	2300      	movs	r3, #0
 800a592:	930a      	str	r3, [sp, #40]	@ 0x28
 800a594:	f8d8 3000 	ldr.w	r3, [r8]
 800a598:	9005      	str	r0, [sp, #20]
 800a59a:	3307      	adds	r3, #7
 800a59c:	f023 0307 	bic.w	r3, r3, #7
 800a5a0:	f103 0208 	add.w	r2, r3, #8
 800a5a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5a8:	f8d4 b000 	ldr.w	fp, [r4]
 800a5ac:	f8c8 2000 	str.w	r2, [r8]
 800a5b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c6:	4b9c      	ldr	r3, [pc, #624]	@ (800a838 <_printf_float+0x2c8>)
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	f7f6 faae 	bl	8000b2c <__aeabi_dcmpun>
 800a5d0:	bb70      	cbnz	r0, 800a630 <_printf_float+0xc0>
 800a5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d6:	4b98      	ldr	r3, [pc, #608]	@ (800a838 <_printf_float+0x2c8>)
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	f7f6 fa88 	bl	8000af0 <__aeabi_dcmple>
 800a5e0:	bb30      	cbnz	r0, 800a630 <_printf_float+0xc0>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	f7f6 fa77 	bl	8000adc <__aeabi_dcmplt>
 800a5ee:	b110      	cbz	r0, 800a5f6 <_printf_float+0x86>
 800a5f0:	232d      	movs	r3, #45	@ 0x2d
 800a5f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5f6:	4a91      	ldr	r2, [pc, #580]	@ (800a83c <_printf_float+0x2cc>)
 800a5f8:	4b91      	ldr	r3, [pc, #580]	@ (800a840 <_printf_float+0x2d0>)
 800a5fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5fe:	bf94      	ite	ls
 800a600:	4690      	movls	r8, r2
 800a602:	4698      	movhi	r8, r3
 800a604:	2303      	movs	r3, #3
 800a606:	6123      	str	r3, [r4, #16]
 800a608:	f02b 0304 	bic.w	r3, fp, #4
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	f04f 0900 	mov.w	r9, #0
 800a612:	9700      	str	r7, [sp, #0]
 800a614:	4633      	mov	r3, r6
 800a616:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f9d2 	bl	800a9c4 <_printf_common>
 800a620:	3001      	adds	r0, #1
 800a622:	f040 808d 	bne.w	800a740 <_printf_float+0x1d0>
 800a626:	f04f 30ff 	mov.w	r0, #4294967295
 800a62a:	b00d      	add	sp, #52	@ 0x34
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa78 	bl	8000b2c <__aeabi_dcmpun>
 800a63c:	b140      	cbz	r0, 800a650 <_printf_float+0xe0>
 800a63e:	464b      	mov	r3, r9
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfbc      	itt	lt
 800a644:	232d      	movlt	r3, #45	@ 0x2d
 800a646:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a64a:	4a7e      	ldr	r2, [pc, #504]	@ (800a844 <_printf_float+0x2d4>)
 800a64c:	4b7e      	ldr	r3, [pc, #504]	@ (800a848 <_printf_float+0x2d8>)
 800a64e:	e7d4      	b.n	800a5fa <_printf_float+0x8a>
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a656:	9206      	str	r2, [sp, #24]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	d13b      	bne.n	800a6d4 <_printf_float+0x164>
 800a65c:	2306      	movs	r3, #6
 800a65e:	6063      	str	r3, [r4, #4]
 800a660:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a664:	2300      	movs	r3, #0
 800a666:	6022      	str	r2, [r4, #0]
 800a668:	9303      	str	r3, [sp, #12]
 800a66a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a66c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a670:	ab09      	add	r3, sp, #36	@ 0x24
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	6861      	ldr	r1, [r4, #4]
 800a676:	ec49 8b10 	vmov	d0, r8, r9
 800a67a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a67e:	4628      	mov	r0, r5
 800a680:	f7ff fed7 	bl	800a432 <__cvt>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a688:	2b47      	cmp	r3, #71	@ 0x47
 800a68a:	4680      	mov	r8, r0
 800a68c:	d129      	bne.n	800a6e2 <_printf_float+0x172>
 800a68e:	1cc8      	adds	r0, r1, #3
 800a690:	db02      	blt.n	800a698 <_printf_float+0x128>
 800a692:	6863      	ldr	r3, [r4, #4]
 800a694:	4299      	cmp	r1, r3
 800a696:	dd41      	ble.n	800a71c <_printf_float+0x1ac>
 800a698:	f1aa 0a02 	sub.w	sl, sl, #2
 800a69c:	fa5f fa8a 	uxtb.w	sl, sl
 800a6a0:	3901      	subs	r1, #1
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6aa:	f7ff ff27 	bl	800a4fc <__exponent>
 800a6ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6b0:	1813      	adds	r3, r2, r0
 800a6b2:	2a01      	cmp	r2, #1
 800a6b4:	4681      	mov	r9, r0
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	dc02      	bgt.n	800a6c0 <_printf_float+0x150>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	07d2      	lsls	r2, r2, #31
 800a6be:	d501      	bpl.n	800a6c4 <_printf_float+0x154>
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	6123      	str	r3, [r4, #16]
 800a6c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0a2      	beq.n	800a612 <_printf_float+0xa2>
 800a6cc:	232d      	movs	r3, #45	@ 0x2d
 800a6ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d2:	e79e      	b.n	800a612 <_printf_float+0xa2>
 800a6d4:	9a06      	ldr	r2, [sp, #24]
 800a6d6:	2a47      	cmp	r2, #71	@ 0x47
 800a6d8:	d1c2      	bne.n	800a660 <_printf_float+0xf0>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1c0      	bne.n	800a660 <_printf_float+0xf0>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7bd      	b.n	800a65e <_printf_float+0xee>
 800a6e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6e6:	d9db      	bls.n	800a6a0 <_printf_float+0x130>
 800a6e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6ec:	d118      	bne.n	800a720 <_printf_float+0x1b0>
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	dd0b      	ble.n	800a70c <_printf_float+0x19c>
 800a6f4:	6121      	str	r1, [r4, #16]
 800a6f6:	b913      	cbnz	r3, 800a6fe <_printf_float+0x18e>
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	07d0      	lsls	r0, r2, #31
 800a6fc:	d502      	bpl.n	800a704 <_printf_float+0x194>
 800a6fe:	3301      	adds	r3, #1
 800a700:	440b      	add	r3, r1
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	e7db      	b.n	800a6c4 <_printf_float+0x154>
 800a70c:	b913      	cbnz	r3, 800a714 <_printf_float+0x1a4>
 800a70e:	6822      	ldr	r2, [r4, #0]
 800a710:	07d2      	lsls	r2, r2, #31
 800a712:	d501      	bpl.n	800a718 <_printf_float+0x1a8>
 800a714:	3302      	adds	r3, #2
 800a716:	e7f4      	b.n	800a702 <_printf_float+0x192>
 800a718:	2301      	movs	r3, #1
 800a71a:	e7f2      	b.n	800a702 <_printf_float+0x192>
 800a71c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a722:	4299      	cmp	r1, r3
 800a724:	db05      	blt.n	800a732 <_printf_float+0x1c2>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6121      	str	r1, [r4, #16]
 800a72a:	07d8      	lsls	r0, r3, #31
 800a72c:	d5ea      	bpl.n	800a704 <_printf_float+0x194>
 800a72e:	1c4b      	adds	r3, r1, #1
 800a730:	e7e7      	b.n	800a702 <_printf_float+0x192>
 800a732:	2900      	cmp	r1, #0
 800a734:	bfd4      	ite	le
 800a736:	f1c1 0202 	rsble	r2, r1, #2
 800a73a:	2201      	movgt	r2, #1
 800a73c:	4413      	add	r3, r2
 800a73e:	e7e0      	b.n	800a702 <_printf_float+0x192>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	055a      	lsls	r2, r3, #21
 800a744:	d407      	bmi.n	800a756 <_printf_float+0x1e6>
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	4642      	mov	r2, r8
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	d12b      	bne.n	800a7ac <_printf_float+0x23c>
 800a754:	e767      	b.n	800a626 <_printf_float+0xb6>
 800a756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a75a:	f240 80dd 	bls.w	800a918 <_printf_float+0x3a8>
 800a75e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a762:	2200      	movs	r2, #0
 800a764:	2300      	movs	r3, #0
 800a766:	f7f6 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d033      	beq.n	800a7d6 <_printf_float+0x266>
 800a76e:	4a37      	ldr	r2, [pc, #220]	@ (800a84c <_printf_float+0x2dc>)
 800a770:	2301      	movs	r3, #1
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f af54 	beq.w	800a626 <_printf_float+0xb6>
 800a77e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a782:	4543      	cmp	r3, r8
 800a784:	db02      	blt.n	800a78c <_printf_float+0x21c>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	07d8      	lsls	r0, r3, #31
 800a78a:	d50f      	bpl.n	800a7ac <_printf_float+0x23c>
 800a78c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	f43f af45 	beq.w	800a626 <_printf_float+0xb6>
 800a79c:	f04f 0900 	mov.w	r9, #0
 800a7a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7a4:	f104 0a1a 	add.w	sl, r4, #26
 800a7a8:	45c8      	cmp	r8, r9
 800a7aa:	dc09      	bgt.n	800a7c0 <_printf_float+0x250>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	079b      	lsls	r3, r3, #30
 800a7b0:	f100 8103 	bmi.w	800a9ba <_printf_float+0x44a>
 800a7b4:	68e0      	ldr	r0, [r4, #12]
 800a7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b8:	4298      	cmp	r0, r3
 800a7ba:	bfb8      	it	lt
 800a7bc:	4618      	movlt	r0, r3
 800a7be:	e734      	b.n	800a62a <_printf_float+0xba>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4652      	mov	r2, sl
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b8      	blx	r7
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f43f af2b 	beq.w	800a626 <_printf_float+0xb6>
 800a7d0:	f109 0901 	add.w	r9, r9, #1
 800a7d4:	e7e8      	b.n	800a7a8 <_printf_float+0x238>
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc39      	bgt.n	800a850 <_printf_float+0x2e0>
 800a7dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a84c <_printf_float+0x2dc>)
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f af1d 	beq.w	800a626 <_printf_float+0xb6>
 800a7ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7f0:	ea59 0303 	orrs.w	r3, r9, r3
 800a7f4:	d102      	bne.n	800a7fc <_printf_float+0x28c>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	07d9      	lsls	r1, r3, #31
 800a7fa:	d5d7      	bpl.n	800a7ac <_printf_float+0x23c>
 800a7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a800:	4631      	mov	r1, r6
 800a802:	4628      	mov	r0, r5
 800a804:	47b8      	blx	r7
 800a806:	3001      	adds	r0, #1
 800a808:	f43f af0d 	beq.w	800a626 <_printf_float+0xb6>
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	f104 0b1a 	add.w	fp, r4, #26
 800a814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a816:	425b      	negs	r3, r3
 800a818:	4553      	cmp	r3, sl
 800a81a:	dc01      	bgt.n	800a820 <_printf_float+0x2b0>
 800a81c:	464b      	mov	r3, r9
 800a81e:	e793      	b.n	800a748 <_printf_float+0x1d8>
 800a820:	2301      	movs	r3, #1
 800a822:	465a      	mov	r2, fp
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f aefb 	beq.w	800a626 <_printf_float+0xb6>
 800a830:	f10a 0a01 	add.w	sl, sl, #1
 800a834:	e7ee      	b.n	800a814 <_printf_float+0x2a4>
 800a836:	bf00      	nop
 800a838:	7fefffff 	.word	0x7fefffff
 800a83c:	0800d1a0 	.word	0x0800d1a0
 800a840:	0800d1a4 	.word	0x0800d1a4
 800a844:	0800d1a8 	.word	0x0800d1a8
 800a848:	0800d1ac 	.word	0x0800d1ac
 800a84c:	0800d1b0 	.word	0x0800d1b0
 800a850:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a852:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a856:	4553      	cmp	r3, sl
 800a858:	bfa8      	it	ge
 800a85a:	4653      	movge	r3, sl
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	4699      	mov	r9, r3
 800a860:	dc36      	bgt.n	800a8d0 <_printf_float+0x360>
 800a862:	f04f 0b00 	mov.w	fp, #0
 800a866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a86a:	f104 021a 	add.w	r2, r4, #26
 800a86e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a870:	9306      	str	r3, [sp, #24]
 800a872:	eba3 0309 	sub.w	r3, r3, r9
 800a876:	455b      	cmp	r3, fp
 800a878:	dc31      	bgt.n	800a8de <_printf_float+0x36e>
 800a87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87c:	459a      	cmp	sl, r3
 800a87e:	dc3a      	bgt.n	800a8f6 <_printf_float+0x386>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	07da      	lsls	r2, r3, #31
 800a884:	d437      	bmi.n	800a8f6 <_printf_float+0x386>
 800a886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a888:	ebaa 0903 	sub.w	r9, sl, r3
 800a88c:	9b06      	ldr	r3, [sp, #24]
 800a88e:	ebaa 0303 	sub.w	r3, sl, r3
 800a892:	4599      	cmp	r9, r3
 800a894:	bfa8      	it	ge
 800a896:	4699      	movge	r9, r3
 800a898:	f1b9 0f00 	cmp.w	r9, #0
 800a89c:	dc33      	bgt.n	800a906 <_printf_float+0x396>
 800a89e:	f04f 0800 	mov.w	r8, #0
 800a8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8a6:	f104 0b1a 	add.w	fp, r4, #26
 800a8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ac:	ebaa 0303 	sub.w	r3, sl, r3
 800a8b0:	eba3 0309 	sub.w	r3, r3, r9
 800a8b4:	4543      	cmp	r3, r8
 800a8b6:	f77f af79 	ble.w	800a7ac <_printf_float+0x23c>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	465a      	mov	r2, fp
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b8      	blx	r7
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f43f aeae 	beq.w	800a626 <_printf_float+0xb6>
 800a8ca:	f108 0801 	add.w	r8, r8, #1
 800a8ce:	e7ec      	b.n	800a8aa <_printf_float+0x33a>
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	47b8      	blx	r7
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d1c2      	bne.n	800a862 <_printf_float+0x2f2>
 800a8dc:	e6a3      	b.n	800a626 <_printf_float+0xb6>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	9206      	str	r2, [sp, #24]
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f43f ae9c 	beq.w	800a626 <_printf_float+0xb6>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	f10b 0b01 	add.w	fp, fp, #1
 800a8f4:	e7bb      	b.n	800a86e <_printf_float+0x2fe>
 800a8f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	47b8      	blx	r7
 800a900:	3001      	adds	r0, #1
 800a902:	d1c0      	bne.n	800a886 <_printf_float+0x316>
 800a904:	e68f      	b.n	800a626 <_printf_float+0xb6>
 800a906:	9a06      	ldr	r2, [sp, #24]
 800a908:	464b      	mov	r3, r9
 800a90a:	4442      	add	r2, r8
 800a90c:	4631      	mov	r1, r6
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	d1c3      	bne.n	800a89e <_printf_float+0x32e>
 800a916:	e686      	b.n	800a626 <_printf_float+0xb6>
 800a918:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a91c:	f1ba 0f01 	cmp.w	sl, #1
 800a920:	dc01      	bgt.n	800a926 <_printf_float+0x3b6>
 800a922:	07db      	lsls	r3, r3, #31
 800a924:	d536      	bpl.n	800a994 <_printf_float+0x424>
 800a926:	2301      	movs	r3, #1
 800a928:	4642      	mov	r2, r8
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	f43f ae78 	beq.w	800a626 <_printf_float+0xb6>
 800a936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b8      	blx	r7
 800a940:	3001      	adds	r0, #1
 800a942:	f43f ae70 	beq.w	800a626 <_printf_float+0xb6>
 800a946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
 800a94e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a952:	f7f6 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a956:	b9c0      	cbnz	r0, 800a98a <_printf_float+0x41a>
 800a958:	4653      	mov	r3, sl
 800a95a:	f108 0201 	add.w	r2, r8, #1
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	d10c      	bne.n	800a982 <_printf_float+0x412>
 800a968:	e65d      	b.n	800a626 <_printf_float+0xb6>
 800a96a:	2301      	movs	r3, #1
 800a96c:	465a      	mov	r2, fp
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f ae56 	beq.w	800a626 <_printf_float+0xb6>
 800a97a:	f108 0801 	add.w	r8, r8, #1
 800a97e:	45d0      	cmp	r8, sl
 800a980:	dbf3      	blt.n	800a96a <_printf_float+0x3fa>
 800a982:	464b      	mov	r3, r9
 800a984:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a988:	e6df      	b.n	800a74a <_printf_float+0x1da>
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	f104 0b1a 	add.w	fp, r4, #26
 800a992:	e7f4      	b.n	800a97e <_printf_float+0x40e>
 800a994:	2301      	movs	r3, #1
 800a996:	4642      	mov	r2, r8
 800a998:	e7e1      	b.n	800a95e <_printf_float+0x3ee>
 800a99a:	2301      	movs	r3, #1
 800a99c:	464a      	mov	r2, r9
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae3e 	beq.w	800a626 <_printf_float+0xb6>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9b2:	1a5b      	subs	r3, r3, r1
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	dcf0      	bgt.n	800a99a <_printf_float+0x42a>
 800a9b8:	e6fc      	b.n	800a7b4 <_printf_float+0x244>
 800a9ba:	f04f 0800 	mov.w	r8, #0
 800a9be:	f104 0919 	add.w	r9, r4, #25
 800a9c2:	e7f4      	b.n	800a9ae <_printf_float+0x43e>

0800a9c4 <_printf_common>:
 800a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	4698      	mov	r8, r3
 800a9cc:	688a      	ldr	r2, [r1, #8]
 800a9ce:	690b      	ldr	r3, [r1, #16]
 800a9d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	bfb8      	it	lt
 800a9d8:	4613      	movlt	r3, r2
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b10a      	cbz	r2, 800a9ea <_printf_common+0x26>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	6033      	str	r3, [r6, #0]
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	0699      	lsls	r1, r3, #26
 800a9ee:	bf42      	ittt	mi
 800a9f0:	6833      	ldrmi	r3, [r6, #0]
 800a9f2:	3302      	addmi	r3, #2
 800a9f4:	6033      	strmi	r3, [r6, #0]
 800a9f6:	6825      	ldr	r5, [r4, #0]
 800a9f8:	f015 0506 	ands.w	r5, r5, #6
 800a9fc:	d106      	bne.n	800aa0c <_printf_common+0x48>
 800a9fe:	f104 0a19 	add.w	sl, r4, #25
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	6832      	ldr	r2, [r6, #0]
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dc26      	bgt.n	800aa5a <_printf_common+0x96>
 800aa0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	3b00      	subs	r3, #0
 800aa14:	bf18      	it	ne
 800aa16:	2301      	movne	r3, #1
 800aa18:	0692      	lsls	r2, r2, #26
 800aa1a:	d42b      	bmi.n	800aa74 <_printf_common+0xb0>
 800aa1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa20:	4641      	mov	r1, r8
 800aa22:	4638      	mov	r0, r7
 800aa24:	47c8      	blx	r9
 800aa26:	3001      	adds	r0, #1
 800aa28:	d01e      	beq.n	800aa68 <_printf_common+0xa4>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	f003 0306 	and.w	r3, r3, #6
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	bf02      	ittt	eq
 800aa36:	68e5      	ldreq	r5, [r4, #12]
 800aa38:	6833      	ldreq	r3, [r6, #0]
 800aa3a:	1aed      	subeq	r5, r5, r3
 800aa3c:	68a3      	ldr	r3, [r4, #8]
 800aa3e:	bf0c      	ite	eq
 800aa40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa44:	2500      	movne	r5, #0
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bfc4      	itt	gt
 800aa4a:	1a9b      	subgt	r3, r3, r2
 800aa4c:	18ed      	addgt	r5, r5, r3
 800aa4e:	2600      	movs	r6, #0
 800aa50:	341a      	adds	r4, #26
 800aa52:	42b5      	cmp	r5, r6
 800aa54:	d11a      	bne.n	800aa8c <_printf_common+0xc8>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e008      	b.n	800aa6c <_printf_common+0xa8>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4652      	mov	r2, sl
 800aa5e:	4641      	mov	r1, r8
 800aa60:	4638      	mov	r0, r7
 800aa62:	47c8      	blx	r9
 800aa64:	3001      	adds	r0, #1
 800aa66:	d103      	bne.n	800aa70 <_printf_common+0xac>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa70:	3501      	adds	r5, #1
 800aa72:	e7c6      	b.n	800aa02 <_printf_common+0x3e>
 800aa74:	18e1      	adds	r1, r4, r3
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	2030      	movs	r0, #48	@ 0x30
 800aa7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa7e:	4422      	add	r2, r4
 800aa80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa88:	3302      	adds	r3, #2
 800aa8a:	e7c7      	b.n	800aa1c <_printf_common+0x58>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4622      	mov	r2, r4
 800aa90:	4641      	mov	r1, r8
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c8      	blx	r9
 800aa96:	3001      	adds	r0, #1
 800aa98:	d0e6      	beq.n	800aa68 <_printf_common+0xa4>
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7d9      	b.n	800aa52 <_printf_common+0x8e>
	...

0800aaa0 <_printf_i>:
 800aaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	7e0f      	ldrb	r7, [r1, #24]
 800aaa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaa8:	2f78      	cmp	r7, #120	@ 0x78
 800aaaa:	4691      	mov	r9, r2
 800aaac:	4680      	mov	r8, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	469a      	mov	sl, r3
 800aab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aab6:	d807      	bhi.n	800aac8 <_printf_i+0x28>
 800aab8:	2f62      	cmp	r7, #98	@ 0x62
 800aaba:	d80a      	bhi.n	800aad2 <_printf_i+0x32>
 800aabc:	2f00      	cmp	r7, #0
 800aabe:	f000 80d2 	beq.w	800ac66 <_printf_i+0x1c6>
 800aac2:	2f58      	cmp	r7, #88	@ 0x58
 800aac4:	f000 80b9 	beq.w	800ac3a <_printf_i+0x19a>
 800aac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aacc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aad0:	e03a      	b.n	800ab48 <_printf_i+0xa8>
 800aad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aad6:	2b15      	cmp	r3, #21
 800aad8:	d8f6      	bhi.n	800aac8 <_printf_i+0x28>
 800aada:	a101      	add	r1, pc, #4	@ (adr r1, 800aae0 <_printf_i+0x40>)
 800aadc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aae0:	0800ab39 	.word	0x0800ab39
 800aae4:	0800ab4d 	.word	0x0800ab4d
 800aae8:	0800aac9 	.word	0x0800aac9
 800aaec:	0800aac9 	.word	0x0800aac9
 800aaf0:	0800aac9 	.word	0x0800aac9
 800aaf4:	0800aac9 	.word	0x0800aac9
 800aaf8:	0800ab4d 	.word	0x0800ab4d
 800aafc:	0800aac9 	.word	0x0800aac9
 800ab00:	0800aac9 	.word	0x0800aac9
 800ab04:	0800aac9 	.word	0x0800aac9
 800ab08:	0800aac9 	.word	0x0800aac9
 800ab0c:	0800ac4d 	.word	0x0800ac4d
 800ab10:	0800ab77 	.word	0x0800ab77
 800ab14:	0800ac07 	.word	0x0800ac07
 800ab18:	0800aac9 	.word	0x0800aac9
 800ab1c:	0800aac9 	.word	0x0800aac9
 800ab20:	0800ac6f 	.word	0x0800ac6f
 800ab24:	0800aac9 	.word	0x0800aac9
 800ab28:	0800ab77 	.word	0x0800ab77
 800ab2c:	0800aac9 	.word	0x0800aac9
 800ab30:	0800aac9 	.word	0x0800aac9
 800ab34:	0800ac0f 	.word	0x0800ac0f
 800ab38:	6833      	ldr	r3, [r6, #0]
 800ab3a:	1d1a      	adds	r2, r3, #4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	6032      	str	r2, [r6, #0]
 800ab40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e09d      	b.n	800ac88 <_printf_i+0x1e8>
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	6820      	ldr	r0, [r4, #0]
 800ab50:	1d19      	adds	r1, r3, #4
 800ab52:	6031      	str	r1, [r6, #0]
 800ab54:	0606      	lsls	r6, r0, #24
 800ab56:	d501      	bpl.n	800ab5c <_printf_i+0xbc>
 800ab58:	681d      	ldr	r5, [r3, #0]
 800ab5a:	e003      	b.n	800ab64 <_printf_i+0xc4>
 800ab5c:	0645      	lsls	r5, r0, #25
 800ab5e:	d5fb      	bpl.n	800ab58 <_printf_i+0xb8>
 800ab60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	da03      	bge.n	800ab70 <_printf_i+0xd0>
 800ab68:	232d      	movs	r3, #45	@ 0x2d
 800ab6a:	426d      	negs	r5, r5
 800ab6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab70:	4859      	ldr	r0, [pc, #356]	@ (800acd8 <_printf_i+0x238>)
 800ab72:	230a      	movs	r3, #10
 800ab74:	e011      	b.n	800ab9a <_printf_i+0xfa>
 800ab76:	6821      	ldr	r1, [r4, #0]
 800ab78:	6833      	ldr	r3, [r6, #0]
 800ab7a:	0608      	lsls	r0, r1, #24
 800ab7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab80:	d402      	bmi.n	800ab88 <_printf_i+0xe8>
 800ab82:	0649      	lsls	r1, r1, #25
 800ab84:	bf48      	it	mi
 800ab86:	b2ad      	uxthmi	r5, r5
 800ab88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab8a:	4853      	ldr	r0, [pc, #332]	@ (800acd8 <_printf_i+0x238>)
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	bf14      	ite	ne
 800ab90:	230a      	movne	r3, #10
 800ab92:	2308      	moveq	r3, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab9a:	6866      	ldr	r6, [r4, #4]
 800ab9c:	60a6      	str	r6, [r4, #8]
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	bfa2      	ittt	ge
 800aba2:	6821      	ldrge	r1, [r4, #0]
 800aba4:	f021 0104 	bicge.w	r1, r1, #4
 800aba8:	6021      	strge	r1, [r4, #0]
 800abaa:	b90d      	cbnz	r5, 800abb0 <_printf_i+0x110>
 800abac:	2e00      	cmp	r6, #0
 800abae:	d04b      	beq.n	800ac48 <_printf_i+0x1a8>
 800abb0:	4616      	mov	r6, r2
 800abb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800abb6:	fb03 5711 	mls	r7, r3, r1, r5
 800abba:	5dc7      	ldrb	r7, [r0, r7]
 800abbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abc0:	462f      	mov	r7, r5
 800abc2:	42bb      	cmp	r3, r7
 800abc4:	460d      	mov	r5, r1
 800abc6:	d9f4      	bls.n	800abb2 <_printf_i+0x112>
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d10b      	bne.n	800abe4 <_printf_i+0x144>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	07df      	lsls	r7, r3, #31
 800abd0:	d508      	bpl.n	800abe4 <_printf_i+0x144>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	6861      	ldr	r1, [r4, #4]
 800abd6:	4299      	cmp	r1, r3
 800abd8:	bfde      	ittt	le
 800abda:	2330      	movle	r3, #48	@ 0x30
 800abdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abe4:	1b92      	subs	r2, r2, r6
 800abe6:	6122      	str	r2, [r4, #16]
 800abe8:	f8cd a000 	str.w	sl, [sp]
 800abec:	464b      	mov	r3, r9
 800abee:	aa03      	add	r2, sp, #12
 800abf0:	4621      	mov	r1, r4
 800abf2:	4640      	mov	r0, r8
 800abf4:	f7ff fee6 	bl	800a9c4 <_printf_common>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d14a      	bne.n	800ac92 <_printf_i+0x1f2>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b004      	add	sp, #16
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	f043 0320 	orr.w	r3, r3, #32
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	4833      	ldr	r0, [pc, #204]	@ (800acdc <_printf_i+0x23c>)
 800ac10:	2778      	movs	r7, #120	@ 0x78
 800ac12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	6831      	ldr	r1, [r6, #0]
 800ac1a:	061f      	lsls	r7, r3, #24
 800ac1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac20:	d402      	bmi.n	800ac28 <_printf_i+0x188>
 800ac22:	065f      	lsls	r7, r3, #25
 800ac24:	bf48      	it	mi
 800ac26:	b2ad      	uxthmi	r5, r5
 800ac28:	6031      	str	r1, [r6, #0]
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	bf44      	itt	mi
 800ac2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac32:	6023      	strmi	r3, [r4, #0]
 800ac34:	b11d      	cbz	r5, 800ac3e <_printf_i+0x19e>
 800ac36:	2310      	movs	r3, #16
 800ac38:	e7ac      	b.n	800ab94 <_printf_i+0xf4>
 800ac3a:	4827      	ldr	r0, [pc, #156]	@ (800acd8 <_printf_i+0x238>)
 800ac3c:	e7e9      	b.n	800ac12 <_printf_i+0x172>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	f023 0320 	bic.w	r3, r3, #32
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	e7f6      	b.n	800ac36 <_printf_i+0x196>
 800ac48:	4616      	mov	r6, r2
 800ac4a:	e7bd      	b.n	800abc8 <_printf_i+0x128>
 800ac4c:	6833      	ldr	r3, [r6, #0]
 800ac4e:	6825      	ldr	r5, [r4, #0]
 800ac50:	6961      	ldr	r1, [r4, #20]
 800ac52:	1d18      	adds	r0, r3, #4
 800ac54:	6030      	str	r0, [r6, #0]
 800ac56:	062e      	lsls	r6, r5, #24
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	d501      	bpl.n	800ac60 <_printf_i+0x1c0>
 800ac5c:	6019      	str	r1, [r3, #0]
 800ac5e:	e002      	b.n	800ac66 <_printf_i+0x1c6>
 800ac60:	0668      	lsls	r0, r5, #25
 800ac62:	d5fb      	bpl.n	800ac5c <_printf_i+0x1bc>
 800ac64:	8019      	strh	r1, [r3, #0]
 800ac66:	2300      	movs	r3, #0
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	4616      	mov	r6, r2
 800ac6c:	e7bc      	b.n	800abe8 <_printf_i+0x148>
 800ac6e:	6833      	ldr	r3, [r6, #0]
 800ac70:	1d1a      	adds	r2, r3, #4
 800ac72:	6032      	str	r2, [r6, #0]
 800ac74:	681e      	ldr	r6, [r3, #0]
 800ac76:	6862      	ldr	r2, [r4, #4]
 800ac78:	2100      	movs	r1, #0
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f7f5 faa8 	bl	80001d0 <memchr>
 800ac80:	b108      	cbz	r0, 800ac86 <_printf_i+0x1e6>
 800ac82:	1b80      	subs	r0, r0, r6
 800ac84:	6060      	str	r0, [r4, #4]
 800ac86:	6863      	ldr	r3, [r4, #4]
 800ac88:	6123      	str	r3, [r4, #16]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac90:	e7aa      	b.n	800abe8 <_printf_i+0x148>
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	4632      	mov	r2, r6
 800ac96:	4649      	mov	r1, r9
 800ac98:	4640      	mov	r0, r8
 800ac9a:	47d0      	blx	sl
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d0ad      	beq.n	800abfc <_printf_i+0x15c>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	079b      	lsls	r3, r3, #30
 800aca4:	d413      	bmi.n	800acce <_printf_i+0x22e>
 800aca6:	68e0      	ldr	r0, [r4, #12]
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	4298      	cmp	r0, r3
 800acac:	bfb8      	it	lt
 800acae:	4618      	movlt	r0, r3
 800acb0:	e7a6      	b.n	800ac00 <_printf_i+0x160>
 800acb2:	2301      	movs	r3, #1
 800acb4:	4632      	mov	r2, r6
 800acb6:	4649      	mov	r1, r9
 800acb8:	4640      	mov	r0, r8
 800acba:	47d0      	blx	sl
 800acbc:	3001      	adds	r0, #1
 800acbe:	d09d      	beq.n	800abfc <_printf_i+0x15c>
 800acc0:	3501      	adds	r5, #1
 800acc2:	68e3      	ldr	r3, [r4, #12]
 800acc4:	9903      	ldr	r1, [sp, #12]
 800acc6:	1a5b      	subs	r3, r3, r1
 800acc8:	42ab      	cmp	r3, r5
 800acca:	dcf2      	bgt.n	800acb2 <_printf_i+0x212>
 800accc:	e7eb      	b.n	800aca6 <_printf_i+0x206>
 800acce:	2500      	movs	r5, #0
 800acd0:	f104 0619 	add.w	r6, r4, #25
 800acd4:	e7f5      	b.n	800acc2 <_printf_i+0x222>
 800acd6:	bf00      	nop
 800acd8:	0800d1b2 	.word	0x0800d1b2
 800acdc:	0800d1c3 	.word	0x0800d1c3

0800ace0 <std>:
 800ace0:	2300      	movs	r3, #0
 800ace2:	b510      	push	{r4, lr}
 800ace4:	4604      	mov	r4, r0
 800ace6:	e9c0 3300 	strd	r3, r3, [r0]
 800acea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acee:	6083      	str	r3, [r0, #8]
 800acf0:	8181      	strh	r1, [r0, #12]
 800acf2:	6643      	str	r3, [r0, #100]	@ 0x64
 800acf4:	81c2      	strh	r2, [r0, #14]
 800acf6:	6183      	str	r3, [r0, #24]
 800acf8:	4619      	mov	r1, r3
 800acfa:	2208      	movs	r2, #8
 800acfc:	305c      	adds	r0, #92	@ 0x5c
 800acfe:	f000 f914 	bl	800af2a <memset>
 800ad02:	4b0d      	ldr	r3, [pc, #52]	@ (800ad38 <std+0x58>)
 800ad04:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad06:	4b0d      	ldr	r3, [pc, #52]	@ (800ad3c <std+0x5c>)
 800ad08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <std+0x60>)
 800ad0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad44 <std+0x64>)
 800ad10:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad12:	4b0d      	ldr	r3, [pc, #52]	@ (800ad48 <std+0x68>)
 800ad14:	6224      	str	r4, [r4, #32]
 800ad16:	429c      	cmp	r4, r3
 800ad18:	d006      	beq.n	800ad28 <std+0x48>
 800ad1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad1e:	4294      	cmp	r4, r2
 800ad20:	d002      	beq.n	800ad28 <std+0x48>
 800ad22:	33d0      	adds	r3, #208	@ 0xd0
 800ad24:	429c      	cmp	r4, r3
 800ad26:	d105      	bne.n	800ad34 <std+0x54>
 800ad28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad30:	f000 b978 	b.w	800b024 <__retarget_lock_init_recursive>
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	bf00      	nop
 800ad38:	0800aea5 	.word	0x0800aea5
 800ad3c:	0800aec7 	.word	0x0800aec7
 800ad40:	0800aeff 	.word	0x0800aeff
 800ad44:	0800af23 	.word	0x0800af23
 800ad48:	200008b0 	.word	0x200008b0

0800ad4c <stdio_exit_handler>:
 800ad4c:	4a02      	ldr	r2, [pc, #8]	@ (800ad58 <stdio_exit_handler+0xc>)
 800ad4e:	4903      	ldr	r1, [pc, #12]	@ (800ad5c <stdio_exit_handler+0x10>)
 800ad50:	4803      	ldr	r0, [pc, #12]	@ (800ad60 <stdio_exit_handler+0x14>)
 800ad52:	f000 b869 	b.w	800ae28 <_fwalk_sglue>
 800ad56:	bf00      	nop
 800ad58:	20000014 	.word	0x20000014
 800ad5c:	0800c985 	.word	0x0800c985
 800ad60:	20000024 	.word	0x20000024

0800ad64 <cleanup_stdio>:
 800ad64:	6841      	ldr	r1, [r0, #4]
 800ad66:	4b0c      	ldr	r3, [pc, #48]	@ (800ad98 <cleanup_stdio+0x34>)
 800ad68:	4299      	cmp	r1, r3
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	d001      	beq.n	800ad74 <cleanup_stdio+0x10>
 800ad70:	f001 fe08 	bl	800c984 <_fflush_r>
 800ad74:	68a1      	ldr	r1, [r4, #8]
 800ad76:	4b09      	ldr	r3, [pc, #36]	@ (800ad9c <cleanup_stdio+0x38>)
 800ad78:	4299      	cmp	r1, r3
 800ad7a:	d002      	beq.n	800ad82 <cleanup_stdio+0x1e>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f001 fe01 	bl	800c984 <_fflush_r>
 800ad82:	68e1      	ldr	r1, [r4, #12]
 800ad84:	4b06      	ldr	r3, [pc, #24]	@ (800ada0 <cleanup_stdio+0x3c>)
 800ad86:	4299      	cmp	r1, r3
 800ad88:	d004      	beq.n	800ad94 <cleanup_stdio+0x30>
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad90:	f001 bdf8 	b.w	800c984 <_fflush_r>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	bf00      	nop
 800ad98:	200008b0 	.word	0x200008b0
 800ad9c:	20000918 	.word	0x20000918
 800ada0:	20000980 	.word	0x20000980

0800ada4 <global_stdio_init.part.0>:
 800ada4:	b510      	push	{r4, lr}
 800ada6:	4b0b      	ldr	r3, [pc, #44]	@ (800add4 <global_stdio_init.part.0+0x30>)
 800ada8:	4c0b      	ldr	r4, [pc, #44]	@ (800add8 <global_stdio_init.part.0+0x34>)
 800adaa:	4a0c      	ldr	r2, [pc, #48]	@ (800addc <global_stdio_init.part.0+0x38>)
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	4620      	mov	r0, r4
 800adb0:	2200      	movs	r2, #0
 800adb2:	2104      	movs	r1, #4
 800adb4:	f7ff ff94 	bl	800ace0 <std>
 800adb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adbc:	2201      	movs	r2, #1
 800adbe:	2109      	movs	r1, #9
 800adc0:	f7ff ff8e 	bl	800ace0 <std>
 800adc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800adc8:	2202      	movs	r2, #2
 800adca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adce:	2112      	movs	r1, #18
 800add0:	f7ff bf86 	b.w	800ace0 <std>
 800add4:	200009e8 	.word	0x200009e8
 800add8:	200008b0 	.word	0x200008b0
 800addc:	0800ad4d 	.word	0x0800ad4d

0800ade0 <__sfp_lock_acquire>:
 800ade0:	4801      	ldr	r0, [pc, #4]	@ (800ade8 <__sfp_lock_acquire+0x8>)
 800ade2:	f000 b920 	b.w	800b026 <__retarget_lock_acquire_recursive>
 800ade6:	bf00      	nop
 800ade8:	200009f1 	.word	0x200009f1

0800adec <__sfp_lock_release>:
 800adec:	4801      	ldr	r0, [pc, #4]	@ (800adf4 <__sfp_lock_release+0x8>)
 800adee:	f000 b91b 	b.w	800b028 <__retarget_lock_release_recursive>
 800adf2:	bf00      	nop
 800adf4:	200009f1 	.word	0x200009f1

0800adf8 <__sinit>:
 800adf8:	b510      	push	{r4, lr}
 800adfa:	4604      	mov	r4, r0
 800adfc:	f7ff fff0 	bl	800ade0 <__sfp_lock_acquire>
 800ae00:	6a23      	ldr	r3, [r4, #32]
 800ae02:	b11b      	cbz	r3, 800ae0c <__sinit+0x14>
 800ae04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae08:	f7ff bff0 	b.w	800adec <__sfp_lock_release>
 800ae0c:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <__sinit+0x28>)
 800ae0e:	6223      	str	r3, [r4, #32]
 800ae10:	4b04      	ldr	r3, [pc, #16]	@ (800ae24 <__sinit+0x2c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f5      	bne.n	800ae04 <__sinit+0xc>
 800ae18:	f7ff ffc4 	bl	800ada4 <global_stdio_init.part.0>
 800ae1c:	e7f2      	b.n	800ae04 <__sinit+0xc>
 800ae1e:	bf00      	nop
 800ae20:	0800ad65 	.word	0x0800ad65
 800ae24:	200009e8 	.word	0x200009e8

0800ae28 <_fwalk_sglue>:
 800ae28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	4688      	mov	r8, r1
 800ae30:	4614      	mov	r4, r2
 800ae32:	2600      	movs	r6, #0
 800ae34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae38:	f1b9 0901 	subs.w	r9, r9, #1
 800ae3c:	d505      	bpl.n	800ae4a <_fwalk_sglue+0x22>
 800ae3e:	6824      	ldr	r4, [r4, #0]
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	d1f7      	bne.n	800ae34 <_fwalk_sglue+0xc>
 800ae44:	4630      	mov	r0, r6
 800ae46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d907      	bls.n	800ae60 <_fwalk_sglue+0x38>
 800ae50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae54:	3301      	adds	r3, #1
 800ae56:	d003      	beq.n	800ae60 <_fwalk_sglue+0x38>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	47c0      	blx	r8
 800ae5e:	4306      	orrs	r6, r0
 800ae60:	3568      	adds	r5, #104	@ 0x68
 800ae62:	e7e9      	b.n	800ae38 <_fwalk_sglue+0x10>

0800ae64 <siprintf>:
 800ae64:	b40e      	push	{r1, r2, r3}
 800ae66:	b500      	push	{lr}
 800ae68:	b09c      	sub	sp, #112	@ 0x70
 800ae6a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae6c:	9002      	str	r0, [sp, #8]
 800ae6e:	9006      	str	r0, [sp, #24]
 800ae70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae74:	4809      	ldr	r0, [pc, #36]	@ (800ae9c <siprintf+0x38>)
 800ae76:	9107      	str	r1, [sp, #28]
 800ae78:	9104      	str	r1, [sp, #16]
 800ae7a:	4909      	ldr	r1, [pc, #36]	@ (800aea0 <siprintf+0x3c>)
 800ae7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae80:	9105      	str	r1, [sp, #20]
 800ae82:	6800      	ldr	r0, [r0, #0]
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	a902      	add	r1, sp, #8
 800ae88:	f001 fbfc 	bl	800c684 <_svfiprintf_r>
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	b01c      	add	sp, #112	@ 0x70
 800ae94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae98:	b003      	add	sp, #12
 800ae9a:	4770      	bx	lr
 800ae9c:	20000020 	.word	0x20000020
 800aea0:	ffff0208 	.word	0xffff0208

0800aea4 <__sread>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	f000 f86c 	bl	800af88 <_read_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	bfab      	itete	ge
 800aeb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeb6:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb8:	181b      	addge	r3, r3, r0
 800aeba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aebe:	bfac      	ite	ge
 800aec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aec2:	81a3      	strhlt	r3, [r4, #12]
 800aec4:	bd10      	pop	{r4, pc}

0800aec6 <__swrite>:
 800aec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	461f      	mov	r7, r3
 800aecc:	898b      	ldrh	r3, [r1, #12]
 800aece:	05db      	lsls	r3, r3, #23
 800aed0:	4605      	mov	r5, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	4616      	mov	r6, r2
 800aed6:	d505      	bpl.n	800aee4 <__swrite+0x1e>
 800aed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aedc:	2302      	movs	r3, #2
 800aede:	2200      	movs	r2, #0
 800aee0:	f000 f840 	bl	800af64 <_lseek_r>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	4632      	mov	r2, r6
 800aef2:	463b      	mov	r3, r7
 800aef4:	4628      	mov	r0, r5
 800aef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	f000 b857 	b.w	800afac <_write_r>

0800aefe <__sseek>:
 800aefe:	b510      	push	{r4, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af06:	f000 f82d 	bl	800af64 <_lseek_r>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	bf15      	itete	ne
 800af10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af1a:	81a3      	strheq	r3, [r4, #12]
 800af1c:	bf18      	it	ne
 800af1e:	81a3      	strhne	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__sclose>:
 800af22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af26:	f000 b80d 	b.w	800af44 <_close_r>

0800af2a <memset>:
 800af2a:	4402      	add	r2, r0
 800af2c:	4603      	mov	r3, r0
 800af2e:	4293      	cmp	r3, r2
 800af30:	d100      	bne.n	800af34 <memset+0xa>
 800af32:	4770      	bx	lr
 800af34:	f803 1b01 	strb.w	r1, [r3], #1
 800af38:	e7f9      	b.n	800af2e <memset+0x4>
	...

0800af3c <_localeconv_r>:
 800af3c:	4800      	ldr	r0, [pc, #0]	@ (800af40 <_localeconv_r+0x4>)
 800af3e:	4770      	bx	lr
 800af40:	20000160 	.word	0x20000160

0800af44 <_close_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d06      	ldr	r5, [pc, #24]	@ (800af60 <_close_r+0x1c>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	602b      	str	r3, [r5, #0]
 800af50:	f7f7 febc 	bl	8002ccc <_close>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_close_r+0x1a>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_close_r+0x1a>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	200009ec 	.word	0x200009ec

0800af64 <_lseek_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	@ (800af84 <_lseek_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f7 fed1 	bl	8002d1a <_lseek>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_lseek_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_lseek_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	200009ec 	.word	0x200009ec

0800af88 <_read_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d07      	ldr	r5, [pc, #28]	@ (800afa8 <_read_r+0x20>)
 800af8c:	4604      	mov	r4, r0
 800af8e:	4608      	mov	r0, r1
 800af90:	4611      	mov	r1, r2
 800af92:	2200      	movs	r2, #0
 800af94:	602a      	str	r2, [r5, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	f7f7 fe5f 	bl	8002c5a <_read>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_read_r+0x1e>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_read_r+0x1e>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	200009ec 	.word	0x200009ec

0800afac <_write_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d07      	ldr	r5, [pc, #28]	@ (800afcc <_write_r+0x20>)
 800afb0:	4604      	mov	r4, r0
 800afb2:	4608      	mov	r0, r1
 800afb4:	4611      	mov	r1, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	f7f7 fe6a 	bl	8002c94 <_write>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_write_r+0x1e>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_write_r+0x1e>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	200009ec 	.word	0x200009ec

0800afd0 <__errno>:
 800afd0:	4b01      	ldr	r3, [pc, #4]	@ (800afd8 <__errno+0x8>)
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000020 	.word	0x20000020

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4d0d      	ldr	r5, [pc, #52]	@ (800b014 <__libc_init_array+0x38>)
 800afe0:	4c0d      	ldr	r4, [pc, #52]	@ (800b018 <__libc_init_array+0x3c>)
 800afe2:	1b64      	subs	r4, r4, r5
 800afe4:	10a4      	asrs	r4, r4, #2
 800afe6:	2600      	movs	r6, #0
 800afe8:	42a6      	cmp	r6, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	4d0b      	ldr	r5, [pc, #44]	@ (800b01c <__libc_init_array+0x40>)
 800afee:	4c0c      	ldr	r4, [pc, #48]	@ (800b020 <__libc_init_array+0x44>)
 800aff0:	f002 f866 	bl	800d0c0 <_init>
 800aff4:	1b64      	subs	r4, r4, r5
 800aff6:	10a4      	asrs	r4, r4, #2
 800aff8:	2600      	movs	r6, #0
 800affa:	42a6      	cmp	r6, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f855 3b04 	ldr.w	r3, [r5], #4
 800b004:	4798      	blx	r3
 800b006:	3601      	adds	r6, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00e:	4798      	blx	r3
 800b010:	3601      	adds	r6, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800d518 	.word	0x0800d518
 800b018:	0800d518 	.word	0x0800d518
 800b01c:	0800d518 	.word	0x0800d518
 800b020:	0800d51c 	.word	0x0800d51c

0800b024 <__retarget_lock_init_recursive>:
 800b024:	4770      	bx	lr

0800b026 <__retarget_lock_acquire_recursive>:
 800b026:	4770      	bx	lr

0800b028 <__retarget_lock_release_recursive>:
 800b028:	4770      	bx	lr

0800b02a <quorem>:
 800b02a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02e:	6903      	ldr	r3, [r0, #16]
 800b030:	690c      	ldr	r4, [r1, #16]
 800b032:	42a3      	cmp	r3, r4
 800b034:	4607      	mov	r7, r0
 800b036:	db7e      	blt.n	800b136 <quorem+0x10c>
 800b038:	3c01      	subs	r4, #1
 800b03a:	f101 0814 	add.w	r8, r1, #20
 800b03e:	00a3      	lsls	r3, r4, #2
 800b040:	f100 0514 	add.w	r5, r0, #20
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b054:	3301      	adds	r3, #1
 800b056:	429a      	cmp	r2, r3
 800b058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b05c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b060:	d32e      	bcc.n	800b0c0 <quorem+0x96>
 800b062:	f04f 0a00 	mov.w	sl, #0
 800b066:	46c4      	mov	ip, r8
 800b068:	46ae      	mov	lr, r5
 800b06a:	46d3      	mov	fp, sl
 800b06c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b070:	b298      	uxth	r0, r3
 800b072:	fb06 a000 	mla	r0, r6, r0, sl
 800b076:	0c02      	lsrs	r2, r0, #16
 800b078:	0c1b      	lsrs	r3, r3, #16
 800b07a:	fb06 2303 	mla	r3, r6, r3, r2
 800b07e:	f8de 2000 	ldr.w	r2, [lr]
 800b082:	b280      	uxth	r0, r0
 800b084:	b292      	uxth	r2, r2
 800b086:	1a12      	subs	r2, r2, r0
 800b088:	445a      	add	r2, fp
 800b08a:	f8de 0000 	ldr.w	r0, [lr]
 800b08e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b092:	b29b      	uxth	r3, r3
 800b094:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b098:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b09c:	b292      	uxth	r2, r2
 800b09e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0a2:	45e1      	cmp	r9, ip
 800b0a4:	f84e 2b04 	str.w	r2, [lr], #4
 800b0a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0ac:	d2de      	bcs.n	800b06c <quorem+0x42>
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	58eb      	ldr	r3, [r5, r3]
 800b0b2:	b92b      	cbnz	r3, 800b0c0 <quorem+0x96>
 800b0b4:	9b01      	ldr	r3, [sp, #4]
 800b0b6:	3b04      	subs	r3, #4
 800b0b8:	429d      	cmp	r5, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	d32f      	bcc.n	800b11e <quorem+0xf4>
 800b0be:	613c      	str	r4, [r7, #16]
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f001 f97b 	bl	800c3bc <__mcmp>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	db25      	blt.n	800b116 <quorem+0xec>
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0d2:	f8d1 c000 	ldr.w	ip, [r1]
 800b0d6:	fa1f fe82 	uxth.w	lr, r2
 800b0da:	fa1f f38c 	uxth.w	r3, ip
 800b0de:	eba3 030e 	sub.w	r3, r3, lr
 800b0e2:	4403      	add	r3, r0
 800b0e4:	0c12      	lsrs	r2, r2, #16
 800b0e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f4:	45c1      	cmp	r9, r8
 800b0f6:	f841 3b04 	str.w	r3, [r1], #4
 800b0fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0fe:	d2e6      	bcs.n	800b0ce <quorem+0xa4>
 800b100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b104:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b108:	b922      	cbnz	r2, 800b114 <quorem+0xea>
 800b10a:	3b04      	subs	r3, #4
 800b10c:	429d      	cmp	r5, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	d30b      	bcc.n	800b12a <quorem+0x100>
 800b112:	613c      	str	r4, [r7, #16]
 800b114:	3601      	adds	r6, #1
 800b116:	4630      	mov	r0, r6
 800b118:	b003      	add	sp, #12
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	6812      	ldr	r2, [r2, #0]
 800b120:	3b04      	subs	r3, #4
 800b122:	2a00      	cmp	r2, #0
 800b124:	d1cb      	bne.n	800b0be <quorem+0x94>
 800b126:	3c01      	subs	r4, #1
 800b128:	e7c6      	b.n	800b0b8 <quorem+0x8e>
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	3b04      	subs	r3, #4
 800b12e:	2a00      	cmp	r2, #0
 800b130:	d1ef      	bne.n	800b112 <quorem+0xe8>
 800b132:	3c01      	subs	r4, #1
 800b134:	e7ea      	b.n	800b10c <quorem+0xe2>
 800b136:	2000      	movs	r0, #0
 800b138:	e7ee      	b.n	800b118 <quorem+0xee>
 800b13a:	0000      	movs	r0, r0
 800b13c:	0000      	movs	r0, r0
	...

0800b140 <_dtoa_r>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	69c7      	ldr	r7, [r0, #28]
 800b146:	b099      	sub	sp, #100	@ 0x64
 800b148:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b152:	9109      	str	r1, [sp, #36]	@ 0x24
 800b154:	4683      	mov	fp, r0
 800b156:	920e      	str	r2, [sp, #56]	@ 0x38
 800b158:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b15a:	b97f      	cbnz	r7, 800b17c <_dtoa_r+0x3c>
 800b15c:	2010      	movs	r0, #16
 800b15e:	f000 fdfd 	bl	800bd5c <malloc>
 800b162:	4602      	mov	r2, r0
 800b164:	f8cb 001c 	str.w	r0, [fp, #28]
 800b168:	b920      	cbnz	r0, 800b174 <_dtoa_r+0x34>
 800b16a:	4ba7      	ldr	r3, [pc, #668]	@ (800b408 <_dtoa_r+0x2c8>)
 800b16c:	21ef      	movs	r1, #239	@ 0xef
 800b16e:	48a7      	ldr	r0, [pc, #668]	@ (800b40c <_dtoa_r+0x2cc>)
 800b170:	f001 fc68 	bl	800ca44 <__assert_func>
 800b174:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b178:	6007      	str	r7, [r0, #0]
 800b17a:	60c7      	str	r7, [r0, #12]
 800b17c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	b159      	cbz	r1, 800b19c <_dtoa_r+0x5c>
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	604a      	str	r2, [r1, #4]
 800b188:	2301      	movs	r3, #1
 800b18a:	4093      	lsls	r3, r2
 800b18c:	608b      	str	r3, [r1, #8]
 800b18e:	4658      	mov	r0, fp
 800b190:	f000 feda 	bl	800bf48 <_Bfree>
 800b194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b198:	2200      	movs	r2, #0
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	1e2b      	subs	r3, r5, #0
 800b19e:	bfb9      	ittee	lt
 800b1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1a4:	9303      	strlt	r3, [sp, #12]
 800b1a6:	2300      	movge	r3, #0
 800b1a8:	6033      	strge	r3, [r6, #0]
 800b1aa:	9f03      	ldr	r7, [sp, #12]
 800b1ac:	4b98      	ldr	r3, [pc, #608]	@ (800b410 <_dtoa_r+0x2d0>)
 800b1ae:	bfbc      	itt	lt
 800b1b0:	2201      	movlt	r2, #1
 800b1b2:	6032      	strlt	r2, [r6, #0]
 800b1b4:	43bb      	bics	r3, r7
 800b1b6:	d112      	bne.n	800b1de <_dtoa_r+0x9e>
 800b1b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1c4:	4323      	orrs	r3, r4
 800b1c6:	f000 854d 	beq.w	800bc64 <_dtoa_r+0xb24>
 800b1ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b424 <_dtoa_r+0x2e4>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 854f 	beq.w	800bc74 <_dtoa_r+0xb34>
 800b1d6:	f10a 0303 	add.w	r3, sl, #3
 800b1da:	f000 bd49 	b.w	800bc70 <_dtoa_r+0xb30>
 800b1de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	ec51 0b17 	vmov	r0, r1, d7
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b1ee:	f7f5 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	b158      	cbz	r0, 800b20e <_dtoa_r+0xce>
 800b1f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1fe:	b113      	cbz	r3, 800b206 <_dtoa_r+0xc6>
 800b200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b202:	4b84      	ldr	r3, [pc, #528]	@ (800b414 <_dtoa_r+0x2d4>)
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b428 <_dtoa_r+0x2e8>
 800b20a:	f000 bd33 	b.w	800bc74 <_dtoa_r+0xb34>
 800b20e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b212:	aa16      	add	r2, sp, #88	@ 0x58
 800b214:	a917      	add	r1, sp, #92	@ 0x5c
 800b216:	4658      	mov	r0, fp
 800b218:	f001 f980 	bl	800c51c <__d2b>
 800b21c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b220:	4681      	mov	r9, r0
 800b222:	2e00      	cmp	r6, #0
 800b224:	d077      	beq.n	800b316 <_dtoa_r+0x1d6>
 800b226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b228:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b234:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b238:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b23c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b240:	4619      	mov	r1, r3
 800b242:	2200      	movs	r2, #0
 800b244:	4b74      	ldr	r3, [pc, #464]	@ (800b418 <_dtoa_r+0x2d8>)
 800b246:	f7f5 f81f 	bl	8000288 <__aeabi_dsub>
 800b24a:	a369      	add	r3, pc, #420	@ (adr r3, 800b3f0 <_dtoa_r+0x2b0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	a368      	add	r3, pc, #416	@ (adr r3, 800b3f8 <_dtoa_r+0x2b8>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	4604      	mov	r4, r0
 800b260:	4630      	mov	r0, r6
 800b262:	460d      	mov	r5, r1
 800b264:	f7f5 f95e 	bl	8000524 <__aeabi_i2d>
 800b268:	a365      	add	r3, pc, #404	@ (adr r3, 800b400 <_dtoa_r+0x2c0>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	f7f5 f9c3 	bl	80005f8 <__aeabi_dmul>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 f807 	bl	800028c <__adddf3>
 800b27e:	4604      	mov	r4, r0
 800b280:	460d      	mov	r5, r1
 800b282:	f7f5 fc69 	bl	8000b58 <__aeabi_d2iz>
 800b286:	2200      	movs	r2, #0
 800b288:	4607      	mov	r7, r0
 800b28a:	2300      	movs	r3, #0
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 fc24 	bl	8000adc <__aeabi_dcmplt>
 800b294:	b140      	cbz	r0, 800b2a8 <_dtoa_r+0x168>
 800b296:	4638      	mov	r0, r7
 800b298:	f7f5 f944 	bl	8000524 <__aeabi_i2d>
 800b29c:	4622      	mov	r2, r4
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f7f5 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2a4:	b900      	cbnz	r0, 800b2a8 <_dtoa_r+0x168>
 800b2a6:	3f01      	subs	r7, #1
 800b2a8:	2f16      	cmp	r7, #22
 800b2aa:	d851      	bhi.n	800b350 <_dtoa_r+0x210>
 800b2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800b41c <_dtoa_r+0x2dc>)
 800b2ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ba:	f7f5 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d048      	beq.n	800b354 <_dtoa_r+0x214>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2ca:	1b9b      	subs	r3, r3, r6
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	bf44      	itt	mi
 800b2d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2d4:	2300      	movmi	r3, #0
 800b2d6:	9208      	str	r2, [sp, #32]
 800b2d8:	bf54      	ite	pl
 800b2da:	f04f 0800 	movpl.w	r8, #0
 800b2de:	9308      	strmi	r3, [sp, #32]
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	db39      	blt.n	800b358 <_dtoa_r+0x218>
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b2e8:	443b      	add	r3, r7
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f2:	2b09      	cmp	r3, #9
 800b2f4:	d864      	bhi.n	800b3c0 <_dtoa_r+0x280>
 800b2f6:	2b05      	cmp	r3, #5
 800b2f8:	bfc4      	itt	gt
 800b2fa:	3b04      	subgt	r3, #4
 800b2fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b300:	f1a3 0302 	sub.w	r3, r3, #2
 800b304:	bfcc      	ite	gt
 800b306:	2400      	movgt	r4, #0
 800b308:	2401      	movle	r4, #1
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d863      	bhi.n	800b3d6 <_dtoa_r+0x296>
 800b30e:	e8df f003 	tbb	[pc, r3]
 800b312:	372a      	.short	0x372a
 800b314:	5535      	.short	0x5535
 800b316:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b31a:	441e      	add	r6, r3
 800b31c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b320:	2b20      	cmp	r3, #32
 800b322:	bfc1      	itttt	gt
 800b324:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b328:	409f      	lslgt	r7, r3
 800b32a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b32e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b332:	bfd6      	itet	le
 800b334:	f1c3 0320 	rsble	r3, r3, #32
 800b338:	ea47 0003 	orrgt.w	r0, r7, r3
 800b33c:	fa04 f003 	lslle.w	r0, r4, r3
 800b340:	f7f5 f8e0 	bl	8000504 <__aeabi_ui2d>
 800b344:	2201      	movs	r2, #1
 800b346:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b34a:	3e01      	subs	r6, #1
 800b34c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b34e:	e777      	b.n	800b240 <_dtoa_r+0x100>
 800b350:	2301      	movs	r3, #1
 800b352:	e7b8      	b.n	800b2c6 <_dtoa_r+0x186>
 800b354:	9012      	str	r0, [sp, #72]	@ 0x48
 800b356:	e7b7      	b.n	800b2c8 <_dtoa_r+0x188>
 800b358:	427b      	negs	r3, r7
 800b35a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b35c:	2300      	movs	r3, #0
 800b35e:	eba8 0807 	sub.w	r8, r8, r7
 800b362:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b364:	e7c4      	b.n	800b2f0 <_dtoa_r+0x1b0>
 800b366:	2300      	movs	r3, #0
 800b368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dc35      	bgt.n	800b3dc <_dtoa_r+0x29c>
 800b370:	2301      	movs	r3, #1
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	461a      	mov	r2, r3
 800b378:	920e      	str	r2, [sp, #56]	@ 0x38
 800b37a:	e00b      	b.n	800b394 <_dtoa_r+0x254>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e7f3      	b.n	800b368 <_dtoa_r+0x228>
 800b380:	2300      	movs	r3, #0
 800b382:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b386:	18fb      	adds	r3, r7, r3
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	3301      	adds	r3, #1
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	bfb8      	it	lt
 800b392:	2301      	movlt	r3, #1
 800b394:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b398:	2100      	movs	r1, #0
 800b39a:	2204      	movs	r2, #4
 800b39c:	f102 0514 	add.w	r5, r2, #20
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	d91f      	bls.n	800b3e4 <_dtoa_r+0x2a4>
 800b3a4:	6041      	str	r1, [r0, #4]
 800b3a6:	4658      	mov	r0, fp
 800b3a8:	f000 fd8e 	bl	800bec8 <_Balloc>
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d13c      	bne.n	800b42c <_dtoa_r+0x2ec>
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b420 <_dtoa_r+0x2e0>)
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3ba:	e6d8      	b.n	800b16e <_dtoa_r+0x2e>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e7e0      	b.n	800b382 <_dtoa_r+0x242>
 800b3c0:	2401      	movs	r4, #1
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	9307      	str	r3, [sp, #28]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2312      	movs	r3, #18
 800b3d4:	e7d0      	b.n	800b378 <_dtoa_r+0x238>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3da:	e7f5      	b.n	800b3c8 <_dtoa_r+0x288>
 800b3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	9307      	str	r3, [sp, #28]
 800b3e2:	e7d7      	b.n	800b394 <_dtoa_r+0x254>
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	0052      	lsls	r2, r2, #1
 800b3e8:	e7d8      	b.n	800b39c <_dtoa_r+0x25c>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	636f4361 	.word	0x636f4361
 800b3f4:	3fd287a7 	.word	0x3fd287a7
 800b3f8:	8b60c8b3 	.word	0x8b60c8b3
 800b3fc:	3fc68a28 	.word	0x3fc68a28
 800b400:	509f79fb 	.word	0x509f79fb
 800b404:	3fd34413 	.word	0x3fd34413
 800b408:	0800d1e1 	.word	0x0800d1e1
 800b40c:	0800d1f8 	.word	0x0800d1f8
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	0800d1b1 	.word	0x0800d1b1
 800b418:	3ff80000 	.word	0x3ff80000
 800b41c:	0800d2f0 	.word	0x0800d2f0
 800b420:	0800d250 	.word	0x0800d250
 800b424:	0800d1dd 	.word	0x0800d1dd
 800b428:	0800d1b0 	.word	0x0800d1b0
 800b42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b430:	6018      	str	r0, [r3, #0]
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	2b0e      	cmp	r3, #14
 800b436:	f200 80a4 	bhi.w	800b582 <_dtoa_r+0x442>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	f000 80a1 	beq.w	800b582 <_dtoa_r+0x442>
 800b440:	2f00      	cmp	r7, #0
 800b442:	dd33      	ble.n	800b4ac <_dtoa_r+0x36c>
 800b444:	4bad      	ldr	r3, [pc, #692]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b446:	f007 020f 	and.w	r2, r7, #15
 800b44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44e:	ed93 7b00 	vldr	d7, [r3]
 800b452:	05f8      	lsls	r0, r7, #23
 800b454:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b45c:	d516      	bpl.n	800b48c <_dtoa_r+0x34c>
 800b45e:	4ba8      	ldr	r3, [pc, #672]	@ (800b700 <_dtoa_r+0x5c0>)
 800b460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b468:	f7f5 f9f0 	bl	800084c <__aeabi_ddiv>
 800b46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b470:	f004 040f 	and.w	r4, r4, #15
 800b474:	2603      	movs	r6, #3
 800b476:	4da2      	ldr	r5, [pc, #648]	@ (800b700 <_dtoa_r+0x5c0>)
 800b478:	b954      	cbnz	r4, 800b490 <_dtoa_r+0x350>
 800b47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	f7f5 f9e3 	bl	800084c <__aeabi_ddiv>
 800b486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b48a:	e028      	b.n	800b4de <_dtoa_r+0x39e>
 800b48c:	2602      	movs	r6, #2
 800b48e:	e7f2      	b.n	800b476 <_dtoa_r+0x336>
 800b490:	07e1      	lsls	r1, r4, #31
 800b492:	d508      	bpl.n	800b4a6 <_dtoa_r+0x366>
 800b494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	1064      	asrs	r4, r4, #1
 800b4a8:	3508      	adds	r5, #8
 800b4aa:	e7e5      	b.n	800b478 <_dtoa_r+0x338>
 800b4ac:	f000 80d2 	beq.w	800b654 <_dtoa_r+0x514>
 800b4b0:	427c      	negs	r4, r7
 800b4b2:	4b92      	ldr	r3, [pc, #584]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b4b4:	4d92      	ldr	r5, [pc, #584]	@ (800b700 <_dtoa_r+0x5c0>)
 800b4b6:	f004 020f 	and.w	r2, r4, #15
 800b4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ce:	1124      	asrs	r4, r4, #4
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2602      	movs	r6, #2
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	f040 80b2 	bne.w	800b63e <_dtoa_r+0x4fe>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1d3      	bne.n	800b486 <_dtoa_r+0x346>
 800b4de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80b7 	beq.w	800b658 <_dtoa_r+0x518>
 800b4ea:	4b86      	ldr	r3, [pc, #536]	@ (800b704 <_dtoa_r+0x5c4>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f5 faf3 	bl	8000adc <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f000 80ae 	beq.w	800b658 <_dtoa_r+0x518>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 80aa 	beq.w	800b658 <_dtoa_r+0x518>
 800b504:	9b00      	ldr	r3, [sp, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	dd37      	ble.n	800b57a <_dtoa_r+0x43a>
 800b50a:	1e7b      	subs	r3, r7, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	4620      	mov	r0, r4
 800b510:	4b7d      	ldr	r3, [pc, #500]	@ (800b708 <_dtoa_r+0x5c8>)
 800b512:	2200      	movs	r2, #0
 800b514:	4629      	mov	r1, r5
 800b516:	f7f5 f86f 	bl	80005f8 <__aeabi_dmul>
 800b51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51e:	9c00      	ldr	r4, [sp, #0]
 800b520:	3601      	adds	r6, #1
 800b522:	4630      	mov	r0, r6
 800b524:	f7f4 fffe 	bl	8000524 <__aeabi_i2d>
 800b528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	4b76      	ldr	r3, [pc, #472]	@ (800b70c <_dtoa_r+0x5cc>)
 800b532:	2200      	movs	r2, #0
 800b534:	f7f4 feaa 	bl	800028c <__adddf3>
 800b538:	4605      	mov	r5, r0
 800b53a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b53e:	2c00      	cmp	r4, #0
 800b540:	f040 808d 	bne.w	800b65e <_dtoa_r+0x51e>
 800b544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b548:	4b71      	ldr	r3, [pc, #452]	@ (800b710 <_dtoa_r+0x5d0>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f4 fe9c 	bl	8000288 <__aeabi_dsub>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b558:	462a      	mov	r2, r5
 800b55a:	4633      	mov	r3, r6
 800b55c:	f7f5 fadc 	bl	8000b18 <__aeabi_dcmpgt>
 800b560:	2800      	cmp	r0, #0
 800b562:	f040 828b 	bne.w	800ba7c <_dtoa_r+0x93c>
 800b566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b56a:	462a      	mov	r2, r5
 800b56c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b570:	f7f5 fab4 	bl	8000adc <__aeabi_dcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	f040 8128 	bne.w	800b7ca <_dtoa_r+0x68a>
 800b57a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b57e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f2c0 815a 	blt.w	800b83e <_dtoa_r+0x6fe>
 800b58a:	2f0e      	cmp	r7, #14
 800b58c:	f300 8157 	bgt.w	800b83e <_dtoa_r+0x6fe>
 800b590:	4b5a      	ldr	r3, [pc, #360]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b596:	ed93 7b00 	vldr	d7, [r3]
 800b59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	ed8d 7b00 	vstr	d7, [sp]
 800b5a2:	da03      	bge.n	800b5ac <_dtoa_r+0x46c>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f340 8101 	ble.w	800b7ae <_dtoa_r+0x66e>
 800b5ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5b0:	4656      	mov	r6, sl
 800b5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f5 f947 	bl	800084c <__aeabi_ddiv>
 800b5be:	f7f5 facb 	bl	8000b58 <__aeabi_d2iz>
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	f7f4 ffae 	bl	8000524 <__aeabi_i2d>
 800b5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5cc:	f7f5 f814 	bl	80005f8 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	f806 4b01 	strb.w	r4, [r6], #1
 800b5e4:	9d07      	ldr	r5, [sp, #28]
 800b5e6:	eba6 040a 	sub.w	r4, r6, sl
 800b5ea:	42a5      	cmp	r5, r4
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	f040 8117 	bne.w	800b822 <_dtoa_r+0x6e2>
 800b5f4:	f7f4 fe4a 	bl	800028c <__adddf3>
 800b5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	f7f5 fa8a 	bl	8000b18 <__aeabi_dcmpgt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f040 80f9 	bne.w	800b7fc <_dtoa_r+0x6bc>
 800b60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b616:	b118      	cbz	r0, 800b620 <_dtoa_r+0x4e0>
 800b618:	f018 0f01 	tst.w	r8, #1
 800b61c:	f040 80ee 	bne.w	800b7fc <_dtoa_r+0x6bc>
 800b620:	4649      	mov	r1, r9
 800b622:	4658      	mov	r0, fp
 800b624:	f000 fc90 	bl	800bf48 <_Bfree>
 800b628:	2300      	movs	r3, #0
 800b62a:	7033      	strb	r3, [r6, #0]
 800b62c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b62e:	3701      	adds	r7, #1
 800b630:	601f      	str	r7, [r3, #0]
 800b632:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 831d 	beq.w	800bc74 <_dtoa_r+0xb34>
 800b63a:	601e      	str	r6, [r3, #0]
 800b63c:	e31a      	b.n	800bc74 <_dtoa_r+0xb34>
 800b63e:	07e2      	lsls	r2, r4, #31
 800b640:	d505      	bpl.n	800b64e <_dtoa_r+0x50e>
 800b642:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b646:	f7f4 ffd7 	bl	80005f8 <__aeabi_dmul>
 800b64a:	3601      	adds	r6, #1
 800b64c:	2301      	movs	r3, #1
 800b64e:	1064      	asrs	r4, r4, #1
 800b650:	3508      	adds	r5, #8
 800b652:	e73f      	b.n	800b4d4 <_dtoa_r+0x394>
 800b654:	2602      	movs	r6, #2
 800b656:	e742      	b.n	800b4de <_dtoa_r+0x39e>
 800b658:	9c07      	ldr	r4, [sp, #28]
 800b65a:	9704      	str	r7, [sp, #16]
 800b65c:	e761      	b.n	800b522 <_dtoa_r+0x3e2>
 800b65e:	4b27      	ldr	r3, [pc, #156]	@ (800b6fc <_dtoa_r+0x5bc>)
 800b660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b662:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b666:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b66a:	4454      	add	r4, sl
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d053      	beq.n	800b718 <_dtoa_r+0x5d8>
 800b670:	4928      	ldr	r1, [pc, #160]	@ (800b714 <_dtoa_r+0x5d4>)
 800b672:	2000      	movs	r0, #0
 800b674:	f7f5 f8ea 	bl	800084c <__aeabi_ddiv>
 800b678:	4633      	mov	r3, r6
 800b67a:	462a      	mov	r2, r5
 800b67c:	f7f4 fe04 	bl	8000288 <__aeabi_dsub>
 800b680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b684:	4656      	mov	r6, sl
 800b686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b68a:	f7f5 fa65 	bl	8000b58 <__aeabi_d2iz>
 800b68e:	4605      	mov	r5, r0
 800b690:	f7f4 ff48 	bl	8000524 <__aeabi_i2d>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b69c:	f7f4 fdf4 	bl	8000288 <__aeabi_dsub>
 800b6a0:	3530      	adds	r5, #48	@ 0x30
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6aa:	f806 5b01 	strb.w	r5, [r6], #1
 800b6ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6b2:	f7f5 fa13 	bl	8000adc <__aeabi_dcmplt>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d171      	bne.n	800b79e <_dtoa_r+0x65e>
 800b6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6be:	4911      	ldr	r1, [pc, #68]	@ (800b704 <_dtoa_r+0x5c4>)
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f7f4 fde1 	bl	8000288 <__aeabi_dsub>
 800b6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ca:	f7f5 fa07 	bl	8000adc <__aeabi_dcmplt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f040 8095 	bne.w	800b7fe <_dtoa_r+0x6be>
 800b6d4:	42a6      	cmp	r6, r4
 800b6d6:	f43f af50 	beq.w	800b57a <_dtoa_r+0x43a>
 800b6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6de:	4b0a      	ldr	r3, [pc, #40]	@ (800b708 <_dtoa_r+0x5c8>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4b08      	ldr	r3, [pc, #32]	@ (800b708 <_dtoa_r+0x5c8>)
 800b6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f2:	f7f4 ff81 	bl	80005f8 <__aeabi_dmul>
 800b6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6fa:	e7c4      	b.n	800b686 <_dtoa_r+0x546>
 800b6fc:	0800d2f0 	.word	0x0800d2f0
 800b700:	0800d2c8 	.word	0x0800d2c8
 800b704:	3ff00000 	.word	0x3ff00000
 800b708:	40240000 	.word	0x40240000
 800b70c:	401c0000 	.word	0x401c0000
 800b710:	40140000 	.word	0x40140000
 800b714:	3fe00000 	.word	0x3fe00000
 800b718:	4631      	mov	r1, r6
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b724:	9415      	str	r4, [sp, #84]	@ 0x54
 800b726:	4656      	mov	r6, sl
 800b728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72c:	f7f5 fa14 	bl	8000b58 <__aeabi_d2iz>
 800b730:	4605      	mov	r5, r0
 800b732:	f7f4 fef7 	bl	8000524 <__aeabi_i2d>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73e:	f7f4 fda3 	bl	8000288 <__aeabi_dsub>
 800b742:	3530      	adds	r5, #48	@ 0x30
 800b744:	f806 5b01 	strb.w	r5, [r6], #1
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	42a6      	cmp	r6, r4
 800b74e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	d124      	bne.n	800b7a2 <_dtoa_r+0x662>
 800b758:	4bac      	ldr	r3, [pc, #688]	@ (800ba0c <_dtoa_r+0x8cc>)
 800b75a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b75e:	f7f4 fd95 	bl	800028c <__adddf3>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f5 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d145      	bne.n	800b7fe <_dtoa_r+0x6be>
 800b772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b776:	49a5      	ldr	r1, [pc, #660]	@ (800ba0c <_dtoa_r+0x8cc>)
 800b778:	2000      	movs	r0, #0
 800b77a:	f7f4 fd85 	bl	8000288 <__aeabi_dsub>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b786:	f7f5 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f aef5 	beq.w	800b57a <_dtoa_r+0x43a>
 800b790:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b792:	1e73      	subs	r3, r6, #1
 800b794:	9315      	str	r3, [sp, #84]	@ 0x54
 800b796:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b79a:	2b30      	cmp	r3, #48	@ 0x30
 800b79c:	d0f8      	beq.n	800b790 <_dtoa_r+0x650>
 800b79e:	9f04      	ldr	r7, [sp, #16]
 800b7a0:	e73e      	b.n	800b620 <_dtoa_r+0x4e0>
 800b7a2:	4b9b      	ldr	r3, [pc, #620]	@ (800ba10 <_dtoa_r+0x8d0>)
 800b7a4:	f7f4 ff28 	bl	80005f8 <__aeabi_dmul>
 800b7a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ac:	e7bc      	b.n	800b728 <_dtoa_r+0x5e8>
 800b7ae:	d10c      	bne.n	800b7ca <_dtoa_r+0x68a>
 800b7b0:	4b98      	ldr	r3, [pc, #608]	@ (800ba14 <_dtoa_r+0x8d4>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7c0:	f7f5 f9a0 	bl	8000b04 <__aeabi_dcmpge>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f000 8157 	beq.w	800ba78 <_dtoa_r+0x938>
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	4625      	mov	r5, r4
 800b7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d0:	43db      	mvns	r3, r3
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	4656      	mov	r6, sl
 800b7d6:	2700      	movs	r7, #0
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f000 fbb4 	bl	800bf48 <_Bfree>
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	d0dc      	beq.n	800b79e <_dtoa_r+0x65e>
 800b7e4:	b12f      	cbz	r7, 800b7f2 <_dtoa_r+0x6b2>
 800b7e6:	42af      	cmp	r7, r5
 800b7e8:	d003      	beq.n	800b7f2 <_dtoa_r+0x6b2>
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4658      	mov	r0, fp
 800b7ee:	f000 fbab 	bl	800bf48 <_Bfree>
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4658      	mov	r0, fp
 800b7f6:	f000 fba7 	bl	800bf48 <_Bfree>
 800b7fa:	e7d0      	b.n	800b79e <_dtoa_r+0x65e>
 800b7fc:	9704      	str	r7, [sp, #16]
 800b7fe:	4633      	mov	r3, r6
 800b800:	461e      	mov	r6, r3
 800b802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b806:	2a39      	cmp	r2, #57	@ 0x39
 800b808:	d107      	bne.n	800b81a <_dtoa_r+0x6da>
 800b80a:	459a      	cmp	sl, r3
 800b80c:	d1f8      	bne.n	800b800 <_dtoa_r+0x6c0>
 800b80e:	9a04      	ldr	r2, [sp, #16]
 800b810:	3201      	adds	r2, #1
 800b812:	9204      	str	r2, [sp, #16]
 800b814:	2230      	movs	r2, #48	@ 0x30
 800b816:	f88a 2000 	strb.w	r2, [sl]
 800b81a:	781a      	ldrb	r2, [r3, #0]
 800b81c:	3201      	adds	r2, #1
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	e7bd      	b.n	800b79e <_dtoa_r+0x65e>
 800b822:	4b7b      	ldr	r3, [pc, #492]	@ (800ba10 <_dtoa_r+0x8d0>)
 800b824:	2200      	movs	r2, #0
 800b826:	f7f4 fee7 	bl	80005f8 <__aeabi_dmul>
 800b82a:	2200      	movs	r2, #0
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	f7f5 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f aebb 	beq.w	800b5b2 <_dtoa_r+0x472>
 800b83c:	e6f0      	b.n	800b620 <_dtoa_r+0x4e0>
 800b83e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b840:	2a00      	cmp	r2, #0
 800b842:	f000 80db 	beq.w	800b9fc <_dtoa_r+0x8bc>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	2a01      	cmp	r2, #1
 800b84a:	f300 80bf 	bgt.w	800b9cc <_dtoa_r+0x88c>
 800b84e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b850:	2a00      	cmp	r2, #0
 800b852:	f000 80b7 	beq.w	800b9c4 <_dtoa_r+0x884>
 800b856:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b85a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b85c:	4646      	mov	r6, r8
 800b85e:	9a08      	ldr	r2, [sp, #32]
 800b860:	2101      	movs	r1, #1
 800b862:	441a      	add	r2, r3
 800b864:	4658      	mov	r0, fp
 800b866:	4498      	add	r8, r3
 800b868:	9208      	str	r2, [sp, #32]
 800b86a:	f000 fc21 	bl	800c0b0 <__i2b>
 800b86e:	4605      	mov	r5, r0
 800b870:	b15e      	cbz	r6, 800b88a <_dtoa_r+0x74a>
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd08      	ble.n	800b88a <_dtoa_r+0x74a>
 800b878:	42b3      	cmp	r3, r6
 800b87a:	9a08      	ldr	r2, [sp, #32]
 800b87c:	bfa8      	it	ge
 800b87e:	4633      	movge	r3, r6
 800b880:	eba8 0803 	sub.w	r8, r8, r3
 800b884:	1af6      	subs	r6, r6, r3
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88c:	b1f3      	cbz	r3, 800b8cc <_dtoa_r+0x78c>
 800b88e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80b7 	beq.w	800ba04 <_dtoa_r+0x8c4>
 800b896:	b18c      	cbz	r4, 800b8bc <_dtoa_r+0x77c>
 800b898:	4629      	mov	r1, r5
 800b89a:	4622      	mov	r2, r4
 800b89c:	4658      	mov	r0, fp
 800b89e:	f000 fcc7 	bl	800c230 <__pow5mult>
 800b8a2:	464a      	mov	r2, r9
 800b8a4:	4601      	mov	r1, r0
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	4658      	mov	r0, fp
 800b8aa:	f000 fc17 	bl	800c0dc <__multiply>
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	9004      	str	r0, [sp, #16]
 800b8b2:	4658      	mov	r0, fp
 800b8b4:	f000 fb48 	bl	800bf48 <_Bfree>
 800b8b8:	9b04      	ldr	r3, [sp, #16]
 800b8ba:	4699      	mov	r9, r3
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8be:	1b1a      	subs	r2, r3, r4
 800b8c0:	d004      	beq.n	800b8cc <_dtoa_r+0x78c>
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	4658      	mov	r0, fp
 800b8c6:	f000 fcb3 	bl	800c230 <__pow5mult>
 800b8ca:	4681      	mov	r9, r0
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4658      	mov	r0, fp
 800b8d0:	f000 fbee 	bl	800c0b0 <__i2b>
 800b8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 81cf 	beq.w	800bc7c <_dtoa_r+0xb3c>
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4658      	mov	r0, fp
 800b8e4:	f000 fca4 	bl	800c230 <__pow5mult>
 800b8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	f300 8095 	bgt.w	800ba1c <_dtoa_r+0x8dc>
 800b8f2:	9b02      	ldr	r3, [sp, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f040 8087 	bne.w	800ba08 <_dtoa_r+0x8c8>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8089 	bne.w	800ba18 <_dtoa_r+0x8d8>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b90c:	0d1b      	lsrs	r3, r3, #20
 800b90e:	051b      	lsls	r3, r3, #20
 800b910:	b12b      	cbz	r3, 800b91e <_dtoa_r+0x7de>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	3301      	adds	r3, #1
 800b916:	9308      	str	r3, [sp, #32]
 800b918:	f108 0801 	add.w	r8, r8, #1
 800b91c:	2301      	movs	r3, #1
 800b91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 81b0 	beq.w	800bc88 <_dtoa_r+0xb48>
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b92e:	6918      	ldr	r0, [r3, #16]
 800b930:	f000 fb72 	bl	800c018 <__hi0bits>
 800b934:	f1c0 0020 	rsb	r0, r0, #32
 800b938:	9b08      	ldr	r3, [sp, #32]
 800b93a:	4418      	add	r0, r3
 800b93c:	f010 001f 	ands.w	r0, r0, #31
 800b940:	d077      	beq.n	800ba32 <_dtoa_r+0x8f2>
 800b942:	f1c0 0320 	rsb	r3, r0, #32
 800b946:	2b04      	cmp	r3, #4
 800b948:	dd6b      	ble.n	800ba22 <_dtoa_r+0x8e2>
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	f1c0 001c 	rsb	r0, r0, #28
 800b950:	4403      	add	r3, r0
 800b952:	4480      	add	r8, r0
 800b954:	4406      	add	r6, r0
 800b956:	9308      	str	r3, [sp, #32]
 800b958:	f1b8 0f00 	cmp.w	r8, #0
 800b95c:	dd05      	ble.n	800b96a <_dtoa_r+0x82a>
 800b95e:	4649      	mov	r1, r9
 800b960:	4642      	mov	r2, r8
 800b962:	4658      	mov	r0, fp
 800b964:	f000 fcbe 	bl	800c2e4 <__lshift>
 800b968:	4681      	mov	r9, r0
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd05      	ble.n	800b97c <_dtoa_r+0x83c>
 800b970:	4621      	mov	r1, r4
 800b972:	461a      	mov	r2, r3
 800b974:	4658      	mov	r0, fp
 800b976:	f000 fcb5 	bl	800c2e4 <__lshift>
 800b97a:	4604      	mov	r4, r0
 800b97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d059      	beq.n	800ba36 <_dtoa_r+0x8f6>
 800b982:	4621      	mov	r1, r4
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fd19 	bl	800c3bc <__mcmp>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	da53      	bge.n	800ba36 <_dtoa_r+0x8f6>
 800b98e:	1e7b      	subs	r3, r7, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	4649      	mov	r1, r9
 800b994:	2300      	movs	r3, #0
 800b996:	220a      	movs	r2, #10
 800b998:	4658      	mov	r0, fp
 800b99a:	f000 faf7 	bl	800bf8c <__multadd>
 800b99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8172 	beq.w	800bc8c <_dtoa_r+0xb4c>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	220a      	movs	r2, #10
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	f000 faec 	bl	800bf8c <__multadd>
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	dc67      	bgt.n	800ba8c <_dtoa_r+0x94c>
 800b9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	dc41      	bgt.n	800ba46 <_dtoa_r+0x906>
 800b9c2:	e063      	b.n	800ba8c <_dtoa_r+0x94c>
 800b9c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9ca:	e746      	b.n	800b85a <_dtoa_r+0x71a>
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	1e5c      	subs	r4, r3, #1
 800b9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	bfbf      	itttt	lt
 800b9d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9dc:	1ae3      	sublt	r3, r4, r3
 800b9de:	bfb4      	ite	lt
 800b9e0:	18d2      	addlt	r2, r2, r3
 800b9e2:	1b1c      	subge	r4, r3, r4
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	bfbc      	itt	lt
 800b9e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b9ea:	2400      	movlt	r4, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bfb5      	itete	lt
 800b9f0:	eba8 0603 	sublt.w	r6, r8, r3
 800b9f4:	9b07      	ldrge	r3, [sp, #28]
 800b9f6:	2300      	movlt	r3, #0
 800b9f8:	4646      	movge	r6, r8
 800b9fa:	e730      	b.n	800b85e <_dtoa_r+0x71e>
 800b9fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba00:	4646      	mov	r6, r8
 800ba02:	e735      	b.n	800b870 <_dtoa_r+0x730>
 800ba04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba06:	e75c      	b.n	800b8c2 <_dtoa_r+0x782>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	e788      	b.n	800b91e <_dtoa_r+0x7de>
 800ba0c:	3fe00000 	.word	0x3fe00000
 800ba10:	40240000 	.word	0x40240000
 800ba14:	40140000 	.word	0x40140000
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	e780      	b.n	800b91e <_dtoa_r+0x7de>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba20:	e782      	b.n	800b928 <_dtoa_r+0x7e8>
 800ba22:	d099      	beq.n	800b958 <_dtoa_r+0x818>
 800ba24:	9a08      	ldr	r2, [sp, #32]
 800ba26:	331c      	adds	r3, #28
 800ba28:	441a      	add	r2, r3
 800ba2a:	4498      	add	r8, r3
 800ba2c:	441e      	add	r6, r3
 800ba2e:	9208      	str	r2, [sp, #32]
 800ba30:	e792      	b.n	800b958 <_dtoa_r+0x818>
 800ba32:	4603      	mov	r3, r0
 800ba34:	e7f6      	b.n	800ba24 <_dtoa_r+0x8e4>
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	9704      	str	r7, [sp, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dc20      	bgt.n	800ba80 <_dtoa_r+0x940>
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	dd1e      	ble.n	800ba84 <_dtoa_r+0x944>
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f aec0 	bne.w	800b7ce <_dtoa_r+0x68e>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	2205      	movs	r2, #5
 800ba52:	4658      	mov	r0, fp
 800ba54:	f000 fa9a 	bl	800bf8c <__multadd>
 800ba58:	4601      	mov	r1, r0
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 fcad 	bl	800c3bc <__mcmp>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f77f aeb3 	ble.w	800b7ce <_dtoa_r+0x68e>
 800ba68:	4656      	mov	r6, sl
 800ba6a:	2331      	movs	r3, #49	@ 0x31
 800ba6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	e6ae      	b.n	800b7d6 <_dtoa_r+0x696>
 800ba78:	9c07      	ldr	r4, [sp, #28]
 800ba7a:	9704      	str	r7, [sp, #16]
 800ba7c:	4625      	mov	r5, r4
 800ba7e:	e7f3      	b.n	800ba68 <_dtoa_r+0x928>
 800ba80:	9b07      	ldr	r3, [sp, #28]
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 8104 	beq.w	800bc94 <_dtoa_r+0xb54>
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	dd05      	ble.n	800ba9c <_dtoa_r+0x95c>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4632      	mov	r2, r6
 800ba94:	4658      	mov	r0, fp
 800ba96:	f000 fc25 	bl	800c2e4 <__lshift>
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d05a      	beq.n	800bb58 <_dtoa_r+0xa18>
 800baa2:	6869      	ldr	r1, [r5, #4]
 800baa4:	4658      	mov	r0, fp
 800baa6:	f000 fa0f 	bl	800bec8 <_Balloc>
 800baaa:	4606      	mov	r6, r0
 800baac:	b928      	cbnz	r0, 800baba <_dtoa_r+0x97a>
 800baae:	4b84      	ldr	r3, [pc, #528]	@ (800bcc0 <_dtoa_r+0xb80>)
 800bab0:	4602      	mov	r2, r0
 800bab2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bab6:	f7ff bb5a 	b.w	800b16e <_dtoa_r+0x2e>
 800baba:	692a      	ldr	r2, [r5, #16]
 800babc:	3202      	adds	r2, #2
 800babe:	0092      	lsls	r2, r2, #2
 800bac0:	f105 010c 	add.w	r1, r5, #12
 800bac4:	300c      	adds	r0, #12
 800bac6:	f000 ffaf 	bl	800ca28 <memcpy>
 800baca:	2201      	movs	r2, #1
 800bacc:	4631      	mov	r1, r6
 800bace:	4658      	mov	r0, fp
 800bad0:	f000 fc08 	bl	800c2e4 <__lshift>
 800bad4:	f10a 0301 	add.w	r3, sl, #1
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	9b00      	ldr	r3, [sp, #0]
 800badc:	4453      	add	r3, sl
 800bade:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	462f      	mov	r7, r5
 800bae8:	930a      	str	r3, [sp, #40]	@ 0x28
 800baea:	4605      	mov	r5, r0
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	4621      	mov	r1, r4
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4648      	mov	r0, r9
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	f7ff fa98 	bl	800b02a <quorem>
 800bafa:	4639      	mov	r1, r7
 800bafc:	9002      	str	r0, [sp, #8]
 800bafe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb02:	4648      	mov	r0, r9
 800bb04:	f000 fc5a 	bl	800c3bc <__mcmp>
 800bb08:	462a      	mov	r2, r5
 800bb0a:	9008      	str	r0, [sp, #32]
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4658      	mov	r0, fp
 800bb10:	f000 fc70 	bl	800c3f4 <__mdiff>
 800bb14:	68c2      	ldr	r2, [r0, #12]
 800bb16:	4606      	mov	r6, r0
 800bb18:	bb02      	cbnz	r2, 800bb5c <_dtoa_r+0xa1c>
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4648      	mov	r0, r9
 800bb1e:	f000 fc4d 	bl	800c3bc <__mcmp>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4631      	mov	r1, r6
 800bb26:	4658      	mov	r0, fp
 800bb28:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb2a:	f000 fa0d 	bl	800bf48 <_Bfree>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb32:	9e07      	ldr	r6, [sp, #28]
 800bb34:	ea43 0102 	orr.w	r1, r3, r2
 800bb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3a:	4319      	orrs	r1, r3
 800bb3c:	d110      	bne.n	800bb60 <_dtoa_r+0xa20>
 800bb3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb42:	d029      	beq.n	800bb98 <_dtoa_r+0xa58>
 800bb44:	9b08      	ldr	r3, [sp, #32]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd02      	ble.n	800bb50 <_dtoa_r+0xa10>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb50:	9b00      	ldr	r3, [sp, #0]
 800bb52:	f883 8000 	strb.w	r8, [r3]
 800bb56:	e63f      	b.n	800b7d8 <_dtoa_r+0x698>
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e7bb      	b.n	800bad4 <_dtoa_r+0x994>
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	e7e1      	b.n	800bb24 <_dtoa_r+0x9e4>
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	db04      	blt.n	800bb70 <_dtoa_r+0xa30>
 800bb66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	d120      	bne.n	800bbb2 <_dtoa_r+0xa72>
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	dded      	ble.n	800bb50 <_dtoa_r+0xa10>
 800bb74:	4649      	mov	r1, r9
 800bb76:	2201      	movs	r2, #1
 800bb78:	4658      	mov	r0, fp
 800bb7a:	f000 fbb3 	bl	800c2e4 <__lshift>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4681      	mov	r9, r0
 800bb82:	f000 fc1b 	bl	800c3bc <__mcmp>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	dc03      	bgt.n	800bb92 <_dtoa_r+0xa52>
 800bb8a:	d1e1      	bne.n	800bb50 <_dtoa_r+0xa10>
 800bb8c:	f018 0f01 	tst.w	r8, #1
 800bb90:	d0de      	beq.n	800bb50 <_dtoa_r+0xa10>
 800bb92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb96:	d1d8      	bne.n	800bb4a <_dtoa_r+0xa0a>
 800bb98:	9a00      	ldr	r2, [sp, #0]
 800bb9a:	2339      	movs	r3, #57	@ 0x39
 800bb9c:	7013      	strb	r3, [r2, #0]
 800bb9e:	4633      	mov	r3, r6
 800bba0:	461e      	mov	r6, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bba8:	2a39      	cmp	r2, #57	@ 0x39
 800bbaa:	d052      	beq.n	800bc52 <_dtoa_r+0xb12>
 800bbac:	3201      	adds	r2, #1
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	e612      	b.n	800b7d8 <_dtoa_r+0x698>
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	dd07      	ble.n	800bbc6 <_dtoa_r+0xa86>
 800bbb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbba:	d0ed      	beq.n	800bb98 <_dtoa_r+0xa58>
 800bbbc:	9a00      	ldr	r2, [sp, #0]
 800bbbe:	f108 0301 	add.w	r3, r8, #1
 800bbc2:	7013      	strb	r3, [r2, #0]
 800bbc4:	e608      	b.n	800b7d8 <_dtoa_r+0x698>
 800bbc6:	9b07      	ldr	r3, [sp, #28]
 800bbc8:	9a07      	ldr	r2, [sp, #28]
 800bbca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d028      	beq.n	800bc26 <_dtoa_r+0xae6>
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4658      	mov	r0, fp
 800bbdc:	f000 f9d6 	bl	800bf8c <__multadd>
 800bbe0:	42af      	cmp	r7, r5
 800bbe2:	4681      	mov	r9, r0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	f04f 020a 	mov.w	r2, #10
 800bbec:	4639      	mov	r1, r7
 800bbee:	4658      	mov	r0, fp
 800bbf0:	d107      	bne.n	800bc02 <_dtoa_r+0xac2>
 800bbf2:	f000 f9cb 	bl	800bf8c <__multadd>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	9b07      	ldr	r3, [sp, #28]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9307      	str	r3, [sp, #28]
 800bc00:	e774      	b.n	800baec <_dtoa_r+0x9ac>
 800bc02:	f000 f9c3 	bl	800bf8c <__multadd>
 800bc06:	4629      	mov	r1, r5
 800bc08:	4607      	mov	r7, r0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	220a      	movs	r2, #10
 800bc0e:	4658      	mov	r0, fp
 800bc10:	f000 f9bc 	bl	800bf8c <__multadd>
 800bc14:	4605      	mov	r5, r0
 800bc16:	e7f0      	b.n	800bbfa <_dtoa_r+0xaba>
 800bc18:	9b00      	ldr	r3, [sp, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfcc      	ite	gt
 800bc1e:	461e      	movgt	r6, r3
 800bc20:	2601      	movle	r6, #1
 800bc22:	4456      	add	r6, sl
 800bc24:	2700      	movs	r7, #0
 800bc26:	4649      	mov	r1, r9
 800bc28:	2201      	movs	r2, #1
 800bc2a:	4658      	mov	r0, fp
 800bc2c:	f000 fb5a 	bl	800c2e4 <__lshift>
 800bc30:	4621      	mov	r1, r4
 800bc32:	4681      	mov	r9, r0
 800bc34:	f000 fbc2 	bl	800c3bc <__mcmp>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	dcb0      	bgt.n	800bb9e <_dtoa_r+0xa5e>
 800bc3c:	d102      	bne.n	800bc44 <_dtoa_r+0xb04>
 800bc3e:	f018 0f01 	tst.w	r8, #1
 800bc42:	d1ac      	bne.n	800bb9e <_dtoa_r+0xa5e>
 800bc44:	4633      	mov	r3, r6
 800bc46:	461e      	mov	r6, r3
 800bc48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc4c:	2a30      	cmp	r2, #48	@ 0x30
 800bc4e:	d0fa      	beq.n	800bc46 <_dtoa_r+0xb06>
 800bc50:	e5c2      	b.n	800b7d8 <_dtoa_r+0x698>
 800bc52:	459a      	cmp	sl, r3
 800bc54:	d1a4      	bne.n	800bba0 <_dtoa_r+0xa60>
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	2331      	movs	r3, #49	@ 0x31
 800bc5e:	f88a 3000 	strb.w	r3, [sl]
 800bc62:	e5b9      	b.n	800b7d8 <_dtoa_r+0x698>
 800bc64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bcc4 <_dtoa_r+0xb84>
 800bc6a:	b11b      	cbz	r3, 800bc74 <_dtoa_r+0xb34>
 800bc6c:	f10a 0308 	add.w	r3, sl, #8
 800bc70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	4650      	mov	r0, sl
 800bc76:	b019      	add	sp, #100	@ 0x64
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	f77f ae37 	ble.w	800b8f2 <_dtoa_r+0x7b2>
 800bc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e655      	b.n	800b938 <_dtoa_r+0x7f8>
 800bc8c:	9b00      	ldr	r3, [sp, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f77f aed6 	ble.w	800ba40 <_dtoa_r+0x900>
 800bc94:	4656      	mov	r6, sl
 800bc96:	4621      	mov	r1, r4
 800bc98:	4648      	mov	r0, r9
 800bc9a:	f7ff f9c6 	bl	800b02a <quorem>
 800bc9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bca2:	f806 8b01 	strb.w	r8, [r6], #1
 800bca6:	9b00      	ldr	r3, [sp, #0]
 800bca8:	eba6 020a 	sub.w	r2, r6, sl
 800bcac:	4293      	cmp	r3, r2
 800bcae:	ddb3      	ble.n	800bc18 <_dtoa_r+0xad8>
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	220a      	movs	r2, #10
 800bcb6:	4658      	mov	r0, fp
 800bcb8:	f000 f968 	bl	800bf8c <__multadd>
 800bcbc:	4681      	mov	r9, r0
 800bcbe:	e7ea      	b.n	800bc96 <_dtoa_r+0xb56>
 800bcc0:	0800d250 	.word	0x0800d250
 800bcc4:	0800d1d4 	.word	0x0800d1d4

0800bcc8 <_free_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4605      	mov	r5, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d041      	beq.n	800bd54 <_free_r+0x8c>
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f0c      	subs	r4, r1, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	18e4      	addlt	r4, r4, r3
 800bcdc:	f000 f8e8 	bl	800beb0 <__malloc_lock>
 800bce0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd58 <_free_r+0x90>)
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	b933      	cbnz	r3, 800bcf4 <_free_r+0x2c>
 800bce6:	6063      	str	r3, [r4, #4]
 800bce8:	6014      	str	r4, [r2, #0]
 800bcea:	4628      	mov	r0, r5
 800bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf0:	f000 b8e4 	b.w	800bebc <__malloc_unlock>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d908      	bls.n	800bd0a <_free_r+0x42>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	1821      	adds	r1, r4, r0
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf01      	itttt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	e7ed      	b.n	800bce6 <_free_r+0x1e>
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b10b      	cbz	r3, 800bd14 <_free_r+0x4c>
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	d9fa      	bls.n	800bd0a <_free_r+0x42>
 800bd14:	6811      	ldr	r1, [r2, #0]
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d10b      	bne.n	800bd34 <_free_r+0x6c>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	4401      	add	r1, r0
 800bd20:	1850      	adds	r0, r2, r1
 800bd22:	4283      	cmp	r3, r0
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	d1e0      	bne.n	800bcea <_free_r+0x22>
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	6053      	str	r3, [r2, #4]
 800bd2e:	4408      	add	r0, r1
 800bd30:	6010      	str	r0, [r2, #0]
 800bd32:	e7da      	b.n	800bcea <_free_r+0x22>
 800bd34:	d902      	bls.n	800bd3c <_free_r+0x74>
 800bd36:	230c      	movs	r3, #12
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	e7d6      	b.n	800bcea <_free_r+0x22>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf04      	itt	eq
 800bd44:	6819      	ldreq	r1, [r3, #0]
 800bd46:	685b      	ldreq	r3, [r3, #4]
 800bd48:	6063      	str	r3, [r4, #4]
 800bd4a:	bf04      	itt	eq
 800bd4c:	1809      	addeq	r1, r1, r0
 800bd4e:	6021      	streq	r1, [r4, #0]
 800bd50:	6054      	str	r4, [r2, #4]
 800bd52:	e7ca      	b.n	800bcea <_free_r+0x22>
 800bd54:	bd38      	pop	{r3, r4, r5, pc}
 800bd56:	bf00      	nop
 800bd58:	200009f8 	.word	0x200009f8

0800bd5c <malloc>:
 800bd5c:	4b02      	ldr	r3, [pc, #8]	@ (800bd68 <malloc+0xc>)
 800bd5e:	4601      	mov	r1, r0
 800bd60:	6818      	ldr	r0, [r3, #0]
 800bd62:	f000 b825 	b.w	800bdb0 <_malloc_r>
 800bd66:	bf00      	nop
 800bd68:	20000020 	.word	0x20000020

0800bd6c <sbrk_aligned>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	4e0f      	ldr	r6, [pc, #60]	@ (800bdac <sbrk_aligned+0x40>)
 800bd70:	460c      	mov	r4, r1
 800bd72:	6831      	ldr	r1, [r6, #0]
 800bd74:	4605      	mov	r5, r0
 800bd76:	b911      	cbnz	r1, 800bd7e <sbrk_aligned+0x12>
 800bd78:	f000 fe46 	bl	800ca08 <_sbrk_r>
 800bd7c:	6030      	str	r0, [r6, #0]
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4628      	mov	r0, r5
 800bd82:	f000 fe41 	bl	800ca08 <_sbrk_r>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d103      	bne.n	800bd92 <sbrk_aligned+0x26>
 800bd8a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd8e:	4620      	mov	r0, r4
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	1cc4      	adds	r4, r0, #3
 800bd94:	f024 0403 	bic.w	r4, r4, #3
 800bd98:	42a0      	cmp	r0, r4
 800bd9a:	d0f8      	beq.n	800bd8e <sbrk_aligned+0x22>
 800bd9c:	1a21      	subs	r1, r4, r0
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 fe32 	bl	800ca08 <_sbrk_r>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d1f2      	bne.n	800bd8e <sbrk_aligned+0x22>
 800bda8:	e7ef      	b.n	800bd8a <sbrk_aligned+0x1e>
 800bdaa:	bf00      	nop
 800bdac:	200009f4 	.word	0x200009f4

0800bdb0 <_malloc_r>:
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	1ccd      	adds	r5, r1, #3
 800bdb6:	f025 0503 	bic.w	r5, r5, #3
 800bdba:	3508      	adds	r5, #8
 800bdbc:	2d0c      	cmp	r5, #12
 800bdbe:	bf38      	it	cc
 800bdc0:	250c      	movcc	r5, #12
 800bdc2:	2d00      	cmp	r5, #0
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	db01      	blt.n	800bdcc <_malloc_r+0x1c>
 800bdc8:	42a9      	cmp	r1, r5
 800bdca:	d904      	bls.n	800bdd6 <_malloc_r+0x26>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	6033      	str	r3, [r6, #0]
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800beac <_malloc_r+0xfc>
 800bdda:	f000 f869 	bl	800beb0 <__malloc_lock>
 800bdde:	f8d8 3000 	ldr.w	r3, [r8]
 800bde2:	461c      	mov	r4, r3
 800bde4:	bb44      	cbnz	r4, 800be38 <_malloc_r+0x88>
 800bde6:	4629      	mov	r1, r5
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7ff ffbf 	bl	800bd6c <sbrk_aligned>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	d158      	bne.n	800bea6 <_malloc_r+0xf6>
 800bdf4:	f8d8 4000 	ldr.w	r4, [r8]
 800bdf8:	4627      	mov	r7, r4
 800bdfa:	2f00      	cmp	r7, #0
 800bdfc:	d143      	bne.n	800be86 <_malloc_r+0xd6>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	d04b      	beq.n	800be9a <_malloc_r+0xea>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	4639      	mov	r1, r7
 800be06:	4630      	mov	r0, r6
 800be08:	eb04 0903 	add.w	r9, r4, r3
 800be0c:	f000 fdfc 	bl	800ca08 <_sbrk_r>
 800be10:	4581      	cmp	r9, r0
 800be12:	d142      	bne.n	800be9a <_malloc_r+0xea>
 800be14:	6821      	ldr	r1, [r4, #0]
 800be16:	1a6d      	subs	r5, r5, r1
 800be18:	4629      	mov	r1, r5
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ffa6 	bl	800bd6c <sbrk_aligned>
 800be20:	3001      	adds	r0, #1
 800be22:	d03a      	beq.n	800be9a <_malloc_r+0xea>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	442b      	add	r3, r5
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	f8d8 3000 	ldr.w	r3, [r8]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	bb62      	cbnz	r2, 800be8c <_malloc_r+0xdc>
 800be32:	f8c8 7000 	str.w	r7, [r8]
 800be36:	e00f      	b.n	800be58 <_malloc_r+0xa8>
 800be38:	6822      	ldr	r2, [r4, #0]
 800be3a:	1b52      	subs	r2, r2, r5
 800be3c:	d420      	bmi.n	800be80 <_malloc_r+0xd0>
 800be3e:	2a0b      	cmp	r2, #11
 800be40:	d917      	bls.n	800be72 <_malloc_r+0xc2>
 800be42:	1961      	adds	r1, r4, r5
 800be44:	42a3      	cmp	r3, r4
 800be46:	6025      	str	r5, [r4, #0]
 800be48:	bf18      	it	ne
 800be4a:	6059      	strne	r1, [r3, #4]
 800be4c:	6863      	ldr	r3, [r4, #4]
 800be4e:	bf08      	it	eq
 800be50:	f8c8 1000 	streq.w	r1, [r8]
 800be54:	5162      	str	r2, [r4, r5]
 800be56:	604b      	str	r3, [r1, #4]
 800be58:	4630      	mov	r0, r6
 800be5a:	f000 f82f 	bl	800bebc <__malloc_unlock>
 800be5e:	f104 000b 	add.w	r0, r4, #11
 800be62:	1d23      	adds	r3, r4, #4
 800be64:	f020 0007 	bic.w	r0, r0, #7
 800be68:	1ac2      	subs	r2, r0, r3
 800be6a:	bf1c      	itt	ne
 800be6c:	1a1b      	subne	r3, r3, r0
 800be6e:	50a3      	strne	r3, [r4, r2]
 800be70:	e7af      	b.n	800bdd2 <_malloc_r+0x22>
 800be72:	6862      	ldr	r2, [r4, #4]
 800be74:	42a3      	cmp	r3, r4
 800be76:	bf0c      	ite	eq
 800be78:	f8c8 2000 	streq.w	r2, [r8]
 800be7c:	605a      	strne	r2, [r3, #4]
 800be7e:	e7eb      	b.n	800be58 <_malloc_r+0xa8>
 800be80:	4623      	mov	r3, r4
 800be82:	6864      	ldr	r4, [r4, #4]
 800be84:	e7ae      	b.n	800bde4 <_malloc_r+0x34>
 800be86:	463c      	mov	r4, r7
 800be88:	687f      	ldr	r7, [r7, #4]
 800be8a:	e7b6      	b.n	800bdfa <_malloc_r+0x4a>
 800be8c:	461a      	mov	r2, r3
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	42a3      	cmp	r3, r4
 800be92:	d1fb      	bne.n	800be8c <_malloc_r+0xdc>
 800be94:	2300      	movs	r3, #0
 800be96:	6053      	str	r3, [r2, #4]
 800be98:	e7de      	b.n	800be58 <_malloc_r+0xa8>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6033      	str	r3, [r6, #0]
 800be9e:	4630      	mov	r0, r6
 800bea0:	f000 f80c 	bl	800bebc <__malloc_unlock>
 800bea4:	e794      	b.n	800bdd0 <_malloc_r+0x20>
 800bea6:	6005      	str	r5, [r0, #0]
 800bea8:	e7d6      	b.n	800be58 <_malloc_r+0xa8>
 800beaa:	bf00      	nop
 800beac:	200009f8 	.word	0x200009f8

0800beb0 <__malloc_lock>:
 800beb0:	4801      	ldr	r0, [pc, #4]	@ (800beb8 <__malloc_lock+0x8>)
 800beb2:	f7ff b8b8 	b.w	800b026 <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	200009f0 	.word	0x200009f0

0800bebc <__malloc_unlock>:
 800bebc:	4801      	ldr	r0, [pc, #4]	@ (800bec4 <__malloc_unlock+0x8>)
 800bebe:	f7ff b8b3 	b.w	800b028 <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	200009f0 	.word	0x200009f0

0800bec8 <_Balloc>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	69c6      	ldr	r6, [r0, #28]
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	b976      	cbnz	r6, 800bef0 <_Balloc+0x28>
 800bed2:	2010      	movs	r0, #16
 800bed4:	f7ff ff42 	bl	800bd5c <malloc>
 800bed8:	4602      	mov	r2, r0
 800beda:	61e0      	str	r0, [r4, #28]
 800bedc:	b920      	cbnz	r0, 800bee8 <_Balloc+0x20>
 800bede:	4b18      	ldr	r3, [pc, #96]	@ (800bf40 <_Balloc+0x78>)
 800bee0:	4818      	ldr	r0, [pc, #96]	@ (800bf44 <_Balloc+0x7c>)
 800bee2:	216b      	movs	r1, #107	@ 0x6b
 800bee4:	f000 fdae 	bl	800ca44 <__assert_func>
 800bee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beec:	6006      	str	r6, [r0, #0]
 800beee:	60c6      	str	r6, [r0, #12]
 800bef0:	69e6      	ldr	r6, [r4, #28]
 800bef2:	68f3      	ldr	r3, [r6, #12]
 800bef4:	b183      	cbz	r3, 800bf18 <_Balloc+0x50>
 800bef6:	69e3      	ldr	r3, [r4, #28]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800befe:	b9b8      	cbnz	r0, 800bf30 <_Balloc+0x68>
 800bf00:	2101      	movs	r1, #1
 800bf02:	fa01 f605 	lsl.w	r6, r1, r5
 800bf06:	1d72      	adds	r2, r6, #5
 800bf08:	0092      	lsls	r2, r2, #2
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 fdb8 	bl	800ca80 <_calloc_r>
 800bf10:	b160      	cbz	r0, 800bf2c <_Balloc+0x64>
 800bf12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf16:	e00e      	b.n	800bf36 <_Balloc+0x6e>
 800bf18:	2221      	movs	r2, #33	@ 0x21
 800bf1a:	2104      	movs	r1, #4
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 fdaf 	bl	800ca80 <_calloc_r>
 800bf22:	69e3      	ldr	r3, [r4, #28]
 800bf24:	60f0      	str	r0, [r6, #12]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e4      	bne.n	800bef6 <_Balloc+0x2e>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	6802      	ldr	r2, [r0, #0]
 800bf32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf36:	2300      	movs	r3, #0
 800bf38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf3c:	e7f7      	b.n	800bf2e <_Balloc+0x66>
 800bf3e:	bf00      	nop
 800bf40:	0800d1e1 	.word	0x0800d1e1
 800bf44:	0800d261 	.word	0x0800d261

0800bf48 <_Bfree>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	69c6      	ldr	r6, [r0, #28]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	b976      	cbnz	r6, 800bf70 <_Bfree+0x28>
 800bf52:	2010      	movs	r0, #16
 800bf54:	f7ff ff02 	bl	800bd5c <malloc>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	61e8      	str	r0, [r5, #28]
 800bf5c:	b920      	cbnz	r0, 800bf68 <_Bfree+0x20>
 800bf5e:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <_Bfree+0x3c>)
 800bf60:	4809      	ldr	r0, [pc, #36]	@ (800bf88 <_Bfree+0x40>)
 800bf62:	218f      	movs	r1, #143	@ 0x8f
 800bf64:	f000 fd6e 	bl	800ca44 <__assert_func>
 800bf68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf6c:	6006      	str	r6, [r0, #0]
 800bf6e:	60c6      	str	r6, [r0, #12]
 800bf70:	b13c      	cbz	r4, 800bf82 <_Bfree+0x3a>
 800bf72:	69eb      	ldr	r3, [r5, #28]
 800bf74:	6862      	ldr	r2, [r4, #4]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf7c:	6021      	str	r1, [r4, #0]
 800bf7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	0800d1e1 	.word	0x0800d1e1
 800bf88:	0800d261 	.word	0x0800d261

0800bf8c <__multadd>:
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	690d      	ldr	r5, [r1, #16]
 800bf92:	4607      	mov	r7, r0
 800bf94:	460c      	mov	r4, r1
 800bf96:	461e      	mov	r6, r3
 800bf98:	f101 0c14 	add.w	ip, r1, #20
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bfa2:	b299      	uxth	r1, r3
 800bfa4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfa8:	0c1e      	lsrs	r6, r3, #16
 800bfaa:	0c0b      	lsrs	r3, r1, #16
 800bfac:	fb02 3306 	mla	r3, r2, r6, r3
 800bfb0:	b289      	uxth	r1, r1
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfb8:	4285      	cmp	r5, r0
 800bfba:	f84c 1b04 	str.w	r1, [ip], #4
 800bfbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfc2:	dcec      	bgt.n	800bf9e <__multadd+0x12>
 800bfc4:	b30e      	cbz	r6, 800c00a <__multadd+0x7e>
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	dc19      	bgt.n	800c000 <__multadd+0x74>
 800bfcc:	6861      	ldr	r1, [r4, #4]
 800bfce:	4638      	mov	r0, r7
 800bfd0:	3101      	adds	r1, #1
 800bfd2:	f7ff ff79 	bl	800bec8 <_Balloc>
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	b928      	cbnz	r0, 800bfe6 <__multadd+0x5a>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	4b0c      	ldr	r3, [pc, #48]	@ (800c010 <__multadd+0x84>)
 800bfde:	480d      	ldr	r0, [pc, #52]	@ (800c014 <__multadd+0x88>)
 800bfe0:	21ba      	movs	r1, #186	@ 0xba
 800bfe2:	f000 fd2f 	bl	800ca44 <__assert_func>
 800bfe6:	6922      	ldr	r2, [r4, #16]
 800bfe8:	3202      	adds	r2, #2
 800bfea:	f104 010c 	add.w	r1, r4, #12
 800bfee:	0092      	lsls	r2, r2, #2
 800bff0:	300c      	adds	r0, #12
 800bff2:	f000 fd19 	bl	800ca28 <memcpy>
 800bff6:	4621      	mov	r1, r4
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7ff ffa5 	bl	800bf48 <_Bfree>
 800bffe:	4644      	mov	r4, r8
 800c000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c004:	3501      	adds	r5, #1
 800c006:	615e      	str	r6, [r3, #20]
 800c008:	6125      	str	r5, [r4, #16]
 800c00a:	4620      	mov	r0, r4
 800c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c010:	0800d250 	.word	0x0800d250
 800c014:	0800d261 	.word	0x0800d261

0800c018 <__hi0bits>:
 800c018:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c01c:	4603      	mov	r3, r0
 800c01e:	bf36      	itet	cc
 800c020:	0403      	lslcc	r3, r0, #16
 800c022:	2000      	movcs	r0, #0
 800c024:	2010      	movcc	r0, #16
 800c026:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c02a:	bf3c      	itt	cc
 800c02c:	021b      	lslcc	r3, r3, #8
 800c02e:	3008      	addcc	r0, #8
 800c030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c034:	bf3c      	itt	cc
 800c036:	011b      	lslcc	r3, r3, #4
 800c038:	3004      	addcc	r0, #4
 800c03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03e:	bf3c      	itt	cc
 800c040:	009b      	lslcc	r3, r3, #2
 800c042:	3002      	addcc	r0, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	db05      	blt.n	800c054 <__hi0bits+0x3c>
 800c048:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c04c:	f100 0001 	add.w	r0, r0, #1
 800c050:	bf08      	it	eq
 800c052:	2020      	moveq	r0, #32
 800c054:	4770      	bx	lr

0800c056 <__lo0bits>:
 800c056:	6803      	ldr	r3, [r0, #0]
 800c058:	4602      	mov	r2, r0
 800c05a:	f013 0007 	ands.w	r0, r3, #7
 800c05e:	d00b      	beq.n	800c078 <__lo0bits+0x22>
 800c060:	07d9      	lsls	r1, r3, #31
 800c062:	d421      	bmi.n	800c0a8 <__lo0bits+0x52>
 800c064:	0798      	lsls	r0, r3, #30
 800c066:	bf49      	itett	mi
 800c068:	085b      	lsrmi	r3, r3, #1
 800c06a:	089b      	lsrpl	r3, r3, #2
 800c06c:	2001      	movmi	r0, #1
 800c06e:	6013      	strmi	r3, [r2, #0]
 800c070:	bf5c      	itt	pl
 800c072:	6013      	strpl	r3, [r2, #0]
 800c074:	2002      	movpl	r0, #2
 800c076:	4770      	bx	lr
 800c078:	b299      	uxth	r1, r3
 800c07a:	b909      	cbnz	r1, 800c080 <__lo0bits+0x2a>
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	2010      	movs	r0, #16
 800c080:	b2d9      	uxtb	r1, r3
 800c082:	b909      	cbnz	r1, 800c088 <__lo0bits+0x32>
 800c084:	3008      	adds	r0, #8
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	0719      	lsls	r1, r3, #28
 800c08a:	bf04      	itt	eq
 800c08c:	091b      	lsreq	r3, r3, #4
 800c08e:	3004      	addeq	r0, #4
 800c090:	0799      	lsls	r1, r3, #30
 800c092:	bf04      	itt	eq
 800c094:	089b      	lsreq	r3, r3, #2
 800c096:	3002      	addeq	r0, #2
 800c098:	07d9      	lsls	r1, r3, #31
 800c09a:	d403      	bmi.n	800c0a4 <__lo0bits+0x4e>
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	f100 0001 	add.w	r0, r0, #1
 800c0a2:	d003      	beq.n	800c0ac <__lo0bits+0x56>
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	4770      	bx	lr
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	4770      	bx	lr
 800c0ac:	2020      	movs	r0, #32
 800c0ae:	4770      	bx	lr

0800c0b0 <__i2b>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	f7ff ff07 	bl	800bec8 <_Balloc>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	b928      	cbnz	r0, 800c0ca <__i2b+0x1a>
 800c0be:	4b05      	ldr	r3, [pc, #20]	@ (800c0d4 <__i2b+0x24>)
 800c0c0:	4805      	ldr	r0, [pc, #20]	@ (800c0d8 <__i2b+0x28>)
 800c0c2:	f240 1145 	movw	r1, #325	@ 0x145
 800c0c6:	f000 fcbd 	bl	800ca44 <__assert_func>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	6144      	str	r4, [r0, #20]
 800c0ce:	6103      	str	r3, [r0, #16]
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	0800d250 	.word	0x0800d250
 800c0d8:	0800d261 	.word	0x0800d261

0800c0dc <__multiply>:
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	690a      	ldr	r2, [r1, #16]
 800c0e4:	6923      	ldr	r3, [r4, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	bfa8      	it	ge
 800c0ea:	4623      	movge	r3, r4
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	bfa4      	itt	ge
 800c0f0:	460c      	movge	r4, r1
 800c0f2:	461f      	movge	r7, r3
 800c0f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	6861      	ldr	r1, [r4, #4]
 800c100:	eb0a 0609 	add.w	r6, sl, r9
 800c104:	42b3      	cmp	r3, r6
 800c106:	b085      	sub	sp, #20
 800c108:	bfb8      	it	lt
 800c10a:	3101      	addlt	r1, #1
 800c10c:	f7ff fedc 	bl	800bec8 <_Balloc>
 800c110:	b930      	cbnz	r0, 800c120 <__multiply+0x44>
 800c112:	4602      	mov	r2, r0
 800c114:	4b44      	ldr	r3, [pc, #272]	@ (800c228 <__multiply+0x14c>)
 800c116:	4845      	ldr	r0, [pc, #276]	@ (800c22c <__multiply+0x150>)
 800c118:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c11c:	f000 fc92 	bl	800ca44 <__assert_func>
 800c120:	f100 0514 	add.w	r5, r0, #20
 800c124:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c128:	462b      	mov	r3, r5
 800c12a:	2200      	movs	r2, #0
 800c12c:	4543      	cmp	r3, r8
 800c12e:	d321      	bcc.n	800c174 <__multiply+0x98>
 800c130:	f107 0114 	add.w	r1, r7, #20
 800c134:	f104 0214 	add.w	r2, r4, #20
 800c138:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c13c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c140:	9302      	str	r3, [sp, #8]
 800c142:	1b13      	subs	r3, r2, r4
 800c144:	3b15      	subs	r3, #21
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	3304      	adds	r3, #4
 800c14c:	f104 0715 	add.w	r7, r4, #21
 800c150:	42ba      	cmp	r2, r7
 800c152:	bf38      	it	cc
 800c154:	2304      	movcc	r3, #4
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	9103      	str	r1, [sp, #12]
 800c15c:	428b      	cmp	r3, r1
 800c15e:	d80c      	bhi.n	800c17a <__multiply+0x9e>
 800c160:	2e00      	cmp	r6, #0
 800c162:	dd03      	ble.n	800c16c <__multiply+0x90>
 800c164:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d05b      	beq.n	800c224 <__multiply+0x148>
 800c16c:	6106      	str	r6, [r0, #16]
 800c16e:	b005      	add	sp, #20
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	f843 2b04 	str.w	r2, [r3], #4
 800c178:	e7d8      	b.n	800c12c <__multiply+0x50>
 800c17a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c17e:	f1ba 0f00 	cmp.w	sl, #0
 800c182:	d024      	beq.n	800c1ce <__multiply+0xf2>
 800c184:	f104 0e14 	add.w	lr, r4, #20
 800c188:	46a9      	mov	r9, r5
 800c18a:	f04f 0c00 	mov.w	ip, #0
 800c18e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c192:	f8d9 3000 	ldr.w	r3, [r9]
 800c196:	fa1f fb87 	uxth.w	fp, r7
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1a4:	f8d9 7000 	ldr.w	r7, [r9]
 800c1a8:	4463      	add	r3, ip
 800c1aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1bc:	4572      	cmp	r2, lr
 800c1be:	f849 3b04 	str.w	r3, [r9], #4
 800c1c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1c6:	d8e2      	bhi.n	800c18e <__multiply+0xb2>
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	f845 c003 	str.w	ip, [r5, r3]
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1d4:	3104      	adds	r1, #4
 800c1d6:	f1b9 0f00 	cmp.w	r9, #0
 800c1da:	d021      	beq.n	800c220 <__multiply+0x144>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	f104 0c14 	add.w	ip, r4, #20
 800c1e2:	46ae      	mov	lr, r5
 800c1e4:	f04f 0a00 	mov.w	sl, #0
 800c1e8:	f8bc b000 	ldrh.w	fp, [ip]
 800c1ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1f0:	fb09 770b 	mla	r7, r9, fp, r7
 800c1f4:	4457      	add	r7, sl
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1fc:	f84e 3b04 	str.w	r3, [lr], #4
 800c200:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c208:	f8be 3000 	ldrh.w	r3, [lr]
 800c20c:	fb09 330a 	mla	r3, r9, sl, r3
 800c210:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c214:	4562      	cmp	r2, ip
 800c216:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c21a:	d8e5      	bhi.n	800c1e8 <__multiply+0x10c>
 800c21c:	9f01      	ldr	r7, [sp, #4]
 800c21e:	51eb      	str	r3, [r5, r7]
 800c220:	3504      	adds	r5, #4
 800c222:	e799      	b.n	800c158 <__multiply+0x7c>
 800c224:	3e01      	subs	r6, #1
 800c226:	e79b      	b.n	800c160 <__multiply+0x84>
 800c228:	0800d250 	.word	0x0800d250
 800c22c:	0800d261 	.word	0x0800d261

0800c230 <__pow5mult>:
 800c230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c234:	4615      	mov	r5, r2
 800c236:	f012 0203 	ands.w	r2, r2, #3
 800c23a:	4607      	mov	r7, r0
 800c23c:	460e      	mov	r6, r1
 800c23e:	d007      	beq.n	800c250 <__pow5mult+0x20>
 800c240:	4c25      	ldr	r4, [pc, #148]	@ (800c2d8 <__pow5mult+0xa8>)
 800c242:	3a01      	subs	r2, #1
 800c244:	2300      	movs	r3, #0
 800c246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c24a:	f7ff fe9f 	bl	800bf8c <__multadd>
 800c24e:	4606      	mov	r6, r0
 800c250:	10ad      	asrs	r5, r5, #2
 800c252:	d03d      	beq.n	800c2d0 <__pow5mult+0xa0>
 800c254:	69fc      	ldr	r4, [r7, #28]
 800c256:	b97c      	cbnz	r4, 800c278 <__pow5mult+0x48>
 800c258:	2010      	movs	r0, #16
 800c25a:	f7ff fd7f 	bl	800bd5c <malloc>
 800c25e:	4602      	mov	r2, r0
 800c260:	61f8      	str	r0, [r7, #28]
 800c262:	b928      	cbnz	r0, 800c270 <__pow5mult+0x40>
 800c264:	4b1d      	ldr	r3, [pc, #116]	@ (800c2dc <__pow5mult+0xac>)
 800c266:	481e      	ldr	r0, [pc, #120]	@ (800c2e0 <__pow5mult+0xb0>)
 800c268:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c26c:	f000 fbea 	bl	800ca44 <__assert_func>
 800c270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c274:	6004      	str	r4, [r0, #0]
 800c276:	60c4      	str	r4, [r0, #12]
 800c278:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c27c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c280:	b94c      	cbnz	r4, 800c296 <__pow5mult+0x66>
 800c282:	f240 2171 	movw	r1, #625	@ 0x271
 800c286:	4638      	mov	r0, r7
 800c288:	f7ff ff12 	bl	800c0b0 <__i2b>
 800c28c:	2300      	movs	r3, #0
 800c28e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c292:	4604      	mov	r4, r0
 800c294:	6003      	str	r3, [r0, #0]
 800c296:	f04f 0900 	mov.w	r9, #0
 800c29a:	07eb      	lsls	r3, r5, #31
 800c29c:	d50a      	bpl.n	800c2b4 <__pow5mult+0x84>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	f7ff ff1a 	bl	800c0dc <__multiply>
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	4680      	mov	r8, r0
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7ff fe4b 	bl	800bf48 <_Bfree>
 800c2b2:	4646      	mov	r6, r8
 800c2b4:	106d      	asrs	r5, r5, #1
 800c2b6:	d00b      	beq.n	800c2d0 <__pow5mult+0xa0>
 800c2b8:	6820      	ldr	r0, [r4, #0]
 800c2ba:	b938      	cbnz	r0, 800c2cc <__pow5mult+0x9c>
 800c2bc:	4622      	mov	r2, r4
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff ff0b 	bl	800c0dc <__multiply>
 800c2c6:	6020      	str	r0, [r4, #0]
 800c2c8:	f8c0 9000 	str.w	r9, [r0]
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e7e4      	b.n	800c29a <__pow5mult+0x6a>
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d6:	bf00      	nop
 800c2d8:	0800d2bc 	.word	0x0800d2bc
 800c2dc:	0800d1e1 	.word	0x0800d1e1
 800c2e0:	0800d261 	.word	0x0800d261

0800c2e4 <__lshift>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	6849      	ldr	r1, [r1, #4]
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	4691      	mov	r9, r2
 800c2f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2fc:	f108 0601 	add.w	r6, r8, #1
 800c300:	42b3      	cmp	r3, r6
 800c302:	db0b      	blt.n	800c31c <__lshift+0x38>
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff fddf 	bl	800bec8 <_Balloc>
 800c30a:	4605      	mov	r5, r0
 800c30c:	b948      	cbnz	r0, 800c322 <__lshift+0x3e>
 800c30e:	4602      	mov	r2, r0
 800c310:	4b28      	ldr	r3, [pc, #160]	@ (800c3b4 <__lshift+0xd0>)
 800c312:	4829      	ldr	r0, [pc, #164]	@ (800c3b8 <__lshift+0xd4>)
 800c314:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c318:	f000 fb94 	bl	800ca44 <__assert_func>
 800c31c:	3101      	adds	r1, #1
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	e7ee      	b.n	800c300 <__lshift+0x1c>
 800c322:	2300      	movs	r3, #0
 800c324:	f100 0114 	add.w	r1, r0, #20
 800c328:	f100 0210 	add.w	r2, r0, #16
 800c32c:	4618      	mov	r0, r3
 800c32e:	4553      	cmp	r3, sl
 800c330:	db33      	blt.n	800c39a <__lshift+0xb6>
 800c332:	6920      	ldr	r0, [r4, #16]
 800c334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c338:	f104 0314 	add.w	r3, r4, #20
 800c33c:	f019 091f 	ands.w	r9, r9, #31
 800c340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c348:	d02b      	beq.n	800c3a2 <__lshift+0xbe>
 800c34a:	f1c9 0e20 	rsb	lr, r9, #32
 800c34e:	468a      	mov	sl, r1
 800c350:	2200      	movs	r2, #0
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	fa00 f009 	lsl.w	r0, r0, r9
 800c358:	4310      	orrs	r0, r2
 800c35a:	f84a 0b04 	str.w	r0, [sl], #4
 800c35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c362:	459c      	cmp	ip, r3
 800c364:	fa22 f20e 	lsr.w	r2, r2, lr
 800c368:	d8f3      	bhi.n	800c352 <__lshift+0x6e>
 800c36a:	ebac 0304 	sub.w	r3, ip, r4
 800c36e:	3b15      	subs	r3, #21
 800c370:	f023 0303 	bic.w	r3, r3, #3
 800c374:	3304      	adds	r3, #4
 800c376:	f104 0015 	add.w	r0, r4, #21
 800c37a:	4584      	cmp	ip, r0
 800c37c:	bf38      	it	cc
 800c37e:	2304      	movcc	r3, #4
 800c380:	50ca      	str	r2, [r1, r3]
 800c382:	b10a      	cbz	r2, 800c388 <__lshift+0xa4>
 800c384:	f108 0602 	add.w	r6, r8, #2
 800c388:	3e01      	subs	r6, #1
 800c38a:	4638      	mov	r0, r7
 800c38c:	612e      	str	r6, [r5, #16]
 800c38e:	4621      	mov	r1, r4
 800c390:	f7ff fdda 	bl	800bf48 <_Bfree>
 800c394:	4628      	mov	r0, r5
 800c396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c39e:	3301      	adds	r3, #1
 800c3a0:	e7c5      	b.n	800c32e <__lshift+0x4a>
 800c3a2:	3904      	subs	r1, #4
 800c3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3ac:	459c      	cmp	ip, r3
 800c3ae:	d8f9      	bhi.n	800c3a4 <__lshift+0xc0>
 800c3b0:	e7ea      	b.n	800c388 <__lshift+0xa4>
 800c3b2:	bf00      	nop
 800c3b4:	0800d250 	.word	0x0800d250
 800c3b8:	0800d261 	.word	0x0800d261

0800c3bc <__mcmp>:
 800c3bc:	690a      	ldr	r2, [r1, #16]
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6900      	ldr	r0, [r0, #16]
 800c3c2:	1a80      	subs	r0, r0, r2
 800c3c4:	b530      	push	{r4, r5, lr}
 800c3c6:	d10e      	bne.n	800c3e6 <__mcmp+0x2a>
 800c3c8:	3314      	adds	r3, #20
 800c3ca:	3114      	adds	r1, #20
 800c3cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3dc:	4295      	cmp	r5, r2
 800c3de:	d003      	beq.n	800c3e8 <__mcmp+0x2c>
 800c3e0:	d205      	bcs.n	800c3ee <__mcmp+0x32>
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e6:	bd30      	pop	{r4, r5, pc}
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d3f3      	bcc.n	800c3d4 <__mcmp+0x18>
 800c3ec:	e7fb      	b.n	800c3e6 <__mcmp+0x2a>
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	e7f9      	b.n	800c3e6 <__mcmp+0x2a>
	...

0800c3f4 <__mdiff>:
 800c3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4648      	mov	r0, r9
 800c400:	4614      	mov	r4, r2
 800c402:	f7ff ffdb 	bl	800c3bc <__mcmp>
 800c406:	1e05      	subs	r5, r0, #0
 800c408:	d112      	bne.n	800c430 <__mdiff+0x3c>
 800c40a:	4629      	mov	r1, r5
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff fd5b 	bl	800bec8 <_Balloc>
 800c412:	4602      	mov	r2, r0
 800c414:	b928      	cbnz	r0, 800c422 <__mdiff+0x2e>
 800c416:	4b3f      	ldr	r3, [pc, #252]	@ (800c514 <__mdiff+0x120>)
 800c418:	f240 2137 	movw	r1, #567	@ 0x237
 800c41c:	483e      	ldr	r0, [pc, #248]	@ (800c518 <__mdiff+0x124>)
 800c41e:	f000 fb11 	bl	800ca44 <__assert_func>
 800c422:	2301      	movs	r3, #1
 800c424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c428:	4610      	mov	r0, r2
 800c42a:	b003      	add	sp, #12
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c430:	bfbc      	itt	lt
 800c432:	464b      	movlt	r3, r9
 800c434:	46a1      	movlt	r9, r4
 800c436:	4630      	mov	r0, r6
 800c438:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c43c:	bfba      	itte	lt
 800c43e:	461c      	movlt	r4, r3
 800c440:	2501      	movlt	r5, #1
 800c442:	2500      	movge	r5, #0
 800c444:	f7ff fd40 	bl	800bec8 <_Balloc>
 800c448:	4602      	mov	r2, r0
 800c44a:	b918      	cbnz	r0, 800c454 <__mdiff+0x60>
 800c44c:	4b31      	ldr	r3, [pc, #196]	@ (800c514 <__mdiff+0x120>)
 800c44e:	f240 2145 	movw	r1, #581	@ 0x245
 800c452:	e7e3      	b.n	800c41c <__mdiff+0x28>
 800c454:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c458:	6926      	ldr	r6, [r4, #16]
 800c45a:	60c5      	str	r5, [r0, #12]
 800c45c:	f109 0310 	add.w	r3, r9, #16
 800c460:	f109 0514 	add.w	r5, r9, #20
 800c464:	f104 0e14 	add.w	lr, r4, #20
 800c468:	f100 0b14 	add.w	fp, r0, #20
 800c46c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c470:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	46d9      	mov	r9, fp
 800c478:	f04f 0c00 	mov.w	ip, #0
 800c47c:	9b01      	ldr	r3, [sp, #4]
 800c47e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c482:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	fa1f f38a 	uxth.w	r3, sl
 800c48c:	4619      	mov	r1, r3
 800c48e:	b283      	uxth	r3, r0
 800c490:	1acb      	subs	r3, r1, r3
 800c492:	0c00      	lsrs	r0, r0, #16
 800c494:	4463      	add	r3, ip
 800c496:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c49a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4a4:	4576      	cmp	r6, lr
 800c4a6:	f849 3b04 	str.w	r3, [r9], #4
 800c4aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4ae:	d8e5      	bhi.n	800c47c <__mdiff+0x88>
 800c4b0:	1b33      	subs	r3, r6, r4
 800c4b2:	3b15      	subs	r3, #21
 800c4b4:	f023 0303 	bic.w	r3, r3, #3
 800c4b8:	3415      	adds	r4, #21
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	42a6      	cmp	r6, r4
 800c4be:	bf38      	it	cc
 800c4c0:	2304      	movcc	r3, #4
 800c4c2:	441d      	add	r5, r3
 800c4c4:	445b      	add	r3, fp
 800c4c6:	461e      	mov	r6, r3
 800c4c8:	462c      	mov	r4, r5
 800c4ca:	4544      	cmp	r4, r8
 800c4cc:	d30e      	bcc.n	800c4ec <__mdiff+0xf8>
 800c4ce:	f108 0103 	add.w	r1, r8, #3
 800c4d2:	1b49      	subs	r1, r1, r5
 800c4d4:	f021 0103 	bic.w	r1, r1, #3
 800c4d8:	3d03      	subs	r5, #3
 800c4da:	45a8      	cmp	r8, r5
 800c4dc:	bf38      	it	cc
 800c4de:	2100      	movcc	r1, #0
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4e6:	b191      	cbz	r1, 800c50e <__mdiff+0x11a>
 800c4e8:	6117      	str	r7, [r2, #16]
 800c4ea:	e79d      	b.n	800c428 <__mdiff+0x34>
 800c4ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4f0:	46e6      	mov	lr, ip
 800c4f2:	0c08      	lsrs	r0, r1, #16
 800c4f4:	fa1c fc81 	uxtah	ip, ip, r1
 800c4f8:	4471      	add	r1, lr
 800c4fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4fe:	b289      	uxth	r1, r1
 800c500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c504:	f846 1b04 	str.w	r1, [r6], #4
 800c508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c50c:	e7dd      	b.n	800c4ca <__mdiff+0xd6>
 800c50e:	3f01      	subs	r7, #1
 800c510:	e7e7      	b.n	800c4e2 <__mdiff+0xee>
 800c512:	bf00      	nop
 800c514:	0800d250 	.word	0x0800d250
 800c518:	0800d261 	.word	0x0800d261

0800c51c <__d2b>:
 800c51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c520:	460f      	mov	r7, r1
 800c522:	2101      	movs	r1, #1
 800c524:	ec59 8b10 	vmov	r8, r9, d0
 800c528:	4616      	mov	r6, r2
 800c52a:	f7ff fccd 	bl	800bec8 <_Balloc>
 800c52e:	4604      	mov	r4, r0
 800c530:	b930      	cbnz	r0, 800c540 <__d2b+0x24>
 800c532:	4602      	mov	r2, r0
 800c534:	4b23      	ldr	r3, [pc, #140]	@ (800c5c4 <__d2b+0xa8>)
 800c536:	4824      	ldr	r0, [pc, #144]	@ (800c5c8 <__d2b+0xac>)
 800c538:	f240 310f 	movw	r1, #783	@ 0x30f
 800c53c:	f000 fa82 	bl	800ca44 <__assert_func>
 800c540:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c544:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c548:	b10d      	cbz	r5, 800c54e <__d2b+0x32>
 800c54a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	f1b8 0300 	subs.w	r3, r8, #0
 800c554:	d023      	beq.n	800c59e <__d2b+0x82>
 800c556:	4668      	mov	r0, sp
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f7ff fd7c 	bl	800c056 <__lo0bits>
 800c55e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c562:	b1d0      	cbz	r0, 800c59a <__d2b+0x7e>
 800c564:	f1c0 0320 	rsb	r3, r0, #32
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	430b      	orrs	r3, r1
 800c56e:	40c2      	lsrs	r2, r0
 800c570:	6163      	str	r3, [r4, #20]
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	61a3      	str	r3, [r4, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf0c      	ite	eq
 800c57c:	2201      	moveq	r2, #1
 800c57e:	2202      	movne	r2, #2
 800c580:	6122      	str	r2, [r4, #16]
 800c582:	b1a5      	cbz	r5, 800c5ae <__d2b+0x92>
 800c584:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c588:	4405      	add	r5, r0
 800c58a:	603d      	str	r5, [r7, #0]
 800c58c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c590:	6030      	str	r0, [r6, #0]
 800c592:	4620      	mov	r0, r4
 800c594:	b003      	add	sp, #12
 800c596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c59a:	6161      	str	r1, [r4, #20]
 800c59c:	e7ea      	b.n	800c574 <__d2b+0x58>
 800c59e:	a801      	add	r0, sp, #4
 800c5a0:	f7ff fd59 	bl	800c056 <__lo0bits>
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	3020      	adds	r0, #32
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	e7e8      	b.n	800c580 <__d2b+0x64>
 800c5ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5b6:	6038      	str	r0, [r7, #0]
 800c5b8:	6918      	ldr	r0, [r3, #16]
 800c5ba:	f7ff fd2d 	bl	800c018 <__hi0bits>
 800c5be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5c2:	e7e5      	b.n	800c590 <__d2b+0x74>
 800c5c4:	0800d250 	.word	0x0800d250
 800c5c8:	0800d261 	.word	0x0800d261

0800c5cc <__ssputs_r>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	688e      	ldr	r6, [r1, #8]
 800c5d2:	461f      	mov	r7, r3
 800c5d4:	42be      	cmp	r6, r7
 800c5d6:	680b      	ldr	r3, [r1, #0]
 800c5d8:	4682      	mov	sl, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4690      	mov	r8, r2
 800c5de:	d82d      	bhi.n	800c63c <__ssputs_r+0x70>
 800c5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5e8:	d026      	beq.n	800c638 <__ssputs_r+0x6c>
 800c5ea:	6965      	ldr	r5, [r4, #20]
 800c5ec:	6909      	ldr	r1, [r1, #16]
 800c5ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f2:	eba3 0901 	sub.w	r9, r3, r1
 800c5f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5fa:	1c7b      	adds	r3, r7, #1
 800c5fc:	444b      	add	r3, r9
 800c5fe:	106d      	asrs	r5, r5, #1
 800c600:	429d      	cmp	r5, r3
 800c602:	bf38      	it	cc
 800c604:	461d      	movcc	r5, r3
 800c606:	0553      	lsls	r3, r2, #21
 800c608:	d527      	bpl.n	800c65a <__ssputs_r+0x8e>
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7ff fbd0 	bl	800bdb0 <_malloc_r>
 800c610:	4606      	mov	r6, r0
 800c612:	b360      	cbz	r0, 800c66e <__ssputs_r+0xa2>
 800c614:	6921      	ldr	r1, [r4, #16]
 800c616:	464a      	mov	r2, r9
 800c618:	f000 fa06 	bl	800ca28 <memcpy>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	6126      	str	r6, [r4, #16]
 800c62a:	6165      	str	r5, [r4, #20]
 800c62c:	444e      	add	r6, r9
 800c62e:	eba5 0509 	sub.w	r5, r5, r9
 800c632:	6026      	str	r6, [r4, #0]
 800c634:	60a5      	str	r5, [r4, #8]
 800c636:	463e      	mov	r6, r7
 800c638:	42be      	cmp	r6, r7
 800c63a:	d900      	bls.n	800c63e <__ssputs_r+0x72>
 800c63c:	463e      	mov	r6, r7
 800c63e:	6820      	ldr	r0, [r4, #0]
 800c640:	4632      	mov	r2, r6
 800c642:	4641      	mov	r1, r8
 800c644:	f000 f9c6 	bl	800c9d4 <memmove>
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	1b9b      	subs	r3, r3, r6
 800c64c:	60a3      	str	r3, [r4, #8]
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	4433      	add	r3, r6
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	2000      	movs	r0, #0
 800c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65a:	462a      	mov	r2, r5
 800c65c:	f000 fa36 	bl	800cacc <_realloc_r>
 800c660:	4606      	mov	r6, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d1e0      	bne.n	800c628 <__ssputs_r+0x5c>
 800c666:	6921      	ldr	r1, [r4, #16]
 800c668:	4650      	mov	r0, sl
 800c66a:	f7ff fb2d 	bl	800bcc8 <_free_r>
 800c66e:	230c      	movs	r3, #12
 800c670:	f8ca 3000 	str.w	r3, [sl]
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c67a:	81a3      	strh	r3, [r4, #12]
 800c67c:	f04f 30ff 	mov.w	r0, #4294967295
 800c680:	e7e9      	b.n	800c656 <__ssputs_r+0x8a>
	...

0800c684 <_svfiprintf_r>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	4698      	mov	r8, r3
 800c68a:	898b      	ldrh	r3, [r1, #12]
 800c68c:	061b      	lsls	r3, r3, #24
 800c68e:	b09d      	sub	sp, #116	@ 0x74
 800c690:	4607      	mov	r7, r0
 800c692:	460d      	mov	r5, r1
 800c694:	4614      	mov	r4, r2
 800c696:	d510      	bpl.n	800c6ba <_svfiprintf_r+0x36>
 800c698:	690b      	ldr	r3, [r1, #16]
 800c69a:	b973      	cbnz	r3, 800c6ba <_svfiprintf_r+0x36>
 800c69c:	2140      	movs	r1, #64	@ 0x40
 800c69e:	f7ff fb87 	bl	800bdb0 <_malloc_r>
 800c6a2:	6028      	str	r0, [r5, #0]
 800c6a4:	6128      	str	r0, [r5, #16]
 800c6a6:	b930      	cbnz	r0, 800c6b6 <_svfiprintf_r+0x32>
 800c6a8:	230c      	movs	r3, #12
 800c6aa:	603b      	str	r3, [r7, #0]
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	b01d      	add	sp, #116	@ 0x74
 800c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b6:	2340      	movs	r3, #64	@ 0x40
 800c6b8:	616b      	str	r3, [r5, #20]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6be:	2320      	movs	r3, #32
 800c6c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c8:	2330      	movs	r3, #48	@ 0x30
 800c6ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c868 <_svfiprintf_r+0x1e4>
 800c6ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	469a      	mov	sl, r3
 800c6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6de:	b10a      	cbz	r2, 800c6e4 <_svfiprintf_r+0x60>
 800c6e0:	2a25      	cmp	r2, #37	@ 0x25
 800c6e2:	d1f9      	bne.n	800c6d8 <_svfiprintf_r+0x54>
 800c6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e8:	d00b      	beq.n	800c702 <_svfiprintf_r+0x7e>
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff ff6b 	bl	800c5cc <__ssputs_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f000 80a7 	beq.w	800c84a <_svfiprintf_r+0x1c6>
 800c6fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6fe:	445a      	add	r2, fp
 800c700:	9209      	str	r2, [sp, #36]	@ 0x24
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 809f 	beq.w	800c84a <_svfiprintf_r+0x1c6>
 800c70c:	2300      	movs	r3, #0
 800c70e:	f04f 32ff 	mov.w	r2, #4294967295
 800c712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c716:	f10a 0a01 	add.w	sl, sl, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c722:	931a      	str	r3, [sp, #104]	@ 0x68
 800c724:	4654      	mov	r4, sl
 800c726:	2205      	movs	r2, #5
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	484e      	ldr	r0, [pc, #312]	@ (800c868 <_svfiprintf_r+0x1e4>)
 800c72e:	f7f3 fd4f 	bl	80001d0 <memchr>
 800c732:	9a04      	ldr	r2, [sp, #16]
 800c734:	b9d8      	cbnz	r0, 800c76e <_svfiprintf_r+0xea>
 800c736:	06d0      	lsls	r0, r2, #27
 800c738:	bf44      	itt	mi
 800c73a:	2320      	movmi	r3, #32
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c740:	0711      	lsls	r1, r2, #28
 800c742:	bf44      	itt	mi
 800c744:	232b      	movmi	r3, #43	@ 0x2b
 800c746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c750:	d015      	beq.n	800c77e <_svfiprintf_r+0xfa>
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	4654      	mov	r4, sl
 800c756:	2000      	movs	r0, #0
 800c758:	f04f 0c0a 	mov.w	ip, #10
 800c75c:	4621      	mov	r1, r4
 800c75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c762:	3b30      	subs	r3, #48	@ 0x30
 800c764:	2b09      	cmp	r3, #9
 800c766:	d94b      	bls.n	800c800 <_svfiprintf_r+0x17c>
 800c768:	b1b0      	cbz	r0, 800c798 <_svfiprintf_r+0x114>
 800c76a:	9207      	str	r2, [sp, #28]
 800c76c:	e014      	b.n	800c798 <_svfiprintf_r+0x114>
 800c76e:	eba0 0308 	sub.w	r3, r0, r8
 800c772:	fa09 f303 	lsl.w	r3, r9, r3
 800c776:	4313      	orrs	r3, r2
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	46a2      	mov	sl, r4
 800c77c:	e7d2      	b.n	800c724 <_svfiprintf_r+0xa0>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	1d19      	adds	r1, r3, #4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	9103      	str	r1, [sp, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfbb      	ittet	lt
 800c78a:	425b      	neglt	r3, r3
 800c78c:	f042 0202 	orrlt.w	r2, r2, #2
 800c790:	9307      	strge	r3, [sp, #28]
 800c792:	9307      	strlt	r3, [sp, #28]
 800c794:	bfb8      	it	lt
 800c796:	9204      	strlt	r2, [sp, #16]
 800c798:	7823      	ldrb	r3, [r4, #0]
 800c79a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c79c:	d10a      	bne.n	800c7b4 <_svfiprintf_r+0x130>
 800c79e:	7863      	ldrb	r3, [r4, #1]
 800c7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a2:	d132      	bne.n	800c80a <_svfiprintf_r+0x186>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d1a      	adds	r2, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9203      	str	r2, [sp, #12]
 800c7ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7b0:	3402      	adds	r4, #2
 800c7b2:	9305      	str	r3, [sp, #20]
 800c7b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c878 <_svfiprintf_r+0x1f4>
 800c7b8:	7821      	ldrb	r1, [r4, #0]
 800c7ba:	2203      	movs	r2, #3
 800c7bc:	4650      	mov	r0, sl
 800c7be:	f7f3 fd07 	bl	80001d0 <memchr>
 800c7c2:	b138      	cbz	r0, 800c7d4 <_svfiprintf_r+0x150>
 800c7c4:	9b04      	ldr	r3, [sp, #16]
 800c7c6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ca:	2240      	movs	r2, #64	@ 0x40
 800c7cc:	4082      	lsls	r2, r0
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d8:	4824      	ldr	r0, [pc, #144]	@ (800c86c <_svfiprintf_r+0x1e8>)
 800c7da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7de:	2206      	movs	r2, #6
 800c7e0:	f7f3 fcf6 	bl	80001d0 <memchr>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d036      	beq.n	800c856 <_svfiprintf_r+0x1d2>
 800c7e8:	4b21      	ldr	r3, [pc, #132]	@ (800c870 <_svfiprintf_r+0x1ec>)
 800c7ea:	bb1b      	cbnz	r3, 800c834 <_svfiprintf_r+0x1b0>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	3307      	adds	r3, #7
 800c7f0:	f023 0307 	bic.w	r3, r3, #7
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	9303      	str	r3, [sp, #12]
 800c7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fa:	4433      	add	r3, r6
 800c7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7fe:	e76a      	b.n	800c6d6 <_svfiprintf_r+0x52>
 800c800:	fb0c 3202 	mla	r2, ip, r2, r3
 800c804:	460c      	mov	r4, r1
 800c806:	2001      	movs	r0, #1
 800c808:	e7a8      	b.n	800c75c <_svfiprintf_r+0xd8>
 800c80a:	2300      	movs	r3, #0
 800c80c:	3401      	adds	r4, #1
 800c80e:	9305      	str	r3, [sp, #20]
 800c810:	4619      	mov	r1, r3
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	4620      	mov	r0, r4
 800c818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81c:	3a30      	subs	r2, #48	@ 0x30
 800c81e:	2a09      	cmp	r2, #9
 800c820:	d903      	bls.n	800c82a <_svfiprintf_r+0x1a6>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0c6      	beq.n	800c7b4 <_svfiprintf_r+0x130>
 800c826:	9105      	str	r1, [sp, #20]
 800c828:	e7c4      	b.n	800c7b4 <_svfiprintf_r+0x130>
 800c82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82e:	4604      	mov	r4, r0
 800c830:	2301      	movs	r3, #1
 800c832:	e7f0      	b.n	800c816 <_svfiprintf_r+0x192>
 800c834:	ab03      	add	r3, sp, #12
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	462a      	mov	r2, r5
 800c83a:	4b0e      	ldr	r3, [pc, #56]	@ (800c874 <_svfiprintf_r+0x1f0>)
 800c83c:	a904      	add	r1, sp, #16
 800c83e:	4638      	mov	r0, r7
 800c840:	f7fd fe96 	bl	800a570 <_printf_float>
 800c844:	1c42      	adds	r2, r0, #1
 800c846:	4606      	mov	r6, r0
 800c848:	d1d6      	bne.n	800c7f8 <_svfiprintf_r+0x174>
 800c84a:	89ab      	ldrh	r3, [r5, #12]
 800c84c:	065b      	lsls	r3, r3, #25
 800c84e:	f53f af2d 	bmi.w	800c6ac <_svfiprintf_r+0x28>
 800c852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c854:	e72c      	b.n	800c6b0 <_svfiprintf_r+0x2c>
 800c856:	ab03      	add	r3, sp, #12
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	462a      	mov	r2, r5
 800c85c:	4b05      	ldr	r3, [pc, #20]	@ (800c874 <_svfiprintf_r+0x1f0>)
 800c85e:	a904      	add	r1, sp, #16
 800c860:	4638      	mov	r0, r7
 800c862:	f7fe f91d 	bl	800aaa0 <_printf_i>
 800c866:	e7ed      	b.n	800c844 <_svfiprintf_r+0x1c0>
 800c868:	0800d3b8 	.word	0x0800d3b8
 800c86c:	0800d3c2 	.word	0x0800d3c2
 800c870:	0800a571 	.word	0x0800a571
 800c874:	0800c5cd 	.word	0x0800c5cd
 800c878:	0800d3be 	.word	0x0800d3be

0800c87c <__sflush_r>:
 800c87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c884:	0716      	lsls	r6, r2, #28
 800c886:	4605      	mov	r5, r0
 800c888:	460c      	mov	r4, r1
 800c88a:	d454      	bmi.n	800c936 <__sflush_r+0xba>
 800c88c:	684b      	ldr	r3, [r1, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	dc02      	bgt.n	800c898 <__sflush_r+0x1c>
 800c892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd48      	ble.n	800c92a <__sflush_r+0xae>
 800c898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	d045      	beq.n	800c92a <__sflush_r+0xae>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8a4:	682f      	ldr	r7, [r5, #0]
 800c8a6:	6a21      	ldr	r1, [r4, #32]
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	d030      	beq.n	800c90e <__sflush_r+0x92>
 800c8ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	0759      	lsls	r1, r3, #29
 800c8b2:	d505      	bpl.n	800c8c0 <__sflush_r+0x44>
 800c8b4:	6863      	ldr	r3, [r4, #4]
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8ba:	b10b      	cbz	r3, 800c8c0 <__sflush_r+0x44>
 800c8bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8c4:	6a21      	ldr	r1, [r4, #32]
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b0      	blx	r6
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	d106      	bne.n	800c8de <__sflush_r+0x62>
 800c8d0:	6829      	ldr	r1, [r5, #0]
 800c8d2:	291d      	cmp	r1, #29
 800c8d4:	d82b      	bhi.n	800c92e <__sflush_r+0xb2>
 800c8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800c980 <__sflush_r+0x104>)
 800c8d8:	410a      	asrs	r2, r1
 800c8da:	07d6      	lsls	r6, r2, #31
 800c8dc:	d427      	bmi.n	800c92e <__sflush_r+0xb2>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	6062      	str	r2, [r4, #4]
 800c8e2:	04d9      	lsls	r1, r3, #19
 800c8e4:	6922      	ldr	r2, [r4, #16]
 800c8e6:	6022      	str	r2, [r4, #0]
 800c8e8:	d504      	bpl.n	800c8f4 <__sflush_r+0x78>
 800c8ea:	1c42      	adds	r2, r0, #1
 800c8ec:	d101      	bne.n	800c8f2 <__sflush_r+0x76>
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	b903      	cbnz	r3, 800c8f4 <__sflush_r+0x78>
 800c8f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f6:	602f      	str	r7, [r5, #0]
 800c8f8:	b1b9      	cbz	r1, 800c92a <__sflush_r+0xae>
 800c8fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fe:	4299      	cmp	r1, r3
 800c900:	d002      	beq.n	800c908 <__sflush_r+0x8c>
 800c902:	4628      	mov	r0, r5
 800c904:	f7ff f9e0 	bl	800bcc8 <_free_r>
 800c908:	2300      	movs	r3, #0
 800c90a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c90c:	e00d      	b.n	800c92a <__sflush_r+0xae>
 800c90e:	2301      	movs	r3, #1
 800c910:	4628      	mov	r0, r5
 800c912:	47b0      	blx	r6
 800c914:	4602      	mov	r2, r0
 800c916:	1c50      	adds	r0, r2, #1
 800c918:	d1c9      	bne.n	800c8ae <__sflush_r+0x32>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0c6      	beq.n	800c8ae <__sflush_r+0x32>
 800c920:	2b1d      	cmp	r3, #29
 800c922:	d001      	beq.n	800c928 <__sflush_r+0xac>
 800c924:	2b16      	cmp	r3, #22
 800c926:	d11e      	bne.n	800c966 <__sflush_r+0xea>
 800c928:	602f      	str	r7, [r5, #0]
 800c92a:	2000      	movs	r0, #0
 800c92c:	e022      	b.n	800c974 <__sflush_r+0xf8>
 800c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c932:	b21b      	sxth	r3, r3
 800c934:	e01b      	b.n	800c96e <__sflush_r+0xf2>
 800c936:	690f      	ldr	r7, [r1, #16]
 800c938:	2f00      	cmp	r7, #0
 800c93a:	d0f6      	beq.n	800c92a <__sflush_r+0xae>
 800c93c:	0793      	lsls	r3, r2, #30
 800c93e:	680e      	ldr	r6, [r1, #0]
 800c940:	bf08      	it	eq
 800c942:	694b      	ldreq	r3, [r1, #20]
 800c944:	600f      	str	r7, [r1, #0]
 800c946:	bf18      	it	ne
 800c948:	2300      	movne	r3, #0
 800c94a:	eba6 0807 	sub.w	r8, r6, r7
 800c94e:	608b      	str	r3, [r1, #8]
 800c950:	f1b8 0f00 	cmp.w	r8, #0
 800c954:	dde9      	ble.n	800c92a <__sflush_r+0xae>
 800c956:	6a21      	ldr	r1, [r4, #32]
 800c958:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c95a:	4643      	mov	r3, r8
 800c95c:	463a      	mov	r2, r7
 800c95e:	4628      	mov	r0, r5
 800c960:	47b0      	blx	r6
 800c962:	2800      	cmp	r0, #0
 800c964:	dc08      	bgt.n	800c978 <__sflush_r+0xfc>
 800c966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	f04f 30ff 	mov.w	r0, #4294967295
 800c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c978:	4407      	add	r7, r0
 800c97a:	eba8 0800 	sub.w	r8, r8, r0
 800c97e:	e7e7      	b.n	800c950 <__sflush_r+0xd4>
 800c980:	dfbffffe 	.word	0xdfbffffe

0800c984 <_fflush_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	690b      	ldr	r3, [r1, #16]
 800c988:	4605      	mov	r5, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	b913      	cbnz	r3, 800c994 <_fflush_r+0x10>
 800c98e:	2500      	movs	r5, #0
 800c990:	4628      	mov	r0, r5
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	b118      	cbz	r0, 800c99e <_fflush_r+0x1a>
 800c996:	6a03      	ldr	r3, [r0, #32]
 800c998:	b90b      	cbnz	r3, 800c99e <_fflush_r+0x1a>
 800c99a:	f7fe fa2d 	bl	800adf8 <__sinit>
 800c99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0f3      	beq.n	800c98e <_fflush_r+0xa>
 800c9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9a8:	07d0      	lsls	r0, r2, #31
 800c9aa:	d404      	bmi.n	800c9b6 <_fflush_r+0x32>
 800c9ac:	0599      	lsls	r1, r3, #22
 800c9ae:	d402      	bmi.n	800c9b6 <_fflush_r+0x32>
 800c9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9b2:	f7fe fb38 	bl	800b026 <__retarget_lock_acquire_recursive>
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	f7ff ff5f 	bl	800c87c <__sflush_r>
 800c9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9c0:	07da      	lsls	r2, r3, #31
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	d4e4      	bmi.n	800c990 <_fflush_r+0xc>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	059b      	lsls	r3, r3, #22
 800c9ca:	d4e1      	bmi.n	800c990 <_fflush_r+0xc>
 800c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ce:	f7fe fb2b 	bl	800b028 <__retarget_lock_release_recursive>
 800c9d2:	e7dd      	b.n	800c990 <_fflush_r+0xc>

0800c9d4 <memmove>:
 800c9d4:	4288      	cmp	r0, r1
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	eb01 0402 	add.w	r4, r1, r2
 800c9dc:	d902      	bls.n	800c9e4 <memmove+0x10>
 800c9de:	4284      	cmp	r4, r0
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	d807      	bhi.n	800c9f4 <memmove+0x20>
 800c9e4:	1e43      	subs	r3, r0, #1
 800c9e6:	42a1      	cmp	r1, r4
 800c9e8:	d008      	beq.n	800c9fc <memmove+0x28>
 800c9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9f2:	e7f8      	b.n	800c9e6 <memmove+0x12>
 800c9f4:	4402      	add	r2, r0
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	428a      	cmp	r2, r1
 800c9fa:	d100      	bne.n	800c9fe <memmove+0x2a>
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca06:	e7f7      	b.n	800c9f8 <memmove+0x24>

0800ca08 <_sbrk_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d06      	ldr	r5, [pc, #24]	@ (800ca24 <_sbrk_r+0x1c>)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4604      	mov	r4, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	602b      	str	r3, [r5, #0]
 800ca14:	f7f6 f98e 	bl	8002d34 <_sbrk>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_sbrk_r+0x1a>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_sbrk_r+0x1a>
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	200009ec 	.word	0x200009ec

0800ca28 <memcpy>:
 800ca28:	440a      	add	r2, r1
 800ca2a:	4291      	cmp	r1, r2
 800ca2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca30:	d100      	bne.n	800ca34 <memcpy+0xc>
 800ca32:	4770      	bx	lr
 800ca34:	b510      	push	{r4, lr}
 800ca36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca3e:	4291      	cmp	r1, r2
 800ca40:	d1f9      	bne.n	800ca36 <memcpy+0xe>
 800ca42:	bd10      	pop	{r4, pc}

0800ca44 <__assert_func>:
 800ca44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca46:	4614      	mov	r4, r2
 800ca48:	461a      	mov	r2, r3
 800ca4a:	4b09      	ldr	r3, [pc, #36]	@ (800ca70 <__assert_func+0x2c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4605      	mov	r5, r0
 800ca50:	68d8      	ldr	r0, [r3, #12]
 800ca52:	b954      	cbnz	r4, 800ca6a <__assert_func+0x26>
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <__assert_func+0x30>)
 800ca56:	461c      	mov	r4, r3
 800ca58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca5c:	9100      	str	r1, [sp, #0]
 800ca5e:	462b      	mov	r3, r5
 800ca60:	4905      	ldr	r1, [pc, #20]	@ (800ca78 <__assert_func+0x34>)
 800ca62:	f000 f86f 	bl	800cb44 <fiprintf>
 800ca66:	f000 f87f 	bl	800cb68 <abort>
 800ca6a:	4b04      	ldr	r3, [pc, #16]	@ (800ca7c <__assert_func+0x38>)
 800ca6c:	e7f4      	b.n	800ca58 <__assert_func+0x14>
 800ca6e:	bf00      	nop
 800ca70:	20000020 	.word	0x20000020
 800ca74:	0800d40e 	.word	0x0800d40e
 800ca78:	0800d3e0 	.word	0x0800d3e0
 800ca7c:	0800d3d3 	.word	0x0800d3d3

0800ca80 <_calloc_r>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	fba1 5402 	umull	r5, r4, r1, r2
 800ca86:	b93c      	cbnz	r4, 800ca98 <_calloc_r+0x18>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7ff f991 	bl	800bdb0 <_malloc_r>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	b928      	cbnz	r0, 800ca9e <_calloc_r+0x1e>
 800ca92:	2600      	movs	r6, #0
 800ca94:	4630      	mov	r0, r6
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	220c      	movs	r2, #12
 800ca9a:	6002      	str	r2, [r0, #0]
 800ca9c:	e7f9      	b.n	800ca92 <_calloc_r+0x12>
 800ca9e:	462a      	mov	r2, r5
 800caa0:	4621      	mov	r1, r4
 800caa2:	f7fe fa42 	bl	800af2a <memset>
 800caa6:	e7f5      	b.n	800ca94 <_calloc_r+0x14>

0800caa8 <__ascii_mbtowc>:
 800caa8:	b082      	sub	sp, #8
 800caaa:	b901      	cbnz	r1, 800caae <__ascii_mbtowc+0x6>
 800caac:	a901      	add	r1, sp, #4
 800caae:	b142      	cbz	r2, 800cac2 <__ascii_mbtowc+0x1a>
 800cab0:	b14b      	cbz	r3, 800cac6 <__ascii_mbtowc+0x1e>
 800cab2:	7813      	ldrb	r3, [r2, #0]
 800cab4:	600b      	str	r3, [r1, #0]
 800cab6:	7812      	ldrb	r2, [r2, #0]
 800cab8:	1e10      	subs	r0, r2, #0
 800caba:	bf18      	it	ne
 800cabc:	2001      	movne	r0, #1
 800cabe:	b002      	add	sp, #8
 800cac0:	4770      	bx	lr
 800cac2:	4610      	mov	r0, r2
 800cac4:	e7fb      	b.n	800cabe <__ascii_mbtowc+0x16>
 800cac6:	f06f 0001 	mvn.w	r0, #1
 800caca:	e7f8      	b.n	800cabe <__ascii_mbtowc+0x16>

0800cacc <_realloc_r>:
 800cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad0:	4680      	mov	r8, r0
 800cad2:	4615      	mov	r5, r2
 800cad4:	460c      	mov	r4, r1
 800cad6:	b921      	cbnz	r1, 800cae2 <_realloc_r+0x16>
 800cad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cadc:	4611      	mov	r1, r2
 800cade:	f7ff b967 	b.w	800bdb0 <_malloc_r>
 800cae2:	b92a      	cbnz	r2, 800caf0 <_realloc_r+0x24>
 800cae4:	f7ff f8f0 	bl	800bcc8 <_free_r>
 800cae8:	2400      	movs	r4, #0
 800caea:	4620      	mov	r0, r4
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	f000 f841 	bl	800cb76 <_malloc_usable_size_r>
 800caf4:	4285      	cmp	r5, r0
 800caf6:	4606      	mov	r6, r0
 800caf8:	d802      	bhi.n	800cb00 <_realloc_r+0x34>
 800cafa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cafe:	d8f4      	bhi.n	800caea <_realloc_r+0x1e>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4640      	mov	r0, r8
 800cb04:	f7ff f954 	bl	800bdb0 <_malloc_r>
 800cb08:	4607      	mov	r7, r0
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d0ec      	beq.n	800cae8 <_realloc_r+0x1c>
 800cb0e:	42b5      	cmp	r5, r6
 800cb10:	462a      	mov	r2, r5
 800cb12:	4621      	mov	r1, r4
 800cb14:	bf28      	it	cs
 800cb16:	4632      	movcs	r2, r6
 800cb18:	f7ff ff86 	bl	800ca28 <memcpy>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4640      	mov	r0, r8
 800cb20:	f7ff f8d2 	bl	800bcc8 <_free_r>
 800cb24:	463c      	mov	r4, r7
 800cb26:	e7e0      	b.n	800caea <_realloc_r+0x1e>

0800cb28 <__ascii_wctomb>:
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4608      	mov	r0, r1
 800cb2c:	b141      	cbz	r1, 800cb40 <__ascii_wctomb+0x18>
 800cb2e:	2aff      	cmp	r2, #255	@ 0xff
 800cb30:	d904      	bls.n	800cb3c <__ascii_wctomb+0x14>
 800cb32:	228a      	movs	r2, #138	@ 0x8a
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3a:	4770      	bx	lr
 800cb3c:	700a      	strb	r2, [r1, #0]
 800cb3e:	2001      	movs	r0, #1
 800cb40:	4770      	bx	lr
	...

0800cb44 <fiprintf>:
 800cb44:	b40e      	push	{r1, r2, r3}
 800cb46:	b503      	push	{r0, r1, lr}
 800cb48:	4601      	mov	r1, r0
 800cb4a:	ab03      	add	r3, sp, #12
 800cb4c:	4805      	ldr	r0, [pc, #20]	@ (800cb64 <fiprintf+0x20>)
 800cb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb52:	6800      	ldr	r0, [r0, #0]
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	f000 f83f 	bl	800cbd8 <_vfiprintf_r>
 800cb5a:	b002      	add	sp, #8
 800cb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb60:	b003      	add	sp, #12
 800cb62:	4770      	bx	lr
 800cb64:	20000020 	.word	0x20000020

0800cb68 <abort>:
 800cb68:	b508      	push	{r3, lr}
 800cb6a:	2006      	movs	r0, #6
 800cb6c:	f000 fa08 	bl	800cf80 <raise>
 800cb70:	2001      	movs	r0, #1
 800cb72:	f7f6 f867 	bl	8002c44 <_exit>

0800cb76 <_malloc_usable_size_r>:
 800cb76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb7a:	1f18      	subs	r0, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bfbc      	itt	lt
 800cb80:	580b      	ldrlt	r3, [r1, r0]
 800cb82:	18c0      	addlt	r0, r0, r3
 800cb84:	4770      	bx	lr

0800cb86 <__sfputc_r>:
 800cb86:	6893      	ldr	r3, [r2, #8]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	b410      	push	{r4}
 800cb8e:	6093      	str	r3, [r2, #8]
 800cb90:	da08      	bge.n	800cba4 <__sfputc_r+0x1e>
 800cb92:	6994      	ldr	r4, [r2, #24]
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	db01      	blt.n	800cb9c <__sfputc_r+0x16>
 800cb98:	290a      	cmp	r1, #10
 800cb9a:	d103      	bne.n	800cba4 <__sfputc_r+0x1e>
 800cb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cba0:	f000 b932 	b.w	800ce08 <__swbuf_r>
 800cba4:	6813      	ldr	r3, [r2, #0]
 800cba6:	1c58      	adds	r0, r3, #1
 800cba8:	6010      	str	r0, [r2, #0]
 800cbaa:	7019      	strb	r1, [r3, #0]
 800cbac:	4608      	mov	r0, r1
 800cbae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <__sfputs_r>:
 800cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460f      	mov	r7, r1
 800cbba:	4614      	mov	r4, r2
 800cbbc:	18d5      	adds	r5, r2, r3
 800cbbe:	42ac      	cmp	r4, r5
 800cbc0:	d101      	bne.n	800cbc6 <__sfputs_r+0x12>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	e007      	b.n	800cbd6 <__sfputs_r+0x22>
 800cbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbca:	463a      	mov	r2, r7
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff ffda 	bl	800cb86 <__sfputc_r>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d1f3      	bne.n	800cbbe <__sfputs_r+0xa>
 800cbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbd8 <_vfiprintf_r>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	460d      	mov	r5, r1
 800cbde:	b09d      	sub	sp, #116	@ 0x74
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	4698      	mov	r8, r3
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	b118      	cbz	r0, 800cbf0 <_vfiprintf_r+0x18>
 800cbe8:	6a03      	ldr	r3, [r0, #32]
 800cbea:	b90b      	cbnz	r3, 800cbf0 <_vfiprintf_r+0x18>
 800cbec:	f7fe f904 	bl	800adf8 <__sinit>
 800cbf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbf2:	07d9      	lsls	r1, r3, #31
 800cbf4:	d405      	bmi.n	800cc02 <_vfiprintf_r+0x2a>
 800cbf6:	89ab      	ldrh	r3, [r5, #12]
 800cbf8:	059a      	lsls	r2, r3, #22
 800cbfa:	d402      	bmi.n	800cc02 <_vfiprintf_r+0x2a>
 800cbfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbfe:	f7fe fa12 	bl	800b026 <__retarget_lock_acquire_recursive>
 800cc02:	89ab      	ldrh	r3, [r5, #12]
 800cc04:	071b      	lsls	r3, r3, #28
 800cc06:	d501      	bpl.n	800cc0c <_vfiprintf_r+0x34>
 800cc08:	692b      	ldr	r3, [r5, #16]
 800cc0a:	b99b      	cbnz	r3, 800cc34 <_vfiprintf_r+0x5c>
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 f938 	bl	800ce84 <__swsetup_r>
 800cc14:	b170      	cbz	r0, 800cc34 <_vfiprintf_r+0x5c>
 800cc16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc18:	07dc      	lsls	r4, r3, #31
 800cc1a:	d504      	bpl.n	800cc26 <_vfiprintf_r+0x4e>
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	b01d      	add	sp, #116	@ 0x74
 800cc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	0598      	lsls	r0, r3, #22
 800cc2a:	d4f7      	bmi.n	800cc1c <_vfiprintf_r+0x44>
 800cc2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc2e:	f7fe f9fb 	bl	800b028 <__retarget_lock_release_recursive>
 800cc32:	e7f3      	b.n	800cc1c <_vfiprintf_r+0x44>
 800cc34:	2300      	movs	r3, #0
 800cc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc38:	2320      	movs	r3, #32
 800cc3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc42:	2330      	movs	r3, #48	@ 0x30
 800cc44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cdf4 <_vfiprintf_r+0x21c>
 800cc48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc4c:	f04f 0901 	mov.w	r9, #1
 800cc50:	4623      	mov	r3, r4
 800cc52:	469a      	mov	sl, r3
 800cc54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc58:	b10a      	cbz	r2, 800cc5e <_vfiprintf_r+0x86>
 800cc5a:	2a25      	cmp	r2, #37	@ 0x25
 800cc5c:	d1f9      	bne.n	800cc52 <_vfiprintf_r+0x7a>
 800cc5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc62:	d00b      	beq.n	800cc7c <_vfiprintf_r+0xa4>
 800cc64:	465b      	mov	r3, fp
 800cc66:	4622      	mov	r2, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ffa2 	bl	800cbb4 <__sfputs_r>
 800cc70:	3001      	adds	r0, #1
 800cc72:	f000 80a7 	beq.w	800cdc4 <_vfiprintf_r+0x1ec>
 800cc76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc78:	445a      	add	r2, fp
 800cc7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 809f 	beq.w	800cdc4 <_vfiprintf_r+0x1ec>
 800cc86:	2300      	movs	r3, #0
 800cc88:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc90:	f10a 0a01 	add.w	sl, sl, #1
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	9307      	str	r3, [sp, #28]
 800cc98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc9e:	4654      	mov	r4, sl
 800cca0:	2205      	movs	r2, #5
 800cca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca6:	4853      	ldr	r0, [pc, #332]	@ (800cdf4 <_vfiprintf_r+0x21c>)
 800cca8:	f7f3 fa92 	bl	80001d0 <memchr>
 800ccac:	9a04      	ldr	r2, [sp, #16]
 800ccae:	b9d8      	cbnz	r0, 800cce8 <_vfiprintf_r+0x110>
 800ccb0:	06d1      	lsls	r1, r2, #27
 800ccb2:	bf44      	itt	mi
 800ccb4:	2320      	movmi	r3, #32
 800ccb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccba:	0713      	lsls	r3, r2, #28
 800ccbc:	bf44      	itt	mi
 800ccbe:	232b      	movmi	r3, #43	@ 0x2b
 800ccc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccca:	d015      	beq.n	800ccf8 <_vfiprintf_r+0x120>
 800cccc:	9a07      	ldr	r2, [sp, #28]
 800ccce:	4654      	mov	r4, sl
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	f04f 0c0a 	mov.w	ip, #10
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccdc:	3b30      	subs	r3, #48	@ 0x30
 800ccde:	2b09      	cmp	r3, #9
 800cce0:	d94b      	bls.n	800cd7a <_vfiprintf_r+0x1a2>
 800cce2:	b1b0      	cbz	r0, 800cd12 <_vfiprintf_r+0x13a>
 800cce4:	9207      	str	r2, [sp, #28]
 800cce6:	e014      	b.n	800cd12 <_vfiprintf_r+0x13a>
 800cce8:	eba0 0308 	sub.w	r3, r0, r8
 800ccec:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	46a2      	mov	sl, r4
 800ccf6:	e7d2      	b.n	800cc9e <_vfiprintf_r+0xc6>
 800ccf8:	9b03      	ldr	r3, [sp, #12]
 800ccfa:	1d19      	adds	r1, r3, #4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	9103      	str	r1, [sp, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	bfbb      	ittet	lt
 800cd04:	425b      	neglt	r3, r3
 800cd06:	f042 0202 	orrlt.w	r2, r2, #2
 800cd0a:	9307      	strge	r3, [sp, #28]
 800cd0c:	9307      	strlt	r3, [sp, #28]
 800cd0e:	bfb8      	it	lt
 800cd10:	9204      	strlt	r2, [sp, #16]
 800cd12:	7823      	ldrb	r3, [r4, #0]
 800cd14:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd16:	d10a      	bne.n	800cd2e <_vfiprintf_r+0x156>
 800cd18:	7863      	ldrb	r3, [r4, #1]
 800cd1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd1c:	d132      	bne.n	800cd84 <_vfiprintf_r+0x1ac>
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	1d1a      	adds	r2, r3, #4
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	9203      	str	r2, [sp, #12]
 800cd26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd2a:	3402      	adds	r4, #2
 800cd2c:	9305      	str	r3, [sp, #20]
 800cd2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce04 <_vfiprintf_r+0x22c>
 800cd32:	7821      	ldrb	r1, [r4, #0]
 800cd34:	2203      	movs	r2, #3
 800cd36:	4650      	mov	r0, sl
 800cd38:	f7f3 fa4a 	bl	80001d0 <memchr>
 800cd3c:	b138      	cbz	r0, 800cd4e <_vfiprintf_r+0x176>
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	eba0 000a 	sub.w	r0, r0, sl
 800cd44:	2240      	movs	r2, #64	@ 0x40
 800cd46:	4082      	lsls	r2, r0
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	3401      	adds	r4, #1
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd52:	4829      	ldr	r0, [pc, #164]	@ (800cdf8 <_vfiprintf_r+0x220>)
 800cd54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd58:	2206      	movs	r2, #6
 800cd5a:	f7f3 fa39 	bl	80001d0 <memchr>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d03f      	beq.n	800cde2 <_vfiprintf_r+0x20a>
 800cd62:	4b26      	ldr	r3, [pc, #152]	@ (800cdfc <_vfiprintf_r+0x224>)
 800cd64:	bb1b      	cbnz	r3, 800cdae <_vfiprintf_r+0x1d6>
 800cd66:	9b03      	ldr	r3, [sp, #12]
 800cd68:	3307      	adds	r3, #7
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	3308      	adds	r3, #8
 800cd70:	9303      	str	r3, [sp, #12]
 800cd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd74:	443b      	add	r3, r7
 800cd76:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd78:	e76a      	b.n	800cc50 <_vfiprintf_r+0x78>
 800cd7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd7e:	460c      	mov	r4, r1
 800cd80:	2001      	movs	r0, #1
 800cd82:	e7a8      	b.n	800ccd6 <_vfiprintf_r+0xfe>
 800cd84:	2300      	movs	r3, #0
 800cd86:	3401      	adds	r4, #1
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f04f 0c0a 	mov.w	ip, #10
 800cd90:	4620      	mov	r0, r4
 800cd92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd96:	3a30      	subs	r2, #48	@ 0x30
 800cd98:	2a09      	cmp	r2, #9
 800cd9a:	d903      	bls.n	800cda4 <_vfiprintf_r+0x1cc>
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d0c6      	beq.n	800cd2e <_vfiprintf_r+0x156>
 800cda0:	9105      	str	r1, [sp, #20]
 800cda2:	e7c4      	b.n	800cd2e <_vfiprintf_r+0x156>
 800cda4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda8:	4604      	mov	r4, r0
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e7f0      	b.n	800cd90 <_vfiprintf_r+0x1b8>
 800cdae:	ab03      	add	r3, sp, #12
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4b12      	ldr	r3, [pc, #72]	@ (800ce00 <_vfiprintf_r+0x228>)
 800cdb6:	a904      	add	r1, sp, #16
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7fd fbd9 	bl	800a570 <_printf_float>
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	1c78      	adds	r0, r7, #1
 800cdc2:	d1d6      	bne.n	800cd72 <_vfiprintf_r+0x19a>
 800cdc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdc6:	07d9      	lsls	r1, r3, #31
 800cdc8:	d405      	bmi.n	800cdd6 <_vfiprintf_r+0x1fe>
 800cdca:	89ab      	ldrh	r3, [r5, #12]
 800cdcc:	059a      	lsls	r2, r3, #22
 800cdce:	d402      	bmi.n	800cdd6 <_vfiprintf_r+0x1fe>
 800cdd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdd2:	f7fe f929 	bl	800b028 <__retarget_lock_release_recursive>
 800cdd6:	89ab      	ldrh	r3, [r5, #12]
 800cdd8:	065b      	lsls	r3, r3, #25
 800cdda:	f53f af1f 	bmi.w	800cc1c <_vfiprintf_r+0x44>
 800cdde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cde0:	e71e      	b.n	800cc20 <_vfiprintf_r+0x48>
 800cde2:	ab03      	add	r3, sp, #12
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	462a      	mov	r2, r5
 800cde8:	4b05      	ldr	r3, [pc, #20]	@ (800ce00 <_vfiprintf_r+0x228>)
 800cdea:	a904      	add	r1, sp, #16
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7fd fe57 	bl	800aaa0 <_printf_i>
 800cdf2:	e7e4      	b.n	800cdbe <_vfiprintf_r+0x1e6>
 800cdf4:	0800d3b8 	.word	0x0800d3b8
 800cdf8:	0800d3c2 	.word	0x0800d3c2
 800cdfc:	0800a571 	.word	0x0800a571
 800ce00:	0800cbb5 	.word	0x0800cbb5
 800ce04:	0800d3be 	.word	0x0800d3be

0800ce08 <__swbuf_r>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	460e      	mov	r6, r1
 800ce0c:	4614      	mov	r4, r2
 800ce0e:	4605      	mov	r5, r0
 800ce10:	b118      	cbz	r0, 800ce1a <__swbuf_r+0x12>
 800ce12:	6a03      	ldr	r3, [r0, #32]
 800ce14:	b90b      	cbnz	r3, 800ce1a <__swbuf_r+0x12>
 800ce16:	f7fd ffef 	bl	800adf8 <__sinit>
 800ce1a:	69a3      	ldr	r3, [r4, #24]
 800ce1c:	60a3      	str	r3, [r4, #8]
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	071a      	lsls	r2, r3, #28
 800ce22:	d501      	bpl.n	800ce28 <__swbuf_r+0x20>
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	b943      	cbnz	r3, 800ce3a <__swbuf_r+0x32>
 800ce28:	4621      	mov	r1, r4
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f000 f82a 	bl	800ce84 <__swsetup_r>
 800ce30:	b118      	cbz	r0, 800ce3a <__swbuf_r+0x32>
 800ce32:	f04f 37ff 	mov.w	r7, #4294967295
 800ce36:	4638      	mov	r0, r7
 800ce38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	6922      	ldr	r2, [r4, #16]
 800ce3e:	1a98      	subs	r0, r3, r2
 800ce40:	6963      	ldr	r3, [r4, #20]
 800ce42:	b2f6      	uxtb	r6, r6
 800ce44:	4283      	cmp	r3, r0
 800ce46:	4637      	mov	r7, r6
 800ce48:	dc05      	bgt.n	800ce56 <__swbuf_r+0x4e>
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7ff fd99 	bl	800c984 <_fflush_r>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d1ed      	bne.n	800ce32 <__swbuf_r+0x2a>
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	60a3      	str	r3, [r4, #8]
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	6022      	str	r2, [r4, #0]
 800ce62:	701e      	strb	r6, [r3, #0]
 800ce64:	6962      	ldr	r2, [r4, #20]
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d004      	beq.n	800ce76 <__swbuf_r+0x6e>
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	07db      	lsls	r3, r3, #31
 800ce70:	d5e1      	bpl.n	800ce36 <__swbuf_r+0x2e>
 800ce72:	2e0a      	cmp	r6, #10
 800ce74:	d1df      	bne.n	800ce36 <__swbuf_r+0x2e>
 800ce76:	4621      	mov	r1, r4
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f7ff fd83 	bl	800c984 <_fflush_r>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d0d9      	beq.n	800ce36 <__swbuf_r+0x2e>
 800ce82:	e7d6      	b.n	800ce32 <__swbuf_r+0x2a>

0800ce84 <__swsetup_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4b29      	ldr	r3, [pc, #164]	@ (800cf2c <__swsetup_r+0xa8>)
 800ce88:	4605      	mov	r5, r0
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	b118      	cbz	r0, 800ce98 <__swsetup_r+0x14>
 800ce90:	6a03      	ldr	r3, [r0, #32]
 800ce92:	b90b      	cbnz	r3, 800ce98 <__swsetup_r+0x14>
 800ce94:	f7fd ffb0 	bl	800adf8 <__sinit>
 800ce98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9c:	0719      	lsls	r1, r3, #28
 800ce9e:	d422      	bmi.n	800cee6 <__swsetup_r+0x62>
 800cea0:	06da      	lsls	r2, r3, #27
 800cea2:	d407      	bmi.n	800ceb4 <__swsetup_r+0x30>
 800cea4:	2209      	movs	r2, #9
 800cea6:	602a      	str	r2, [r5, #0]
 800cea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb2:	e033      	b.n	800cf1c <__swsetup_r+0x98>
 800ceb4:	0758      	lsls	r0, r3, #29
 800ceb6:	d512      	bpl.n	800cede <__swsetup_r+0x5a>
 800ceb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceba:	b141      	cbz	r1, 800cece <__swsetup_r+0x4a>
 800cebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cec0:	4299      	cmp	r1, r3
 800cec2:	d002      	beq.n	800ceca <__swsetup_r+0x46>
 800cec4:	4628      	mov	r0, r5
 800cec6:	f7fe feff 	bl	800bcc8 <_free_r>
 800ceca:	2300      	movs	r3, #0
 800cecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ced4:	81a3      	strh	r3, [r4, #12]
 800ced6:	2300      	movs	r3, #0
 800ced8:	6063      	str	r3, [r4, #4]
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	f043 0308 	orr.w	r3, r3, #8
 800cee4:	81a3      	strh	r3, [r4, #12]
 800cee6:	6923      	ldr	r3, [r4, #16]
 800cee8:	b94b      	cbnz	r3, 800cefe <__swsetup_r+0x7a>
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cef4:	d003      	beq.n	800cefe <__swsetup_r+0x7a>
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 f883 	bl	800d004 <__smakebuf_r>
 800cefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf02:	f013 0201 	ands.w	r2, r3, #1
 800cf06:	d00a      	beq.n	800cf1e <__swsetup_r+0x9a>
 800cf08:	2200      	movs	r2, #0
 800cf0a:	60a2      	str	r2, [r4, #8]
 800cf0c:	6962      	ldr	r2, [r4, #20]
 800cf0e:	4252      	negs	r2, r2
 800cf10:	61a2      	str	r2, [r4, #24]
 800cf12:	6922      	ldr	r2, [r4, #16]
 800cf14:	b942      	cbnz	r2, 800cf28 <__swsetup_r+0xa4>
 800cf16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf1a:	d1c5      	bne.n	800cea8 <__swsetup_r+0x24>
 800cf1c:	bd38      	pop	{r3, r4, r5, pc}
 800cf1e:	0799      	lsls	r1, r3, #30
 800cf20:	bf58      	it	pl
 800cf22:	6962      	ldrpl	r2, [r4, #20]
 800cf24:	60a2      	str	r2, [r4, #8]
 800cf26:	e7f4      	b.n	800cf12 <__swsetup_r+0x8e>
 800cf28:	2000      	movs	r0, #0
 800cf2a:	e7f7      	b.n	800cf1c <__swsetup_r+0x98>
 800cf2c:	20000020 	.word	0x20000020

0800cf30 <_raise_r>:
 800cf30:	291f      	cmp	r1, #31
 800cf32:	b538      	push	{r3, r4, r5, lr}
 800cf34:	4605      	mov	r5, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	d904      	bls.n	800cf44 <_raise_r+0x14>
 800cf3a:	2316      	movs	r3, #22
 800cf3c:	6003      	str	r3, [r0, #0]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf46:	b112      	cbz	r2, 800cf4e <_raise_r+0x1e>
 800cf48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf4c:	b94b      	cbnz	r3, 800cf62 <_raise_r+0x32>
 800cf4e:	4628      	mov	r0, r5
 800cf50:	f000 f830 	bl	800cfb4 <_getpid_r>
 800cf54:	4622      	mov	r2, r4
 800cf56:	4601      	mov	r1, r0
 800cf58:	4628      	mov	r0, r5
 800cf5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf5e:	f000 b817 	b.w	800cf90 <_kill_r>
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d00a      	beq.n	800cf7c <_raise_r+0x4c>
 800cf66:	1c59      	adds	r1, r3, #1
 800cf68:	d103      	bne.n	800cf72 <_raise_r+0x42>
 800cf6a:	2316      	movs	r3, #22
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	2001      	movs	r0, #1
 800cf70:	e7e7      	b.n	800cf42 <_raise_r+0x12>
 800cf72:	2100      	movs	r1, #0
 800cf74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf78:	4620      	mov	r0, r4
 800cf7a:	4798      	blx	r3
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	e7e0      	b.n	800cf42 <_raise_r+0x12>

0800cf80 <raise>:
 800cf80:	4b02      	ldr	r3, [pc, #8]	@ (800cf8c <raise+0xc>)
 800cf82:	4601      	mov	r1, r0
 800cf84:	6818      	ldr	r0, [r3, #0]
 800cf86:	f7ff bfd3 	b.w	800cf30 <_raise_r>
 800cf8a:	bf00      	nop
 800cf8c:	20000020 	.word	0x20000020

0800cf90 <_kill_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4d07      	ldr	r5, [pc, #28]	@ (800cfb0 <_kill_r+0x20>)
 800cf94:	2300      	movs	r3, #0
 800cf96:	4604      	mov	r4, r0
 800cf98:	4608      	mov	r0, r1
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	f7f5 fe41 	bl	8002c24 <_kill>
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	d102      	bne.n	800cfac <_kill_r+0x1c>
 800cfa6:	682b      	ldr	r3, [r5, #0]
 800cfa8:	b103      	cbz	r3, 800cfac <_kill_r+0x1c>
 800cfaa:	6023      	str	r3, [r4, #0]
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	bf00      	nop
 800cfb0:	200009ec 	.word	0x200009ec

0800cfb4 <_getpid_r>:
 800cfb4:	f7f5 be2e 	b.w	8002c14 <_getpid>

0800cfb8 <__swhatbuf_r>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	b096      	sub	sp, #88	@ 0x58
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	461e      	mov	r6, r3
 800cfc8:	da0d      	bge.n	800cfe6 <__swhatbuf_r+0x2e>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfd0:	f04f 0100 	mov.w	r1, #0
 800cfd4:	bf14      	ite	ne
 800cfd6:	2340      	movne	r3, #64	@ 0x40
 800cfd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfdc:	2000      	movs	r0, #0
 800cfde:	6031      	str	r1, [r6, #0]
 800cfe0:	602b      	str	r3, [r5, #0]
 800cfe2:	b016      	add	sp, #88	@ 0x58
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}
 800cfe6:	466a      	mov	r2, sp
 800cfe8:	f000 f848 	bl	800d07c <_fstat_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	dbec      	blt.n	800cfca <__swhatbuf_r+0x12>
 800cff0:	9901      	ldr	r1, [sp, #4]
 800cff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cffa:	4259      	negs	r1, r3
 800cffc:	4159      	adcs	r1, r3
 800cffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d002:	e7eb      	b.n	800cfdc <__swhatbuf_r+0x24>

0800d004 <__smakebuf_r>:
 800d004:	898b      	ldrh	r3, [r1, #12]
 800d006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d008:	079d      	lsls	r5, r3, #30
 800d00a:	4606      	mov	r6, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	d507      	bpl.n	800d020 <__smakebuf_r+0x1c>
 800d010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	6123      	str	r3, [r4, #16]
 800d018:	2301      	movs	r3, #1
 800d01a:	6163      	str	r3, [r4, #20]
 800d01c:	b003      	add	sp, #12
 800d01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d020:	ab01      	add	r3, sp, #4
 800d022:	466a      	mov	r2, sp
 800d024:	f7ff ffc8 	bl	800cfb8 <__swhatbuf_r>
 800d028:	9f00      	ldr	r7, [sp, #0]
 800d02a:	4605      	mov	r5, r0
 800d02c:	4639      	mov	r1, r7
 800d02e:	4630      	mov	r0, r6
 800d030:	f7fe febe 	bl	800bdb0 <_malloc_r>
 800d034:	b948      	cbnz	r0, 800d04a <__smakebuf_r+0x46>
 800d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03a:	059a      	lsls	r2, r3, #22
 800d03c:	d4ee      	bmi.n	800d01c <__smakebuf_r+0x18>
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	f043 0302 	orr.w	r3, r3, #2
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	e7e2      	b.n	800d010 <__smakebuf_r+0xc>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	6020      	str	r0, [r4, #0]
 800d04e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d05a:	b15b      	cbz	r3, 800d074 <__smakebuf_r+0x70>
 800d05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d060:	4630      	mov	r0, r6
 800d062:	f000 f81d 	bl	800d0a0 <_isatty_r>
 800d066:	b128      	cbz	r0, 800d074 <__smakebuf_r+0x70>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	431d      	orrs	r5, r3
 800d078:	81a5      	strh	r5, [r4, #12]
 800d07a:	e7cf      	b.n	800d01c <__smakebuf_r+0x18>

0800d07c <_fstat_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d07      	ldr	r5, [pc, #28]	@ (800d09c <_fstat_r+0x20>)
 800d080:	2300      	movs	r3, #0
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	602b      	str	r3, [r5, #0]
 800d08a:	f7f5 fe2b 	bl	8002ce4 <_fstat>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	d102      	bne.n	800d098 <_fstat_r+0x1c>
 800d092:	682b      	ldr	r3, [r5, #0]
 800d094:	b103      	cbz	r3, 800d098 <_fstat_r+0x1c>
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	bd38      	pop	{r3, r4, r5, pc}
 800d09a:	bf00      	nop
 800d09c:	200009ec 	.word	0x200009ec

0800d0a0 <_isatty_r>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	4d06      	ldr	r5, [pc, #24]	@ (800d0bc <_isatty_r+0x1c>)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	602b      	str	r3, [r5, #0]
 800d0ac:	f7f5 fe2a 	bl	8002d04 <_isatty>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_isatty_r+0x1a>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_isatty_r+0x1a>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	200009ec 	.word	0x200009ec

0800d0c0 <_init>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr

0800d0cc <_fini>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr
