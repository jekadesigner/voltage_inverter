
U_I_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006a2c  08006a2c  00008060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006a2c  08006a2c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a30  08006a30  00007a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006a34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000060  08006a94  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  08006a94  00008790  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021058  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b17  00000000  00000000  000290e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010d95  00000000  00000000  0002cbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119b  00000000  00000000  0003ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018167  00000000  00000000  0003fdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002213f  00000000  00000000  00057f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097a5e  00000000  00000000  0007a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111af7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003920  00000000  00000000  00111b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0011545c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080068c8 	.word	0x080068c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	080068c8 	.word	0x080068c8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fbc9 	bl	8000b8c <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fb51 	bl	8000aac <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fbbb 	bl	8000b8c <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fbb1 	bl	8000b8c <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb5f 	bl	8000afc <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb55 	bl	8000afc <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_d2uiz>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	2200      	movs	r2, #0
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <__aeabi_d2uiz+0x38>)
 8000466:	0004      	movs	r4, r0
 8000468:	000d      	movs	r5, r1
 800046a:	f001 ffa9 	bl	80023c0 <__aeabi_dcmpge>
 800046e:	2800      	cmp	r0, #0
 8000470:	d104      	bne.n	800047c <__aeabi_d2uiz+0x1c>
 8000472:	0020      	movs	r0, r4
 8000474:	0029      	movs	r1, r5
 8000476:	f001 ff05 	bl	8002284 <__aeabi_d2iz>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <__aeabi_d2uiz+0x38>)
 800047e:	2200      	movs	r2, #0
 8000480:	0020      	movs	r0, r4
 8000482:	0029      	movs	r1, r5
 8000484:	f001 faf4 	bl	8001a70 <__aeabi_dsub>
 8000488:	f001 fefc 	bl	8002284 <__aeabi_d2iz>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	061b      	lsls	r3, r3, #24
 8000490:	469c      	mov	ip, r3
 8000492:	4460      	add	r0, ip
 8000494:	e7f1      	b.n	800047a <__aeabi_d2uiz+0x1a>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	41e00000 	.word	0x41e00000

0800049c <__aeabi_fadd>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	024b      	lsls	r3, r1, #9
 80004a0:	0a5a      	lsrs	r2, r3, #9
 80004a2:	4694      	mov	ip, r2
 80004a4:	004a      	lsls	r2, r1, #1
 80004a6:	0fc9      	lsrs	r1, r1, #31
 80004a8:	46ce      	mov	lr, r9
 80004aa:	4647      	mov	r7, r8
 80004ac:	4689      	mov	r9, r1
 80004ae:	0045      	lsls	r5, r0, #1
 80004b0:	0246      	lsls	r6, r0, #9
 80004b2:	0e2d      	lsrs	r5, r5, #24
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	b580      	push	{r7, lr}
 80004b8:	0999      	lsrs	r1, r3, #6
 80004ba:	0a77      	lsrs	r7, r6, #9
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	09b6      	lsrs	r6, r6, #6
 80004c0:	1aab      	subs	r3, r5, r2
 80004c2:	454c      	cmp	r4, r9
 80004c4:	d020      	beq.n	8000508 <__aeabi_fadd+0x6c>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dd0c      	ble.n	80004e4 <__aeabi_fadd+0x48>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d134      	bne.n	8000538 <__aeabi_fadd+0x9c>
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d02a      	beq.n	8000528 <__aeabi_fadd+0x8c>
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x3e>
 80004d8:	e08f      	b.n	80005fa <__aeabi_fadd+0x15e>
 80004da:	2bff      	cmp	r3, #255	@ 0xff
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x44>
 80004de:	e0cd      	b.n	800067c <__aeabi_fadd+0x1e0>
 80004e0:	0013      	movs	r3, r2
 80004e2:	e02f      	b.n	8000544 <__aeabi_fadd+0xa8>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d060      	beq.n	80005aa <__aeabi_fadd+0x10e>
 80004e8:	1b53      	subs	r3, r2, r5
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0x54>
 80004ee:	e0ee      	b.n	80006ce <__aeabi_fadd+0x232>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x5a>
 80004f4:	e13e      	b.n	8000774 <__aeabi_fadd+0x2d8>
 80004f6:	1e5c      	subs	r4, r3, #1
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0x62>
 80004fc:	e16b      	b.n	80007d6 <__aeabi_fadd+0x33a>
 80004fe:	2bff      	cmp	r3, #255	@ 0xff
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x68>
 8000502:	e0b9      	b.n	8000678 <__aeabi_fadd+0x1dc>
 8000504:	0023      	movs	r3, r4
 8000506:	e0e7      	b.n	80006d8 <__aeabi_fadd+0x23c>
 8000508:	2b00      	cmp	r3, #0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x72>
 800050c:	e0a4      	b.n	8000658 <__aeabi_fadd+0x1bc>
 800050e:	2a00      	cmp	r2, #0
 8000510:	d069      	beq.n	80005e6 <__aeabi_fadd+0x14a>
 8000512:	2dff      	cmp	r5, #255	@ 0xff
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x7c>
 8000516:	e0b1      	b.n	800067c <__aeabi_fadd+0x1e0>
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	04d2      	lsls	r2, r2, #19
 800051c:	4311      	orrs	r1, r2
 800051e:	2b1b      	cmp	r3, #27
 8000520:	dc00      	bgt.n	8000524 <__aeabi_fadd+0x88>
 8000522:	e0e9      	b.n	80006f8 <__aeabi_fadd+0x25c>
 8000524:	002b      	movs	r3, r5
 8000526:	3605      	adds	r6, #5
 8000528:	08f7      	lsrs	r7, r6, #3
 800052a:	2bff      	cmp	r3, #255	@ 0xff
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x94>
 800052e:	e0a5      	b.n	800067c <__aeabi_fadd+0x1e0>
 8000530:	027a      	lsls	r2, r7, #9
 8000532:	0a52      	lsrs	r2, r2, #9
 8000534:	b2d8      	uxtb	r0, r3
 8000536:	e030      	b.n	800059a <__aeabi_fadd+0xfe>
 8000538:	2dff      	cmp	r5, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0xa2>
 800053c:	e09e      	b.n	800067c <__aeabi_fadd+0x1e0>
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	04d2      	lsls	r2, r2, #19
 8000542:	4311      	orrs	r1, r2
 8000544:	2001      	movs	r0, #1
 8000546:	2b1b      	cmp	r3, #27
 8000548:	dc08      	bgt.n	800055c <__aeabi_fadd+0xc0>
 800054a:	0008      	movs	r0, r1
 800054c:	2220      	movs	r2, #32
 800054e:	40d8      	lsrs	r0, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4099      	lsls	r1, r3
 8000554:	000b      	movs	r3, r1
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	4193      	sbcs	r3, r2
 800055a:	4318      	orrs	r0, r3
 800055c:	1a36      	subs	r6, r6, r0
 800055e:	0173      	lsls	r3, r6, #5
 8000560:	d400      	bmi.n	8000564 <__aeabi_fadd+0xc8>
 8000562:	e071      	b.n	8000648 <__aeabi_fadd+0x1ac>
 8000564:	01b6      	lsls	r6, r6, #6
 8000566:	09b7      	lsrs	r7, r6, #6
 8000568:	0038      	movs	r0, r7
 800056a:	f001 ff33 	bl	80023d4 <__clzsi2>
 800056e:	003b      	movs	r3, r7
 8000570:	3805      	subs	r0, #5
 8000572:	4083      	lsls	r3, r0
 8000574:	4285      	cmp	r5, r0
 8000576:	dd4d      	ble.n	8000614 <__aeabi_fadd+0x178>
 8000578:	4eb4      	ldr	r6, [pc, #720]	@ (800084c <__aeabi_fadd+0x3b0>)
 800057a:	1a2d      	subs	r5, r5, r0
 800057c:	401e      	ands	r6, r3
 800057e:	075a      	lsls	r2, r3, #29
 8000580:	d068      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 8000582:	220f      	movs	r2, #15
 8000584:	4013      	ands	r3, r2
 8000586:	2b04      	cmp	r3, #4
 8000588:	d064      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 800058a:	3604      	adds	r6, #4
 800058c:	0173      	lsls	r3, r6, #5
 800058e:	d561      	bpl.n	8000654 <__aeabi_fadd+0x1b8>
 8000590:	1c68      	adds	r0, r5, #1
 8000592:	2dfe      	cmp	r5, #254	@ 0xfe
 8000594:	d154      	bne.n	8000640 <__aeabi_fadd+0x1a4>
 8000596:	20ff      	movs	r0, #255	@ 0xff
 8000598:	2200      	movs	r2, #0
 800059a:	05c0      	lsls	r0, r0, #23
 800059c:	4310      	orrs	r0, r2
 800059e:	07e4      	lsls	r4, r4, #31
 80005a0:	4320      	orrs	r0, r4
 80005a2:	bcc0      	pop	{r6, r7}
 80005a4:	46b9      	mov	r9, r7
 80005a6:	46b0      	mov	r8, r6
 80005a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005aa:	22fe      	movs	r2, #254	@ 0xfe
 80005ac:	4690      	mov	r8, r2
 80005ae:	1c68      	adds	r0, r5, #1
 80005b0:	0002      	movs	r2, r0
 80005b2:	4640      	mov	r0, r8
 80005b4:	4210      	tst	r0, r2
 80005b6:	d16b      	bne.n	8000690 <__aeabi_fadd+0x1f4>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x122>
 80005bc:	e0dd      	b.n	800077a <__aeabi_fadd+0x2de>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x128>
 80005c2:	e102      	b.n	80007ca <__aeabi_fadd+0x32e>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d0b3      	beq.n	8000530 <__aeabi_fadd+0x94>
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	1a77      	subs	r7, r6, r1
 80005cc:	04d2      	lsls	r2, r2, #19
 80005ce:	4217      	tst	r7, r2
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x138>
 80005d2:	e136      	b.n	8000842 <__aeabi_fadd+0x3a6>
 80005d4:	464c      	mov	r4, r9
 80005d6:	1b8e      	subs	r6, r1, r6
 80005d8:	d061      	beq.n	800069e <__aeabi_fadd+0x202>
 80005da:	2001      	movs	r0, #1
 80005dc:	4216      	tst	r6, r2
 80005de:	d130      	bne.n	8000642 <__aeabi_fadd+0x1a6>
 80005e0:	2300      	movs	r3, #0
 80005e2:	08f7      	lsrs	r7, r6, #3
 80005e4:	e7a4      	b.n	8000530 <__aeabi_fadd+0x94>
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d09e      	beq.n	8000528 <__aeabi_fadd+0x8c>
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x156>
 80005f0:	e0ca      	b.n	8000788 <__aeabi_fadd+0x2ec>
 80005f2:	2bff      	cmp	r3, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fadd+0x1e0>
 80005f6:	0013      	movs	r3, r2
 80005f8:	e791      	b.n	800051e <__aeabi_fadd+0x82>
 80005fa:	1a71      	subs	r1, r6, r1
 80005fc:	014b      	lsls	r3, r1, #5
 80005fe:	d400      	bmi.n	8000602 <__aeabi_fadd+0x166>
 8000600:	e0d1      	b.n	80007a6 <__aeabi_fadd+0x30a>
 8000602:	018f      	lsls	r7, r1, #6
 8000604:	09bf      	lsrs	r7, r7, #6
 8000606:	0038      	movs	r0, r7
 8000608:	f001 fee4 	bl	80023d4 <__clzsi2>
 800060c:	003b      	movs	r3, r7
 800060e:	3805      	subs	r0, #5
 8000610:	4083      	lsls	r3, r0
 8000612:	2501      	movs	r5, #1
 8000614:	2220      	movs	r2, #32
 8000616:	1b40      	subs	r0, r0, r5
 8000618:	3001      	adds	r0, #1
 800061a:	1a12      	subs	r2, r2, r0
 800061c:	001e      	movs	r6, r3
 800061e:	4093      	lsls	r3, r2
 8000620:	40c6      	lsrs	r6, r0
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	4193      	sbcs	r3, r2
 8000626:	431e      	orrs	r6, r3
 8000628:	d039      	beq.n	800069e <__aeabi_fadd+0x202>
 800062a:	0773      	lsls	r3, r6, #29
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0x194>
 800062e:	e11b      	b.n	8000868 <__aeabi_fadd+0x3cc>
 8000630:	230f      	movs	r3, #15
 8000632:	2500      	movs	r5, #0
 8000634:	4033      	ands	r3, r6
 8000636:	2b04      	cmp	r3, #4
 8000638:	d1a7      	bne.n	800058a <__aeabi_fadd+0xee>
 800063a:	2001      	movs	r0, #1
 800063c:	0172      	lsls	r2, r6, #5
 800063e:	d57c      	bpl.n	800073a <__aeabi_fadd+0x29e>
 8000640:	b2c0      	uxtb	r0, r0
 8000642:	01b2      	lsls	r2, r6, #6
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	e7a8      	b.n	800059a <__aeabi_fadd+0xfe>
 8000648:	0773      	lsls	r3, r6, #29
 800064a:	d003      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 800064c:	230f      	movs	r3, #15
 800064e:	4033      	ands	r3, r6
 8000650:	2b04      	cmp	r3, #4
 8000652:	d19a      	bne.n	800058a <__aeabi_fadd+0xee>
 8000654:	002b      	movs	r3, r5
 8000656:	e767      	b.n	8000528 <__aeabi_fadd+0x8c>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d023      	beq.n	80006a4 <__aeabi_fadd+0x208>
 800065c:	1b53      	subs	r3, r2, r5
 800065e:	2d00      	cmp	r5, #0
 8000660:	d17b      	bne.n	800075a <__aeabi_fadd+0x2be>
 8000662:	2e00      	cmp	r6, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x1cc>
 8000666:	e086      	b.n	8000776 <__aeabi_fadd+0x2da>
 8000668:	1e5d      	subs	r5, r3, #1
 800066a:	2b01      	cmp	r3, #1
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x1d4>
 800066e:	e08b      	b.n	8000788 <__aeabi_fadd+0x2ec>
 8000670:	2bff      	cmp	r3, #255	@ 0xff
 8000672:	d002      	beq.n	800067a <__aeabi_fadd+0x1de>
 8000674:	002b      	movs	r3, r5
 8000676:	e075      	b.n	8000764 <__aeabi_fadd+0x2c8>
 8000678:	464c      	mov	r4, r9
 800067a:	4667      	mov	r7, ip
 800067c:	2f00      	cmp	r7, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1e6>
 8000680:	e789      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	433a      	orrs	r2, r7
 8000688:	0252      	lsls	r2, r2, #9
 800068a:	20ff      	movs	r0, #255	@ 0xff
 800068c:	0a52      	lsrs	r2, r2, #9
 800068e:	e784      	b.n	800059a <__aeabi_fadd+0xfe>
 8000690:	1a77      	subs	r7, r6, r1
 8000692:	017b      	lsls	r3, r7, #5
 8000694:	d46b      	bmi.n	800076e <__aeabi_fadd+0x2d2>
 8000696:	2f00      	cmp	r7, #0
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x200>
 800069a:	e765      	b.n	8000568 <__aeabi_fadd+0xcc>
 800069c:	2400      	movs	r4, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	e77a      	b.n	800059a <__aeabi_fadd+0xfe>
 80006a4:	22fe      	movs	r2, #254	@ 0xfe
 80006a6:	1c6b      	adds	r3, r5, #1
 80006a8:	421a      	tst	r2, r3
 80006aa:	d149      	bne.n	8000740 <__aeabi_fadd+0x2a4>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fadd+0x216>
 80006b0:	e09f      	b.n	80007f2 <__aeabi_fadd+0x356>
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x21c>
 80006b6:	e0ba      	b.n	800082e <__aeabi_fadd+0x392>
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x222>
 80006bc:	e0cf      	b.n	800085e <__aeabi_fadd+0x3c2>
 80006be:	1872      	adds	r2, r6, r1
 80006c0:	0153      	lsls	r3, r2, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x22a>
 80006c4:	e0cd      	b.n	8000862 <__aeabi_fadd+0x3c6>
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	2001      	movs	r0, #1
 80006ca:	0a52      	lsrs	r2, r2, #9
 80006cc:	e765      	b.n	800059a <__aeabi_fadd+0xfe>
 80006ce:	2aff      	cmp	r2, #255	@ 0xff
 80006d0:	d0d2      	beq.n	8000678 <__aeabi_fadd+0x1dc>
 80006d2:	2080      	movs	r0, #128	@ 0x80
 80006d4:	04c0      	lsls	r0, r0, #19
 80006d6:	4306      	orrs	r6, r0
 80006d8:	2001      	movs	r0, #1
 80006da:	2b1b      	cmp	r3, #27
 80006dc:	dc08      	bgt.n	80006f0 <__aeabi_fadd+0x254>
 80006de:	0030      	movs	r0, r6
 80006e0:	2420      	movs	r4, #32
 80006e2:	40d8      	lsrs	r0, r3
 80006e4:	1ae3      	subs	r3, r4, r3
 80006e6:	409e      	lsls	r6, r3
 80006e8:	0033      	movs	r3, r6
 80006ea:	1e5c      	subs	r4, r3, #1
 80006ec:	41a3      	sbcs	r3, r4
 80006ee:	4318      	orrs	r0, r3
 80006f0:	464c      	mov	r4, r9
 80006f2:	0015      	movs	r5, r2
 80006f4:	1a0e      	subs	r6, r1, r0
 80006f6:	e732      	b.n	800055e <__aeabi_fadd+0xc2>
 80006f8:	0008      	movs	r0, r1
 80006fa:	2220      	movs	r2, #32
 80006fc:	40d8      	lsrs	r0, r3
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	4099      	lsls	r1, r3
 8000702:	000b      	movs	r3, r1
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	4193      	sbcs	r3, r2
 8000708:	4303      	orrs	r3, r0
 800070a:	18f6      	adds	r6, r6, r3
 800070c:	0173      	lsls	r3, r6, #5
 800070e:	d59b      	bpl.n	8000648 <__aeabi_fadd+0x1ac>
 8000710:	3501      	adds	r5, #1
 8000712:	2dff      	cmp	r5, #255	@ 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x27c>
 8000716:	e73e      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000718:	2301      	movs	r3, #1
 800071a:	494d      	ldr	r1, [pc, #308]	@ (8000850 <__aeabi_fadd+0x3b4>)
 800071c:	0872      	lsrs	r2, r6, #1
 800071e:	4033      	ands	r3, r6
 8000720:	400a      	ands	r2, r1
 8000722:	431a      	orrs	r2, r3
 8000724:	0016      	movs	r6, r2
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d004      	beq.n	8000734 <__aeabi_fadd+0x298>
 800072a:	230f      	movs	r3, #15
 800072c:	4013      	ands	r3, r2
 800072e:	2b04      	cmp	r3, #4
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x298>
 8000732:	e72a      	b.n	800058a <__aeabi_fadd+0xee>
 8000734:	0173      	lsls	r3, r6, #5
 8000736:	d500      	bpl.n	800073a <__aeabi_fadd+0x29e>
 8000738:	e72a      	b.n	8000590 <__aeabi_fadd+0xf4>
 800073a:	002b      	movs	r3, r5
 800073c:	08f7      	lsrs	r7, r6, #3
 800073e:	e6f7      	b.n	8000530 <__aeabi_fadd+0x94>
 8000740:	2bff      	cmp	r3, #255	@ 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2aa>
 8000744:	e727      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000746:	1871      	adds	r1, r6, r1
 8000748:	0849      	lsrs	r1, r1, #1
 800074a:	074a      	lsls	r2, r1, #29
 800074c:	d02f      	beq.n	80007ae <__aeabi_fadd+0x312>
 800074e:	220f      	movs	r2, #15
 8000750:	400a      	ands	r2, r1
 8000752:	2a04      	cmp	r2, #4
 8000754:	d02b      	beq.n	80007ae <__aeabi_fadd+0x312>
 8000756:	1d0e      	adds	r6, r1, #4
 8000758:	e6e6      	b.n	8000528 <__aeabi_fadd+0x8c>
 800075a:	2aff      	cmp	r2, #255	@ 0xff
 800075c:	d08d      	beq.n	800067a <__aeabi_fadd+0x1de>
 800075e:	2080      	movs	r0, #128	@ 0x80
 8000760:	04c0      	lsls	r0, r0, #19
 8000762:	4306      	orrs	r6, r0
 8000764:	2b1b      	cmp	r3, #27
 8000766:	dd24      	ble.n	80007b2 <__aeabi_fadd+0x316>
 8000768:	0013      	movs	r3, r2
 800076a:	1d4e      	adds	r6, r1, #5
 800076c:	e6dc      	b.n	8000528 <__aeabi_fadd+0x8c>
 800076e:	464c      	mov	r4, r9
 8000770:	1b8f      	subs	r7, r1, r6
 8000772:	e6f9      	b.n	8000568 <__aeabi_fadd+0xcc>
 8000774:	464c      	mov	r4, r9
 8000776:	000e      	movs	r6, r1
 8000778:	e6d6      	b.n	8000528 <__aeabi_fadd+0x8c>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d149      	bne.n	8000812 <__aeabi_fadd+0x376>
 800077e:	2900      	cmp	r1, #0
 8000780:	d068      	beq.n	8000854 <__aeabi_fadd+0x3b8>
 8000782:	4667      	mov	r7, ip
 8000784:	464c      	mov	r4, r9
 8000786:	e77c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000788:	1870      	adds	r0, r6, r1
 800078a:	0143      	lsls	r3, r0, #5
 800078c:	d574      	bpl.n	8000878 <__aeabi_fadd+0x3dc>
 800078e:	4930      	ldr	r1, [pc, #192]	@ (8000850 <__aeabi_fadd+0x3b4>)
 8000790:	0840      	lsrs	r0, r0, #1
 8000792:	4001      	ands	r1, r0
 8000794:	0743      	lsls	r3, r0, #29
 8000796:	d009      	beq.n	80007ac <__aeabi_fadd+0x310>
 8000798:	230f      	movs	r3, #15
 800079a:	4003      	ands	r3, r0
 800079c:	2b04      	cmp	r3, #4
 800079e:	d005      	beq.n	80007ac <__aeabi_fadd+0x310>
 80007a0:	2302      	movs	r3, #2
 80007a2:	1d0e      	adds	r6, r1, #4
 80007a4:	e6c0      	b.n	8000528 <__aeabi_fadd+0x8c>
 80007a6:	2301      	movs	r3, #1
 80007a8:	08cf      	lsrs	r7, r1, #3
 80007aa:	e6c1      	b.n	8000530 <__aeabi_fadd+0x94>
 80007ac:	2302      	movs	r3, #2
 80007ae:	08cf      	lsrs	r7, r1, #3
 80007b0:	e6be      	b.n	8000530 <__aeabi_fadd+0x94>
 80007b2:	2520      	movs	r5, #32
 80007b4:	0030      	movs	r0, r6
 80007b6:	40d8      	lsrs	r0, r3
 80007b8:	1aeb      	subs	r3, r5, r3
 80007ba:	409e      	lsls	r6, r3
 80007bc:	0033      	movs	r3, r6
 80007be:	1e5d      	subs	r5, r3, #1
 80007c0:	41ab      	sbcs	r3, r5
 80007c2:	4303      	orrs	r3, r0
 80007c4:	0015      	movs	r5, r2
 80007c6:	185e      	adds	r6, r3, r1
 80007c8:	e7a0      	b.n	800070c <__aeabi_fadd+0x270>
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x334>
 80007ce:	e765      	b.n	800069c <__aeabi_fadd+0x200>
 80007d0:	464c      	mov	r4, r9
 80007d2:	4667      	mov	r7, ip
 80007d4:	e6ac      	b.n	8000530 <__aeabi_fadd+0x94>
 80007d6:	1b8f      	subs	r7, r1, r6
 80007d8:	017b      	lsls	r3, r7, #5
 80007da:	d52e      	bpl.n	800083a <__aeabi_fadd+0x39e>
 80007dc:	01bf      	lsls	r7, r7, #6
 80007de:	09bf      	lsrs	r7, r7, #6
 80007e0:	0038      	movs	r0, r7
 80007e2:	f001 fdf7 	bl	80023d4 <__clzsi2>
 80007e6:	003b      	movs	r3, r7
 80007e8:	3805      	subs	r0, #5
 80007ea:	4083      	lsls	r3, r0
 80007ec:	464c      	mov	r4, r9
 80007ee:	3501      	adds	r5, #1
 80007f0:	e710      	b.n	8000614 <__aeabi_fadd+0x178>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x35c>
 80007f6:	e740      	b.n	800067a <__aeabi_fadd+0x1de>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x362>
 80007fc:	e741      	b.n	8000682 <__aeabi_fadd+0x1e6>
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	429f      	cmp	r7, r3
 8000804:	d200      	bcs.n	8000808 <__aeabi_fadd+0x36c>
 8000806:	e73c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000808:	459c      	cmp	ip, r3
 800080a:	d300      	bcc.n	800080e <__aeabi_fadd+0x372>
 800080c:	e739      	b.n	8000682 <__aeabi_fadd+0x1e6>
 800080e:	4667      	mov	r7, ip
 8000810:	e737      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000812:	2900      	cmp	r1, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x37c>
 8000816:	e734      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	03db      	lsls	r3, r3, #15
 800081c:	429f      	cmp	r7, r3
 800081e:	d200      	bcs.n	8000822 <__aeabi_fadd+0x386>
 8000820:	e72f      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000822:	459c      	cmp	ip, r3
 8000824:	d300      	bcc.n	8000828 <__aeabi_fadd+0x38c>
 8000826:	e72c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000828:	464c      	mov	r4, r9
 800082a:	4667      	mov	r7, ip
 800082c:	e729      	b.n	8000682 <__aeabi_fadd+0x1e6>
 800082e:	2900      	cmp	r1, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x398>
 8000832:	e734      	b.n	800069e <__aeabi_fadd+0x202>
 8000834:	2300      	movs	r3, #0
 8000836:	08cf      	lsrs	r7, r1, #3
 8000838:	e67a      	b.n	8000530 <__aeabi_fadd+0x94>
 800083a:	464c      	mov	r4, r9
 800083c:	2301      	movs	r3, #1
 800083e:	08ff      	lsrs	r7, r7, #3
 8000840:	e676      	b.n	8000530 <__aeabi_fadd+0x94>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x3ac>
 8000846:	e729      	b.n	800069c <__aeabi_fadd+0x200>
 8000848:	08ff      	lsrs	r7, r7, #3
 800084a:	e671      	b.n	8000530 <__aeabi_fadd+0x94>
 800084c:	fbffffff 	.word	0xfbffffff
 8000850:	7dffffff 	.word	0x7dffffff
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	2400      	movs	r4, #0
 8000858:	20ff      	movs	r0, #255	@ 0xff
 800085a:	03d2      	lsls	r2, r2, #15
 800085c:	e69d      	b.n	800059a <__aeabi_fadd+0xfe>
 800085e:	2300      	movs	r3, #0
 8000860:	e666      	b.n	8000530 <__aeabi_fadd+0x94>
 8000862:	2300      	movs	r3, #0
 8000864:	08d7      	lsrs	r7, r2, #3
 8000866:	e663      	b.n	8000530 <__aeabi_fadd+0x94>
 8000868:	2001      	movs	r0, #1
 800086a:	0172      	lsls	r2, r6, #5
 800086c:	d500      	bpl.n	8000870 <__aeabi_fadd+0x3d4>
 800086e:	e6e7      	b.n	8000640 <__aeabi_fadd+0x1a4>
 8000870:	0031      	movs	r1, r6
 8000872:	2300      	movs	r3, #0
 8000874:	08cf      	lsrs	r7, r1, #3
 8000876:	e65b      	b.n	8000530 <__aeabi_fadd+0x94>
 8000878:	2301      	movs	r3, #1
 800087a:	08c7      	lsrs	r7, r0, #3
 800087c:	e658      	b.n	8000530 <__aeabi_fadd+0x94>
 800087e:	46c0      	nop			@ (mov r8, r8)

08000880 <__aeabi_fdiv>:
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000882:	4646      	mov	r6, r8
 8000884:	464f      	mov	r7, r9
 8000886:	46d6      	mov	lr, sl
 8000888:	0245      	lsls	r5, r0, #9
 800088a:	b5c0      	push	{r6, r7, lr}
 800088c:	0fc3      	lsrs	r3, r0, #31
 800088e:	0047      	lsls	r7, r0, #1
 8000890:	4698      	mov	r8, r3
 8000892:	1c0e      	adds	r6, r1, #0
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	0e3f      	lsrs	r7, r7, #24
 8000898:	d05b      	beq.n	8000952 <__aeabi_fdiv+0xd2>
 800089a:	2fff      	cmp	r7, #255	@ 0xff
 800089c:	d021      	beq.n	80008e2 <__aeabi_fdiv+0x62>
 800089e:	2380      	movs	r3, #128	@ 0x80
 80008a0:	00ed      	lsls	r5, r5, #3
 80008a2:	04db      	lsls	r3, r3, #19
 80008a4:	431d      	orrs	r5, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	4699      	mov	r9, r3
 80008aa:	469a      	mov	sl, r3
 80008ac:	3f7f      	subs	r7, #127	@ 0x7f
 80008ae:	0274      	lsls	r4, r6, #9
 80008b0:	0073      	lsls	r3, r6, #1
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	0e1b      	lsrs	r3, r3, #24
 80008b6:	0ff6      	lsrs	r6, r6, #31
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d020      	beq.n	80008fe <__aeabi_fdiv+0x7e>
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d043      	beq.n	8000948 <__aeabi_fdiv+0xc8>
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	2000      	movs	r0, #0
 80008c4:	00e4      	lsls	r4, r4, #3
 80008c6:	04d2      	lsls	r2, r2, #19
 80008c8:	4314      	orrs	r4, r2
 80008ca:	3b7f      	subs	r3, #127	@ 0x7f
 80008cc:	4642      	mov	r2, r8
 80008ce:	1aff      	subs	r7, r7, r3
 80008d0:	464b      	mov	r3, r9
 80008d2:	4072      	eors	r2, r6
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d900      	bls.n	80008da <__aeabi_fdiv+0x5a>
 80008d8:	e09d      	b.n	8000a16 <__aeabi_fdiv+0x196>
 80008da:	4971      	ldr	r1, [pc, #452]	@ (8000aa0 <__aeabi_fdiv+0x220>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58cb      	ldr	r3, [r1, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d15a      	bne.n	800099c <__aeabi_fdiv+0x11c>
 80008e6:	2308      	movs	r3, #8
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b06      	subs	r3, #6
 80008ec:	0274      	lsls	r4, r6, #9
 80008ee:	469a      	mov	sl, r3
 80008f0:	0073      	lsls	r3, r6, #1
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	0e1b      	lsrs	r3, r3, #24
 80008f8:	0ff6      	lsrs	r6, r6, #31
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1de      	bne.n	80008bc <__aeabi_fdiv+0x3c>
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d13b      	bne.n	800097a <__aeabi_fdiv+0xfa>
 8000902:	2301      	movs	r3, #1
 8000904:	4642      	mov	r2, r8
 8000906:	4649      	mov	r1, r9
 8000908:	4072      	eors	r2, r6
 800090a:	4319      	orrs	r1, r3
 800090c:	290e      	cmp	r1, #14
 800090e:	d818      	bhi.n	8000942 <__aeabi_fdiv+0xc2>
 8000910:	4864      	ldr	r0, [pc, #400]	@ (8000aa4 <__aeabi_fdiv+0x224>)
 8000912:	0089      	lsls	r1, r1, #2
 8000914:	5841      	ldr	r1, [r0, r1]
 8000916:	468f      	mov	pc, r1
 8000918:	4653      	mov	r3, sl
 800091a:	2b02      	cmp	r3, #2
 800091c:	d100      	bne.n	8000920 <__aeabi_fdiv+0xa0>
 800091e:	e0b8      	b.n	8000a92 <__aeabi_fdiv+0x212>
 8000920:	2b03      	cmp	r3, #3
 8000922:	d06e      	beq.n	8000a02 <__aeabi_fdiv+0x182>
 8000924:	4642      	mov	r2, r8
 8000926:	002c      	movs	r4, r5
 8000928:	2b01      	cmp	r3, #1
 800092a:	d140      	bne.n	80009ae <__aeabi_fdiv+0x12e>
 800092c:	2000      	movs	r0, #0
 800092e:	2400      	movs	r4, #0
 8000930:	05c0      	lsls	r0, r0, #23
 8000932:	4320      	orrs	r0, r4
 8000934:	07d2      	lsls	r2, r2, #31
 8000936:	4310      	orrs	r0, r2
 8000938:	bce0      	pop	{r5, r6, r7}
 800093a:	46ba      	mov	sl, r7
 800093c:	46b1      	mov	r9, r6
 800093e:	46a8      	mov	r8, r5
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	2400      	movs	r4, #0
 8000946:	e7f3      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d120      	bne.n	800098e <__aeabi_fdiv+0x10e>
 800094c:	2302      	movs	r3, #2
 800094e:	3fff      	subs	r7, #255	@ 0xff
 8000950:	e7d8      	b.n	8000904 <__aeabi_fdiv+0x84>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d105      	bne.n	8000962 <__aeabi_fdiv+0xe2>
 8000956:	2304      	movs	r3, #4
 8000958:	4699      	mov	r9, r3
 800095a:	3b03      	subs	r3, #3
 800095c:	2700      	movs	r7, #0
 800095e:	469a      	mov	sl, r3
 8000960:	e7a5      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000962:	0028      	movs	r0, r5
 8000964:	f001 fd36 	bl	80023d4 <__clzsi2>
 8000968:	2776      	movs	r7, #118	@ 0x76
 800096a:	1f43      	subs	r3, r0, #5
 800096c:	409d      	lsls	r5, r3
 800096e:	2300      	movs	r3, #0
 8000970:	427f      	negs	r7, r7
 8000972:	4699      	mov	r9, r3
 8000974:	469a      	mov	sl, r3
 8000976:	1a3f      	subs	r7, r7, r0
 8000978:	e799      	b.n	80008ae <__aeabi_fdiv+0x2e>
 800097a:	0020      	movs	r0, r4
 800097c:	f001 fd2a 	bl	80023d4 <__clzsi2>
 8000980:	1f43      	subs	r3, r0, #5
 8000982:	409c      	lsls	r4, r3
 8000984:	2376      	movs	r3, #118	@ 0x76
 8000986:	425b      	negs	r3, r3
 8000988:	1a1b      	subs	r3, r3, r0
 800098a:	2000      	movs	r0, #0
 800098c:	e79e      	b.n	80008cc <__aeabi_fdiv+0x4c>
 800098e:	2303      	movs	r3, #3
 8000990:	464a      	mov	r2, r9
 8000992:	431a      	orrs	r2, r3
 8000994:	4691      	mov	r9, r2
 8000996:	2003      	movs	r0, #3
 8000998:	33fc      	adds	r3, #252	@ 0xfc
 800099a:	e797      	b.n	80008cc <__aeabi_fdiv+0x4c>
 800099c:	230c      	movs	r3, #12
 800099e:	4699      	mov	r9, r3
 80009a0:	3b09      	subs	r3, #9
 80009a2:	27ff      	movs	r7, #255	@ 0xff
 80009a4:	469a      	mov	sl, r3
 80009a6:	e782      	b.n	80008ae <__aeabi_fdiv+0x2e>
 80009a8:	2803      	cmp	r0, #3
 80009aa:	d02c      	beq.n	8000a06 <__aeabi_fdiv+0x186>
 80009ac:	0032      	movs	r2, r6
 80009ae:	0038      	movs	r0, r7
 80009b0:	307f      	adds	r0, #127	@ 0x7f
 80009b2:	2800      	cmp	r0, #0
 80009b4:	dd47      	ble.n	8000a46 <__aeabi_fdiv+0x1c6>
 80009b6:	0763      	lsls	r3, r4, #29
 80009b8:	d004      	beq.n	80009c4 <__aeabi_fdiv+0x144>
 80009ba:	230f      	movs	r3, #15
 80009bc:	4023      	ands	r3, r4
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fdiv+0x144>
 80009c2:	3404      	adds	r4, #4
 80009c4:	0123      	lsls	r3, r4, #4
 80009c6:	d503      	bpl.n	80009d0 <__aeabi_fdiv+0x150>
 80009c8:	0038      	movs	r0, r7
 80009ca:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <__aeabi_fdiv+0x228>)
 80009cc:	3080      	adds	r0, #128	@ 0x80
 80009ce:	401c      	ands	r4, r3
 80009d0:	28fe      	cmp	r0, #254	@ 0xfe
 80009d2:	dcb6      	bgt.n	8000942 <__aeabi_fdiv+0xc2>
 80009d4:	01a4      	lsls	r4, r4, #6
 80009d6:	0a64      	lsrs	r4, r4, #9
 80009d8:	b2c0      	uxtb	r0, r0
 80009da:	e7a9      	b.n	8000930 <__aeabi_fdiv+0xb0>
 80009dc:	2480      	movs	r4, #128	@ 0x80
 80009de:	2200      	movs	r2, #0
 80009e0:	20ff      	movs	r0, #255	@ 0xff
 80009e2:	03e4      	lsls	r4, r4, #15
 80009e4:	e7a4      	b.n	8000930 <__aeabi_fdiv+0xb0>
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	421d      	tst	r5, r3
 80009ec:	d001      	beq.n	80009f2 <__aeabi_fdiv+0x172>
 80009ee:	421c      	tst	r4, r3
 80009f0:	d00b      	beq.n	8000a0a <__aeabi_fdiv+0x18a>
 80009f2:	2480      	movs	r4, #128	@ 0x80
 80009f4:	03e4      	lsls	r4, r4, #15
 80009f6:	432c      	orrs	r4, r5
 80009f8:	0264      	lsls	r4, r4, #9
 80009fa:	4642      	mov	r2, r8
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	0a64      	lsrs	r4, r4, #9
 8000a00:	e796      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a02:	4646      	mov	r6, r8
 8000a04:	002c      	movs	r4, r5
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	03db      	lsls	r3, r3, #15
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	0264      	lsls	r4, r4, #9
 8000a0e:	0032      	movs	r2, r6
 8000a10:	20ff      	movs	r0, #255	@ 0xff
 8000a12:	0a64      	lsrs	r4, r4, #9
 8000a14:	e78c      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a16:	016d      	lsls	r5, r5, #5
 8000a18:	0160      	lsls	r0, r4, #5
 8000a1a:	4285      	cmp	r5, r0
 8000a1c:	d22d      	bcs.n	8000a7a <__aeabi_fdiv+0x1fa>
 8000a1e:	231b      	movs	r3, #27
 8000a20:	2400      	movs	r4, #0
 8000a22:	3f01      	subs	r7, #1
 8000a24:	2601      	movs	r6, #1
 8000a26:	0029      	movs	r1, r5
 8000a28:	0064      	lsls	r4, r4, #1
 8000a2a:	006d      	lsls	r5, r5, #1
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	db01      	blt.n	8000a34 <__aeabi_fdiv+0x1b4>
 8000a30:	4285      	cmp	r5, r0
 8000a32:	d301      	bcc.n	8000a38 <__aeabi_fdiv+0x1b8>
 8000a34:	1a2d      	subs	r5, r5, r0
 8000a36:	4334      	orrs	r4, r6
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f3      	bne.n	8000a26 <__aeabi_fdiv+0x1a6>
 8000a3e:	1e6b      	subs	r3, r5, #1
 8000a40:	419d      	sbcs	r5, r3
 8000a42:	432c      	orrs	r4, r5
 8000a44:	e7b3      	b.n	80009ae <__aeabi_fdiv+0x12e>
 8000a46:	2301      	movs	r3, #1
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	2b1b      	cmp	r3, #27
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_fdiv+0x1d0>
 8000a4e:	e76d      	b.n	800092c <__aeabi_fdiv+0xac>
 8000a50:	0021      	movs	r1, r4
 8000a52:	379e      	adds	r7, #158	@ 0x9e
 8000a54:	40d9      	lsrs	r1, r3
 8000a56:	40bc      	lsls	r4, r7
 8000a58:	000b      	movs	r3, r1
 8000a5a:	1e61      	subs	r1, r4, #1
 8000a5c:	418c      	sbcs	r4, r1
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	0759      	lsls	r1, r3, #29
 8000a62:	d004      	beq.n	8000a6e <__aeabi_fdiv+0x1ee>
 8000a64:	210f      	movs	r1, #15
 8000a66:	4019      	ands	r1, r3
 8000a68:	2904      	cmp	r1, #4
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fdiv+0x1ee>
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	0159      	lsls	r1, r3, #5
 8000a70:	d413      	bmi.n	8000a9a <__aeabi_fdiv+0x21a>
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	2000      	movs	r0, #0
 8000a76:	0a5c      	lsrs	r4, r3, #9
 8000a78:	e75a      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a7a:	231a      	movs	r3, #26
 8000a7c:	2401      	movs	r4, #1
 8000a7e:	1a2d      	subs	r5, r5, r0
 8000a80:	e7d0      	b.n	8000a24 <__aeabi_fdiv+0x1a4>
 8000a82:	1e98      	subs	r0, r3, #2
 8000a84:	4243      	negs	r3, r0
 8000a86:	4158      	adcs	r0, r3
 8000a88:	4240      	negs	r0, r0
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	b2c0      	uxtb	r0, r0
 8000a90:	e74e      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a92:	4642      	mov	r2, r8
 8000a94:	20ff      	movs	r0, #255	@ 0xff
 8000a96:	2400      	movs	r4, #0
 8000a98:	e74a      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e747      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000aa0:	080068e0 	.word	0x080068e0
 8000aa4:	08006920 	.word	0x08006920
 8000aa8:	f7ffffff 	.word	0xf7ffffff

08000aac <__eqsf2>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	024e      	lsls	r6, r1, #9
 8000ab2:	004c      	lsls	r4, r1, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	0a6d      	lsrs	r5, r5, #9
 8000ab8:	0e12      	lsrs	r2, r2, #24
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a76      	lsrs	r6, r6, #9
 8000abe:	0e24      	lsrs	r4, r4, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d010      	beq.n	8000ae8 <__eqsf2+0x3c>
 8000ac6:	2cff      	cmp	r4, #255	@ 0xff
 8000ac8:	d00c      	beq.n	8000ae4 <__eqsf2+0x38>
 8000aca:	2001      	movs	r0, #1
 8000acc:	42a2      	cmp	r2, r4
 8000ace:	d10a      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	d108      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d00f      	beq.n	8000af8 <__eqsf2+0x4c>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d104      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000adc:	0028      	movs	r0, r5
 8000ade:	1e43      	subs	r3, r0, #1
 8000ae0:	4198      	sbcs	r0, r3
 8000ae2:	e000      	b.n	8000ae6 <__eqsf2+0x3a>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	2001      	movs	r0, #1
 8000aea:	2cff      	cmp	r4, #255	@ 0xff
 8000aec:	d1fb      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000aee:	4335      	orrs	r5, r6
 8000af0:	d1f9      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000af2:	404b      	eors	r3, r1
 8000af4:	0018      	movs	r0, r3
 8000af6:	e7f6      	b.n	8000ae6 <__eqsf2+0x3a>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f4      	b.n	8000ae6 <__eqsf2+0x3a>

08000afc <__gesf2>:
 8000afc:	b530      	push	{r4, r5, lr}
 8000afe:	0042      	lsls	r2, r0, #1
 8000b00:	0244      	lsls	r4, r0, #9
 8000b02:	024d      	lsls	r5, r1, #9
 8000b04:	0fc3      	lsrs	r3, r0, #31
 8000b06:	0048      	lsls	r0, r1, #1
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	0e00      	lsrs	r0, r0, #24
 8000b10:	0fc9      	lsrs	r1, r1, #31
 8000b12:	2aff      	cmp	r2, #255	@ 0xff
 8000b14:	d018      	beq.n	8000b48 <__gesf2+0x4c>
 8000b16:	28ff      	cmp	r0, #255	@ 0xff
 8000b18:	d00a      	beq.n	8000b30 <__gesf2+0x34>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gesf2+0x60>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d10a      	bne.n	8000b38 <__gesf2+0x3c>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d029      	beq.n	8000b7a <__gesf2+0x7e>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d12d      	bne.n	8000b86 <__gesf2+0x8a>
 8000b2a:	0048      	lsls	r0, r1, #1
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	bd30      	pop	{r4, r5, pc}
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d125      	bne.n	8000b80 <__gesf2+0x84>
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d101      	bne.n	8000b3c <__gesf2+0x40>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d0f6      	beq.n	8000b2a <__gesf2+0x2e>
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d019      	beq.n	8000b74 <__gesf2+0x78>
 8000b40:	2001      	movs	r0, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	4318      	orrs	r0, r3
 8000b46:	e7f2      	b.n	8000b2e <__gesf2+0x32>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d119      	bne.n	8000b80 <__gesf2+0x84>
 8000b4c:	28ff      	cmp	r0, #255	@ 0xff
 8000b4e:	d1f7      	bne.n	8000b40 <__gesf2+0x44>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d115      	bne.n	8000b80 <__gesf2+0x84>
 8000b54:	2000      	movs	r0, #0
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d1f2      	bne.n	8000b40 <__gesf2+0x44>
 8000b5a:	e7e8      	b.n	8000b2e <__gesf2+0x32>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d0ef      	beq.n	8000b40 <__gesf2+0x44>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d1ed      	bne.n	8000b40 <__gesf2+0x44>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	dceb      	bgt.n	8000b40 <__gesf2+0x44>
 8000b68:	db04      	blt.n	8000b74 <__gesf2+0x78>
 8000b6a:	42ac      	cmp	r4, r5
 8000b6c:	d8e8      	bhi.n	8000b40 <__gesf2+0x44>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d2dc      	bcs.n	8000b2e <__gesf2+0x32>
 8000b74:	0058      	lsls	r0, r3, #1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7d9      	b.n	8000b2e <__gesf2+0x32>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d0d7      	beq.n	8000b2e <__gesf2+0x32>
 8000b7e:	e7df      	b.n	8000b40 <__gesf2+0x44>
 8000b80:	2002      	movs	r0, #2
 8000b82:	4240      	negs	r0, r0
 8000b84:	e7d3      	b.n	8000b2e <__gesf2+0x32>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d1da      	bne.n	8000b40 <__gesf2+0x44>
 8000b8a:	e7ee      	b.n	8000b6a <__gesf2+0x6e>

08000b8c <__lesf2>:
 8000b8c:	b530      	push	{r4, r5, lr}
 8000b8e:	0042      	lsls	r2, r0, #1
 8000b90:	0244      	lsls	r4, r0, #9
 8000b92:	024d      	lsls	r5, r1, #9
 8000b94:	0fc3      	lsrs	r3, r0, #31
 8000b96:	0048      	lsls	r0, r1, #1
 8000b98:	0a64      	lsrs	r4, r4, #9
 8000b9a:	0e12      	lsrs	r2, r2, #24
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e00      	lsrs	r0, r0, #24
 8000ba0:	0fc9      	lsrs	r1, r1, #31
 8000ba2:	2aff      	cmp	r2, #255	@ 0xff
 8000ba4:	d017      	beq.n	8000bd6 <__lesf2+0x4a>
 8000ba6:	28ff      	cmp	r0, #255	@ 0xff
 8000ba8:	d00a      	beq.n	8000bc0 <__lesf2+0x34>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d11b      	bne.n	8000be6 <__lesf2+0x5a>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d10a      	bne.n	8000bc8 <__lesf2+0x3c>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d01d      	beq.n	8000bf2 <__lesf2+0x66>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d12d      	bne.n	8000c16 <__lesf2+0x8a>
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	e011      	b.n	8000be4 <__lesf2+0x58>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d10e      	bne.n	8000be2 <__lesf2+0x56>
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d101      	bne.n	8000bcc <__lesf2+0x40>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d0f6      	beq.n	8000bba <__lesf2+0x2e>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d10c      	bne.n	8000bea <__lesf2+0x5e>
 8000bd0:	0058      	lsls	r0, r3, #1
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	e006      	b.n	8000be4 <__lesf2+0x58>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d103      	bne.n	8000be2 <__lesf2+0x56>
 8000bda:	28ff      	cmp	r0, #255	@ 0xff
 8000bdc:	d105      	bne.n	8000bea <__lesf2+0x5e>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d015      	beq.n	8000c0e <__lesf2+0x82>
 8000be2:	2002      	movs	r0, #2
 8000be4:	bd30      	pop	{r4, r5, pc}
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d106      	bne.n	8000bf8 <__lesf2+0x6c>
 8000bea:	2001      	movs	r0, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	4318      	orrs	r0, r3
 8000bf0:	e7f8      	b.n	8000be4 <__lesf2+0x58>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d0f6      	beq.n	8000be4 <__lesf2+0x58>
 8000bf6:	e7f8      	b.n	8000bea <__lesf2+0x5e>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d1f6      	bne.n	8000bea <__lesf2+0x5e>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	dcf4      	bgt.n	8000bea <__lesf2+0x5e>
 8000c00:	dbe6      	blt.n	8000bd0 <__lesf2+0x44>
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	d8f1      	bhi.n	8000bea <__lesf2+0x5e>
 8000c06:	2000      	movs	r0, #0
 8000c08:	42ac      	cmp	r4, r5
 8000c0a:	d2eb      	bcs.n	8000be4 <__lesf2+0x58>
 8000c0c:	e7e0      	b.n	8000bd0 <__lesf2+0x44>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	428b      	cmp	r3, r1
 8000c12:	d1ea      	bne.n	8000bea <__lesf2+0x5e>
 8000c14:	e7e6      	b.n	8000be4 <__lesf2+0x58>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d1e7      	bne.n	8000bea <__lesf2+0x5e>
 8000c1a:	e7f2      	b.n	8000c02 <__lesf2+0x76>

08000c1c <__aeabi_fmul>:
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464f      	mov	r7, r9
 8000c20:	4646      	mov	r6, r8
 8000c22:	46d6      	mov	lr, sl
 8000c24:	0044      	lsls	r4, r0, #1
 8000c26:	b5c0      	push	{r6, r7, lr}
 8000c28:	0246      	lsls	r6, r0, #9
 8000c2a:	1c0f      	adds	r7, r1, #0
 8000c2c:	0a76      	lsrs	r6, r6, #9
 8000c2e:	0e24      	lsrs	r4, r4, #24
 8000c30:	0fc5      	lsrs	r5, r0, #31
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0x1c>
 8000c36:	e0da      	b.n	8000dee <__aeabi_fmul+0x1d2>
 8000c38:	2cff      	cmp	r4, #255	@ 0xff
 8000c3a:	d074      	beq.n	8000d26 <__aeabi_fmul+0x10a>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	00f6      	lsls	r6, r6, #3
 8000c40:	04db      	lsls	r3, r3, #19
 8000c42:	431e      	orrs	r6, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	4699      	mov	r9, r3
 8000c48:	469a      	mov	sl, r3
 8000c4a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c4c:	027b      	lsls	r3, r7, #9
 8000c4e:	0a5b      	lsrs	r3, r3, #9
 8000c50:	4698      	mov	r8, r3
 8000c52:	007b      	lsls	r3, r7, #1
 8000c54:	0e1b      	lsrs	r3, r3, #24
 8000c56:	0fff      	lsrs	r7, r7, #31
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d074      	beq.n	8000d46 <__aeabi_fmul+0x12a>
 8000c5c:	2bff      	cmp	r3, #255	@ 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fmul+0x46>
 8000c60:	e08e      	b.n	8000d80 <__aeabi_fmul+0x164>
 8000c62:	4642      	mov	r2, r8
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	04c9      	lsls	r1, r1, #19
 8000c6a:	4311      	orrs	r1, r2
 8000c6c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c6e:	002a      	movs	r2, r5
 8000c70:	18e4      	adds	r4, r4, r3
 8000c72:	464b      	mov	r3, r9
 8000c74:	407a      	eors	r2, r7
 8000c76:	4688      	mov	r8, r1
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	dc75      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000c7e:	464b      	mov	r3, r9
 8000c80:	2000      	movs	r0, #0
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	dd0f      	ble.n	8000ca6 <__aeabi_fmul+0x8a>
 8000c86:	4649      	mov	r1, r9
 8000c88:	2301      	movs	r3, #1
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	21a6      	movs	r1, #166	@ 0xa6
 8000c8e:	00c9      	lsls	r1, r1, #3
 8000c90:	420b      	tst	r3, r1
 8000c92:	d169      	bne.n	8000d68 <__aeabi_fmul+0x14c>
 8000c94:	2190      	movs	r1, #144	@ 0x90
 8000c96:	0089      	lsls	r1, r1, #2
 8000c98:	420b      	tst	r3, r1
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fmul+0x82>
 8000c9c:	e100      	b.n	8000ea0 <__aeabi_fmul+0x284>
 8000c9e:	2188      	movs	r1, #136	@ 0x88
 8000ca0:	4219      	tst	r1, r3
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_fmul+0x8a>
 8000ca4:	e0f5      	b.n	8000e92 <__aeabi_fmul+0x276>
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	0c09      	lsrs	r1, r1, #16
 8000cac:	4643      	mov	r3, r8
 8000cae:	0008      	movs	r0, r1
 8000cb0:	0c35      	lsrs	r5, r6, #16
 8000cb2:	0436      	lsls	r6, r6, #16
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	0c36      	lsrs	r6, r6, #16
 8000cb8:	4370      	muls	r0, r6
 8000cba:	4369      	muls	r1, r5
 8000cbc:	435e      	muls	r6, r3
 8000cbe:	435d      	muls	r5, r3
 8000cc0:	1876      	adds	r6, r6, r1
 8000cc2:	0c03      	lsrs	r3, r0, #16
 8000cc4:	199b      	adds	r3, r3, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0xb6>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4465      	add	r5, ip
 8000cd2:	0400      	lsls	r0, r0, #16
 8000cd4:	0419      	lsls	r1, r3, #16
 8000cd6:	0c00      	lsrs	r0, r0, #16
 8000cd8:	1809      	adds	r1, r1, r0
 8000cda:	018e      	lsls	r6, r1, #6
 8000cdc:	1e70      	subs	r0, r6, #1
 8000cde:	4186      	sbcs	r6, r0
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	0e89      	lsrs	r1, r1, #26
 8000ce4:	195b      	adds	r3, r3, r5
 8000ce6:	430e      	orrs	r6, r1
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	431e      	orrs	r6, r3
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	d46c      	bmi.n	8000dca <__aeabi_fmul+0x1ae>
 8000cf0:	0023      	movs	r3, r4
 8000cf2:	337f      	adds	r3, #127	@ 0x7f
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fmul+0xde>
 8000cf8:	e0b1      	b.n	8000e5e <__aeabi_fmul+0x242>
 8000cfa:	0015      	movs	r5, r2
 8000cfc:	0771      	lsls	r1, r6, #29
 8000cfe:	d00b      	beq.n	8000d18 <__aeabi_fmul+0xfc>
 8000d00:	200f      	movs	r0, #15
 8000d02:	0021      	movs	r1, r4
 8000d04:	4030      	ands	r0, r6
 8000d06:	2804      	cmp	r0, #4
 8000d08:	d006      	beq.n	8000d18 <__aeabi_fmul+0xfc>
 8000d0a:	3604      	adds	r6, #4
 8000d0c:	0132      	lsls	r2, r6, #4
 8000d0e:	d503      	bpl.n	8000d18 <__aeabi_fmul+0xfc>
 8000d10:	4b6e      	ldr	r3, [pc, #440]	@ (8000ecc <__aeabi_fmul+0x2b0>)
 8000d12:	401e      	ands	r6, r3
 8000d14:	000b      	movs	r3, r1
 8000d16:	3380      	adds	r3, #128	@ 0x80
 8000d18:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_fmul+0x102>
 8000d1c:	e0bd      	b.n	8000e9a <__aeabi_fmul+0x27e>
 8000d1e:	01b2      	lsls	r2, r6, #6
 8000d20:	0a52      	lsrs	r2, r2, #9
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	e048      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fmul+0x110>
 8000d2a:	e092      	b.n	8000e52 <__aeabi_fmul+0x236>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	4699      	mov	r9, r3
 8000d30:	3b06      	subs	r3, #6
 8000d32:	469a      	mov	sl, r3
 8000d34:	027b      	lsls	r3, r7, #9
 8000d36:	0a5b      	lsrs	r3, r3, #9
 8000d38:	4698      	mov	r8, r3
 8000d3a:	007b      	lsls	r3, r7, #1
 8000d3c:	24ff      	movs	r4, #255	@ 0xff
 8000d3e:	0e1b      	lsrs	r3, r3, #24
 8000d40:	0fff      	lsrs	r7, r7, #31
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d18a      	bne.n	8000c5c <__aeabi_fmul+0x40>
 8000d46:	4642      	mov	r2, r8
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d164      	bne.n	8000e16 <__aeabi_fmul+0x1fa>
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	3201      	adds	r2, #1
 8000d50:	4311      	orrs	r1, r2
 8000d52:	4689      	mov	r9, r1
 8000d54:	290a      	cmp	r1, #10
 8000d56:	dc08      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000d58:	407d      	eors	r5, r7
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	b2ea      	uxtb	r2, r5
 8000d5e:	2902      	cmp	r1, #2
 8000d60:	dc91      	bgt.n	8000c86 <__aeabi_fmul+0x6a>
 8000d62:	0015      	movs	r5, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e027      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d68:	0015      	movs	r5, r2
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fmul+0x156>
 8000d70:	e093      	b.n	8000e9a <__aeabi_fmul+0x27e>
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d01a      	beq.n	8000dac <__aeabi_fmul+0x190>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d12c      	bne.n	8000dd4 <__aeabi_fmul+0x1b8>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e01b      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d80:	4643      	mov	r3, r8
 8000d82:	34ff      	adds	r4, #255	@ 0xff
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d055      	beq.n	8000e34 <__aeabi_fmul+0x218>
 8000d88:	2103      	movs	r1, #3
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	0019      	movs	r1, r3
 8000d90:	2b0a      	cmp	r3, #10
 8000d92:	dc00      	bgt.n	8000d96 <__aeabi_fmul+0x17a>
 8000d94:	e092      	b.n	8000ebc <__aeabi_fmul+0x2a0>
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x180>
 8000d9a:	e08c      	b.n	8000eb6 <__aeabi_fmul+0x29a>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4216      	tst	r6, r2
 8000da2:	d003      	beq.n	8000dac <__aeabi_fmul+0x190>
 8000da4:	4643      	mov	r3, r8
 8000da6:	4213      	tst	r3, r2
 8000da8:	d100      	bne.n	8000dac <__aeabi_fmul+0x190>
 8000daa:	e07d      	b.n	8000ea8 <__aeabi_fmul+0x28c>
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	03d2      	lsls	r2, r2, #15
 8000db0:	4332      	orrs	r2, r6
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	0a52      	lsrs	r2, r2, #9
 8000db6:	23ff      	movs	r3, #255	@ 0xff
 8000db8:	05d8      	lsls	r0, r3, #23
 8000dba:	07ed      	lsls	r5, r5, #31
 8000dbc:	4310      	orrs	r0, r2
 8000dbe:	4328      	orrs	r0, r5
 8000dc0:	bce0      	pop	{r5, r6, r7}
 8000dc2:	46ba      	mov	sl, r7
 8000dc4:	46b1      	mov	r9, r6
 8000dc6:	46a8      	mov	r8, r5
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dca:	2301      	movs	r3, #1
 8000dcc:	0015      	movs	r5, r2
 8000dce:	0871      	lsrs	r1, r6, #1
 8000dd0:	401e      	ands	r6, r3
 8000dd2:	430e      	orrs	r6, r1
 8000dd4:	0023      	movs	r3, r4
 8000dd6:	3380      	adds	r3, #128	@ 0x80
 8000dd8:	1c61      	adds	r1, r4, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	dd41      	ble.n	8000e62 <__aeabi_fmul+0x246>
 8000dde:	0772      	lsls	r2, r6, #29
 8000de0:	d094      	beq.n	8000d0c <__aeabi_fmul+0xf0>
 8000de2:	220f      	movs	r2, #15
 8000de4:	4032      	ands	r2, r6
 8000de6:	2a04      	cmp	r2, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1d0>
 8000dea:	e78e      	b.n	8000d0a <__aeabi_fmul+0xee>
 8000dec:	e78e      	b.n	8000d0c <__aeabi_fmul+0xf0>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d105      	bne.n	8000dfe <__aeabi_fmul+0x1e2>
 8000df2:	2304      	movs	r3, #4
 8000df4:	4699      	mov	r9, r3
 8000df6:	3b03      	subs	r3, #3
 8000df8:	2400      	movs	r4, #0
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	e726      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000dfe:	0030      	movs	r0, r6
 8000e00:	f001 fae8 	bl	80023d4 <__clzsi2>
 8000e04:	2476      	movs	r4, #118	@ 0x76
 8000e06:	1f43      	subs	r3, r0, #5
 8000e08:	409e      	lsls	r6, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4264      	negs	r4, r4
 8000e0e:	4699      	mov	r9, r3
 8000e10:	469a      	mov	sl, r3
 8000e12:	1a24      	subs	r4, r4, r0
 8000e14:	e71a      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000e16:	4640      	mov	r0, r8
 8000e18:	f001 fadc 	bl	80023d4 <__clzsi2>
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	1a24      	subs	r4, r4, r0
 8000e20:	3c76      	subs	r4, #118	@ 0x76
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	dca1      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000e26:	4643      	mov	r3, r8
 8000e28:	3805      	subs	r0, #5
 8000e2a:	4083      	lsls	r3, r0
 8000e2c:	407d      	eors	r5, r7
 8000e2e:	4698      	mov	r8, r3
 8000e30:	b2ea      	uxtb	r2, r5
 8000e32:	e724      	b.n	8000c7e <__aeabi_fmul+0x62>
 8000e34:	464a      	mov	r2, r9
 8000e36:	3302      	adds	r3, #2
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	002a      	movs	r2, r5
 8000e3c:	407a      	eors	r2, r7
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	dc92      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000e44:	4649      	mov	r1, r9
 8000e46:	0015      	movs	r5, r2
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d026      	beq.n	8000e9a <__aeabi_fmul+0x27e>
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	2002      	movs	r0, #2
 8000e50:	e719      	b.n	8000c86 <__aeabi_fmul+0x6a>
 8000e52:	230c      	movs	r3, #12
 8000e54:	4699      	mov	r9, r3
 8000e56:	3b09      	subs	r3, #9
 8000e58:	24ff      	movs	r4, #255	@ 0xff
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	e6f6      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000e5e:	0015      	movs	r5, r2
 8000e60:	0021      	movs	r1, r4
 8000e62:	2201      	movs	r2, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b1b      	cmp	r3, #27
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_fmul+0x250>
 8000e6a:	e786      	b.n	8000d7a <__aeabi_fmul+0x15e>
 8000e6c:	319e      	adds	r1, #158	@ 0x9e
 8000e6e:	0032      	movs	r2, r6
 8000e70:	408e      	lsls	r6, r1
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e73      	subs	r3, r6, #1
 8000e76:	419e      	sbcs	r6, r3
 8000e78:	4332      	orrs	r2, r6
 8000e7a:	0753      	lsls	r3, r2, #29
 8000e7c:	d004      	beq.n	8000e88 <__aeabi_fmul+0x26c>
 8000e7e:	230f      	movs	r3, #15
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_fmul+0x26c>
 8000e86:	3204      	adds	r2, #4
 8000e88:	0153      	lsls	r3, r2, #5
 8000e8a:	d510      	bpl.n	8000eae <__aeabi_fmul+0x292>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	e792      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000e92:	003d      	movs	r5, r7
 8000e94:	4646      	mov	r6, r8
 8000e96:	4682      	mov	sl, r0
 8000e98:	e767      	b.n	8000d6a <__aeabi_fmul+0x14e>
 8000e9a:	23ff      	movs	r3, #255	@ 0xff
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e78b      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	03d2      	lsls	r2, r2, #15
 8000ea6:	e786      	b.n	8000db6 <__aeabi_fmul+0x19a>
 8000ea8:	003d      	movs	r5, r7
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	e783      	b.n	8000db6 <__aeabi_fmul+0x19a>
 8000eae:	0192      	lsls	r2, r2, #6
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	0a52      	lsrs	r2, r2, #9
 8000eb4:	e780      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000eb6:	003d      	movs	r5, r7
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e777      	b.n	8000dac <__aeabi_fmul+0x190>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	407a      	eors	r2, r7
 8000ec2:	408b      	lsls	r3, r1
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	e6e9      	b.n	8000c9e <__aeabi_fmul+0x82>
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__aeabi_fsub>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	4647      	mov	r7, r8
 8000ed4:	46ce      	mov	lr, r9
 8000ed6:	0243      	lsls	r3, r0, #9
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	0a5f      	lsrs	r7, r3, #9
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	0045      	lsls	r5, r0, #1
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	024b      	lsls	r3, r1, #9
 8000ee6:	0fc4      	lsrs	r4, r0, #31
 8000ee8:	0fce      	lsrs	r6, r1, #31
 8000eea:	0e2d      	lsrs	r5, r5, #24
 8000eec:	0a58      	lsrs	r0, r3, #9
 8000eee:	0e12      	lsrs	r2, r2, #24
 8000ef0:	0999      	lsrs	r1, r3, #6
 8000ef2:	2aff      	cmp	r2, #255	@ 0xff
 8000ef4:	d06b      	beq.n	8000fce <__aeabi_fsub+0xfe>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	405e      	eors	r6, r3
 8000efa:	1aab      	subs	r3, r5, r2
 8000efc:	42b4      	cmp	r4, r6
 8000efe:	d04b      	beq.n	8000f98 <__aeabi_fsub+0xc8>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_fsub+0x36>
 8000f04:	e0ff      	b.n	8001106 <__aeabi_fsub+0x236>
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x3c>
 8000f0a:	e088      	b.n	800101e <__aeabi_fsub+0x14e>
 8000f0c:	2dff      	cmp	r5, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x42>
 8000f10:	e0ef      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	04d2      	lsls	r2, r2, #19
 8000f16:	4311      	orrs	r1, r2
 8000f18:	2001      	movs	r0, #1
 8000f1a:	2b1b      	cmp	r3, #27
 8000f1c:	dc08      	bgt.n	8000f30 <__aeabi_fsub+0x60>
 8000f1e:	0008      	movs	r0, r1
 8000f20:	2220      	movs	r2, #32
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4099      	lsls	r1, r3
 8000f28:	000b      	movs	r3, r1
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	4193      	sbcs	r3, r2
 8000f2e:	4318      	orrs	r0, r3
 8000f30:	4663      	mov	r3, ip
 8000f32:	1a1b      	subs	r3, r3, r0
 8000f34:	469c      	mov	ip, r3
 8000f36:	4663      	mov	r3, ip
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	d400      	bmi.n	8000f3e <__aeabi_fsub+0x6e>
 8000f3c:	e0cd      	b.n	80010da <__aeabi_fsub+0x20a>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	019f      	lsls	r7, r3, #6
 8000f42:	09bf      	lsrs	r7, r7, #6
 8000f44:	0038      	movs	r0, r7
 8000f46:	f001 fa45 	bl	80023d4 <__clzsi2>
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	3805      	subs	r0, #5
 8000f4e:	4083      	lsls	r3, r0
 8000f50:	4285      	cmp	r5, r0
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_fsub+0x86>
 8000f54:	e0a2      	b.n	800109c <__aeabi_fsub+0x1cc>
 8000f56:	4ab7      	ldr	r2, [pc, #732]	@ (8001234 <__aeabi_fsub+0x364>)
 8000f58:	1a2d      	subs	r5, r5, r0
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	4694      	mov	ip, r2
 8000f5e:	075a      	lsls	r2, r3, #29
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x94>
 8000f62:	e0c3      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f64:	220f      	movs	r2, #15
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x9e>
 8000f6c:	e0be      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	4698      	mov	r8, r3
 8000f72:	44c4      	add	ip, r8
 8000f74:	4663      	mov	r3, ip
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_fsub+0xac>
 8000f7a:	e0b7      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f7c:	1c68      	adds	r0, r5, #1
 8000f7e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f80:	d000      	beq.n	8000f84 <__aeabi_fsub+0xb4>
 8000f82:	e0a5      	b.n	80010d0 <__aeabi_fsub+0x200>
 8000f84:	20ff      	movs	r0, #255	@ 0xff
 8000f86:	2200      	movs	r2, #0
 8000f88:	05c0      	lsls	r0, r0, #23
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	07e4      	lsls	r4, r4, #31
 8000f8e:	4320      	orrs	r0, r4
 8000f90:	bcc0      	pop	{r6, r7}
 8000f92:	46b9      	mov	r9, r7
 8000f94:	46b0      	mov	r8, r6
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_fsub+0xce>
 8000f9c:	e1eb      	b.n	8001376 <__aeabi_fsub+0x4a6>
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fsub+0x160>
 8000fa2:	2dff      	cmp	r5, #255	@ 0xff
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0xd8>
 8000fa6:	e0a4      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000fa8:	2280      	movs	r2, #128	@ 0x80
 8000faa:	04d2      	lsls	r2, r2, #19
 8000fac:	4311      	orrs	r1, r2
 8000fae:	2b1b      	cmp	r3, #27
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_fsub+0xe4>
 8000fb2:	e0fb      	b.n	80011ac <__aeabi_fsub+0x2dc>
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	4698      	mov	r8, r3
 8000fb8:	002b      	movs	r3, r5
 8000fba:	44c4      	add	ip, r8
 8000fbc:	4662      	mov	r2, ip
 8000fbe:	08d7      	lsrs	r7, r2, #3
 8000fc0:	2bff      	cmp	r3, #255	@ 0xff
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0xf6>
 8000fc4:	e095      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000fc6:	027a      	lsls	r2, r7, #9
 8000fc8:	0a52      	lsrs	r2, r2, #9
 8000fca:	b2d8      	uxtb	r0, r3
 8000fcc:	e7dc      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3bff      	subs	r3, #255	@ 0xff
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d118      	bne.n	800100a <__aeabi_fsub+0x13a>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	405e      	eors	r6, r3
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_fsub+0x112>
 8000fe0:	e0ca      	b.n	8001178 <__aeabi_fsub+0x2a8>
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d02d      	beq.n	8001044 <__aeabi_fsub+0x174>
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x11e>
 8000fec:	e13c      	b.n	8001268 <__aeabi_fsub+0x398>
 8000fee:	23ff      	movs	r3, #255	@ 0xff
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x128>
 8000ff6:	e15f      	b.n	80012b8 <__aeabi_fsub+0x3e8>
 8000ff8:	1e5d      	subs	r5, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x130>
 8000ffe:	e174      	b.n	80012ea <__aeabi_fsub+0x41a>
 8001000:	0034      	movs	r4, r6
 8001002:	2bff      	cmp	r3, #255	@ 0xff
 8001004:	d074      	beq.n	80010f0 <__aeabi_fsub+0x220>
 8001006:	002b      	movs	r3, r5
 8001008:	e103      	b.n	8001212 <__aeabi_fsub+0x342>
 800100a:	42b4      	cmp	r4, r6
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x140>
 800100e:	e09c      	b.n	800114a <__aeabi_fsub+0x27a>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d017      	beq.n	8001044 <__aeabi_fsub+0x174>
 8001014:	2d00      	cmp	r5, #0
 8001016:	d0ea      	beq.n	8000fee <__aeabi_fsub+0x11e>
 8001018:	0007      	movs	r7, r0
 800101a:	0034      	movs	r4, r6
 800101c:	e06c      	b.n	80010f8 <__aeabi_fsub+0x228>
 800101e:	2900      	cmp	r1, #0
 8001020:	d0cc      	beq.n	8000fbc <__aeabi_fsub+0xec>
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d02b      	beq.n	8001080 <__aeabi_fsub+0x1b0>
 8001028:	2bff      	cmp	r3, #255	@ 0xff
 800102a:	d062      	beq.n	80010f2 <__aeabi_fsub+0x222>
 800102c:	0013      	movs	r3, r2
 800102e:	e773      	b.n	8000f18 <__aeabi_fsub+0x48>
 8001030:	2900      	cmp	r1, #0
 8001032:	d0c3      	beq.n	8000fbc <__aeabi_fsub+0xec>
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d100      	bne.n	800103c <__aeabi_fsub+0x16c>
 800103a:	e11e      	b.n	800127a <__aeabi_fsub+0x3aa>
 800103c:	2bff      	cmp	r3, #255	@ 0xff
 800103e:	d058      	beq.n	80010f2 <__aeabi_fsub+0x222>
 8001040:	0013      	movs	r3, r2
 8001042:	e7b4      	b.n	8000fae <__aeabi_fsub+0xde>
 8001044:	22fe      	movs	r2, #254	@ 0xfe
 8001046:	1c6b      	adds	r3, r5, #1
 8001048:	421a      	tst	r2, r3
 800104a:	d10d      	bne.n	8001068 <__aeabi_fsub+0x198>
 800104c:	2d00      	cmp	r5, #0
 800104e:	d060      	beq.n	8001112 <__aeabi_fsub+0x242>
 8001050:	4663      	mov	r3, ip
 8001052:	2b00      	cmp	r3, #0
 8001054:	d000      	beq.n	8001058 <__aeabi_fsub+0x188>
 8001056:	e120      	b.n	800129a <__aeabi_fsub+0x3ca>
 8001058:	2900      	cmp	r1, #0
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x18e>
 800105c:	e128      	b.n	80012b0 <__aeabi_fsub+0x3e0>
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	2400      	movs	r4, #0
 8001062:	20ff      	movs	r0, #255	@ 0xff
 8001064:	03d2      	lsls	r2, r2, #15
 8001066:	e78f      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001068:	4663      	mov	r3, ip
 800106a:	1a5f      	subs	r7, r3, r1
 800106c:	017b      	lsls	r3, r7, #5
 800106e:	d500      	bpl.n	8001072 <__aeabi_fsub+0x1a2>
 8001070:	e0fe      	b.n	8001270 <__aeabi_fsub+0x3a0>
 8001072:	2f00      	cmp	r7, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_fsub+0x1a8>
 8001076:	e765      	b.n	8000f44 <__aeabi_fsub+0x74>
 8001078:	2400      	movs	r4, #0
 800107a:	2000      	movs	r0, #0
 800107c:	2200      	movs	r2, #0
 800107e:	e783      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001080:	4663      	mov	r3, ip
 8001082:	1a59      	subs	r1, r3, r1
 8001084:	014b      	lsls	r3, r1, #5
 8001086:	d400      	bmi.n	800108a <__aeabi_fsub+0x1ba>
 8001088:	e119      	b.n	80012be <__aeabi_fsub+0x3ee>
 800108a:	018f      	lsls	r7, r1, #6
 800108c:	09bf      	lsrs	r7, r7, #6
 800108e:	0038      	movs	r0, r7
 8001090:	f001 f9a0 	bl	80023d4 <__clzsi2>
 8001094:	003b      	movs	r3, r7
 8001096:	3805      	subs	r0, #5
 8001098:	4083      	lsls	r3, r0
 800109a:	2501      	movs	r5, #1
 800109c:	2220      	movs	r2, #32
 800109e:	1b40      	subs	r0, r0, r5
 80010a0:	3001      	adds	r0, #1
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	0019      	movs	r1, r3
 80010a6:	4093      	lsls	r3, r2
 80010a8:	40c1      	lsrs	r1, r0
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	4193      	sbcs	r3, r2
 80010ae:	4319      	orrs	r1, r3
 80010b0:	468c      	mov	ip, r1
 80010b2:	1e0b      	subs	r3, r1, #0
 80010b4:	d0e1      	beq.n	800107a <__aeabi_fsub+0x1aa>
 80010b6:	075b      	lsls	r3, r3, #29
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x1ec>
 80010ba:	e152      	b.n	8001362 <__aeabi_fsub+0x492>
 80010bc:	230f      	movs	r3, #15
 80010be:	2500      	movs	r5, #0
 80010c0:	400b      	ands	r3, r1
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fsub+0x1f8>
 80010c6:	e752      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80010c8:	2001      	movs	r0, #1
 80010ca:	014a      	lsls	r2, r1, #5
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_fsub+0x200>
 80010ce:	e092      	b.n	80011f6 <__aeabi_fsub+0x326>
 80010d0:	b2c0      	uxtb	r0, r0
 80010d2:	4663      	mov	r3, ip
 80010d4:	019a      	lsls	r2, r3, #6
 80010d6:	0a52      	lsrs	r2, r2, #9
 80010d8:	e756      	b.n	8000f88 <__aeabi_fsub+0xb8>
 80010da:	4663      	mov	r3, ip
 80010dc:	075b      	lsls	r3, r3, #29
 80010de:	d005      	beq.n	80010ec <__aeabi_fsub+0x21c>
 80010e0:	230f      	movs	r3, #15
 80010e2:	4662      	mov	r2, ip
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fsub+0x21c>
 80010ea:	e740      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80010ec:	002b      	movs	r3, r5
 80010ee:	e765      	b.n	8000fbc <__aeabi_fsub+0xec>
 80010f0:	0007      	movs	r7, r0
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x228>
 80010f6:	e745      	b.n	8000f84 <__aeabi_fsub+0xb4>
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	03d2      	lsls	r2, r2, #15
 80010fc:	433a      	orrs	r2, r7
 80010fe:	0252      	lsls	r2, r2, #9
 8001100:	20ff      	movs	r0, #255	@ 0xff
 8001102:	0a52      	lsrs	r2, r2, #9
 8001104:	e740      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d179      	bne.n	80011fe <__aeabi_fsub+0x32e>
 800110a:	22fe      	movs	r2, #254	@ 0xfe
 800110c:	1c6b      	adds	r3, r5, #1
 800110e:	421a      	tst	r2, r3
 8001110:	d1aa      	bne.n	8001068 <__aeabi_fsub+0x198>
 8001112:	4663      	mov	r3, ip
 8001114:	2b00      	cmp	r3, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x24a>
 8001118:	e0f5      	b.n	8001306 <__aeabi_fsub+0x436>
 800111a:	2900      	cmp	r1, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x250>
 800111e:	e0d1      	b.n	80012c4 <__aeabi_fsub+0x3f4>
 8001120:	1a5f      	subs	r7, r3, r1
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	04db      	lsls	r3, r3, #19
 8001126:	421f      	tst	r7, r3
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x25c>
 800112a:	e10e      	b.n	800134a <__aeabi_fsub+0x47a>
 800112c:	4662      	mov	r2, ip
 800112e:	2401      	movs	r4, #1
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	4694      	mov	ip, r2
 8001134:	2000      	movs	r0, #0
 8001136:	4034      	ands	r4, r6
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x26e>
 800113c:	e724      	b.n	8000f88 <__aeabi_fsub+0xb8>
 800113e:	2001      	movs	r0, #1
 8001140:	421a      	tst	r2, r3
 8001142:	d1c6      	bne.n	80010d2 <__aeabi_fsub+0x202>
 8001144:	2300      	movs	r3, #0
 8001146:	08d7      	lsrs	r7, r2, #3
 8001148:	e73d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d017      	beq.n	800117e <__aeabi_fsub+0x2ae>
 800114e:	2d00      	cmp	r5, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x284>
 8001152:	e0af      	b.n	80012b4 <__aeabi_fsub+0x3e4>
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	4665      	mov	r5, ip
 8001158:	2d00      	cmp	r5, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x28e>
 800115c:	e0ad      	b.n	80012ba <__aeabi_fsub+0x3ea>
 800115e:	1e5e      	subs	r6, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x296>
 8001164:	e089      	b.n	800127a <__aeabi_fsub+0x3aa>
 8001166:	2bff      	cmp	r3, #255	@ 0xff
 8001168:	d0c2      	beq.n	80010f0 <__aeabi_fsub+0x220>
 800116a:	2e1b      	cmp	r6, #27
 800116c:	dc00      	bgt.n	8001170 <__aeabi_fsub+0x2a0>
 800116e:	e0ab      	b.n	80012c8 <__aeabi_fsub+0x3f8>
 8001170:	1d4b      	adds	r3, r1, #5
 8001172:	469c      	mov	ip, r3
 8001174:	0013      	movs	r3, r2
 8001176:	e721      	b.n	8000fbc <__aeabi_fsub+0xec>
 8001178:	464b      	mov	r3, r9
 800117a:	2b00      	cmp	r3, #0
 800117c:	d170      	bne.n	8001260 <__aeabi_fsub+0x390>
 800117e:	22fe      	movs	r2, #254	@ 0xfe
 8001180:	1c6b      	adds	r3, r5, #1
 8001182:	421a      	tst	r2, r3
 8001184:	d15e      	bne.n	8001244 <__aeabi_fsub+0x374>
 8001186:	2d00      	cmp	r5, #0
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0x2bc>
 800118a:	e0c3      	b.n	8001314 <__aeabi_fsub+0x444>
 800118c:	4663      	mov	r3, ip
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_fsub+0x2c4>
 8001192:	e0d0      	b.n	8001336 <__aeabi_fsub+0x466>
 8001194:	2900      	cmp	r1, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x2ca>
 8001198:	e094      	b.n	80012c4 <__aeabi_fsub+0x3f4>
 800119a:	000a      	movs	r2, r1
 800119c:	4462      	add	r2, ip
 800119e:	0153      	lsls	r3, r2, #5
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_fsub+0x2d4>
 80011a2:	e0d8      	b.n	8001356 <__aeabi_fsub+0x486>
 80011a4:	0192      	lsls	r2, r2, #6
 80011a6:	2001      	movs	r0, #1
 80011a8:	0a52      	lsrs	r2, r2, #9
 80011aa:	e6ed      	b.n	8000f88 <__aeabi_fsub+0xb8>
 80011ac:	0008      	movs	r0, r1
 80011ae:	2220      	movs	r2, #32
 80011b0:	40d8      	lsrs	r0, r3
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4099      	lsls	r1, r3
 80011b6:	000b      	movs	r3, r1
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	4193      	sbcs	r3, r2
 80011bc:	4303      	orrs	r3, r0
 80011be:	449c      	add	ip, r3
 80011c0:	4663      	mov	r3, ip
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	d589      	bpl.n	80010da <__aeabi_fsub+0x20a>
 80011c6:	3501      	adds	r5, #1
 80011c8:	2dff      	cmp	r5, #255	@ 0xff
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x2fe>
 80011cc:	e6da      	b.n	8000f84 <__aeabi_fsub+0xb4>
 80011ce:	4662      	mov	r2, ip
 80011d0:	2301      	movs	r3, #1
 80011d2:	4919      	ldr	r1, [pc, #100]	@ (8001238 <__aeabi_fsub+0x368>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0852      	lsrs	r2, r2, #1
 80011d8:	400a      	ands	r2, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	4694      	mov	ip, r2
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	d004      	beq.n	80011ee <__aeabi_fsub+0x31e>
 80011e4:	230f      	movs	r3, #15
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d000      	beq.n	80011ee <__aeabi_fsub+0x31e>
 80011ec:	e6bf      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80011ee:	4663      	mov	r3, ip
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	d500      	bpl.n	80011f6 <__aeabi_fsub+0x326>
 80011f4:	e6c2      	b.n	8000f7c <__aeabi_fsub+0xac>
 80011f6:	4663      	mov	r3, ip
 80011f8:	08df      	lsrs	r7, r3, #3
 80011fa:	002b      	movs	r3, r5
 80011fc:	e6e3      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80011fe:	1b53      	subs	r3, r2, r5
 8001200:	2d00      	cmp	r5, #0
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x336>
 8001204:	e6f4      	b.n	8000ff0 <__aeabi_fsub+0x120>
 8001206:	2080      	movs	r0, #128	@ 0x80
 8001208:	4664      	mov	r4, ip
 800120a:	04c0      	lsls	r0, r0, #19
 800120c:	4304      	orrs	r4, r0
 800120e:	46a4      	mov	ip, r4
 8001210:	0034      	movs	r4, r6
 8001212:	2001      	movs	r0, #1
 8001214:	2b1b      	cmp	r3, #27
 8001216:	dc09      	bgt.n	800122c <__aeabi_fsub+0x35c>
 8001218:	2520      	movs	r5, #32
 800121a:	4660      	mov	r0, ip
 800121c:	40d8      	lsrs	r0, r3
 800121e:	1aeb      	subs	r3, r5, r3
 8001220:	4665      	mov	r5, ip
 8001222:	409d      	lsls	r5, r3
 8001224:	002b      	movs	r3, r5
 8001226:	1e5d      	subs	r5, r3, #1
 8001228:	41ab      	sbcs	r3, r5
 800122a:	4318      	orrs	r0, r3
 800122c:	1a0b      	subs	r3, r1, r0
 800122e:	469c      	mov	ip, r3
 8001230:	0015      	movs	r5, r2
 8001232:	e680      	b.n	8000f36 <__aeabi_fsub+0x66>
 8001234:	fbffffff 	.word	0xfbffffff
 8001238:	7dffffff 	.word	0x7dffffff
 800123c:	22fe      	movs	r2, #254	@ 0xfe
 800123e:	1c6b      	adds	r3, r5, #1
 8001240:	4213      	tst	r3, r2
 8001242:	d0a3      	beq.n	800118c <__aeabi_fsub+0x2bc>
 8001244:	2bff      	cmp	r3, #255	@ 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0x37a>
 8001248:	e69c      	b.n	8000f84 <__aeabi_fsub+0xb4>
 800124a:	4461      	add	r1, ip
 800124c:	0849      	lsrs	r1, r1, #1
 800124e:	074a      	lsls	r2, r1, #29
 8001250:	d049      	beq.n	80012e6 <__aeabi_fsub+0x416>
 8001252:	220f      	movs	r2, #15
 8001254:	400a      	ands	r2, r1
 8001256:	2a04      	cmp	r2, #4
 8001258:	d045      	beq.n	80012e6 <__aeabi_fsub+0x416>
 800125a:	1d0a      	adds	r2, r1, #4
 800125c:	4694      	mov	ip, r2
 800125e:	e6ad      	b.n	8000fbc <__aeabi_fsub+0xec>
 8001260:	2d00      	cmp	r5, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x396>
 8001264:	e776      	b.n	8001154 <__aeabi_fsub+0x284>
 8001266:	e68d      	b.n	8000f84 <__aeabi_fsub+0xb4>
 8001268:	0034      	movs	r4, r6
 800126a:	20ff      	movs	r0, #255	@ 0xff
 800126c:	2200      	movs	r2, #0
 800126e:	e68b      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001270:	4663      	mov	r3, ip
 8001272:	2401      	movs	r4, #1
 8001274:	1acf      	subs	r7, r1, r3
 8001276:	4034      	ands	r4, r6
 8001278:	e664      	b.n	8000f44 <__aeabi_fsub+0x74>
 800127a:	4461      	add	r1, ip
 800127c:	014b      	lsls	r3, r1, #5
 800127e:	d56d      	bpl.n	800135c <__aeabi_fsub+0x48c>
 8001280:	0848      	lsrs	r0, r1, #1
 8001282:	4944      	ldr	r1, [pc, #272]	@ (8001394 <__aeabi_fsub+0x4c4>)
 8001284:	4001      	ands	r1, r0
 8001286:	0743      	lsls	r3, r0, #29
 8001288:	d02c      	beq.n	80012e4 <__aeabi_fsub+0x414>
 800128a:	230f      	movs	r3, #15
 800128c:	4003      	ands	r3, r0
 800128e:	2b04      	cmp	r3, #4
 8001290:	d028      	beq.n	80012e4 <__aeabi_fsub+0x414>
 8001292:	1d0b      	adds	r3, r1, #4
 8001294:	469c      	mov	ip, r3
 8001296:	2302      	movs	r3, #2
 8001298:	e690      	b.n	8000fbc <__aeabi_fsub+0xec>
 800129a:	2900      	cmp	r1, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x3d0>
 800129e:	e72b      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	03db      	lsls	r3, r3, #15
 80012a4:	429f      	cmp	r7, r3
 80012a6:	d200      	bcs.n	80012aa <__aeabi_fsub+0x3da>
 80012a8:	e726      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d300      	bcc.n	80012b0 <__aeabi_fsub+0x3e0>
 80012ae:	e723      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012b0:	2401      	movs	r4, #1
 80012b2:	4034      	ands	r4, r6
 80012b4:	0007      	movs	r7, r0
 80012b6:	e71f      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012b8:	0034      	movs	r4, r6
 80012ba:	468c      	mov	ip, r1
 80012bc:	e67e      	b.n	8000fbc <__aeabi_fsub+0xec>
 80012be:	2301      	movs	r3, #1
 80012c0:	08cf      	lsrs	r7, r1, #3
 80012c2:	e680      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012c4:	2300      	movs	r3, #0
 80012c6:	e67e      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012c8:	2020      	movs	r0, #32
 80012ca:	4665      	mov	r5, ip
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	4085      	lsls	r5, r0
 80012d0:	4663      	mov	r3, ip
 80012d2:	0028      	movs	r0, r5
 80012d4:	40f3      	lsrs	r3, r6
 80012d6:	1e45      	subs	r5, r0, #1
 80012d8:	41a8      	sbcs	r0, r5
 80012da:	4303      	orrs	r3, r0
 80012dc:	469c      	mov	ip, r3
 80012de:	0015      	movs	r5, r2
 80012e0:	448c      	add	ip, r1
 80012e2:	e76d      	b.n	80011c0 <__aeabi_fsub+0x2f0>
 80012e4:	2302      	movs	r3, #2
 80012e6:	08cf      	lsrs	r7, r1, #3
 80012e8:	e66d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012ea:	1b0f      	subs	r7, r1, r4
 80012ec:	017b      	lsls	r3, r7, #5
 80012ee:	d528      	bpl.n	8001342 <__aeabi_fsub+0x472>
 80012f0:	01bf      	lsls	r7, r7, #6
 80012f2:	09bf      	lsrs	r7, r7, #6
 80012f4:	0038      	movs	r0, r7
 80012f6:	f001 f86d 	bl	80023d4 <__clzsi2>
 80012fa:	003b      	movs	r3, r7
 80012fc:	3805      	subs	r0, #5
 80012fe:	4083      	lsls	r3, r0
 8001300:	0034      	movs	r4, r6
 8001302:	2501      	movs	r5, #1
 8001304:	e6ca      	b.n	800109c <__aeabi_fsub+0x1cc>
 8001306:	2900      	cmp	r1, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x43c>
 800130a:	e6b5      	b.n	8001078 <__aeabi_fsub+0x1a8>
 800130c:	2401      	movs	r4, #1
 800130e:	0007      	movs	r7, r0
 8001310:	4034      	ands	r4, r6
 8001312:	e658      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001314:	4663      	mov	r3, ip
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x44c>
 800131a:	e6e9      	b.n	80010f0 <__aeabi_fsub+0x220>
 800131c:	2900      	cmp	r1, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_fsub+0x452>
 8001320:	e6ea      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	03db      	lsls	r3, r3, #15
 8001326:	429f      	cmp	r7, r3
 8001328:	d200      	bcs.n	800132c <__aeabi_fsub+0x45c>
 800132a:	e6e5      	b.n	80010f8 <__aeabi_fsub+0x228>
 800132c:	4298      	cmp	r0, r3
 800132e:	d300      	bcc.n	8001332 <__aeabi_fsub+0x462>
 8001330:	e6e2      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001332:	0007      	movs	r7, r0
 8001334:	e6e0      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_fsub+0x46c>
 800133a:	e69e      	b.n	800107a <__aeabi_fsub+0x1aa>
 800133c:	2300      	movs	r3, #0
 800133e:	08cf      	lsrs	r7, r1, #3
 8001340:	e641      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001342:	0034      	movs	r4, r6
 8001344:	2301      	movs	r3, #1
 8001346:	08ff      	lsrs	r7, r7, #3
 8001348:	e63d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800134a:	2f00      	cmp	r7, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_fsub+0x480>
 800134e:	e693      	b.n	8001078 <__aeabi_fsub+0x1a8>
 8001350:	2300      	movs	r3, #0
 8001352:	08ff      	lsrs	r7, r7, #3
 8001354:	e637      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001356:	2300      	movs	r3, #0
 8001358:	08d7      	lsrs	r7, r2, #3
 800135a:	e634      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800135c:	2301      	movs	r3, #1
 800135e:	08cf      	lsrs	r7, r1, #3
 8001360:	e631      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	000b      	movs	r3, r1
 8001366:	04d2      	lsls	r2, r2, #19
 8001368:	2001      	movs	r0, #1
 800136a:	4013      	ands	r3, r2
 800136c:	4211      	tst	r1, r2
 800136e:	d000      	beq.n	8001372 <__aeabi_fsub+0x4a2>
 8001370:	e6ae      	b.n	80010d0 <__aeabi_fsub+0x200>
 8001372:	08cf      	lsrs	r7, r1, #3
 8001374:	e627      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <__aeabi_fsub+0x4ac>
 800137a:	e75f      	b.n	800123c <__aeabi_fsub+0x36c>
 800137c:	1b56      	subs	r6, r2, r5
 800137e:	2d00      	cmp	r5, #0
 8001380:	d101      	bne.n	8001386 <__aeabi_fsub+0x4b6>
 8001382:	0033      	movs	r3, r6
 8001384:	e6e7      	b.n	8001156 <__aeabi_fsub+0x286>
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	4660      	mov	r0, ip
 800138a:	04db      	lsls	r3, r3, #19
 800138c:	4318      	orrs	r0, r3
 800138e:	4684      	mov	ip, r0
 8001390:	e6eb      	b.n	800116a <__aeabi_fsub+0x29a>
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	7dffffff 	.word	0x7dffffff

08001398 <__aeabi_fcmpun>:
 8001398:	0243      	lsls	r3, r0, #9
 800139a:	024a      	lsls	r2, r1, #9
 800139c:	0040      	lsls	r0, r0, #1
 800139e:	0049      	lsls	r1, r1, #1
 80013a0:	0a5b      	lsrs	r3, r3, #9
 80013a2:	0a52      	lsrs	r2, r2, #9
 80013a4:	0e09      	lsrs	r1, r1, #24
 80013a6:	0e00      	lsrs	r0, r0, #24
 80013a8:	28ff      	cmp	r0, #255	@ 0xff
 80013aa:	d006      	beq.n	80013ba <__aeabi_fcmpun+0x22>
 80013ac:	2000      	movs	r0, #0
 80013ae:	29ff      	cmp	r1, #255	@ 0xff
 80013b0:	d102      	bne.n	80013b8 <__aeabi_fcmpun+0x20>
 80013b2:	1e53      	subs	r3, r2, #1
 80013b4:	419a      	sbcs	r2, r3
 80013b6:	0010      	movs	r0, r2
 80013b8:	4770      	bx	lr
 80013ba:	38fe      	subs	r0, #254	@ 0xfe
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1fb      	bne.n	80013b8 <__aeabi_fcmpun+0x20>
 80013c0:	e7f4      	b.n	80013ac <__aeabi_fcmpun+0x14>
 80013c2:	46c0      	nop			@ (mov r8, r8)

080013c4 <__aeabi_f2iz>:
 80013c4:	0241      	lsls	r1, r0, #9
 80013c6:	0042      	lsls	r2, r0, #1
 80013c8:	0fc3      	lsrs	r3, r0, #31
 80013ca:	0a49      	lsrs	r1, r1, #9
 80013cc:	2000      	movs	r0, #0
 80013ce:	0e12      	lsrs	r2, r2, #24
 80013d0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013d2:	dd03      	ble.n	80013dc <__aeabi_f2iz+0x18>
 80013d4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013d6:	dd02      	ble.n	80013de <__aeabi_f2iz+0x1a>
 80013d8:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <__aeabi_f2iz+0x3c>)
 80013da:	1898      	adds	r0, r3, r2
 80013dc:	4770      	bx	lr
 80013de:	2080      	movs	r0, #128	@ 0x80
 80013e0:	0400      	lsls	r0, r0, #16
 80013e2:	4301      	orrs	r1, r0
 80013e4:	2a95      	cmp	r2, #149	@ 0x95
 80013e6:	dc07      	bgt.n	80013f8 <__aeabi_f2iz+0x34>
 80013e8:	2096      	movs	r0, #150	@ 0x96
 80013ea:	1a82      	subs	r2, r0, r2
 80013ec:	40d1      	lsrs	r1, r2
 80013ee:	4248      	negs	r0, r1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <__aeabi_f2iz+0x18>
 80013f4:	0008      	movs	r0, r1
 80013f6:	e7f1      	b.n	80013dc <__aeabi_f2iz+0x18>
 80013f8:	3a96      	subs	r2, #150	@ 0x96
 80013fa:	4091      	lsls	r1, r2
 80013fc:	e7f7      	b.n	80013ee <__aeabi_f2iz+0x2a>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	7fffffff 	.word	0x7fffffff

08001404 <__aeabi_i2f>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	2800      	cmp	r0, #0
 8001408:	d012      	beq.n	8001430 <__aeabi_i2f+0x2c>
 800140a:	17c3      	asrs	r3, r0, #31
 800140c:	18c5      	adds	r5, r0, r3
 800140e:	405d      	eors	r5, r3
 8001410:	0fc4      	lsrs	r4, r0, #31
 8001412:	0028      	movs	r0, r5
 8001414:	f000 ffde 	bl	80023d4 <__clzsi2>
 8001418:	239e      	movs	r3, #158	@ 0x9e
 800141a:	1a1b      	subs	r3, r3, r0
 800141c:	2b96      	cmp	r3, #150	@ 0x96
 800141e:	dc0f      	bgt.n	8001440 <__aeabi_i2f+0x3c>
 8001420:	2808      	cmp	r0, #8
 8001422:	d038      	beq.n	8001496 <__aeabi_i2f+0x92>
 8001424:	3808      	subs	r0, #8
 8001426:	4085      	lsls	r5, r0
 8001428:	026d      	lsls	r5, r5, #9
 800142a:	0a6d      	lsrs	r5, r5, #9
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	e002      	b.n	8001436 <__aeabi_i2f+0x32>
 8001430:	2400      	movs	r4, #0
 8001432:	2000      	movs	r0, #0
 8001434:	2500      	movs	r5, #0
 8001436:	05c0      	lsls	r0, r0, #23
 8001438:	4328      	orrs	r0, r5
 800143a:	07e4      	lsls	r4, r4, #31
 800143c:	4320      	orrs	r0, r4
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	2b99      	cmp	r3, #153	@ 0x99
 8001442:	dc14      	bgt.n	800146e <__aeabi_i2f+0x6a>
 8001444:	1f42      	subs	r2, r0, #5
 8001446:	4095      	lsls	r5, r2
 8001448:	002a      	movs	r2, r5
 800144a:	4915      	ldr	r1, [pc, #84]	@ (80014a0 <__aeabi_i2f+0x9c>)
 800144c:	4011      	ands	r1, r2
 800144e:	0755      	lsls	r5, r2, #29
 8001450:	d01c      	beq.n	800148c <__aeabi_i2f+0x88>
 8001452:	250f      	movs	r5, #15
 8001454:	402a      	ands	r2, r5
 8001456:	2a04      	cmp	r2, #4
 8001458:	d018      	beq.n	800148c <__aeabi_i2f+0x88>
 800145a:	3104      	adds	r1, #4
 800145c:	08ca      	lsrs	r2, r1, #3
 800145e:	0149      	lsls	r1, r1, #5
 8001460:	d515      	bpl.n	800148e <__aeabi_i2f+0x8a>
 8001462:	239f      	movs	r3, #159	@ 0x9f
 8001464:	0252      	lsls	r2, r2, #9
 8001466:	1a18      	subs	r0, r3, r0
 8001468:	0a55      	lsrs	r5, r2, #9
 800146a:	b2c0      	uxtb	r0, r0
 800146c:	e7e3      	b.n	8001436 <__aeabi_i2f+0x32>
 800146e:	2205      	movs	r2, #5
 8001470:	0029      	movs	r1, r5
 8001472:	1a12      	subs	r2, r2, r0
 8001474:	40d1      	lsrs	r1, r2
 8001476:	0002      	movs	r2, r0
 8001478:	321b      	adds	r2, #27
 800147a:	4095      	lsls	r5, r2
 800147c:	002a      	movs	r2, r5
 800147e:	1e55      	subs	r5, r2, #1
 8001480:	41aa      	sbcs	r2, r5
 8001482:	430a      	orrs	r2, r1
 8001484:	4906      	ldr	r1, [pc, #24]	@ (80014a0 <__aeabi_i2f+0x9c>)
 8001486:	4011      	ands	r1, r2
 8001488:	0755      	lsls	r5, r2, #29
 800148a:	d1e2      	bne.n	8001452 <__aeabi_i2f+0x4e>
 800148c:	08ca      	lsrs	r2, r1, #3
 800148e:	0252      	lsls	r2, r2, #9
 8001490:	0a55      	lsrs	r5, r2, #9
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	e7cf      	b.n	8001436 <__aeabi_i2f+0x32>
 8001496:	026d      	lsls	r5, r5, #9
 8001498:	0a6d      	lsrs	r5, r5, #9
 800149a:	308e      	adds	r0, #142	@ 0x8e
 800149c:	e7cb      	b.n	8001436 <__aeabi_i2f+0x32>
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	fbffffff 	.word	0xfbffffff

080014a4 <__aeabi_dmul>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4657      	mov	r7, sl
 80014a8:	464e      	mov	r6, r9
 80014aa:	46de      	mov	lr, fp
 80014ac:	4645      	mov	r5, r8
 80014ae:	b5e0      	push	{r5, r6, r7, lr}
 80014b0:	001f      	movs	r7, r3
 80014b2:	030b      	lsls	r3, r1, #12
 80014b4:	0b1b      	lsrs	r3, r3, #12
 80014b6:	0016      	movs	r6, r2
 80014b8:	469a      	mov	sl, r3
 80014ba:	0fca      	lsrs	r2, r1, #31
 80014bc:	004b      	lsls	r3, r1, #1
 80014be:	0004      	movs	r4, r0
 80014c0:	4691      	mov	r9, r2
 80014c2:	b085      	sub	sp, #20
 80014c4:	0d5b      	lsrs	r3, r3, #21
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x26>
 80014c8:	e1cf      	b.n	800186a <__aeabi_dmul+0x3c6>
 80014ca:	4acd      	ldr	r2, [pc, #820]	@ (8001800 <__aeabi_dmul+0x35c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d055      	beq.n	800157c <__aeabi_dmul+0xd8>
 80014d0:	4651      	mov	r1, sl
 80014d2:	0f42      	lsrs	r2, r0, #29
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	430a      	orrs	r2, r1
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	4311      	orrs	r1, r2
 80014de:	00c2      	lsls	r2, r0, #3
 80014e0:	4690      	mov	r8, r2
 80014e2:	4ac8      	ldr	r2, [pc, #800]	@ (8001804 <__aeabi_dmul+0x360>)
 80014e4:	468a      	mov	sl, r1
 80014e6:	4693      	mov	fp, r2
 80014e8:	449b      	add	fp, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	033c      	lsls	r4, r7, #12
 80014f2:	007b      	lsls	r3, r7, #1
 80014f4:	0ffa      	lsrs	r2, r7, #31
 80014f6:	9601      	str	r6, [sp, #4]
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x5e>
 8001500:	e188      	b.n	8001814 <__aeabi_dmul+0x370>
 8001502:	4abf      	ldr	r2, [pc, #764]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x66>
 8001508:	e092      	b.n	8001630 <__aeabi_dmul+0x18c>
 800150a:	4abe      	ldr	r2, [pc, #760]	@ (8001804 <__aeabi_dmul+0x360>)
 800150c:	4694      	mov	ip, r2
 800150e:	4463      	add	r3, ip
 8001510:	449b      	add	fp, r3
 8001512:	2d0a      	cmp	r5, #10
 8001514:	dc42      	bgt.n	800159c <__aeabi_dmul+0xf8>
 8001516:	00e4      	lsls	r4, r4, #3
 8001518:	0f73      	lsrs	r3, r6, #29
 800151a:	4323      	orrs	r3, r4
 800151c:	2480      	movs	r4, #128	@ 0x80
 800151e:	4649      	mov	r1, r9
 8001520:	0424      	lsls	r4, r4, #16
 8001522:	431c      	orrs	r4, r3
 8001524:	00f3      	lsls	r3, r6, #3
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9b00      	ldr	r3, [sp, #0]
 800152a:	2000      	movs	r0, #0
 800152c:	4059      	eors	r1, r3
 800152e:	b2cb      	uxtb	r3, r1
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	2d02      	cmp	r5, #2
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dmul+0x94>
 8001536:	e094      	b.n	8001662 <__aeabi_dmul+0x1be>
 8001538:	2301      	movs	r3, #1
 800153a:	40ab      	lsls	r3, r5
 800153c:	001d      	movs	r5, r3
 800153e:	23a6      	movs	r3, #166	@ 0xa6
 8001540:	002a      	movs	r2, r5
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	401a      	ands	r2, r3
 8001546:	421d      	tst	r5, r3
 8001548:	d000      	beq.n	800154c <__aeabi_dmul+0xa8>
 800154a:	e229      	b.n	80019a0 <__aeabi_dmul+0x4fc>
 800154c:	2390      	movs	r3, #144	@ 0x90
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	421d      	tst	r5, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0xb2>
 8001554:	e24d      	b.n	80019f2 <__aeabi_dmul+0x54e>
 8001556:	2300      	movs	r3, #0
 8001558:	2480      	movs	r4, #128	@ 0x80
 800155a:	4699      	mov	r9, r3
 800155c:	0324      	lsls	r4, r4, #12
 800155e:	4ba8      	ldr	r3, [pc, #672]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001560:	0010      	movs	r0, r2
 8001562:	464a      	mov	r2, r9
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	4323      	orrs	r3, r4
 8001568:	07d2      	lsls	r2, r2, #31
 800156a:	4313      	orrs	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	b005      	add	sp, #20
 8001570:	bcf0      	pop	{r4, r5, r6, r7}
 8001572:	46bb      	mov	fp, r7
 8001574:	46b2      	mov	sl, r6
 8001576:	46a9      	mov	r9, r5
 8001578:	46a0      	mov	r8, r4
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157c:	4652      	mov	r2, sl
 800157e:	4302      	orrs	r2, r0
 8001580:	4690      	mov	r8, r2
 8001582:	d000      	beq.n	8001586 <__aeabi_dmul+0xe2>
 8001584:	e1ac      	b.n	80018e0 <__aeabi_dmul+0x43c>
 8001586:	469b      	mov	fp, r3
 8001588:	2302      	movs	r3, #2
 800158a:	4692      	mov	sl, r2
 800158c:	2508      	movs	r5, #8
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	e7ae      	b.n	80014f0 <__aeabi_dmul+0x4c>
 8001592:	9b00      	ldr	r3, [sp, #0]
 8001594:	46a2      	mov	sl, r4
 8001596:	4699      	mov	r9, r3
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4698      	mov	r8, r3
 800159c:	9b02      	ldr	r3, [sp, #8]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0x100>
 80015a2:	e1ca      	b.n	800193a <__aeabi_dmul+0x496>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x106>
 80015a8:	e192      	b.n	80018d0 <__aeabi_dmul+0x42c>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d110      	bne.n	80015d0 <__aeabi_dmul+0x12c>
 80015ae:	2300      	movs	r3, #0
 80015b0:	2400      	movs	r4, #0
 80015b2:	2200      	movs	r2, #0
 80015b4:	e7d4      	b.n	8001560 <__aeabi_dmul+0xbc>
 80015b6:	2201      	movs	r2, #1
 80015b8:	087b      	lsrs	r3, r7, #1
 80015ba:	403a      	ands	r2, r7
 80015bc:	4313      	orrs	r3, r2
 80015be:	4652      	mov	r2, sl
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4698      	mov	r8, r3
 80015c6:	4653      	mov	r3, sl
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	469a      	mov	sl, r3
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	4699      	mov	r9, r3
 80015d0:	465b      	mov	r3, fp
 80015d2:	1c58      	adds	r0, r3, #1
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	445b      	add	r3, fp
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dc00      	bgt.n	80015e0 <__aeabi_dmul+0x13c>
 80015de:	e1b1      	b.n	8001944 <__aeabi_dmul+0x4a0>
 80015e0:	4642      	mov	r2, r8
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	d00b      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015e6:	220f      	movs	r2, #15
 80015e8:	4641      	mov	r1, r8
 80015ea:	400a      	ands	r2, r1
 80015ec:	2a04      	cmp	r2, #4
 80015ee:	d006      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015f0:	4642      	mov	r2, r8
 80015f2:	1d11      	adds	r1, r2, #4
 80015f4:	4541      	cmp	r1, r8
 80015f6:	4192      	sbcs	r2, r2
 80015f8:	4688      	mov	r8, r1
 80015fa:	4252      	negs	r2, r2
 80015fc:	4492      	add	sl, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	01d2      	lsls	r2, r2, #7
 8001602:	d506      	bpl.n	8001612 <__aeabi_dmul+0x16e>
 8001604:	4652      	mov	r2, sl
 8001606:	4b80      	ldr	r3, [pc, #512]	@ (8001808 <__aeabi_dmul+0x364>)
 8001608:	401a      	ands	r2, r3
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4692      	mov	sl, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	18c3      	adds	r3, r0, r3
 8001612:	4a7e      	ldr	r2, [pc, #504]	@ (800180c <__aeabi_dmul+0x368>)
 8001614:	4293      	cmp	r3, r2
 8001616:	dd00      	ble.n	800161a <__aeabi_dmul+0x176>
 8001618:	e18f      	b.n	800193a <__aeabi_dmul+0x496>
 800161a:	4642      	mov	r2, r8
 800161c:	08d1      	lsrs	r1, r2, #3
 800161e:	4652      	mov	r2, sl
 8001620:	0752      	lsls	r2, r2, #29
 8001622:	430a      	orrs	r2, r1
 8001624:	4651      	mov	r1, sl
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	024c      	lsls	r4, r1, #9
 800162a:	0b24      	lsrs	r4, r4, #12
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	e797      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001630:	4b73      	ldr	r3, [pc, #460]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001632:	4326      	orrs	r6, r4
 8001634:	469c      	mov	ip, r3
 8001636:	44e3      	add	fp, ip
 8001638:	2e00      	cmp	r6, #0
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x19a>
 800163c:	e16f      	b.n	800191e <__aeabi_dmul+0x47a>
 800163e:	2303      	movs	r3, #3
 8001640:	4649      	mov	r1, r9
 8001642:	431d      	orrs	r5, r3
 8001644:	9b00      	ldr	r3, [sp, #0]
 8001646:	4059      	eors	r1, r3
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2d0a      	cmp	r5, #10
 800164e:	dd00      	ble.n	8001652 <__aeabi_dmul+0x1ae>
 8001650:	e133      	b.n	80018ba <__aeabi_dmul+0x416>
 8001652:	2301      	movs	r3, #1
 8001654:	40ab      	lsls	r3, r5
 8001656:	001d      	movs	r5, r3
 8001658:	2303      	movs	r3, #3
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2288      	movs	r2, #136	@ 0x88
 800165e:	422a      	tst	r2, r5
 8001660:	d197      	bne.n	8001592 <__aeabi_dmul+0xee>
 8001662:	4642      	mov	r2, r8
 8001664:	4643      	mov	r3, r8
 8001666:	0412      	lsls	r2, r2, #16
 8001668:	0c12      	lsrs	r2, r2, #16
 800166a:	0016      	movs	r6, r2
 800166c:	9801      	ldr	r0, [sp, #4]
 800166e:	0c1d      	lsrs	r5, r3, #16
 8001670:	0c03      	lsrs	r3, r0, #16
 8001672:	0400      	lsls	r0, r0, #16
 8001674:	0c00      	lsrs	r0, r0, #16
 8001676:	4346      	muls	r6, r0
 8001678:	46b4      	mov	ip, r6
 800167a:	001e      	movs	r6, r3
 800167c:	436e      	muls	r6, r5
 800167e:	9600      	str	r6, [sp, #0]
 8001680:	0016      	movs	r6, r2
 8001682:	0007      	movs	r7, r0
 8001684:	435e      	muls	r6, r3
 8001686:	4661      	mov	r1, ip
 8001688:	46b0      	mov	r8, r6
 800168a:	436f      	muls	r7, r5
 800168c:	0c0e      	lsrs	r6, r1, #16
 800168e:	44b8      	add	r8, r7
 8001690:	4446      	add	r6, r8
 8001692:	42b7      	cmp	r7, r6
 8001694:	d905      	bls.n	80016a2 <__aeabi_dmul+0x1fe>
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	4688      	mov	r8, r1
 800169c:	9f00      	ldr	r7, [sp, #0]
 800169e:	4447      	add	r7, r8
 80016a0:	9700      	str	r7, [sp, #0]
 80016a2:	4661      	mov	r1, ip
 80016a4:	0409      	lsls	r1, r1, #16
 80016a6:	0c09      	lsrs	r1, r1, #16
 80016a8:	0c37      	lsrs	r7, r6, #16
 80016aa:	0436      	lsls	r6, r6, #16
 80016ac:	468c      	mov	ip, r1
 80016ae:	0031      	movs	r1, r6
 80016b0:	4461      	add	r1, ip
 80016b2:	9101      	str	r1, [sp, #4]
 80016b4:	0011      	movs	r1, r2
 80016b6:	0c26      	lsrs	r6, r4, #16
 80016b8:	0424      	lsls	r4, r4, #16
 80016ba:	0c24      	lsrs	r4, r4, #16
 80016bc:	4361      	muls	r1, r4
 80016be:	468c      	mov	ip, r1
 80016c0:	0021      	movs	r1, r4
 80016c2:	4369      	muls	r1, r5
 80016c4:	4689      	mov	r9, r1
 80016c6:	4661      	mov	r1, ip
 80016c8:	0c09      	lsrs	r1, r1, #16
 80016ca:	4688      	mov	r8, r1
 80016cc:	4372      	muls	r2, r6
 80016ce:	444a      	add	r2, r9
 80016d0:	4442      	add	r2, r8
 80016d2:	4375      	muls	r5, r6
 80016d4:	4591      	cmp	r9, r2
 80016d6:	d903      	bls.n	80016e0 <__aeabi_dmul+0x23c>
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0249      	lsls	r1, r1, #9
 80016dc:	4688      	mov	r8, r1
 80016de:	4445      	add	r5, r8
 80016e0:	0c11      	lsrs	r1, r2, #16
 80016e2:	4688      	mov	r8, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	0c09      	lsrs	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0412      	lsls	r2, r2, #16
 80016ee:	4462      	add	r2, ip
 80016f0:	18b9      	adds	r1, r7, r2
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	4651      	mov	r1, sl
 80016f6:	0c09      	lsrs	r1, r1, #16
 80016f8:	468c      	mov	ip, r1
 80016fa:	4651      	mov	r1, sl
 80016fc:	040f      	lsls	r7, r1, #16
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	0039      	movs	r1, r7
 8001702:	4341      	muls	r1, r0
 8001704:	4445      	add	r5, r8
 8001706:	4688      	mov	r8, r1
 8001708:	4661      	mov	r1, ip
 800170a:	4341      	muls	r1, r0
 800170c:	468a      	mov	sl, r1
 800170e:	4641      	mov	r1, r8
 8001710:	4660      	mov	r0, ip
 8001712:	0c09      	lsrs	r1, r1, #16
 8001714:	4689      	mov	r9, r1
 8001716:	4358      	muls	r0, r3
 8001718:	437b      	muls	r3, r7
 800171a:	4453      	add	r3, sl
 800171c:	444b      	add	r3, r9
 800171e:	459a      	cmp	sl, r3
 8001720:	d903      	bls.n	800172a <__aeabi_dmul+0x286>
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0249      	lsls	r1, r1, #9
 8001726:	4689      	mov	r9, r1
 8001728:	4448      	add	r0, r9
 800172a:	0c19      	lsrs	r1, r3, #16
 800172c:	4689      	mov	r9, r1
 800172e:	4641      	mov	r1, r8
 8001730:	0409      	lsls	r1, r1, #16
 8001732:	0c09      	lsrs	r1, r1, #16
 8001734:	4688      	mov	r8, r1
 8001736:	0039      	movs	r1, r7
 8001738:	4361      	muls	r1, r4
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	4443      	add	r3, r8
 800173e:	4688      	mov	r8, r1
 8001740:	4661      	mov	r1, ip
 8001742:	434c      	muls	r4, r1
 8001744:	4371      	muls	r1, r6
 8001746:	468c      	mov	ip, r1
 8001748:	4641      	mov	r1, r8
 800174a:	4377      	muls	r7, r6
 800174c:	0c0e      	lsrs	r6, r1, #16
 800174e:	193f      	adds	r7, r7, r4
 8001750:	19f6      	adds	r6, r6, r7
 8001752:	4448      	add	r0, r9
 8001754:	42b4      	cmp	r4, r6
 8001756:	d903      	bls.n	8001760 <__aeabi_dmul+0x2bc>
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0249      	lsls	r1, r1, #9
 800175c:	4689      	mov	r9, r1
 800175e:	44cc      	add	ip, r9
 8001760:	9902      	ldr	r1, [sp, #8]
 8001762:	9f00      	ldr	r7, [sp, #0]
 8001764:	4689      	mov	r9, r1
 8001766:	0431      	lsls	r1, r6, #16
 8001768:	444f      	add	r7, r9
 800176a:	4689      	mov	r9, r1
 800176c:	4641      	mov	r1, r8
 800176e:	4297      	cmp	r7, r2
 8001770:	4192      	sbcs	r2, r2
 8001772:	040c      	lsls	r4, r1, #16
 8001774:	0c24      	lsrs	r4, r4, #16
 8001776:	444c      	add	r4, r9
 8001778:	18ff      	adds	r7, r7, r3
 800177a:	4252      	negs	r2, r2
 800177c:	1964      	adds	r4, r4, r5
 800177e:	18a1      	adds	r1, r4, r2
 8001780:	429f      	cmp	r7, r3
 8001782:	419b      	sbcs	r3, r3
 8001784:	4688      	mov	r8, r1
 8001786:	4682      	mov	sl, r0
 8001788:	425b      	negs	r3, r3
 800178a:	4699      	mov	r9, r3
 800178c:	4590      	cmp	r8, r2
 800178e:	4192      	sbcs	r2, r2
 8001790:	42ac      	cmp	r4, r5
 8001792:	41a4      	sbcs	r4, r4
 8001794:	44c2      	add	sl, r8
 8001796:	44d1      	add	r9, sl
 8001798:	4252      	negs	r2, r2
 800179a:	4264      	negs	r4, r4
 800179c:	4314      	orrs	r4, r2
 800179e:	4599      	cmp	r9, r3
 80017a0:	419b      	sbcs	r3, r3
 80017a2:	4582      	cmp	sl, r0
 80017a4:	4192      	sbcs	r2, r2
 80017a6:	425b      	negs	r3, r3
 80017a8:	4252      	negs	r2, r2
 80017aa:	4313      	orrs	r3, r2
 80017ac:	464a      	mov	r2, r9
 80017ae:	0c36      	lsrs	r6, r6, #16
 80017b0:	19a4      	adds	r4, r4, r6
 80017b2:	18e3      	adds	r3, r4, r3
 80017b4:	4463      	add	r3, ip
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	0dd2      	lsrs	r2, r2, #23
 80017ba:	431a      	orrs	r2, r3
 80017bc:	9901      	ldr	r1, [sp, #4]
 80017be:	4692      	mov	sl, r2
 80017c0:	027a      	lsls	r2, r7, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	1e50      	subs	r0, r2, #1
 80017c6:	4182      	sbcs	r2, r0
 80017c8:	0dff      	lsrs	r7, r7, #23
 80017ca:	4317      	orrs	r7, r2
 80017cc:	464a      	mov	r2, r9
 80017ce:	0252      	lsls	r2, r2, #9
 80017d0:	4317      	orrs	r7, r2
 80017d2:	46b8      	mov	r8, r7
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	d500      	bpl.n	80017da <__aeabi_dmul+0x336>
 80017d8:	e6ed      	b.n	80015b6 <__aeabi_dmul+0x112>
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <__aeabi_dmul+0x36c>)
 80017dc:	9a03      	ldr	r2, [sp, #12]
 80017de:	445b      	add	r3, fp
 80017e0:	4691      	mov	r9, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc00      	bgt.n	80017e8 <__aeabi_dmul+0x344>
 80017e6:	e0ac      	b.n	8001942 <__aeabi_dmul+0x49e>
 80017e8:	003a      	movs	r2, r7
 80017ea:	0752      	lsls	r2, r2, #29
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x34c>
 80017ee:	e710      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017f0:	220f      	movs	r2, #15
 80017f2:	4658      	mov	r0, fp
 80017f4:	403a      	ands	r2, r7
 80017f6:	2a04      	cmp	r2, #4
 80017f8:	d000      	beq.n	80017fc <__aeabi_dmul+0x358>
 80017fa:	e6f9      	b.n	80015f0 <__aeabi_dmul+0x14c>
 80017fc:	e709      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	000003ff 	.word	0x000003ff
 8001814:	0022      	movs	r2, r4
 8001816:	4332      	orrs	r2, r6
 8001818:	d06f      	beq.n	80018fa <__aeabi_dmul+0x456>
 800181a:	2c00      	cmp	r4, #0
 800181c:	d100      	bne.n	8001820 <__aeabi_dmul+0x37c>
 800181e:	e0c2      	b.n	80019a6 <__aeabi_dmul+0x502>
 8001820:	0020      	movs	r0, r4
 8001822:	f000 fdd7 	bl	80023d4 <__clzsi2>
 8001826:	0002      	movs	r2, r0
 8001828:	0003      	movs	r3, r0
 800182a:	3a0b      	subs	r2, #11
 800182c:	201d      	movs	r0, #29
 800182e:	1a82      	subs	r2, r0, r2
 8001830:	0030      	movs	r0, r6
 8001832:	0019      	movs	r1, r3
 8001834:	40d0      	lsrs	r0, r2
 8001836:	3908      	subs	r1, #8
 8001838:	408c      	lsls	r4, r1
 800183a:	0002      	movs	r2, r0
 800183c:	4322      	orrs	r2, r4
 800183e:	0034      	movs	r4, r6
 8001840:	408c      	lsls	r4, r1
 8001842:	4659      	mov	r1, fp
 8001844:	1acb      	subs	r3, r1, r3
 8001846:	4986      	ldr	r1, [pc, #536]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 8001848:	468b      	mov	fp, r1
 800184a:	449b      	add	fp, r3
 800184c:	2d0a      	cmp	r5, #10
 800184e:	dd00      	ble.n	8001852 <__aeabi_dmul+0x3ae>
 8001850:	e6a4      	b.n	800159c <__aeabi_dmul+0xf8>
 8001852:	4649      	mov	r1, r9
 8001854:	9b00      	ldr	r3, [sp, #0]
 8001856:	9401      	str	r4, [sp, #4]
 8001858:	4059      	eors	r1, r3
 800185a:	b2cb      	uxtb	r3, r1
 800185c:	0014      	movs	r4, r2
 800185e:	2000      	movs	r0, #0
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	2d02      	cmp	r5, #2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x3c4>
 8001866:	e667      	b.n	8001538 <__aeabi_dmul+0x94>
 8001868:	e6fb      	b.n	8001662 <__aeabi_dmul+0x1be>
 800186a:	4653      	mov	r3, sl
 800186c:	4303      	orrs	r3, r0
 800186e:	4698      	mov	r8, r3
 8001870:	d03c      	beq.n	80018ec <__aeabi_dmul+0x448>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x3d6>
 8001878:	e0a3      	b.n	80019c2 <__aeabi_dmul+0x51e>
 800187a:	4650      	mov	r0, sl
 800187c:	f000 fdaa 	bl	80023d4 <__clzsi2>
 8001880:	230b      	movs	r3, #11
 8001882:	425b      	negs	r3, r3
 8001884:	469c      	mov	ip, r3
 8001886:	0002      	movs	r2, r0
 8001888:	4484      	add	ip, r0
 800188a:	0011      	movs	r1, r2
 800188c:	4650      	mov	r0, sl
 800188e:	3908      	subs	r1, #8
 8001890:	4088      	lsls	r0, r1
 8001892:	231d      	movs	r3, #29
 8001894:	4680      	mov	r8, r0
 8001896:	4660      	mov	r0, ip
 8001898:	1a1b      	subs	r3, r3, r0
 800189a:	0020      	movs	r0, r4
 800189c:	40d8      	lsrs	r0, r3
 800189e:	0003      	movs	r3, r0
 80018a0:	4640      	mov	r0, r8
 80018a2:	4303      	orrs	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	0023      	movs	r3, r4
 80018a8:	408b      	lsls	r3, r1
 80018aa:	4698      	mov	r8, r3
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 80018ae:	2500      	movs	r5, #0
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	e61a      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ba:	2d0f      	cmp	r5, #15
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0x41c>
 80018be:	e0c9      	b.n	8001a54 <__aeabi_dmul+0x5b0>
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	4652      	mov	r2, sl
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	421a      	tst	r2, r3
 80018c8:	d002      	beq.n	80018d0 <__aeabi_dmul+0x42c>
 80018ca:	421c      	tst	r4, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dmul+0x42c>
 80018ce:	e092      	b.n	80019f6 <__aeabi_dmul+0x552>
 80018d0:	2480      	movs	r4, #128	@ 0x80
 80018d2:	4653      	mov	r3, sl
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	431c      	orrs	r4, r3
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	4642      	mov	r2, r8
 80018dc:	0b24      	lsrs	r4, r4, #12
 80018de:	e63e      	b.n	800155e <__aeabi_dmul+0xba>
 80018e0:	469b      	mov	fp, r3
 80018e2:	2303      	movs	r3, #3
 80018e4:	4680      	mov	r8, r0
 80018e6:	250c      	movs	r5, #12
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	e601      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	469a      	mov	sl, r3
 80018f0:	469b      	mov	fp, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	2504      	movs	r5, #4
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	e5fa      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018fa:	2101      	movs	r1, #1
 80018fc:	430d      	orrs	r5, r1
 80018fe:	2d0a      	cmp	r5, #10
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x460>
 8001902:	e64b      	b.n	800159c <__aeabi_dmul+0xf8>
 8001904:	4649      	mov	r1, r9
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	4041      	eors	r1, r0
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	2d02      	cmp	r5, #2
 8001910:	dc00      	bgt.n	8001914 <__aeabi_dmul+0x470>
 8001912:	e096      	b.n	8001a42 <__aeabi_dmul+0x59e>
 8001914:	2300      	movs	r3, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2001      	movs	r0, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	e60c      	b.n	8001538 <__aeabi_dmul+0x94>
 800191e:	4649      	mov	r1, r9
 8001920:	2302      	movs	r3, #2
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	432b      	orrs	r3, r5
 8001926:	4051      	eors	r1, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	9203      	str	r2, [sp, #12]
 800192c:	2b0a      	cmp	r3, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x48e>
 8001930:	e634      	b.n	800159c <__aeabi_dmul+0xf8>
 8001932:	2d00      	cmp	r5, #0
 8001934:	d157      	bne.n	80019e6 <__aeabi_dmul+0x542>
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	4699      	mov	r9, r3
 800193a:	2400      	movs	r4, #0
 800193c:	2200      	movs	r2, #0
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <__aeabi_dmul+0x5c0>)
 8001940:	e60e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001942:	4658      	mov	r0, fp
 8001944:	2101      	movs	r1, #1
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	2938      	cmp	r1, #56	@ 0x38
 800194a:	dd00      	ble.n	800194e <__aeabi_dmul+0x4aa>
 800194c:	e62f      	b.n	80015ae <__aeabi_dmul+0x10a>
 800194e:	291f      	cmp	r1, #31
 8001950:	dd56      	ble.n	8001a00 <__aeabi_dmul+0x55c>
 8001952:	221f      	movs	r2, #31
 8001954:	4654      	mov	r4, sl
 8001956:	4252      	negs	r2, r2
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	40dc      	lsrs	r4, r3
 800195c:	2920      	cmp	r1, #32
 800195e:	d007      	beq.n	8001970 <__aeabi_dmul+0x4cc>
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <__aeabi_dmul+0x5c4>)
 8001962:	4642      	mov	r2, r8
 8001964:	469c      	mov	ip, r3
 8001966:	4653      	mov	r3, sl
 8001968:	4460      	add	r0, ip
 800196a:	4083      	lsls	r3, r0
 800196c:	431a      	orrs	r2, r3
 800196e:	4690      	mov	r8, r2
 8001970:	4642      	mov	r2, r8
 8001972:	2107      	movs	r1, #7
 8001974:	1e53      	subs	r3, r2, #1
 8001976:	419a      	sbcs	r2, r3
 8001978:	000b      	movs	r3, r1
 800197a:	4322      	orrs	r2, r4
 800197c:	4013      	ands	r3, r2
 800197e:	2400      	movs	r4, #0
 8001980:	4211      	tst	r1, r2
 8001982:	d009      	beq.n	8001998 <__aeabi_dmul+0x4f4>
 8001984:	230f      	movs	r3, #15
 8001986:	4013      	ands	r3, r2
 8001988:	2b04      	cmp	r3, #4
 800198a:	d05d      	beq.n	8001a48 <__aeabi_dmul+0x5a4>
 800198c:	1d11      	adds	r1, r2, #4
 800198e:	4291      	cmp	r1, r2
 8001990:	419b      	sbcs	r3, r3
 8001992:	000a      	movs	r2, r1
 8001994:	425b      	negs	r3, r3
 8001996:	075b      	lsls	r3, r3, #29
 8001998:	08d2      	lsrs	r2, r2, #3
 800199a:	431a      	orrs	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	e5df      	b.n	8001560 <__aeabi_dmul+0xbc>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	4699      	mov	r9, r3
 80019a4:	e5fa      	b.n	800159c <__aeabi_dmul+0xf8>
 80019a6:	9801      	ldr	r0, [sp, #4]
 80019a8:	f000 fd14 	bl	80023d4 <__clzsi2>
 80019ac:	0002      	movs	r2, r0
 80019ae:	0003      	movs	r3, r0
 80019b0:	3215      	adds	r2, #21
 80019b2:	3320      	adds	r3, #32
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dmul+0x516>
 80019b8:	e738      	b.n	800182c <__aeabi_dmul+0x388>
 80019ba:	9a01      	ldr	r2, [sp, #4]
 80019bc:	3808      	subs	r0, #8
 80019be:	4082      	lsls	r2, r0
 80019c0:	e73f      	b.n	8001842 <__aeabi_dmul+0x39e>
 80019c2:	f000 fd07 	bl	80023d4 <__clzsi2>
 80019c6:	2315      	movs	r3, #21
 80019c8:	469c      	mov	ip, r3
 80019ca:	4484      	add	ip, r0
 80019cc:	0002      	movs	r2, r0
 80019ce:	4663      	mov	r3, ip
 80019d0:	3220      	adds	r2, #32
 80019d2:	2b1c      	cmp	r3, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x534>
 80019d6:	e758      	b.n	800188a <__aeabi_dmul+0x3e6>
 80019d8:	2300      	movs	r3, #0
 80019da:	4698      	mov	r8, r3
 80019dc:	0023      	movs	r3, r4
 80019de:	3808      	subs	r0, #8
 80019e0:	4083      	lsls	r3, r0
 80019e2:	469a      	mov	sl, r3
 80019e4:	e762      	b.n	80018ac <__aeabi_dmul+0x408>
 80019e6:	001d      	movs	r5, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	2400      	movs	r4, #0
 80019ec:	2002      	movs	r0, #2
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	e5a2      	b.n	8001538 <__aeabi_dmul+0x94>
 80019f2:	9002      	str	r0, [sp, #8]
 80019f4:	e632      	b.n	800165c <__aeabi_dmul+0x1b8>
 80019f6:	431c      	orrs	r4, r3
 80019f8:	9b00      	ldr	r3, [sp, #0]
 80019fa:	9a01      	ldr	r2, [sp, #4]
 80019fc:	4699      	mov	r9, r3
 80019fe:	e5ae      	b.n	800155e <__aeabi_dmul+0xba>
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <__aeabi_dmul+0x5c8>)
 8001a02:	4652      	mov	r2, sl
 8001a04:	18c3      	adds	r3, r0, r3
 8001a06:	4640      	mov	r0, r8
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	40c8      	lsrs	r0, r1
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4098      	lsls	r0, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	1e58      	subs	r0, r3, #1
 8001a16:	4183      	sbcs	r3, r0
 8001a18:	4654      	mov	r4, sl
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	40cc      	lsrs	r4, r1
 8001a1e:	0753      	lsls	r3, r2, #29
 8001a20:	d009      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a22:	230f      	movs	r3, #15
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d005      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a2a:	1d13      	adds	r3, r2, #4
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	4192      	sbcs	r2, r2
 8001a30:	4252      	negs	r2, r2
 8001a32:	18a4      	adds	r4, r4, r2
 8001a34:	001a      	movs	r2, r3
 8001a36:	0223      	lsls	r3, r4, #8
 8001a38:	d508      	bpl.n	8001a4c <__aeabi_dmul+0x5a8>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	e58e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a42:	4689      	mov	r9, r1
 8001a44:	2400      	movs	r4, #0
 8001a46:	e58b      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e7a5      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a4c:	0763      	lsls	r3, r4, #29
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	0b24      	lsrs	r4, r4, #12
 8001a52:	e7a1      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a54:	9b00      	ldr	r3, [sp, #0]
 8001a56:	46a2      	mov	sl, r4
 8001a58:	4699      	mov	r9, r3
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	e737      	b.n	80018d0 <__aeabi_dmul+0x42c>
 8001a60:	fffffc0d 	.word	0xfffffc0d
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	0000043e 	.word	0x0000043e
 8001a6c:	0000041e 	.word	0x0000041e

08001a70 <__aeabi_dsub>:
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	4645      	mov	r5, r8
 8001a78:	46de      	mov	lr, fp
 8001a7a:	b5e0      	push	{r5, r6, r7, lr}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	9000      	str	r0, [sp, #0]
 8001a80:	9101      	str	r1, [sp, #4]
 8001a82:	030c      	lsls	r4, r1, #12
 8001a84:	004d      	lsls	r5, r1, #1
 8001a86:	0fce      	lsrs	r6, r1, #31
 8001a88:	0a61      	lsrs	r1, r4, #9
 8001a8a:	9c00      	ldr	r4, [sp, #0]
 8001a8c:	005f      	lsls	r7, r3, #1
 8001a8e:	0f64      	lsrs	r4, r4, #29
 8001a90:	430c      	orrs	r4, r1
 8001a92:	9900      	ldr	r1, [sp, #0]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	00c8      	lsls	r0, r1, #3
 8001a9a:	0319      	lsls	r1, r3, #12
 8001a9c:	0d7b      	lsrs	r3, r7, #21
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001aa4:	0fdb      	lsrs	r3, r3, #31
 8001aa6:	469c      	mov	ip, r3
 8001aa8:	0a4b      	lsrs	r3, r1, #9
 8001aaa:	9900      	ldr	r1, [sp, #0]
 8001aac:	4680      	mov	r8, r0
 8001aae:	0f49      	lsrs	r1, r1, #29
 8001ab0:	4319      	orrs	r1, r3
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	468b      	mov	fp, r1
 8001ab6:	00da      	lsls	r2, r3, #3
 8001ab8:	4692      	mov	sl, r2
 8001aba:	0d6d      	lsrs	r5, r5, #21
 8001abc:	45b9      	cmp	r9, r7
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x52>
 8001ac0:	e0bf      	b.n	8001c42 <__aeabi_dsub+0x1d2>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	4059      	eors	r1, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	468c      	mov	ip, r1
 8001acc:	1aeb      	subs	r3, r5, r3
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d075      	beq.n	8001bbe <__aeabi_dsub+0x14e>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dc00      	bgt.n	8001ad8 <__aeabi_dsub+0x68>
 8001ad6:	e2a3      	b.n	8002020 <__aeabi_dsub+0x5b0>
 8001ad8:	4649      	mov	r1, r9
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x70>
 8001ade:	e0ce      	b.n	8001c7e <__aeabi_dsub+0x20e>
 8001ae0:	42bd      	cmp	r5, r7
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x76>
 8001ae4:	e200      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001ae6:	2701      	movs	r7, #1
 8001ae8:	2b38      	cmp	r3, #56	@ 0x38
 8001aea:	dc19      	bgt.n	8001b20 <__aeabi_dsub+0xb0>
 8001aec:	2780      	movs	r7, #128	@ 0x80
 8001aee:	4659      	mov	r1, fp
 8001af0:	043f      	lsls	r7, r7, #16
 8001af2:	4339      	orrs	r1, r7
 8001af4:	468b      	mov	fp, r1
 8001af6:	2b1f      	cmp	r3, #31
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x8c>
 8001afa:	e1fa      	b.n	8001ef2 <__aeabi_dsub+0x482>
 8001afc:	2720      	movs	r7, #32
 8001afe:	1af9      	subs	r1, r7, r3
 8001b00:	468c      	mov	ip, r1
 8001b02:	4659      	mov	r1, fp
 8001b04:	4667      	mov	r7, ip
 8001b06:	40b9      	lsls	r1, r7
 8001b08:	000f      	movs	r7, r1
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	40d9      	lsrs	r1, r3
 8001b0e:	430f      	orrs	r7, r1
 8001b10:	4661      	mov	r1, ip
 8001b12:	408a      	lsls	r2, r1
 8001b14:	1e51      	subs	r1, r2, #1
 8001b16:	418a      	sbcs	r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	40d9      	lsrs	r1, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	1a64      	subs	r4, r4, r1
 8001b20:	1bc7      	subs	r7, r0, r7
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	4240      	negs	r0, r0
 8001b28:	1a24      	subs	r4, r4, r0
 8001b2a:	0223      	lsls	r3, r4, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0xc0>
 8001b2e:	e140      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001b30:	0264      	lsls	r4, r4, #9
 8001b32:	0a64      	lsrs	r4, r4, #9
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0xca>
 8001b38:	e154      	b.n	8001de4 <__aeabi_dsub+0x374>
 8001b3a:	0020      	movs	r0, r4
 8001b3c:	f000 fc4a 	bl	80023d4 <__clzsi2>
 8001b40:	0003      	movs	r3, r0
 8001b42:	3b08      	subs	r3, #8
 8001b44:	2120      	movs	r1, #32
 8001b46:	0038      	movs	r0, r7
 8001b48:	1aca      	subs	r2, r1, r3
 8001b4a:	40d0      	lsrs	r0, r2
 8001b4c:	409c      	lsls	r4, r3
 8001b4e:	0002      	movs	r2, r0
 8001b50:	409f      	lsls	r7, r3
 8001b52:	4322      	orrs	r2, r4
 8001b54:	429d      	cmp	r5, r3
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dsub+0xea>
 8001b58:	e1a6      	b.n	8001ea8 <__aeabi_dsub+0x438>
 8001b5a:	1b58      	subs	r0, r3, r5
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	1a09      	subs	r1, r1, r0
 8001b60:	003c      	movs	r4, r7
 8001b62:	408f      	lsls	r7, r1
 8001b64:	40c4      	lsrs	r4, r0
 8001b66:	1e7b      	subs	r3, r7, #1
 8001b68:	419f      	sbcs	r7, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4327      	orrs	r7, r4
 8001b70:	431f      	orrs	r7, r3
 8001b72:	40c2      	lsrs	r2, r0
 8001b74:	003b      	movs	r3, r7
 8001b76:	0014      	movs	r4, r2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x110>
 8001b7e:	e1f7      	b.n	8001f70 <__aeabi_dsub+0x500>
 8001b80:	077b      	lsls	r3, r7, #29
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x116>
 8001b84:	e377      	b.n	8002276 <__aeabi_dsub+0x806>
 8001b86:	230f      	movs	r3, #15
 8001b88:	0038      	movs	r0, r7
 8001b8a:	403b      	ands	r3, r7
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d004      	beq.n	8001b9a <__aeabi_dsub+0x12a>
 8001b90:	1d38      	adds	r0, r7, #4
 8001b92:	42b8      	cmp	r0, r7
 8001b94:	41bf      	sbcs	r7, r7
 8001b96:	427f      	negs	r7, r7
 8001b98:	19e4      	adds	r4, r4, r7
 8001b9a:	0223      	lsls	r3, r4, #8
 8001b9c:	d400      	bmi.n	8001ba0 <__aeabi_dsub+0x130>
 8001b9e:	e368      	b.n	8002272 <__aeabi_dsub+0x802>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001ba2:	3501      	adds	r5, #1
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x13a>
 8001ba8:	e0f4      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001bac:	056d      	lsls	r5, r5, #21
 8001bae:	401c      	ands	r4, r3
 8001bb0:	0d6d      	lsrs	r5, r5, #21
 8001bb2:	0767      	lsls	r7, r4, #29
 8001bb4:	08c0      	lsrs	r0, r0, #3
 8001bb6:	0264      	lsls	r4, r4, #9
 8001bb8:	4307      	orrs	r7, r0
 8001bba:	0b24      	lsrs	r4, r4, #12
 8001bbc:	e0ec      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc00      	bgt.n	8001bc4 <__aeabi_dsub+0x154>
 8001bc2:	e329      	b.n	8002218 <__aeabi_dsub+0x7a8>
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x15c>
 8001bca:	e0d6      	b.n	8001d7a <__aeabi_dsub+0x30a>
 8001bcc:	4659      	mov	r1, fp
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x164>
 8001bd2:	e12e      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001bd4:	1e59      	subs	r1, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x16c>
 8001bda:	e1e6      	b.n	8001faa <__aeabi_dsub+0x53a>
 8001bdc:	42bb      	cmp	r3, r7
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x172>
 8001be0:	e182      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001be2:	2701      	movs	r7, #1
 8001be4:	000b      	movs	r3, r1
 8001be6:	2938      	cmp	r1, #56	@ 0x38
 8001be8:	dc14      	bgt.n	8001c14 <__aeabi_dsub+0x1a4>
 8001bea:	2b1f      	cmp	r3, #31
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_dsub+0x180>
 8001bee:	e23c      	b.n	800206a <__aeabi_dsub+0x5fa>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1af9      	subs	r1, r7, r3
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	4667      	mov	r7, ip
 8001bfa:	40b9      	lsls	r1, r7
 8001bfc:	000f      	movs	r7, r1
 8001bfe:	0011      	movs	r1, r2
 8001c00:	40d9      	lsrs	r1, r3
 8001c02:	430f      	orrs	r7, r1
 8001c04:	4661      	mov	r1, ip
 8001c06:	408a      	lsls	r2, r1
 8001c08:	1e51      	subs	r1, r2, #1
 8001c0a:	418a      	sbcs	r2, r1
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	40d9      	lsrs	r1, r3
 8001c10:	4317      	orrs	r7, r2
 8001c12:	1864      	adds	r4, r4, r1
 8001c14:	183f      	adds	r7, r7, r0
 8001c16:	4287      	cmp	r7, r0
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	1824      	adds	r4, r4, r0
 8001c1e:	0223      	lsls	r3, r4, #8
 8001c20:	d400      	bmi.n	8001c24 <__aeabi_dsub+0x1b4>
 8001c22:	e0c6      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c26:	3501      	adds	r5, #1
 8001c28:	429d      	cmp	r5, r3
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1be>
 8001c2c:	e0b2      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4b69      	ldr	r3, [pc, #420]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001c32:	087a      	lsrs	r2, r7, #1
 8001c34:	401c      	ands	r4, r3
 8001c36:	4039      	ands	r1, r7
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	07e7      	lsls	r7, r4, #31
 8001c3c:	4317      	orrs	r7, r2
 8001c3e:	0864      	lsrs	r4, r4, #1
 8001c40:	e79e      	b.n	8001b80 <__aeabi_dsub+0x110>
 8001c42:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <__aeabi_dsub+0x36c>)
 8001c44:	4311      	orrs	r1, r2
 8001c46:	468a      	mov	sl, r1
 8001c48:	18eb      	adds	r3, r5, r3
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d028      	beq.n	8001ca0 <__aeabi_dsub+0x230>
 8001c4e:	4566      	cmp	r6, ip
 8001c50:	d02c      	beq.n	8001cac <__aeabi_dsub+0x23c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d05b      	beq.n	8001d0e <__aeabi_dsub+0x29e>
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x1ec>
 8001c5a:	e12c      	b.n	8001eb6 <__aeabi_dsub+0x446>
 8001c5c:	465b      	mov	r3, fp
 8001c5e:	4666      	mov	r6, ip
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	4317      	orrs	r7, r2
 8001c66:	08dd      	lsrs	r5, r3, #3
 8001c68:	003b      	movs	r3, r7
 8001c6a:	432b      	orrs	r3, r5
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x200>
 8001c6e:	e0e2      	b.n	8001e36 <__aeabi_dsub+0x3c6>
 8001c70:	2480      	movs	r4, #128	@ 0x80
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	432c      	orrs	r4, r5
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4d56      	ldr	r5, [pc, #344]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e08c      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001c7e:	4659      	mov	r1, fp
 8001c80:	4311      	orrs	r1, r2
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x216>
 8001c84:	e0d5      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x21e>
 8001c8c:	e1b9      	b.n	8002002 <__aeabi_dsub+0x592>
 8001c8e:	42bb      	cmp	r3, r7
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x224>
 8001c92:	e1b1      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001c94:	2701      	movs	r7, #1
 8001c96:	000b      	movs	r3, r1
 8001c98:	2938      	cmp	r1, #56	@ 0x38
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dsub+0x22e>
 8001c9c:	e740      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001c9e:	e72a      	b.n	8001af6 <__aeabi_dsub+0x86>
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	2701      	movs	r7, #1
 8001ca4:	4079      	eors	r1, r7
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	4566      	cmp	r6, ip
 8001caa:	d1d2      	bne.n	8001c52 <__aeabi_dsub+0x1e2>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x242>
 8001cb0:	e0c5      	b.n	8001e3e <__aeabi_dsub+0x3ce>
 8001cb2:	2d00      	cmp	r5, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x248>
 8001cb6:	e155      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 8001cb8:	464b      	mov	r3, r9
 8001cba:	0025      	movs	r5, r4
 8001cbc:	4305      	orrs	r5, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x252>
 8001cc0:	e212      	b.n	80020e8 <__aeabi_dsub+0x678>
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x25c>
 8001cca:	e249      	b.n	8002160 <__aeabi_dsub+0x6f0>
 8001ccc:	4d41      	ldr	r5, [pc, #260]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x264>
 8001cd2:	e28f      	b.n	80021f4 <__aeabi_dsub+0x784>
 8001cd4:	2701      	movs	r7, #1
 8001cd6:	2938      	cmp	r1, #56	@ 0x38
 8001cd8:	dc11      	bgt.n	8001cfe <__aeabi_dsub+0x28e>
 8001cda:	4663      	mov	r3, ip
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0x272>
 8001ce0:	e25b      	b.n	800219a <__aeabi_dsub+0x72a>
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	0027      	movs	r7, r4
 8001ce8:	1a5b      	subs	r3, r3, r1
 8001cea:	0005      	movs	r5, r0
 8001cec:	4098      	lsls	r0, r3
 8001cee:	409f      	lsls	r7, r3
 8001cf0:	40cd      	lsrs	r5, r1
 8001cf2:	1e43      	subs	r3, r0, #1
 8001cf4:	4198      	sbcs	r0, r3
 8001cf6:	40cc      	lsrs	r4, r1
 8001cf8:	432f      	orrs	r7, r5
 8001cfa:	4307      	orrs	r7, r0
 8001cfc:	44a3      	add	fp, r4
 8001cfe:	18bf      	adds	r7, r7, r2
 8001d00:	4297      	cmp	r7, r2
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	4252      	negs	r2, r2
 8001d06:	445a      	add	r2, fp
 8001d08:	0014      	movs	r4, r2
 8001d0a:	464d      	mov	r5, r9
 8001d0c:	e787      	b.n	8001c1e <__aeabi_dsub+0x1ae>
 8001d0e:	4f34      	ldr	r7, [pc, #208]	@ (8001de0 <__aeabi_dsub+0x370>)
 8001d10:	1c6b      	adds	r3, r5, #1
 8001d12:	423b      	tst	r3, r7
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x2a8>
 8001d16:	e0b6      	b.n	8001e86 <__aeabi_dsub+0x416>
 8001d18:	4659      	mov	r1, fp
 8001d1a:	0023      	movs	r3, r4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	000f      	movs	r7, r1
 8001d20:	4303      	orrs	r3, r0
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dsub+0x2b8>
 8001d26:	e126      	b.n	8001f76 <__aeabi_dsub+0x506>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x2be>
 8001d2c:	e1c0      	b.n	80020b0 <__aeabi_dsub+0x640>
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x2c4>
 8001d32:	e0a1      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	4698      	mov	r8, r3
 8001d38:	465b      	mov	r3, fp
 8001d3a:	4540      	cmp	r0, r8
 8001d3c:	41ad      	sbcs	r5, r5
 8001d3e:	1ae3      	subs	r3, r4, r3
 8001d40:	426d      	negs	r5, r5
 8001d42:	1b5b      	subs	r3, r3, r5
 8001d44:	2580      	movs	r5, #128	@ 0x80
 8001d46:	042d      	lsls	r5, r5, #16
 8001d48:	422b      	tst	r3, r5
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x2de>
 8001d4c:	e14b      	b.n	8001fe6 <__aeabi_dsub+0x576>
 8001d4e:	465b      	mov	r3, fp
 8001d50:	1a10      	subs	r0, r2, r0
 8001d52:	4282      	cmp	r2, r0
 8001d54:	4192      	sbcs	r2, r2
 8001d56:	1b1c      	subs	r4, r3, r4
 8001d58:	0007      	movs	r7, r0
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	4252      	negs	r2, r2
 8001d60:	1aa4      	subs	r4, r4, r2
 8001d62:	4327      	orrs	r7, r4
 8001d64:	401e      	ands	r6, r3
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x2fc>
 8001d6a:	e142      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001d6c:	422c      	tst	r4, r5
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x302>
 8001d70:	e26d      	b.n	800224e <__aeabi_dsub+0x7de>
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001d74:	2501      	movs	r5, #1
 8001d76:	401c      	ands	r4, r3
 8001d78:	e71b      	b.n	8001bb2 <__aeabi_dsub+0x142>
 8001d7a:	42bd      	cmp	r5, r7
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x310>
 8001d7e:	e13b      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001d80:	2701      	movs	r7, #1
 8001d82:	2b38      	cmp	r3, #56	@ 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x318>
 8001d86:	e745      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8001d88:	2780      	movs	r7, #128	@ 0x80
 8001d8a:	4659      	mov	r1, fp
 8001d8c:	043f      	lsls	r7, r7, #16
 8001d8e:	4339      	orrs	r1, r7
 8001d90:	468b      	mov	fp, r1
 8001d92:	e72a      	b.n	8001bea <__aeabi_dsub+0x17a>
 8001d94:	2400      	movs	r4, #0
 8001d96:	2700      	movs	r7, #0
 8001d98:	052d      	lsls	r5, r5, #20
 8001d9a:	4325      	orrs	r5, r4
 8001d9c:	07f6      	lsls	r6, r6, #31
 8001d9e:	4335      	orrs	r5, r6
 8001da0:	0038      	movs	r0, r7
 8001da2:	0029      	movs	r1, r5
 8001da4:	b003      	add	sp, #12
 8001da6:	bcf0      	pop	{r4, r5, r6, r7}
 8001da8:	46bb      	mov	fp, r7
 8001daa:	46b2      	mov	sl, r6
 8001dac:	46a9      	mov	r9, r5
 8001dae:	46a0      	mov	r8, r4
 8001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db2:	077b      	lsls	r3, r7, #29
 8001db4:	d004      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001db6:	230f      	movs	r3, #15
 8001db8:	403b      	ands	r3, r7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001dbe:	e6e7      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001dc0:	002b      	movs	r3, r5
 8001dc2:	08f8      	lsrs	r0, r7, #3
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001dc6:	0767      	lsls	r7, r4, #29
 8001dc8:	4307      	orrs	r7, r0
 8001dca:	08e5      	lsrs	r5, r4, #3
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x362>
 8001dd0:	e74a      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001dd2:	e0a5      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	fffff801 	.word	0xfffff801
 8001de0:	000007fe 	.word	0x000007fe
 8001de4:	0038      	movs	r0, r7
 8001de6:	f000 faf5 	bl	80023d4 <__clzsi2>
 8001dea:	0003      	movs	r3, r0
 8001dec:	3318      	adds	r3, #24
 8001dee:	2b1f      	cmp	r3, #31
 8001df0:	dc00      	bgt.n	8001df4 <__aeabi_dsub+0x384>
 8001df2:	e6a7      	b.n	8001b44 <__aeabi_dsub+0xd4>
 8001df4:	003a      	movs	r2, r7
 8001df6:	3808      	subs	r0, #8
 8001df8:	4082      	lsls	r2, r0
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	dd00      	ble.n	8001e00 <__aeabi_dsub+0x390>
 8001dfe:	e08a      	b.n	8001f16 <__aeabi_dsub+0x4a6>
 8001e00:	1b5b      	subs	r3, r3, r5
 8001e02:	1c58      	adds	r0, r3, #1
 8001e04:	281f      	cmp	r0, #31
 8001e06:	dc00      	bgt.n	8001e0a <__aeabi_dsub+0x39a>
 8001e08:	e1d8      	b.n	80021bc <__aeabi_dsub+0x74c>
 8001e0a:	0017      	movs	r7, r2
 8001e0c:	3b1f      	subs	r3, #31
 8001e0e:	40df      	lsrs	r7, r3
 8001e10:	2820      	cmp	r0, #32
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dsub+0x3b0>
 8001e14:	2340      	movs	r3, #64	@ 0x40
 8001e16:	1a1b      	subs	r3, r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	1e53      	subs	r3, r2, #1
 8001e1c:	419a      	sbcs	r2, r3
 8001e1e:	4317      	orrs	r7, r2
 8001e20:	2500      	movs	r5, #0
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3b8>
 8001e26:	e0e5      	b.n	8001ff4 <__aeabi_dsub+0x584>
 8001e28:	077b      	lsls	r3, r7, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x3be>
 8001e2c:	e6ab      	b.n	8001b86 <__aeabi_dsub+0x116>
 8001e2e:	002c      	movs	r4, r5
 8001e30:	e7c6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001e32:	08c0      	lsrs	r0, r0, #3
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001e36:	2700      	movs	r7, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4dd1      	ldr	r5, [pc, #836]	@ (8002180 <__aeabi_dsub+0x710>)
 8001e3c:	e7ac      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001e3e:	4fd1      	ldr	r7, [pc, #836]	@ (8002184 <__aeabi_dsub+0x714>)
 8001e40:	1c6b      	adds	r3, r5, #1
 8001e42:	423b      	tst	r3, r7
 8001e44:	d171      	bne.n	8001f2a <__aeabi_dsub+0x4ba>
 8001e46:	0023      	movs	r3, r4
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x3e0>
 8001e4e:	e14e      	b.n	80020ee <__aeabi_dsub+0x67e>
 8001e50:	4657      	mov	r7, sl
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x3e8>
 8001e56:	e1b5      	b.n	80021c4 <__aeabi_dsub+0x754>
 8001e58:	2f00      	cmp	r7, #0
 8001e5a:	d00d      	beq.n	8001e78 <__aeabi_dsub+0x408>
 8001e5c:	1883      	adds	r3, r0, r2
 8001e5e:	4283      	cmp	r3, r0
 8001e60:	4180      	sbcs	r0, r0
 8001e62:	445c      	add	r4, fp
 8001e64:	4240      	negs	r0, r0
 8001e66:	1824      	adds	r4, r4, r0
 8001e68:	0222      	lsls	r2, r4, #8
 8001e6a:	d500      	bpl.n	8001e6e <__aeabi_dsub+0x3fe>
 8001e6c:	e1c8      	b.n	8002200 <__aeabi_dsub+0x790>
 8001e6e:	001f      	movs	r7, r3
 8001e70:	4698      	mov	r8, r3
 8001e72:	4327      	orrs	r7, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x408>
 8001e76:	e0bc      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001e78:	4643      	mov	r3, r8
 8001e7a:	0767      	lsls	r7, r4, #29
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	431f      	orrs	r7, r3
 8001e80:	08e5      	lsrs	r5, r4, #3
 8001e82:	2300      	movs	r3, #0
 8001e84:	e04c      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001e86:	1a83      	subs	r3, r0, r2
 8001e88:	4698      	mov	r8, r3
 8001e8a:	465b      	mov	r3, fp
 8001e8c:	4540      	cmp	r0, r8
 8001e8e:	41bf      	sbcs	r7, r7
 8001e90:	1ae3      	subs	r3, r4, r3
 8001e92:	427f      	negs	r7, r7
 8001e94:	1bdb      	subs	r3, r3, r7
 8001e96:	021f      	lsls	r7, r3, #8
 8001e98:	d47c      	bmi.n	8001f94 <__aeabi_dsub+0x524>
 8001e9a:	4647      	mov	r7, r8
 8001e9c:	431f      	orrs	r7, r3
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x432>
 8001ea0:	e0a6      	b.n	8001ff0 <__aeabi_dsub+0x580>
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	4647      	mov	r7, r8
 8001ea6:	e645      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001ea8:	4cb7      	ldr	r4, [pc, #732]	@ (8002188 <__aeabi_dsub+0x718>)
 8001eaa:	1aed      	subs	r5, r5, r3
 8001eac:	4014      	ands	r4, r2
 8001eae:	077b      	lsls	r3, r7, #29
 8001eb0:	d000      	beq.n	8001eb4 <__aeabi_dsub+0x444>
 8001eb2:	e780      	b.n	8001db6 <__aeabi_dsub+0x346>
 8001eb4:	e784      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	0025      	movs	r5, r4
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	d066      	beq.n	8001f8c <__aeabi_dsub+0x51c>
 8001ebe:	1e5f      	subs	r7, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x456>
 8001ec4:	e0fc      	b.n	80020c0 <__aeabi_dsub+0x650>
 8001ec6:	4dae      	ldr	r5, [pc, #696]	@ (8002180 <__aeabi_dsub+0x710>)
 8001ec8:	42ab      	cmp	r3, r5
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x45e>
 8001ecc:	e15e      	b.n	800218c <__aeabi_dsub+0x71c>
 8001ece:	4666      	mov	r6, ip
 8001ed0:	2f38      	cmp	r7, #56	@ 0x38
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_dsub+0x466>
 8001ed4:	e0b4      	b.n	8002040 <__aeabi_dsub+0x5d0>
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	1a17      	subs	r7, r2, r0
 8001eda:	42ba      	cmp	r2, r7
 8001edc:	4192      	sbcs	r2, r2
 8001ede:	465b      	mov	r3, fp
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	1a9c      	subs	r4, r3, r2
 8001ee6:	e620      	b.n	8001b2a <__aeabi_dsub+0xba>
 8001ee8:	0767      	lsls	r7, r4, #29
 8001eea:	08c0      	lsrs	r0, r0, #3
 8001eec:	4307      	orrs	r7, r0
 8001eee:	08e5      	lsrs	r5, r4, #3
 8001ef0:	e6ba      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001ef2:	001f      	movs	r7, r3
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	3f20      	subs	r7, #32
 8001ef8:	40f9      	lsrs	r1, r7
 8001efa:	000f      	movs	r7, r1
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x49c>
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	4659      	mov	r1, fp
 8001f06:	4099      	lsls	r1, r3
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	4692      	mov	sl, r2
 8001f0c:	4653      	mov	r3, sl
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	4193      	sbcs	r3, r2
 8001f12:	431f      	orrs	r7, r3
 8001f14:	e604      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001f16:	1aeb      	subs	r3, r5, r3
 8001f18:	4d9b      	ldr	r5, [pc, #620]	@ (8002188 <__aeabi_dsub+0x718>)
 8001f1a:	4015      	ands	r5, r2
 8001f1c:	076f      	lsls	r7, r5, #29
 8001f1e:	08ed      	lsrs	r5, r5, #3
 8001f20:	032c      	lsls	r4, r5, #12
 8001f22:	055d      	lsls	r5, r3, #21
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0d6d      	lsrs	r5, r5, #21
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f2a:	4d95      	ldr	r5, [pc, #596]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f2c:	42ab      	cmp	r3, r5
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x4c2>
 8001f30:	e0d6      	b.n	80020e0 <__aeabi_dsub+0x670>
 8001f32:	1882      	adds	r2, r0, r2
 8001f34:	0021      	movs	r1, r4
 8001f36:	4282      	cmp	r2, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	4459      	add	r1, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1808      	adds	r0, r1, r0
 8001f40:	07c7      	lsls	r7, r0, #31
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	4317      	orrs	r7, r2
 8001f46:	0844      	lsrs	r4, r0, #1
 8001f48:	0752      	lsls	r2, r2, #29
 8001f4a:	d400      	bmi.n	8001f4e <__aeabi_dsub+0x4de>
 8001f4c:	e185      	b.n	800225a <__aeabi_dsub+0x7ea>
 8001f4e:	220f      	movs	r2, #15
 8001f50:	001d      	movs	r5, r3
 8001f52:	403a      	ands	r2, r7
 8001f54:	2a04      	cmp	r2, #4
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x4ea>
 8001f58:	e61a      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001f5a:	08ff      	lsrs	r7, r7, #3
 8001f5c:	0764      	lsls	r4, r4, #29
 8001f5e:	4327      	orrs	r7, r4
 8001f60:	0905      	lsrs	r5, r0, #4
 8001f62:	e7dd      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001f64:	465b      	mov	r3, fp
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	4317      	orrs	r7, r2
 8001f6c:	08dd      	lsrs	r5, r3, #3
 8001f6e:	e67b      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001f70:	2700      	movs	r7, #0
 8001f72:	2400      	movs	r4, #0
 8001f74:	e710      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x50c>
 8001f7a:	e0d6      	b.n	800212a <__aeabi_dsub+0x6ba>
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x512>
 8001f80:	e12f      	b.n	80021e2 <__aeabi_dsub+0x772>
 8001f82:	2480      	movs	r4, #128	@ 0x80
 8001f84:	2600      	movs	r6, #0
 8001f86:	4d7e      	ldr	r5, [pc, #504]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	e705      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f8c:	4666      	mov	r6, ip
 8001f8e:	465c      	mov	r4, fp
 8001f90:	08d0      	lsrs	r0, r2, #3
 8001f92:	e717      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001f94:	465b      	mov	r3, fp
 8001f96:	1a17      	subs	r7, r2, r0
 8001f98:	42ba      	cmp	r2, r7
 8001f9a:	4192      	sbcs	r2, r2
 8001f9c:	1b1c      	subs	r4, r3, r4
 8001f9e:	2601      	movs	r6, #1
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1aa4      	subs	r4, r4, r2
 8001fa6:	401e      	ands	r6, r3
 8001fa8:	e5c4      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001faa:	1883      	adds	r3, r0, r2
 8001fac:	4283      	cmp	r3, r0
 8001fae:	4180      	sbcs	r0, r0
 8001fb0:	445c      	add	r4, fp
 8001fb2:	4240      	negs	r0, r0
 8001fb4:	1825      	adds	r5, r4, r0
 8001fb6:	022a      	lsls	r2, r5, #8
 8001fb8:	d400      	bmi.n	8001fbc <__aeabi_dsub+0x54c>
 8001fba:	e0da      	b.n	8002172 <__aeabi_dsub+0x702>
 8001fbc:	4a72      	ldr	r2, [pc, #456]	@ (8002188 <__aeabi_dsub+0x718>)
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	4015      	ands	r5, r2
 8001fc2:	07ea      	lsls	r2, r5, #31
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	0869      	lsrs	r1, r5, #1
 8001fc8:	075b      	lsls	r3, r3, #29
 8001fca:	d400      	bmi.n	8001fce <__aeabi_dsub+0x55e>
 8001fcc:	e14a      	b.n	8002264 <__aeabi_dsub+0x7f4>
 8001fce:	230f      	movs	r3, #15
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x568>
 8001fd6:	e0fc      	b.n	80021d2 <__aeabi_dsub+0x762>
 8001fd8:	1d17      	adds	r7, r2, #4
 8001fda:	4297      	cmp	r7, r2
 8001fdc:	41a4      	sbcs	r4, r4
 8001fde:	4264      	negs	r4, r4
 8001fe0:	2502      	movs	r5, #2
 8001fe2:	1864      	adds	r4, r4, r1
 8001fe4:	e6ec      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001fe6:	4647      	mov	r7, r8
 8001fe8:	001c      	movs	r4, r3
 8001fea:	431f      	orrs	r7, r3
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 8001fee:	e743      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	e6cf      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001ff8:	08c0      	lsrs	r0, r0, #3
 8001ffa:	0767      	lsls	r7, r4, #29
 8001ffc:	4307      	orrs	r7, r0
 8001ffe:	08e5      	lsrs	r5, r4, #3
 8002000:	e632      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002002:	1a87      	subs	r7, r0, r2
 8002004:	465b      	mov	r3, fp
 8002006:	42b8      	cmp	r0, r7
 8002008:	4180      	sbcs	r0, r0
 800200a:	1ae4      	subs	r4, r4, r3
 800200c:	4240      	negs	r0, r0
 800200e:	1a24      	subs	r4, r4, r0
 8002010:	0223      	lsls	r3, r4, #8
 8002012:	d428      	bmi.n	8002066 <__aeabi_dsub+0x5f6>
 8002014:	0763      	lsls	r3, r4, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	431f      	orrs	r7, r3
 800201a:	08e5      	lsrs	r5, r4, #3
 800201c:	2301      	movs	r3, #1
 800201e:	e77f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d100      	bne.n	8002026 <__aeabi_dsub+0x5b6>
 8002024:	e673      	b.n	8001d0e <__aeabi_dsub+0x29e>
 8002026:	464b      	mov	r3, r9
 8002028:	1b5f      	subs	r7, r3, r5
 800202a:	003b      	movs	r3, r7
 800202c:	2d00      	cmp	r5, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x5c2>
 8002030:	e742      	b.n	8001eb8 <__aeabi_dsub+0x448>
 8002032:	2f38      	cmp	r7, #56	@ 0x38
 8002034:	dd00      	ble.n	8002038 <__aeabi_dsub+0x5c8>
 8002036:	e0ec      	b.n	8002212 <__aeabi_dsub+0x7a2>
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	000e      	movs	r6, r1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431c      	orrs	r4, r3
 8002040:	2f1f      	cmp	r7, #31
 8002042:	dc25      	bgt.n	8002090 <__aeabi_dsub+0x620>
 8002044:	2520      	movs	r5, #32
 8002046:	0023      	movs	r3, r4
 8002048:	1bed      	subs	r5, r5, r7
 800204a:	0001      	movs	r1, r0
 800204c:	40a8      	lsls	r0, r5
 800204e:	40ab      	lsls	r3, r5
 8002050:	40f9      	lsrs	r1, r7
 8002052:	1e45      	subs	r5, r0, #1
 8002054:	41a8      	sbcs	r0, r5
 8002056:	430b      	orrs	r3, r1
 8002058:	40fc      	lsrs	r4, r7
 800205a:	4318      	orrs	r0, r3
 800205c:	465b      	mov	r3, fp
 800205e:	1b1b      	subs	r3, r3, r4
 8002060:	469b      	mov	fp, r3
 8002062:	e739      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002064:	4666      	mov	r6, ip
 8002066:	2501      	movs	r5, #1
 8002068:	e562      	b.n	8001b30 <__aeabi_dsub+0xc0>
 800206a:	001f      	movs	r7, r3
 800206c:	4659      	mov	r1, fp
 800206e:	3f20      	subs	r7, #32
 8002070:	40f9      	lsrs	r1, r7
 8002072:	468c      	mov	ip, r1
 8002074:	2b20      	cmp	r3, #32
 8002076:	d005      	beq.n	8002084 <__aeabi_dsub+0x614>
 8002078:	2740      	movs	r7, #64	@ 0x40
 800207a:	4659      	mov	r1, fp
 800207c:	1afb      	subs	r3, r7, r3
 800207e:	4099      	lsls	r1, r3
 8002080:	430a      	orrs	r2, r1
 8002082:	4692      	mov	sl, r2
 8002084:	4657      	mov	r7, sl
 8002086:	1e7b      	subs	r3, r7, #1
 8002088:	419f      	sbcs	r7, r3
 800208a:	4663      	mov	r3, ip
 800208c:	431f      	orrs	r7, r3
 800208e:	e5c1      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8002090:	003b      	movs	r3, r7
 8002092:	0025      	movs	r5, r4
 8002094:	3b20      	subs	r3, #32
 8002096:	40dd      	lsrs	r5, r3
 8002098:	2f20      	cmp	r7, #32
 800209a:	d004      	beq.n	80020a6 <__aeabi_dsub+0x636>
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	1bdb      	subs	r3, r3, r7
 80020a0:	409c      	lsls	r4, r3
 80020a2:	4320      	orrs	r0, r4
 80020a4:	4680      	mov	r8, r0
 80020a6:	4640      	mov	r0, r8
 80020a8:	1e43      	subs	r3, r0, #1
 80020aa:	4198      	sbcs	r0, r3
 80020ac:	4328      	orrs	r0, r5
 80020ae:	e713      	b.n	8001ed8 <__aeabi_dsub+0x468>
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d09d      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 80020b4:	2601      	movs	r6, #1
 80020b6:	4663      	mov	r3, ip
 80020b8:	465c      	mov	r4, fp
 80020ba:	4690      	mov	r8, r2
 80020bc:	401e      	ands	r6, r3
 80020be:	e6db      	b.n	8001e78 <__aeabi_dsub+0x408>
 80020c0:	1a17      	subs	r7, r2, r0
 80020c2:	465b      	mov	r3, fp
 80020c4:	42ba      	cmp	r2, r7
 80020c6:	4192      	sbcs	r2, r2
 80020c8:	1b1c      	subs	r4, r3, r4
 80020ca:	4252      	negs	r2, r2
 80020cc:	1aa4      	subs	r4, r4, r2
 80020ce:	0223      	lsls	r3, r4, #8
 80020d0:	d4c8      	bmi.n	8002064 <__aeabi_dsub+0x5f4>
 80020d2:	0763      	lsls	r3, r4, #29
 80020d4:	08ff      	lsrs	r7, r7, #3
 80020d6:	431f      	orrs	r7, r3
 80020d8:	4666      	mov	r6, ip
 80020da:	2301      	movs	r3, #1
 80020dc:	08e5      	lsrs	r5, r4, #3
 80020de:	e71f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80020e0:	001d      	movs	r5, r3
 80020e2:	2400      	movs	r4, #0
 80020e4:	2700      	movs	r7, #0
 80020e6:	e657      	b.n	8001d98 <__aeabi_dsub+0x328>
 80020e8:	465c      	mov	r4, fp
 80020ea:	08d0      	lsrs	r0, r2, #3
 80020ec:	e66a      	b.n	8001dc4 <__aeabi_dsub+0x354>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x684>
 80020f2:	e737      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 80020f4:	4653      	mov	r3, sl
 80020f6:	08c0      	lsrs	r0, r0, #3
 80020f8:	0767      	lsls	r7, r4, #29
 80020fa:	4307      	orrs	r7, r0
 80020fc:	08e5      	lsrs	r5, r4, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x694>
 8002102:	e5b1      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	421d      	tst	r5, r3
 800210a:	d008      	beq.n	800211e <__aeabi_dsub+0x6ae>
 800210c:	4659      	mov	r1, fp
 800210e:	08c8      	lsrs	r0, r1, #3
 8002110:	4218      	tst	r0, r3
 8002112:	d104      	bne.n	800211e <__aeabi_dsub+0x6ae>
 8002114:	08d2      	lsrs	r2, r2, #3
 8002116:	0749      	lsls	r1, r1, #29
 8002118:	430a      	orrs	r2, r1
 800211a:	0017      	movs	r7, r2
 800211c:	0005      	movs	r5, r0
 800211e:	0f7b      	lsrs	r3, r7, #29
 8002120:	00ff      	lsls	r7, r7, #3
 8002122:	08ff      	lsrs	r7, r7, #3
 8002124:	075b      	lsls	r3, r3, #29
 8002126:	431f      	orrs	r7, r3
 8002128:	e59e      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800212a:	08c0      	lsrs	r0, r0, #3
 800212c:	0763      	lsls	r3, r4, #29
 800212e:	4318      	orrs	r0, r3
 8002130:	08e5      	lsrs	r5, r4, #3
 8002132:	2900      	cmp	r1, #0
 8002134:	d053      	beq.n	80021de <__aeabi_dsub+0x76e>
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	421d      	tst	r5, r3
 800213c:	d00a      	beq.n	8002154 <__aeabi_dsub+0x6e4>
 800213e:	4659      	mov	r1, fp
 8002140:	08cc      	lsrs	r4, r1, #3
 8002142:	421c      	tst	r4, r3
 8002144:	d106      	bne.n	8002154 <__aeabi_dsub+0x6e4>
 8002146:	2601      	movs	r6, #1
 8002148:	4663      	mov	r3, ip
 800214a:	0025      	movs	r5, r4
 800214c:	08d0      	lsrs	r0, r2, #3
 800214e:	0749      	lsls	r1, r1, #29
 8002150:	4308      	orrs	r0, r1
 8002152:	401e      	ands	r6, r3
 8002154:	0f47      	lsrs	r7, r0, #29
 8002156:	00c0      	lsls	r0, r0, #3
 8002158:	08c0      	lsrs	r0, r0, #3
 800215a:	077f      	lsls	r7, r7, #29
 800215c:	4307      	orrs	r7, r0
 800215e:	e583      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002160:	1883      	adds	r3, r0, r2
 8002162:	4293      	cmp	r3, r2
 8002164:	4192      	sbcs	r2, r2
 8002166:	445c      	add	r4, fp
 8002168:	4252      	negs	r2, r2
 800216a:	18a5      	adds	r5, r4, r2
 800216c:	022a      	lsls	r2, r5, #8
 800216e:	d500      	bpl.n	8002172 <__aeabi_dsub+0x702>
 8002170:	e724      	b.n	8001fbc <__aeabi_dsub+0x54c>
 8002172:	076f      	lsls	r7, r5, #29
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	431f      	orrs	r7, r3
 8002178:	08ed      	lsrs	r5, r5, #3
 800217a:	2301      	movs	r3, #1
 800217c:	e6d0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	000007ff 	.word	0x000007ff
 8002184:	000007fe 	.word	0x000007fe
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	465b      	mov	r3, fp
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	4666      	mov	r6, ip
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	e566      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800219a:	0025      	movs	r5, r4
 800219c:	3b20      	subs	r3, #32
 800219e:	40dd      	lsrs	r5, r3
 80021a0:	4663      	mov	r3, ip
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d005      	beq.n	80021b2 <__aeabi_dsub+0x742>
 80021a6:	2340      	movs	r3, #64	@ 0x40
 80021a8:	4661      	mov	r1, ip
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	409c      	lsls	r4, r3
 80021ae:	4320      	orrs	r0, r4
 80021b0:	4680      	mov	r8, r0
 80021b2:	4647      	mov	r7, r8
 80021b4:	1e7b      	subs	r3, r7, #1
 80021b6:	419f      	sbcs	r7, r3
 80021b8:	432f      	orrs	r7, r5
 80021ba:	e5a0      	b.n	8001cfe <__aeabi_dsub+0x28e>
 80021bc:	2120      	movs	r1, #32
 80021be:	2700      	movs	r7, #0
 80021c0:	1a09      	subs	r1, r1, r0
 80021c2:	e4d2      	b.n	8001b6a <__aeabi_dsub+0xfa>
 80021c4:	2f00      	cmp	r7, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x75a>
 80021c8:	e713      	b.n	8001ff2 <__aeabi_dsub+0x582>
 80021ca:	465c      	mov	r4, fp
 80021cc:	0017      	movs	r7, r2
 80021ce:	2500      	movs	r5, #0
 80021d0:	e5f6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 80021d2:	08d7      	lsrs	r7, r2, #3
 80021d4:	0749      	lsls	r1, r1, #29
 80021d6:	2302      	movs	r3, #2
 80021d8:	430f      	orrs	r7, r1
 80021da:	092d      	lsrs	r5, r5, #4
 80021dc:	e6a0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80021de:	0007      	movs	r7, r0
 80021e0:	e542      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021e2:	465b      	mov	r3, fp
 80021e4:	2601      	movs	r6, #1
 80021e6:	075f      	lsls	r7, r3, #29
 80021e8:	08dd      	lsrs	r5, r3, #3
 80021ea:	4663      	mov	r3, ip
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	4317      	orrs	r7, r2
 80021f0:	401e      	ands	r6, r3
 80021f2:	e539      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021f4:	465b      	mov	r3, fp
 80021f6:	08d2      	lsrs	r2, r2, #3
 80021f8:	075f      	lsls	r7, r3, #29
 80021fa:	4317      	orrs	r7, r2
 80021fc:	08dd      	lsrs	r5, r3, #3
 80021fe:	e533      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002200:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <__aeabi_dsub+0x80c>)
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	4022      	ands	r2, r4
 8002206:	0757      	lsls	r7, r2, #29
 8002208:	0252      	lsls	r2, r2, #9
 800220a:	2501      	movs	r5, #1
 800220c:	431f      	orrs	r7, r3
 800220e:	0b14      	lsrs	r4, r2, #12
 8002210:	e5c2      	b.n	8001d98 <__aeabi_dsub+0x328>
 8002212:	000e      	movs	r6, r1
 8002214:	2001      	movs	r0, #1
 8002216:	e65f      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <__aeabi_dsub+0x7c8>
 800221c:	464b      	mov	r3, r9
 800221e:	1b5b      	subs	r3, r3, r5
 8002220:	469c      	mov	ip, r3
 8002222:	2d00      	cmp	r5, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x7b8>
 8002226:	e548      	b.n	8001cba <__aeabi_dsub+0x24a>
 8002228:	2701      	movs	r7, #1
 800222a:	2b38      	cmp	r3, #56	@ 0x38
 800222c:	dd00      	ble.n	8002230 <__aeabi_dsub+0x7c0>
 800222e:	e566      	b.n	8001cfe <__aeabi_dsub+0x28e>
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431c      	orrs	r4, r3
 8002236:	e550      	b.n	8001cda <__aeabi_dsub+0x26a>
 8002238:	1c6b      	adds	r3, r5, #1
 800223a:	4d11      	ldr	r5, [pc, #68]	@ (8002280 <__aeabi_dsub+0x810>)
 800223c:	422b      	tst	r3, r5
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x7d2>
 8002240:	e673      	b.n	8001f2a <__aeabi_dsub+0x4ba>
 8002242:	4659      	mov	r1, fp
 8002244:	0023      	movs	r3, r4
 8002246:	4311      	orrs	r1, r2
 8002248:	468a      	mov	sl, r1
 800224a:	4303      	orrs	r3, r0
 800224c:	e600      	b.n	8001e50 <__aeabi_dsub+0x3e0>
 800224e:	0767      	lsls	r7, r4, #29
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	2300      	movs	r3, #0
 8002254:	4307      	orrs	r7, r0
 8002256:	08e5      	lsrs	r5, r4, #3
 8002258:	e662      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800225a:	0764      	lsls	r4, r4, #29
 800225c:	08ff      	lsrs	r7, r7, #3
 800225e:	4327      	orrs	r7, r4
 8002260:	0905      	lsrs	r5, r0, #4
 8002262:	e65d      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002264:	08d2      	lsrs	r2, r2, #3
 8002266:	0749      	lsls	r1, r1, #29
 8002268:	4311      	orrs	r1, r2
 800226a:	000f      	movs	r7, r1
 800226c:	2302      	movs	r3, #2
 800226e:	092d      	lsrs	r5, r5, #4
 8002270:	e656      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002272:	0007      	movs	r7, r0
 8002274:	e5a4      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8002276:	0038      	movs	r0, r7
 8002278:	e48f      	b.n	8001b9a <__aeabi_dsub+0x12a>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	000007fe 	.word	0x000007fe

08002284 <__aeabi_d2iz>:
 8002284:	000b      	movs	r3, r1
 8002286:	0002      	movs	r2, r0
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4d16      	ldr	r5, [pc, #88]	@ (80022e4 <__aeabi_d2iz+0x60>)
 800228c:	030c      	lsls	r4, r1, #12
 800228e:	b082      	sub	sp, #8
 8002290:	0049      	lsls	r1, r1, #1
 8002292:	2000      	movs	r0, #0
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	0d49      	lsrs	r1, r1, #21
 800229c:	0fde      	lsrs	r6, r3, #31
 800229e:	42a9      	cmp	r1, r5
 80022a0:	dd04      	ble.n	80022ac <__aeabi_d2iz+0x28>
 80022a2:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <__aeabi_d2iz+0x64>)
 80022a4:	4281      	cmp	r1, r0
 80022a6:	dd03      	ble.n	80022b0 <__aeabi_d2iz+0x2c>
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <__aeabi_d2iz+0x68>)
 80022aa:	18f0      	adds	r0, r6, r3
 80022ac:	b002      	add	sp, #8
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	2080      	movs	r0, #128	@ 0x80
 80022b2:	0340      	lsls	r0, r0, #13
 80022b4:	4320      	orrs	r0, r4
 80022b6:	4c0e      	ldr	r4, [pc, #56]	@ (80022f0 <__aeabi_d2iz+0x6c>)
 80022b8:	1a64      	subs	r4, r4, r1
 80022ba:	2c1f      	cmp	r4, #31
 80022bc:	dd08      	ble.n	80022d0 <__aeabi_d2iz+0x4c>
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <__aeabi_d2iz+0x70>)
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	40d8      	lsrs	r0, r3
 80022c4:	0003      	movs	r3, r0
 80022c6:	4258      	negs	r0, r3
 80022c8:	2e00      	cmp	r6, #0
 80022ca:	d1ef      	bne.n	80022ac <__aeabi_d2iz+0x28>
 80022cc:	0018      	movs	r0, r3
 80022ce:	e7ed      	b.n	80022ac <__aeabi_d2iz+0x28>
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <__aeabi_d2iz+0x74>)
 80022d2:	9a00      	ldr	r2, [sp, #0]
 80022d4:	469c      	mov	ip, r3
 80022d6:	0003      	movs	r3, r0
 80022d8:	4461      	add	r1, ip
 80022da:	408b      	lsls	r3, r1
 80022dc:	40e2      	lsrs	r2, r4
 80022de:	4313      	orrs	r3, r2
 80022e0:	e7f1      	b.n	80022c6 <__aeabi_d2iz+0x42>
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	000003fe 	.word	0x000003fe
 80022e8:	0000041d 	.word	0x0000041d
 80022ec:	7fffffff 	.word	0x7fffffff
 80022f0:	00000433 	.word	0x00000433
 80022f4:	00000413 	.word	0x00000413
 80022f8:	fffffbed 	.word	0xfffffbed

080022fc <__aeabi_i2d>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	2800      	cmp	r0, #0
 8002300:	d016      	beq.n	8002330 <__aeabi_i2d+0x34>
 8002302:	17c3      	asrs	r3, r0, #31
 8002304:	18c5      	adds	r5, r0, r3
 8002306:	405d      	eors	r5, r3
 8002308:	0fc4      	lsrs	r4, r0, #31
 800230a:	0028      	movs	r0, r5
 800230c:	f000 f862 	bl	80023d4 <__clzsi2>
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <__aeabi_i2d+0x58>)
 8002312:	1a1b      	subs	r3, r3, r0
 8002314:	055b      	lsls	r3, r3, #21
 8002316:	0d5b      	lsrs	r3, r3, #21
 8002318:	280a      	cmp	r0, #10
 800231a:	dc14      	bgt.n	8002346 <__aeabi_i2d+0x4a>
 800231c:	0002      	movs	r2, r0
 800231e:	002e      	movs	r6, r5
 8002320:	3215      	adds	r2, #21
 8002322:	4096      	lsls	r6, r2
 8002324:	220b      	movs	r2, #11
 8002326:	1a12      	subs	r2, r2, r0
 8002328:	40d5      	lsrs	r5, r2
 800232a:	032d      	lsls	r5, r5, #12
 800232c:	0b2d      	lsrs	r5, r5, #12
 800232e:	e003      	b.n	8002338 <__aeabi_i2d+0x3c>
 8002330:	2400      	movs	r4, #0
 8002332:	2300      	movs	r3, #0
 8002334:	2500      	movs	r5, #0
 8002336:	2600      	movs	r6, #0
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	432b      	orrs	r3, r5
 800233c:	07e4      	lsls	r4, r4, #31
 800233e:	4323      	orrs	r3, r4
 8002340:	0030      	movs	r0, r6
 8002342:	0019      	movs	r1, r3
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	380b      	subs	r0, #11
 8002348:	4085      	lsls	r5, r0
 800234a:	032d      	lsls	r5, r5, #12
 800234c:	2600      	movs	r6, #0
 800234e:	0b2d      	lsrs	r5, r5, #12
 8002350:	e7f2      	b.n	8002338 <__aeabi_i2d+0x3c>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	0000041e 	.word	0x0000041e

08002358 <__aeabi_cdrcmple>:
 8002358:	4684      	mov	ip, r0
 800235a:	0010      	movs	r0, r2
 800235c:	4662      	mov	r2, ip
 800235e:	468c      	mov	ip, r1
 8002360:	0019      	movs	r1, r3
 8002362:	4663      	mov	r3, ip
 8002364:	e000      	b.n	8002368 <__aeabi_cdcmpeq>
 8002366:	46c0      	nop			@ (mov r8, r8)

08002368 <__aeabi_cdcmpeq>:
 8002368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800236a:	f000 f905 	bl	8002578 <__ledf2>
 800236e:	2800      	cmp	r0, #0
 8002370:	d401      	bmi.n	8002376 <__aeabi_cdcmpeq+0xe>
 8002372:	2100      	movs	r1, #0
 8002374:	42c8      	cmn	r0, r1
 8002376:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002378 <__aeabi_dcmpeq>:
 8002378:	b510      	push	{r4, lr}
 800237a:	f000 f849 	bl	8002410 <__eqdf2>
 800237e:	4240      	negs	r0, r0
 8002380:	3001      	adds	r0, #1
 8002382:	bd10      	pop	{r4, pc}

08002384 <__aeabi_dcmplt>:
 8002384:	b510      	push	{r4, lr}
 8002386:	f000 f8f7 	bl	8002578 <__ledf2>
 800238a:	2800      	cmp	r0, #0
 800238c:	db01      	blt.n	8002392 <__aeabi_dcmplt+0xe>
 800238e:	2000      	movs	r0, #0
 8002390:	bd10      	pop	{r4, pc}
 8002392:	2001      	movs	r0, #1
 8002394:	bd10      	pop	{r4, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)

08002398 <__aeabi_dcmple>:
 8002398:	b510      	push	{r4, lr}
 800239a:	f000 f8ed 	bl	8002578 <__ledf2>
 800239e:	2800      	cmp	r0, #0
 80023a0:	dd01      	ble.n	80023a6 <__aeabi_dcmple+0xe>
 80023a2:	2000      	movs	r0, #0
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	2001      	movs	r0, #1
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)

080023ac <__aeabi_dcmpgt>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	f000 f873 	bl	8002498 <__gedf2>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	dc01      	bgt.n	80023ba <__aeabi_dcmpgt+0xe>
 80023b6:	2000      	movs	r0, #0
 80023b8:	bd10      	pop	{r4, pc}
 80023ba:	2001      	movs	r0, #1
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)

080023c0 <__aeabi_dcmpge>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	f000 f869 	bl	8002498 <__gedf2>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	da01      	bge.n	80023ce <__aeabi_dcmpge+0xe>
 80023ca:	2000      	movs	r0, #0
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	2001      	movs	r0, #1
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)

080023d4 <__clzsi2>:
 80023d4:	211c      	movs	r1, #28
 80023d6:	2301      	movs	r3, #1
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	4298      	cmp	r0, r3
 80023dc:	d301      	bcc.n	80023e2 <__clzsi2+0xe>
 80023de:	0c00      	lsrs	r0, r0, #16
 80023e0:	3910      	subs	r1, #16
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d301      	bcc.n	80023ec <__clzsi2+0x18>
 80023e8:	0a00      	lsrs	r0, r0, #8
 80023ea:	3908      	subs	r1, #8
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0x22>
 80023f2:	0900      	lsrs	r0, r0, #4
 80023f4:	3904      	subs	r1, #4
 80023f6:	a202      	add	r2, pc, #8	@ (adr r2, 8002400 <__clzsi2+0x2c>)
 80023f8:	5c10      	ldrb	r0, [r2, r0]
 80023fa:	1840      	adds	r0, r0, r1
 80023fc:	4770      	bx	lr
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	02020304 	.word	0x02020304
 8002404:	01010101 	.word	0x01010101
	...

08002410 <__eqdf2>:
 8002410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002412:	4657      	mov	r7, sl
 8002414:	46de      	mov	lr, fp
 8002416:	464e      	mov	r6, r9
 8002418:	4645      	mov	r5, r8
 800241a:	b5e0      	push	{r5, r6, r7, lr}
 800241c:	000d      	movs	r5, r1
 800241e:	0004      	movs	r4, r0
 8002420:	0fe8      	lsrs	r0, r5, #31
 8002422:	4683      	mov	fp, r0
 8002424:	0309      	lsls	r1, r1, #12
 8002426:	0fd8      	lsrs	r0, r3, #31
 8002428:	0b09      	lsrs	r1, r1, #12
 800242a:	4682      	mov	sl, r0
 800242c:	4819      	ldr	r0, [pc, #100]	@ (8002494 <__eqdf2+0x84>)
 800242e:	468c      	mov	ip, r1
 8002430:	031f      	lsls	r7, r3, #12
 8002432:	0069      	lsls	r1, r5, #1
 8002434:	005e      	lsls	r6, r3, #1
 8002436:	0d49      	lsrs	r1, r1, #21
 8002438:	0b3f      	lsrs	r7, r7, #12
 800243a:	0d76      	lsrs	r6, r6, #21
 800243c:	4281      	cmp	r1, r0
 800243e:	d018      	beq.n	8002472 <__eqdf2+0x62>
 8002440:	4286      	cmp	r6, r0
 8002442:	d00f      	beq.n	8002464 <__eqdf2+0x54>
 8002444:	2001      	movs	r0, #1
 8002446:	42b1      	cmp	r1, r6
 8002448:	d10d      	bne.n	8002466 <__eqdf2+0x56>
 800244a:	45bc      	cmp	ip, r7
 800244c:	d10b      	bne.n	8002466 <__eqdf2+0x56>
 800244e:	4294      	cmp	r4, r2
 8002450:	d109      	bne.n	8002466 <__eqdf2+0x56>
 8002452:	45d3      	cmp	fp, sl
 8002454:	d01c      	beq.n	8002490 <__eqdf2+0x80>
 8002456:	2900      	cmp	r1, #0
 8002458:	d105      	bne.n	8002466 <__eqdf2+0x56>
 800245a:	4660      	mov	r0, ip
 800245c:	4320      	orrs	r0, r4
 800245e:	1e43      	subs	r3, r0, #1
 8002460:	4198      	sbcs	r0, r3
 8002462:	e000      	b.n	8002466 <__eqdf2+0x56>
 8002464:	2001      	movs	r0, #1
 8002466:	bcf0      	pop	{r4, r5, r6, r7}
 8002468:	46bb      	mov	fp, r7
 800246a:	46b2      	mov	sl, r6
 800246c:	46a9      	mov	r9, r5
 800246e:	46a0      	mov	r8, r4
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002472:	2001      	movs	r0, #1
 8002474:	428e      	cmp	r6, r1
 8002476:	d1f6      	bne.n	8002466 <__eqdf2+0x56>
 8002478:	4661      	mov	r1, ip
 800247a:	4339      	orrs	r1, r7
 800247c:	000f      	movs	r7, r1
 800247e:	4317      	orrs	r7, r2
 8002480:	4327      	orrs	r7, r4
 8002482:	d1f0      	bne.n	8002466 <__eqdf2+0x56>
 8002484:	465b      	mov	r3, fp
 8002486:	4652      	mov	r2, sl
 8002488:	1a98      	subs	r0, r3, r2
 800248a:	1e43      	subs	r3, r0, #1
 800248c:	4198      	sbcs	r0, r3
 800248e:	e7ea      	b.n	8002466 <__eqdf2+0x56>
 8002490:	2000      	movs	r0, #0
 8002492:	e7e8      	b.n	8002466 <__eqdf2+0x56>
 8002494:	000007ff 	.word	0x000007ff

08002498 <__gedf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030e      	lsls	r6, r1, #12
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	0d49      	lsrs	r1, r1, #21
 80024ac:	468a      	mov	sl, r1
 80024ae:	0fdf      	lsrs	r7, r3, #31
 80024b0:	0fe9      	lsrs	r1, r5, #31
 80024b2:	46bc      	mov	ip, r7
 80024b4:	b083      	sub	sp, #12
 80024b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002574 <__gedf2+0xdc>)
 80024b8:	0004      	movs	r4, r0
 80024ba:	4680      	mov	r8, r0
 80024bc:	9101      	str	r1, [sp, #4]
 80024be:	0058      	lsls	r0, r3, #1
 80024c0:	0319      	lsls	r1, r3, #12
 80024c2:	4691      	mov	r9, r2
 80024c4:	0b36      	lsrs	r6, r6, #12
 80024c6:	0b09      	lsrs	r1, r1, #12
 80024c8:	0d40      	lsrs	r0, r0, #21
 80024ca:	45ba      	cmp	sl, r7
 80024cc:	d01d      	beq.n	800250a <__gedf2+0x72>
 80024ce:	42b8      	cmp	r0, r7
 80024d0:	d00d      	beq.n	80024ee <__gedf2+0x56>
 80024d2:	4657      	mov	r7, sl
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	d12a      	bne.n	800252e <__gedf2+0x96>
 80024d8:	4334      	orrs	r4, r6
 80024da:	2800      	cmp	r0, #0
 80024dc:	d124      	bne.n	8002528 <__gedf2+0x90>
 80024de:	430a      	orrs	r2, r1
 80024e0:	d036      	beq.n	8002550 <__gedf2+0xb8>
 80024e2:	2c00      	cmp	r4, #0
 80024e4:	d141      	bne.n	800256a <__gedf2+0xd2>
 80024e6:	4663      	mov	r3, ip
 80024e8:	0058      	lsls	r0, r3, #1
 80024ea:	3801      	subs	r0, #1
 80024ec:	e015      	b.n	800251a <__gedf2+0x82>
 80024ee:	4311      	orrs	r1, r2
 80024f0:	d138      	bne.n	8002564 <__gedf2+0xcc>
 80024f2:	4653      	mov	r3, sl
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <__gedf2+0x64>
 80024f8:	4326      	orrs	r6, r4
 80024fa:	d0f4      	beq.n	80024e6 <__gedf2+0x4e>
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	4563      	cmp	r3, ip
 8002500:	d107      	bne.n	8002512 <__gedf2+0x7a>
 8002502:	9b01      	ldr	r3, [sp, #4]
 8002504:	0058      	lsls	r0, r3, #1
 8002506:	3801      	subs	r0, #1
 8002508:	e007      	b.n	800251a <__gedf2+0x82>
 800250a:	4326      	orrs	r6, r4
 800250c:	d12a      	bne.n	8002564 <__gedf2+0xcc>
 800250e:	4550      	cmp	r0, sl
 8002510:	d021      	beq.n	8002556 <__gedf2+0xbe>
 8002512:	2001      	movs	r0, #1
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	425f      	negs	r7, r3
 8002518:	4338      	orrs	r0, r7
 800251a:	b003      	add	sp, #12
 800251c:	bcf0      	pop	{r4, r5, r6, r7}
 800251e:	46bb      	mov	fp, r7
 8002520:	46b2      	mov	sl, r6
 8002522:	46a9      	mov	r9, r5
 8002524:	46a0      	mov	r8, r4
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002528:	2c00      	cmp	r4, #0
 800252a:	d0dc      	beq.n	80024e6 <__gedf2+0x4e>
 800252c:	e7e6      	b.n	80024fc <__gedf2+0x64>
 800252e:	2800      	cmp	r0, #0
 8002530:	d0ef      	beq.n	8002512 <__gedf2+0x7a>
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	4563      	cmp	r3, ip
 8002536:	d1ec      	bne.n	8002512 <__gedf2+0x7a>
 8002538:	4582      	cmp	sl, r0
 800253a:	dcea      	bgt.n	8002512 <__gedf2+0x7a>
 800253c:	dbe1      	blt.n	8002502 <__gedf2+0x6a>
 800253e:	428e      	cmp	r6, r1
 8002540:	d8e7      	bhi.n	8002512 <__gedf2+0x7a>
 8002542:	d1de      	bne.n	8002502 <__gedf2+0x6a>
 8002544:	45c8      	cmp	r8, r9
 8002546:	d8e4      	bhi.n	8002512 <__gedf2+0x7a>
 8002548:	2000      	movs	r0, #0
 800254a:	45c8      	cmp	r8, r9
 800254c:	d2e5      	bcs.n	800251a <__gedf2+0x82>
 800254e:	e7d8      	b.n	8002502 <__gedf2+0x6a>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0e2      	beq.n	800251a <__gedf2+0x82>
 8002554:	e7dd      	b.n	8002512 <__gedf2+0x7a>
 8002556:	4311      	orrs	r1, r2
 8002558:	d104      	bne.n	8002564 <__gedf2+0xcc>
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	4563      	cmp	r3, ip
 800255e:	d1d8      	bne.n	8002512 <__gedf2+0x7a>
 8002560:	2000      	movs	r0, #0
 8002562:	e7da      	b.n	800251a <__gedf2+0x82>
 8002564:	2002      	movs	r0, #2
 8002566:	4240      	negs	r0, r0
 8002568:	e7d7      	b.n	800251a <__gedf2+0x82>
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	4563      	cmp	r3, ip
 800256e:	d0e6      	beq.n	800253e <__gedf2+0xa6>
 8002570:	e7cf      	b.n	8002512 <__gedf2+0x7a>
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	000007ff 	.word	0x000007ff

08002578 <__ledf2>:
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	4657      	mov	r7, sl
 800257c:	464e      	mov	r6, r9
 800257e:	4645      	mov	r5, r8
 8002580:	46de      	mov	lr, fp
 8002582:	b5e0      	push	{r5, r6, r7, lr}
 8002584:	000d      	movs	r5, r1
 8002586:	030e      	lsls	r6, r1, #12
 8002588:	0049      	lsls	r1, r1, #1
 800258a:	0d49      	lsrs	r1, r1, #21
 800258c:	468a      	mov	sl, r1
 800258e:	0fdf      	lsrs	r7, r3, #31
 8002590:	0fe9      	lsrs	r1, r5, #31
 8002592:	46bc      	mov	ip, r7
 8002594:	b083      	sub	sp, #12
 8002596:	4f2e      	ldr	r7, [pc, #184]	@ (8002650 <__ledf2+0xd8>)
 8002598:	0004      	movs	r4, r0
 800259a:	4680      	mov	r8, r0
 800259c:	9101      	str	r1, [sp, #4]
 800259e:	0058      	lsls	r0, r3, #1
 80025a0:	0319      	lsls	r1, r3, #12
 80025a2:	4691      	mov	r9, r2
 80025a4:	0b36      	lsrs	r6, r6, #12
 80025a6:	0b09      	lsrs	r1, r1, #12
 80025a8:	0d40      	lsrs	r0, r0, #21
 80025aa:	45ba      	cmp	sl, r7
 80025ac:	d01e      	beq.n	80025ec <__ledf2+0x74>
 80025ae:	42b8      	cmp	r0, r7
 80025b0:	d00d      	beq.n	80025ce <__ledf2+0x56>
 80025b2:	4657      	mov	r7, sl
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	d127      	bne.n	8002608 <__ledf2+0x90>
 80025b8:	4334      	orrs	r4, r6
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d133      	bne.n	8002626 <__ledf2+0xae>
 80025be:	430a      	orrs	r2, r1
 80025c0:	d034      	beq.n	800262c <__ledf2+0xb4>
 80025c2:	2c00      	cmp	r4, #0
 80025c4:	d140      	bne.n	8002648 <__ledf2+0xd0>
 80025c6:	4663      	mov	r3, ip
 80025c8:	0058      	lsls	r0, r3, #1
 80025ca:	3801      	subs	r0, #1
 80025cc:	e015      	b.n	80025fa <__ledf2+0x82>
 80025ce:	4311      	orrs	r1, r2
 80025d0:	d112      	bne.n	80025f8 <__ledf2+0x80>
 80025d2:	4653      	mov	r3, sl
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <__ledf2+0x64>
 80025d8:	4326      	orrs	r6, r4
 80025da:	d0f4      	beq.n	80025c6 <__ledf2+0x4e>
 80025dc:	9b01      	ldr	r3, [sp, #4]
 80025de:	4563      	cmp	r3, ip
 80025e0:	d01d      	beq.n	800261e <__ledf2+0xa6>
 80025e2:	2001      	movs	r0, #1
 80025e4:	9b01      	ldr	r3, [sp, #4]
 80025e6:	425f      	negs	r7, r3
 80025e8:	4338      	orrs	r0, r7
 80025ea:	e006      	b.n	80025fa <__ledf2+0x82>
 80025ec:	4326      	orrs	r6, r4
 80025ee:	d103      	bne.n	80025f8 <__ledf2+0x80>
 80025f0:	4550      	cmp	r0, sl
 80025f2:	d1f6      	bne.n	80025e2 <__ledf2+0x6a>
 80025f4:	4311      	orrs	r1, r2
 80025f6:	d01c      	beq.n	8002632 <__ledf2+0xba>
 80025f8:	2002      	movs	r0, #2
 80025fa:	b003      	add	sp, #12
 80025fc:	bcf0      	pop	{r4, r5, r6, r7}
 80025fe:	46bb      	mov	fp, r7
 8002600:	46b2      	mov	sl, r6
 8002602:	46a9      	mov	r9, r5
 8002604:	46a0      	mov	r8, r4
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002608:	2800      	cmp	r0, #0
 800260a:	d0ea      	beq.n	80025e2 <__ledf2+0x6a>
 800260c:	9b01      	ldr	r3, [sp, #4]
 800260e:	4563      	cmp	r3, ip
 8002610:	d1e7      	bne.n	80025e2 <__ledf2+0x6a>
 8002612:	4582      	cmp	sl, r0
 8002614:	dce5      	bgt.n	80025e2 <__ledf2+0x6a>
 8002616:	db02      	blt.n	800261e <__ledf2+0xa6>
 8002618:	428e      	cmp	r6, r1
 800261a:	d8e2      	bhi.n	80025e2 <__ledf2+0x6a>
 800261c:	d00e      	beq.n	800263c <__ledf2+0xc4>
 800261e:	9b01      	ldr	r3, [sp, #4]
 8002620:	0058      	lsls	r0, r3, #1
 8002622:	3801      	subs	r0, #1
 8002624:	e7e9      	b.n	80025fa <__ledf2+0x82>
 8002626:	2c00      	cmp	r4, #0
 8002628:	d0cd      	beq.n	80025c6 <__ledf2+0x4e>
 800262a:	e7d7      	b.n	80025dc <__ledf2+0x64>
 800262c:	2c00      	cmp	r4, #0
 800262e:	d0e4      	beq.n	80025fa <__ledf2+0x82>
 8002630:	e7d7      	b.n	80025e2 <__ledf2+0x6a>
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	2000      	movs	r0, #0
 8002636:	4563      	cmp	r3, ip
 8002638:	d0df      	beq.n	80025fa <__ledf2+0x82>
 800263a:	e7d2      	b.n	80025e2 <__ledf2+0x6a>
 800263c:	45c8      	cmp	r8, r9
 800263e:	d8d0      	bhi.n	80025e2 <__ledf2+0x6a>
 8002640:	2000      	movs	r0, #0
 8002642:	45c8      	cmp	r8, r9
 8002644:	d2d9      	bcs.n	80025fa <__ledf2+0x82>
 8002646:	e7ea      	b.n	800261e <__ledf2+0xa6>
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	4563      	cmp	r3, ip
 800264c:	d0e4      	beq.n	8002618 <__ledf2+0xa0>
 800264e:	e7c8      	b.n	80025e2 <__ledf2+0x6a>
 8002650:	000007ff 	.word	0x000007ff

08002654 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	0004      	movs	r4, r0
 8002658:	000e      	movs	r6, r1
 800265a:	0015      	movs	r5, r2


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 800265c:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <Registers_handler+0xd4>)
 800265e:	7801      	ldrb	r1, [r0, #0]
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	4291      	cmp	r1, r2
 8002664:	d019      	beq.n	800269a <Registers_handler+0x46>
 8002666:	0003      	movs	r3, r0
 8002668:	0001      	movs	r1, r0
 800266a:	3140      	adds	r1, #64	@ 0x40
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	428b      	cmp	r3, r1
 8002674:	d1fb      	bne.n	800266e <Registers_handler+0x1a>
	     RX_2;
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	2200      	movs	r2, #0
 800267a:	01c9      	lsls	r1, r1, #7
 800267c:	482b      	ldr	r0, [pc, #172]	@ (800272c <Registers_handler+0xd8>)
 800267e:	f002 f98f 	bl	80049a0 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8002682:	482b      	ldr	r0, [pc, #172]	@ (8002730 <Registers_handler+0xdc>)
 8002684:	2240      	movs	r2, #64	@ 0x40
 8002686:	0021      	movs	r1, r4
 8002688:	f003 ff52 	bl	8006530 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800268c:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <Registers_handler+0xe0>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	2104      	movs	r1, #4
 8002694:	438b      	bics	r3, r1
 8002696:	6013      	str	r3, [r2, #0]
				  			   break;
				  			     }



                          }
 8002698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Size < 4) {
 800269a:	2b03      	cmp	r3, #3
 800269c:	d913      	bls.n	80026c6 <Registers_handler+0x72>
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 800269e:	18c2      	adds	r2, r0, r3
 80026a0:	1e91      	subs	r1, r2, #2
 80026a2:	7809      	ldrb	r1, [r1, #0]
 80026a4:	0209      	lsls	r1, r1, #8
 80026a6:	3a01      	subs	r2, #1
 80026a8:	7817      	ldrb	r7, [r2, #0]
 80026aa:	430f      	orrs	r7, r1
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80026ac:	3b02      	subs	r3, #2
 80026ae:	b2d9      	uxtb	r1, r3
 80026b0:	f000 fbe0 	bl	8002e74 <calcCRC16ModBus>
	    if (receivedCRC != calculatedCRC) {
 80026b4:	4287      	cmp	r7, r0
 80026b6:	d10c      	bne.n	80026d2 <Registers_handler+0x7e>
                       uint8_t opCode = rxFrame[1];
 80026b8:	7861      	ldrb	r1, [r4, #1]
				  			  switch (opCode) {
 80026ba:	2910      	cmp	r1, #16
 80026bc:	d82f      	bhi.n	800271e <Registers_handler+0xca>
 80026be:	008b      	lsls	r3, r1, #2
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <Registers_handler+0xe4>)
 80026c2:	58d3      	ldr	r3, [r2, r3]
 80026c4:	469f      	mov	pc, r3
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80026c6:	481a      	ldr	r0, [pc, #104]	@ (8002730 <Registers_handler+0xdc>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	2103      	movs	r1, #3
 80026cc:	f000 fc18 	bl	8002f00 <sendError>
	        return;
 80026d0:	e7e2      	b.n	8002698 <Registers_handler+0x44>
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 80026d2:	4817      	ldr	r0, [pc, #92]	@ (8002730 <Registers_handler+0xdc>)
 80026d4:	2203      	movs	r2, #3
 80026d6:	2103      	movs	r1, #3
 80026d8:	f000 fc12 	bl	8002f00 <sendError>
	        return;
 80026dc:	e7dc      	b.n	8002698 <Registers_handler+0x44>
				  				 handleReadCoils (&huart1,coils);
 80026de:	4b17      	ldr	r3, [pc, #92]	@ (800273c <Registers_handler+0xe8>)
 80026e0:	7819      	ldrb	r1, [r3, #0]
 80026e2:	4813      	ldr	r0, [pc, #76]	@ (8002730 <Registers_handler+0xdc>)
 80026e4:	f000 fcc8 	bl	8003078 <handleReadCoils>
				  			   break;
 80026e8:	e7d6      	b.n	8002698 <Registers_handler+0x44>
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <Registers_handler+0xec>)
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	4810      	ldr	r0, [pc, #64]	@ (8002730 <Registers_handler+0xdc>)
 80026f0:	f000 fd06 	bl	8003100 <handleReadDiscreteInputs>
							   break;
 80026f4:	e7d0      	b.n	8002698 <Registers_handler+0x44>
				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80026f6:	480e      	ldr	r0, [pc, #56]	@ (8002730 <Registers_handler+0xdc>)
 80026f8:	0031      	movs	r1, r6
 80026fa:	f000 fc33 	bl	8002f64 <handleReadHoldingRegs>
				  			   break;
 80026fe:	e7cb      	b.n	8002698 <Registers_handler+0x44>
				  				handleReadInputRegs (&huart1,data_reg);
 8002700:	480b      	ldr	r0, [pc, #44]	@ (8002730 <Registers_handler+0xdc>)
 8002702:	0031      	movs	r1, r6
 8002704:	f000 fc72 	bl	8002fec <handleReadInputRegs>
				  			   break;
 8002708:	e7c6      	b.n	8002698 <Registers_handler+0x44>
				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800270a:	4809      	ldr	r0, [pc, #36]	@ (8002730 <Registers_handler+0xdc>)
 800270c:	0029      	movs	r1, r5
 800270e:	f000 fd3d 	bl	800318c <handleWriteMulyipleHandlingRegister>
                               break;
 8002712:	e7c1      	b.n	8002698 <Registers_handler+0x44>
                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8002714:	4806      	ldr	r0, [pc, #24]	@ (8002730 <Registers_handler+0xdc>)
 8002716:	0029      	movs	r1, r5
 8002718:	f000 fd38 	bl	800318c <handleWriteMulyipleHandlingRegister>
                               break;
 800271c:	e7bc      	b.n	8002698 <Registers_handler+0x44>
				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 800271e:	4804      	ldr	r0, [pc, #16]	@ (8002730 <Registers_handler+0xdc>)
 8002720:	2201      	movs	r2, #1
 8002722:	f000 fbed 	bl	8002f00 <sendError>
				  			   break;
 8002726:	e7b7      	b.n	8002698 <Registers_handler+0x44>
 8002728:	20000000 	.word	0x20000000
 800272c:	50000800 	.word	0x50000800
 8002730:	20000134 	.word	0x20000134
 8002734:	200000d8 	.word	0x200000d8
 8002738:	0800695c 	.word	0x0800695c
 800273c:	200004b9 	.word	0x200004b9
 8002740:	200004b8 	.word	0x200004b8

08002744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002744:	b500      	push	{lr}
 8002746:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002748:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <MX_DMA_Init+0x4c>)
 800274a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800274c:	2301      	movs	r3, #1
 800274e:	4319      	orrs	r1, r3
 8002750:	6391      	str	r1, [r2, #56]	@ 0x38
 8002752:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002754:	4013      	ands	r3, r2
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2009      	movs	r0, #9
 8002760:	f001 fd1a 	bl	8004198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002764:	2009      	movs	r0, #9
 8002766:	f001 fd49 	bl	80041fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	200a      	movs	r0, #10
 8002770:	f001 fd12 	bl	8004198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002774:	200a      	movs	r0, #10
 8002776:	f001 fd41 	bl	80041fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	200b      	movs	r0, #11
 8002780:	f001 fd0a 	bl	8004198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8002784:	200b      	movs	r0, #11
 8002786:	f001 fd39 	bl	80041fc <HAL_NVIC_EnableIRQ>

}
 800278a:	b003      	add	sp, #12
 800278c:	bd00      	pop	{pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	40021000 	.word	0x40021000

08002794 <MX_USART1_UART_Init>:
{
 8002794:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002796:	4817      	ldr	r0, [pc, #92]	@ (80027f4 <MX_USART1_UART_Init+0x60>)
 8002798:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <MX_USART1_UART_Init+0x64>)
 800279a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800279c:	2396      	movs	r3, #150	@ 0x96
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	2300      	movs	r3, #0
 80027a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027aa:	220c      	movs	r2, #12
 80027ac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b8:	f003 fd90 	bl	80062dc <HAL_UART_Init>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d111      	bne.n	80027e4 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <MX_USART1_UART_Init+0x60>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	f003 fe66 	bl	8006494 <HAL_UARTEx_SetTxFifoThreshold>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d10d      	bne.n	80027e8 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027cc:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <MX_USART1_UART_Init+0x60>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	f003 fe86 	bl	80064e0 <HAL_UARTEx_SetRxFifoThreshold>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d109      	bne.n	80027ec <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027d8:	4806      	ldr	r0, [pc, #24]	@ (80027f4 <MX_USART1_UART_Init+0x60>)
 80027da:	f003 fe3b 	bl	8006454 <HAL_UARTEx_DisableFifoMode>
 80027de:	2800      	cmp	r0, #0
 80027e0:	d106      	bne.n	80027f0 <MX_USART1_UART_Init+0x5c>
}
 80027e2:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <MX_USART1_UART_Init+0x52>
 80027e8:	b672      	cpsid	i
 80027ea:	e7fe      	b.n	80027ea <MX_USART1_UART_Init+0x56>
 80027ec:	b672      	cpsid	i
 80027ee:	e7fe      	b.n	80027ee <MX_USART1_UART_Init+0x5a>
 80027f0:	b672      	cpsid	i
 80027f2:	e7fe      	b.n	80027f2 <MX_USART1_UART_Init+0x5e>
 80027f4:	20000134 	.word	0x20000134
 80027f8:	40013800 	.word	0x40013800

080027fc <SystemClock_Config>:
{
 80027fc:	b500      	push	{lr}
 80027fe:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002800:	2234      	movs	r2, #52	@ 0x34
 8002802:	2100      	movs	r1, #0
 8002804:	a805      	add	r0, sp, #20
 8002806:	f004 f82d 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280a:	2210      	movs	r2, #16
 800280c:	2100      	movs	r1, #0
 800280e:	a801      	add	r0, sp, #4
 8002810:	f004 f828 	bl	8006864 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002814:	2080      	movs	r0, #128	@ 0x80
 8002816:	0080      	lsls	r0, r0, #2
 8002818:	f002 f98c 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800281c:	2302      	movs	r3, #2
 800281e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0052      	lsls	r2, r2, #1
 8002824:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002826:	2200      	movs	r2, #0
 8002828:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282a:	2140      	movs	r1, #64	@ 0x40
 800282c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002830:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002832:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002834:	3306      	adds	r3, #6
 8002836:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	059b      	lsls	r3, r3, #22
 8002842:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	a805      	add	r0, sp, #20
 8002846:	f002 f9a7 	bl	8004b98 <HAL_RCC_OscConfig>
 800284a:	2800      	cmp	r0, #0
 800284c:	d10e      	bne.n	800286c <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284e:	2307      	movs	r3, #7
 8002850:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002852:	3b05      	subs	r3, #5
 8002854:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800285c:	2102      	movs	r1, #2
 800285e:	a801      	add	r0, sp, #4
 8002860:	f002 fc80 	bl	8005164 <HAL_RCC_ClockConfig>
 8002864:	2800      	cmp	r0, #0
 8002866:	d103      	bne.n	8002870 <SystemClock_Config+0x74>
}
 8002868:	b013      	add	sp, #76	@ 0x4c
 800286a:	bd00      	pop	{pc}
 800286c:	b672      	cpsid	i
  while (1)
 800286e:	e7fe      	b.n	800286e <SystemClock_Config+0x72>
 8002870:	b672      	cpsid	i
 8002872:	e7fe      	b.n	8002872 <SystemClock_Config+0x76>

08002874 <HAL_UART_TxCpltCallback>:
{
 8002874:	b510      	push	{r4, lr}
	    RX_2;
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	2200      	movs	r2, #0
 800287a:	01c9      	lsls	r1, r1, #7
 800287c:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <HAL_UART_TxCpltCallback+0x3c>)
 800287e:	f002 f88f 	bl	80049a0 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8002882:	f000 ff2b 	bl	80036dc <HAL_GetTick>
 8002886:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_UART_TxCpltCallback+0x40>)
 8002888:	6018      	str	r0, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800288a:	490b      	ldr	r1, [pc, #44]	@ (80028b8 <HAL_UART_TxCpltCallback+0x44>)
 800288c:	4c0b      	ldr	r4, [pc, #44]	@ (80028bc <HAL_UART_TxCpltCallback+0x48>)
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	0020      	movs	r0, r4
 8002892:	f003 fe4d 	bl	8006530 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	2110      	movs	r1, #16
 800289c:	430b      	orrs	r3, r1
 800289e:	6013      	str	r3, [r2, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80028a0:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_UART_TxCpltCallback+0x4c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	390c      	subs	r1, #12
 80028a8:	438b      	bics	r3, r1
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	50000800 	.word	0x50000800
 80028b4:	2000063c 	.word	0x2000063c
 80028b8:	200005fc 	.word	0x200005fc
 80028bc:	20000134 	.word	0x20000134
 80028c0:	200000d8 	.word	0x200000d8

080028c4 <HAL_UARTEx_RxEventCallback>:
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	000c      	movs	r4, r1
	if (huart->Instance == USART1)
 80028c8:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <HAL_UARTEx_RxEventCallback+0x38>)
 80028ca:	6800      	ldr	r0, [r0, #0]
 80028cc:	4290      	cmp	r0, r2
 80028ce:	d000      	beq.n	80028d2 <HAL_UARTEx_RxEventCallback+0xe>
}
 80028d0:	bd10      	pop	{r4, pc}
		lastActivityTime = HAL_GetTick();
 80028d2:	f000 ff03 	bl	80036dc <HAL_GetTick>
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_UARTEx_RxEventCallback+0x3c>)
 80028d8:	6018      	str	r0, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80028da:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <HAL_UARTEx_RxEventCallback+0x40>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	2110      	movs	r1, #16
 80028e2:	438b      	bics	r3, r1
 80028e4:	6013      	str	r3, [r2, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80028e6:	4808      	ldr	r0, [pc, #32]	@ (8002908 <HAL_UARTEx_RxEventCallback+0x44>)
 80028e8:	f001 fe00 	bl	80044ec <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80028ec:	4a07      	ldr	r2, [pc, #28]	@ (800290c <HAL_UARTEx_RxEventCallback+0x48>)
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <HAL_UARTEx_RxEventCallback+0x4c>)
 80028f0:	4808      	ldr	r0, [pc, #32]	@ (8002914 <HAL_UARTEx_RxEventCallback+0x50>)
 80028f2:	0023      	movs	r3, r4
 80028f4:	f7ff feae 	bl	8002654 <Registers_handler>
}
 80028f8:	e7ea      	b.n	80028d0 <HAL_UARTEx_RxEventCallback+0xc>
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	40013800 	.word	0x40013800
 8002900:	2000063c 	.word	0x2000063c
 8002904:	20000134 	.word	0x20000134
 8002908:	200000d8 	.word	0x200000d8
 800290c:	200004bc 	.word	0x200004bc
 8002910:	200004dc 	.word	0x200004dc
 8002914:	200005fc 	.word	0x200005fc

08002918 <HAL_TIM_PeriodElapsedCallback>:
{
 8002918:	b510      	push	{r4, lr}
    if (htim->Instance == TIM14)
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800291c:	6802      	ldr	r2, [r0, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d000      	beq.n	8002924 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8002922:	bd10      	pop	{r4, pc}
    	LED_2_ON;
 8002924:	20a0      	movs	r0, #160	@ 0xa0
 8002926:	2201      	movs	r2, #1
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	05c0      	lsls	r0, r0, #23
 800292c:	f002 f838 	bl	80049a0 <HAL_GPIO_WritePin>
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_NUM_CHANNELS);
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002932:	4804      	ldr	r0, [pc, #16]	@ (8002944 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002934:	2207      	movs	r2, #7
 8002936:	f001 faaf 	bl	8003e98 <HAL_ADC_Start_DMA>
}
 800293a:	e7f2      	b.n	8002922 <HAL_TIM_PeriodElapsedCallback+0xa>
 800293c:	40002000 	.word	0x40002000
 8002940:	20000644 	.word	0x20000644
 8002944:	2000037c 	.word	0x2000037c

08002948 <Reset_USART1>:
 void Reset_USART1(void) {
 8002948:	b570      	push	{r4, r5, r6, lr}
     LED_1_ON;
 800294a:	2180      	movs	r1, #128	@ 0x80
 800294c:	2201      	movs	r2, #1
 800294e:	0209      	lsls	r1, r1, #8
 8002950:	4821      	ldr	r0, [pc, #132]	@ (80029d8 <Reset_USART1+0x90>)
 8002952:	f002 f825 	bl	80049a0 <HAL_GPIO_WritePin>
     if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8002956:	4821      	ldr	r0, [pc, #132]	@ (80029dc <Reset_USART1+0x94>)
 8002958:	f003 f812 	bl	8005980 <HAL_UART_DMAStop>
     if (hdma_usart1_rx.Instance != NULL) {
 800295c:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <Reset_USART1+0x98>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <Reset_USART1+0x22>
         HAL_DMA_Abort(&hdma_usart1_rx);
 8002964:	481e      	ldr	r0, [pc, #120]	@ (80029e0 <Reset_USART1+0x98>)
 8002966:	f001 fdc1 	bl	80044ec <HAL_DMA_Abort>
     if (hdma_usart1_tx.Instance != NULL) {
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <Reset_USART1+0x9c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <Reset_USART1+0x30>
         HAL_DMA_Abort(&hdma_usart1_tx);
 8002972:	481c      	ldr	r0, [pc, #112]	@ (80029e4 <Reset_USART1+0x9c>)
 8002974:	f001 fdba 	bl	80044ec <HAL_DMA_Abort>
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8002978:	4c18      	ldr	r4, [pc, #96]	@ (80029dc <Reset_USART1+0x94>)
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	2180      	movs	r1, #128	@ 0x80
 8002980:	438b      	bics	r3, r1
 8002982:	6013      	str	r3, [r2, #0]
     __HAL_UART_CLEAR_OREFLAG(&huart1);
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	2208      	movs	r2, #8
 8002988:	621a      	str	r2, [r3, #32]
     __HAL_UART_CLEAR_FEFLAG(&huart1);
 800298a:	3a06      	subs	r2, #6
 800298c:	621a      	str	r2, [r3, #32]
     __HAL_RCC_USART1_FORCE_RESET();
 800298e:	4d16      	ldr	r5, [pc, #88]	@ (80029e8 <Reset_USART1+0xa0>)
 8002990:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	01db      	lsls	r3, r3, #7
 8002996:	4313      	orrs	r3, r2
 8002998:	632b      	str	r3, [r5, #48]	@ 0x30
     HAL_Delay(1); // Задержка для завершения сброса
 800299a:	2001      	movs	r0, #1
 800299c:	f000 fea4 	bl	80036e8 <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 80029a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <Reset_USART1+0xa4>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	632b      	str	r3, [r5, #48]	@ 0x30
     if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80029a8:	0020      	movs	r0, r4
 80029aa:	f002 ff69 	bl	8005880 <HAL_UART_DeInit>
     MX_USART1_UART_Init();
 80029ae:	f7ff fef1 	bl	8002794 <MX_USART1_UART_Init>
     MX_DMA_Init();
 80029b2:	f7ff fec7 	bl	8002744 <MX_DMA_Init>
     if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80029b6:	490e      	ldr	r1, [pc, #56]	@ (80029f0 <Reset_USART1+0xa8>)
 80029b8:	2240      	movs	r2, #64	@ 0x40
 80029ba:	0020      	movs	r0, r4
 80029bc:	f003 fdb8 	bl	8006530 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <Reset_USART1+0x98>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	6813      	ldr	r3, [r2, #0]
 80029c6:	2104      	movs	r1, #4
 80029c8:	438b      	bics	r3, r1
 80029ca:	6013      	str	r3, [r2, #0]
     lastActivityTime = HAL_GetTick();
 80029cc:	f000 fe86 	bl	80036dc <HAL_GetTick>
 80029d0:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <Reset_USART1+0xac>)
 80029d2:	6018      	str	r0, [r3, #0]
 }
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	50000800 	.word	0x50000800
 80029dc:	20000134 	.word	0x20000134
 80029e0:	200000d8 	.word	0x200000d8
 80029e4:	2000007c 	.word	0x2000007c
 80029e8:	40021000 	.word	0x40021000
 80029ec:	ffffbfff 	.word	0xffffbfff
 80029f0:	200005fc 	.word	0x200005fc
 80029f4:	2000063c 	.word	0x2000063c

080029f8 <Check_USART1_Timeout>:
 {
 80029f8:	b510      	push	{r4, lr}
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80029fa:	f000 fe6f 	bl	80036dc <HAL_GetTick>
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <Check_USART1_Timeout+0x38>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1ac0      	subs	r0, r0, r3
 8002a04:	23e1      	movs	r3, #225	@ 0xe1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d200      	bcs.n	8002a0e <Check_USART1_Timeout+0x16>
 }
 8002a0c:	bd10      	pop	{r4, pc}
         Reset_USART1();
 8002a0e:	f7ff ff9b 	bl	8002948 <Reset_USART1>
         RX_2;
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	4c07      	ldr	r4, [pc, #28]	@ (8002a34 <Check_USART1_Timeout+0x3c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	01c9      	lsls	r1, r1, #7
 8002a1a:	0020      	movs	r0, r4
 8002a1c:	f001 ffc0 	bl	80049a0 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8002a20:	2180      	movs	r1, #128	@ 0x80
 8002a22:	2200      	movs	r2, #0
 8002a24:	0209      	lsls	r1, r1, #8
 8002a26:	0020      	movs	r0, r4
 8002a28:	f001 ffba 	bl	80049a0 <HAL_GPIO_WritePin>
 }
 8002a2c:	e7ee      	b.n	8002a0c <Check_USART1_Timeout+0x14>
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	2000063c 	.word	0x2000063c
 8002a34:	50000800 	.word	0x50000800

08002a38 <calculate_ntc_temperature>:
 {
 8002a38:	b570      	push	{r4, r5, r6, lr}
     float Vadc = (adc_raw / ADC_Max) * Vref;
 8002a3a:	f7fe fce3 	bl	8001404 <__aeabi_i2f>
 8002a3e:	491a      	ldr	r1, [pc, #104]	@ (8002aa8 <calculate_ntc_temperature+0x70>)
 8002a40:	f7fd ff1e 	bl	8000880 <__aeabi_fdiv>
 8002a44:	4919      	ldr	r1, [pc, #100]	@ (8002aac <calculate_ntc_temperature+0x74>)
 8002a46:	f7fe f8e9 	bl	8000c1c <__aeabi_fmul>
 8002a4a:	1c04      	adds	r4, r0, #0
     float R_ntc = (Vadc * R_fixed) / (Vref - Vadc);
 8002a4c:	4918      	ldr	r1, [pc, #96]	@ (8002ab0 <calculate_ntc_temperature+0x78>)
 8002a4e:	f7fe f8e5 	bl	8000c1c <__aeabi_fmul>
 8002a52:	1c05      	adds	r5, r0, #0
 8002a54:	1c21      	adds	r1, r4, #0
 8002a56:	4815      	ldr	r0, [pc, #84]	@ (8002aac <calculate_ntc_temperature+0x74>)
 8002a58:	f7fe fa3a 	bl	8000ed0 <__aeabi_fsub>
 8002a5c:	1c01      	adds	r1, r0, #0
 8002a5e:	1c28      	adds	r0, r5, #0
 8002a60:	f7fd ff0e 	bl	8000880 <__aeabi_fdiv>
     float logR = logf(R_ntc);
 8002a64:	f003 fd9c 	bl	80065a0 <logf>
 8002a68:	1c04      	adds	r4, r0, #0
     float inv_T = STEINHART_A + STEINHART_B * logR + STEINHART_C * logR * logR * logR;
 8002a6a:	4912      	ldr	r1, [pc, #72]	@ (8002ab4 <calculate_ntc_temperature+0x7c>)
 8002a6c:	f7fe f8d6 	bl	8000c1c <__aeabi_fmul>
 8002a70:	1c21      	adds	r1, r4, #0
 8002a72:	f7fe f8d3 	bl	8000c1c <__aeabi_fmul>
 8002a76:	1c21      	adds	r1, r4, #0
 8002a78:	f7fe f8d0 	bl	8000c1c <__aeabi_fmul>
 8002a7c:	1c05      	adds	r5, r0, #0
 8002a7e:	490e      	ldr	r1, [pc, #56]	@ (8002ab8 <calculate_ntc_temperature+0x80>)
 8002a80:	1c20      	adds	r0, r4, #0
 8002a82:	f7fe f8cb 	bl	8000c1c <__aeabi_fmul>
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <calculate_ntc_temperature+0x84>)
 8002a88:	f7fd fd08 	bl	800049c <__aeabi_fadd>
 8002a8c:	1c01      	adds	r1, r0, #0
 8002a8e:	1c28      	adds	r0, r5, #0
 8002a90:	f7fd fd04 	bl	800049c <__aeabi_fadd>
 8002a94:	1c01      	adds	r1, r0, #0
     float T_kelvin = 1.0f / inv_T;
 8002a96:	20fe      	movs	r0, #254	@ 0xfe
 8002a98:	0580      	lsls	r0, r0, #22
 8002a9a:	f7fd fef1 	bl	8000880 <__aeabi_fdiv>
     float T_celsius = T_kelvin - 273.15f;
 8002a9e:	4908      	ldr	r1, [pc, #32]	@ (8002ac0 <calculate_ntc_temperature+0x88>)
 8002aa0:	f7fe fa16 	bl	8000ed0 <__aeabi_fsub>
 }
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	457ff000 	.word	0x457ff000
 8002aac:	40533333 	.word	0x40533333
 8002ab0:	46160000 	.word	0x46160000
 8002ab4:	33bc4759 	.word	0x33bc4759
 8002ab8:	39757f73 	.word	0x39757f73
 8002abc:	3a93ffeb 	.word	0x3a93ffeb
 8002ac0:	43889333 	.word	0x43889333

08002ac4 <main>:
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	46ce      	mov	lr, r9
 8002ac8:	4647      	mov	r7, r8
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8002ace:	f000 fde5 	bl	800369c <HAL_Init>
  SystemClock_Config();
 8002ad2:	f7ff fe93 	bl	80027fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad6:	2214      	movs	r2, #20
 8002ad8:	2100      	movs	r1, #0
 8002ada:	a803      	add	r0, sp, #12
 8002adc:	f003 fec2 	bl	8006864 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8002d70 <main+0x2ac>)
 8002ae2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	6359      	str	r1, [r3, #52]	@ 0x34
 8002aea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aec:	400a      	ands	r2, r1
 8002aee:	9200      	str	r2, [sp, #0]
 8002af0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002af4:	2204      	movs	r2, #4
 8002af6:	4311      	orrs	r1, r2
 8002af8:	6359      	str	r1, [r3, #52]	@ 0x34
 8002afa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002afc:	400a      	ands	r2, r1
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b04:	2501      	movs	r5, #1
 8002b06:	432a      	orrs	r2, r5
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	402b      	ands	r3, r5
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8002b12:	24c0      	movs	r4, #192	@ 0xc0
 8002b14:	0224      	lsls	r4, r4, #8
 8002b16:	4f97      	ldr	r7, [pc, #604]	@ (8002d74 <main+0x2b0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	0021      	movs	r1, r4
 8002b1c:	0038      	movs	r0, r7
 8002b1e:	f001 ff3f 	bl	80049a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002b22:	26a0      	movs	r6, #160	@ 0xa0
 8002b24:	05f6      	lsls	r6, r6, #23
 8002b26:	2200      	movs	r2, #0
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	0030      	movs	r0, r6
 8002b2c:	f001 ff38 	bl	80049a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8002b30:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2400      	movs	r4, #0
 8002b36:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3a:	a903      	add	r1, sp, #12
 8002b3c:	0038      	movs	r0, r7
 8002b3e:	f001 fdbd 	bl	80046bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_2_Pin;
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b46:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	a903      	add	r1, sp, #12
 8002b4e:	0030      	movs	r0, r6
 8002b50:	f001 fdb4 	bl	80046bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UI_INT_Pin;
 8002b54:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b56:	2388      	movs	r3, #136	@ 0x88
 8002b58:	035b      	lsls	r3, r3, #13
 8002b5a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(UI_INT_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	a903      	add	r1, sp, #12
 8002b60:	4885      	ldr	r0, [pc, #532]	@ (8002d78 <main+0x2b4>)
 8002b62:	f001 fdab 	bl	80046bc <HAL_GPIO_Init>
  MX_DMA_Init();
 8002b66:	f7ff fded 	bl	8002744 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002b6a:	f7ff fe13 	bl	8002794 <MX_USART1_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b6e:	220c      	movs	r2, #12
 8002b70:	2100      	movs	r1, #0
 8002b72:	a803      	add	r0, sp, #12
 8002b74:	f003 fe76 	bl	8006864 <memset>
  hadc1.Instance = ADC1;
 8002b78:	4880      	ldr	r0, [pc, #512]	@ (8002d7c <main+0x2b8>)
 8002b7a:	4b81      	ldr	r3, [pc, #516]	@ (8002d80 <main+0x2bc>)
 8002b7c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	05db      	lsls	r3, r3, #23
 8002b82:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b84:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b86:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	039b      	lsls	r3, r3, #14
 8002b8c:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b92:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002b94:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b96:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 7;
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b9c:	3319      	adds	r3, #25
 8002b9e:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ba0:	6244      	str	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ba2:	6284      	str	r4, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002bae:	2306      	movs	r3, #6
 8002bb0:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002bb2:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002bb4:	3336      	adds	r3, #54	@ 0x36
 8002bb6:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002bb8:	64c4      	str	r4, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bba:	f000 fda7 	bl	800370c <HAL_ADC_Init>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d000      	beq.n	8002bc4 <main+0x100>
 8002bc2:	e0bc      	b.n	8002d3e <main+0x27a>
  sConfig.Channel = ADC_CHANNEL_0;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002bcc:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bce:	486b      	ldr	r0, [pc, #428]	@ (8002d7c <main+0x2b8>)
 8002bd0:	a903      	add	r1, sp, #12
 8002bd2:	f000 ffb7 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d000      	beq.n	8002bdc <main+0x118>
 8002bda:	e0b2      	b.n	8002d42 <main+0x27e>
  sConfig.Channel = ADC_CHANNEL_1;
 8002bdc:	4b69      	ldr	r3, [pc, #420]	@ (8002d84 <main+0x2c0>)
 8002bde:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002be0:	2304      	movs	r3, #4
 8002be2:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002be4:	4865      	ldr	r0, [pc, #404]	@ (8002d7c <main+0x2b8>)
 8002be6:	a903      	add	r1, sp, #12
 8002be8:	f000 ffac 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d000      	beq.n	8002bf2 <main+0x12e>
 8002bf0:	e0a9      	b.n	8002d46 <main+0x282>
  sConfig.Channel = ADC_CHANNEL_2;
 8002bf2:	4b65      	ldr	r3, [pc, #404]	@ (8002d88 <main+0x2c4>)
 8002bf4:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bfa:	4860      	ldr	r0, [pc, #384]	@ (8002d7c <main+0x2b8>)
 8002bfc:	a903      	add	r1, sp, #12
 8002bfe:	f000 ffa1 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d000      	beq.n	8002c08 <main+0x144>
 8002c06:	e0a0      	b.n	8002d4a <main+0x286>
  sConfig.Channel = ADC_CHANNEL_3;
 8002c08:	4b60      	ldr	r3, [pc, #384]	@ (8002d8c <main+0x2c8>)
 8002c0a:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c10:	485a      	ldr	r0, [pc, #360]	@ (8002d7c <main+0x2b8>)
 8002c12:	a903      	add	r1, sp, #12
 8002c14:	f000 ff96 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d000      	beq.n	8002c1e <main+0x15a>
 8002c1c:	e097      	b.n	8002d4e <main+0x28a>
  sConfig.Channel = ADC_CHANNEL_4;
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d90 <main+0x2cc>)
 8002c20:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c22:	2310      	movs	r3, #16
 8002c24:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c26:	4855      	ldr	r0, [pc, #340]	@ (8002d7c <main+0x2b8>)
 8002c28:	a903      	add	r1, sp, #12
 8002c2a:	f000 ff8b 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d000      	beq.n	8002c34 <main+0x170>
 8002c32:	e08e      	b.n	8002d52 <main+0x28e>
  sConfig.Channel = ADC_CHANNEL_5;
 8002c34:	4b57      	ldr	r3, [pc, #348]	@ (8002d94 <main+0x2d0>)
 8002c36:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002c38:	2314      	movs	r3, #20
 8002c3a:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3c:	484f      	ldr	r0, [pc, #316]	@ (8002d7c <main+0x2b8>)
 8002c3e:	a903      	add	r1, sp, #12
 8002c40:	f000 ff80 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d000      	beq.n	8002c4a <main+0x186>
 8002c48:	e085      	b.n	8002d56 <main+0x292>
  sConfig.Channel = ADC_CHANNEL_6;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <main+0x2d4>)
 8002c4c:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002c4e:	2318      	movs	r3, #24
 8002c50:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c52:	484a      	ldr	r0, [pc, #296]	@ (8002d7c <main+0x2b8>)
 8002c54:	a903      	add	r1, sp, #12
 8002c56:	f000 ff75 	bl	8003b44 <HAL_ADC_ConfigChannel>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d000      	beq.n	8002c60 <main+0x19c>
 8002c5e:	e07c      	b.n	8002d5a <main+0x296>
  hi2c2.Instance = I2C2;
 8002c60:	484e      	ldr	r0, [pc, #312]	@ (8002d9c <main+0x2d8>)
 8002c62:	4b4f      	ldr	r3, [pc, #316]	@ (8002da0 <main+0x2dc>)
 8002c64:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00C12166;
 8002c66:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <main+0x2e0>)
 8002c68:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 222;
 8002c6a:	23de      	movs	r3, #222	@ 0xde
 8002c6c:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c6e:	3bdd      	subs	r3, #221	@ 0xdd
 8002c70:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c76:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c78:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c7a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c7e:	f001 fe95 	bl	80049ac <HAL_I2C_Init>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d16b      	bne.n	8002d5e <main+0x29a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c86:	4845      	ldr	r0, [pc, #276]	@ (8002d9c <main+0x2d8>)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f001 fefd 	bl	8004a88 <HAL_I2CEx_ConfigAnalogFilter>
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d167      	bne.n	8002d62 <main+0x29e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c92:	4842      	ldr	r0, [pc, #264]	@ (8002d9c <main+0x2d8>)
 8002c94:	2100      	movs	r1, #0
 8002c96:	f001 ff23 	bl	8004ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d163      	bne.n	8002d66 <main+0x2a2>
  htim14.Instance = TIM14;
 8002c9e:	4842      	ldr	r0, [pc, #264]	@ (8002da8 <main+0x2e4>)
 8002ca0:	4b42      	ldr	r3, [pc, #264]	@ (8002dac <main+0x2e8>)
 8002ca2:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 4;
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 45000;
 8002cac:	4a40      	ldr	r2, [pc, #256]	@ (8002db0 <main+0x2ec>)
 8002cae:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb0:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cb2:	3380      	adds	r3, #128	@ 0x80
 8002cb4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002cb6:	f002 fd5f 	bl	8005778 <HAL_TIM_Base_Init>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d155      	bne.n	8002d6a <main+0x2a6>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8002cbe:	493d      	ldr	r1, [pc, #244]	@ (8002db4 <main+0x2f0>)
 8002cc0:	483d      	ldr	r0, [pc, #244]	@ (8002db8 <main+0x2f4>)
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	f003 fc34 	bl	8006530 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dbc <main+0x2f8>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	2104      	movs	r1, #4
 8002cd0:	438b      	bics	r3, r1
 8002cd2:	6013      	str	r3, [r2, #0]
   HAL_ADCEx_Calibration_Start(&hadc1);
 8002cd4:	4829      	ldr	r0, [pc, #164]	@ (8002d7c <main+0x2b8>)
 8002cd6:	f001 f985 	bl	8003fe4 <HAL_ADCEx_Calibration_Start>
   HAL_TIM_Base_Start_IT(&htim14);
 8002cda:	4833      	ldr	r0, [pc, #204]	@ (8002da8 <main+0x2e4>)
 8002cdc:	f002 fbf4 	bl	80054c8 <HAL_TIM_Base_Start_IT>
	data_reg[0] = ma_filters[0].result*0.53;
 8002ce0:	4e37      	ldr	r6, [pc, #220]	@ (8002dc0 <main+0x2fc>)
 8002ce2:	4f38      	ldr	r7, [pc, #224]	@ (8002dc4 <main+0x300>)
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8002ce4:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <main+0x304>)
 8002ce6:	4699      	mov	r9, r3
 8002ce8:	23fc      	movs	r3, #252	@ 0xfc
 8002cea:	059b      	lsls	r3, r3, #22
 8002cec:	4698      	mov	r8, r3
	  Check_USART1_Timeout();
 8002cee:	f7ff fe83 	bl	80029f8 <Check_USART1_Timeout>
	data_reg[0] = ma_filters[0].result*0.53;
 8002cf2:	4c36      	ldr	r4, [pc, #216]	@ (8002dcc <main+0x308>)
 8002cf4:	4d36      	ldr	r5, [pc, #216]	@ (8002dd0 <main+0x30c>)
 8002cf6:	236a      	movs	r3, #106	@ 0x6a
 8002cf8:	5ae8      	ldrh	r0, [r5, r3]
 8002cfa:	f7ff faff 	bl	80022fc <__aeabi_i2d>
 8002cfe:	0032      	movs	r2, r6
 8002d00:	003b      	movs	r3, r7
 8002d02:	f7fe fbcf 	bl	80014a4 <__aeabi_dmul>
 8002d06:	f7fd fbab 	bl	8000460 <__aeabi_d2uiz>
 8002d0a:	8020      	strh	r0, [r4, #0]
	data_reg[1] = ma_filters[1].result;
 8002d0c:	23d6      	movs	r3, #214	@ 0xd6
 8002d0e:	5aeb      	ldrh	r3, [r5, r3]
 8002d10:	8063      	strh	r3, [r4, #2]
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8002d12:	4d30      	ldr	r5, [pc, #192]	@ (8002dd4 <main+0x310>)
 8002d14:	88a8      	ldrh	r0, [r5, #4]
 8002d16:	f7ff fe8f 	bl	8002a38 <calculate_ntc_temperature>
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	f7fd ff7e 	bl	8000c1c <__aeabi_fmul>
 8002d20:	4641      	mov	r1, r8
 8002d22:	f7fd fbbb 	bl	800049c <__aeabi_fadd>
 8002d26:	f7fe fb4d 	bl	80013c4 <__aeabi_f2iz>
 8002d2a:	80a0      	strh	r0, [r4, #4]
	data_reg[3]=adc_values[3];
 8002d2c:	88eb      	ldrh	r3, [r5, #6]
 8002d2e:	80e3      	strh	r3, [r4, #6]
	data_reg[4]=adc_values[4];
 8002d30:	892b      	ldrh	r3, [r5, #8]
 8002d32:	8123      	strh	r3, [r4, #8]
    data_reg[5]=adc_values[5];
 8002d34:	896b      	ldrh	r3, [r5, #10]
 8002d36:	8163      	strh	r3, [r4, #10]
    data_reg[6]=adc_values[6];
 8002d38:	89ab      	ldrh	r3, [r5, #12]
 8002d3a:	81a3      	strh	r3, [r4, #12]
  while (1)
 8002d3c:	e7d7      	b.n	8002cee <main+0x22a>
 8002d3e:	b672      	cpsid	i
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <main+0x27c>
 8002d42:	b672      	cpsid	i
 8002d44:	e7fe      	b.n	8002d44 <main+0x280>
 8002d46:	b672      	cpsid	i
 8002d48:	e7fe      	b.n	8002d48 <main+0x284>
 8002d4a:	b672      	cpsid	i
 8002d4c:	e7fe      	b.n	8002d4c <main+0x288>
 8002d4e:	b672      	cpsid	i
 8002d50:	e7fe      	b.n	8002d50 <main+0x28c>
 8002d52:	b672      	cpsid	i
 8002d54:	e7fe      	b.n	8002d54 <main+0x290>
 8002d56:	b672      	cpsid	i
 8002d58:	e7fe      	b.n	8002d58 <main+0x294>
 8002d5a:	b672      	cpsid	i
 8002d5c:	e7fe      	b.n	8002d5c <main+0x298>
 8002d5e:	b672      	cpsid	i
 8002d60:	e7fe      	b.n	8002d60 <main+0x29c>
 8002d62:	b672      	cpsid	i
 8002d64:	e7fe      	b.n	8002d64 <main+0x2a0>
 8002d66:	b672      	cpsid	i
 8002d68:	e7fe      	b.n	8002d68 <main+0x2a4>
 8002d6a:	b672      	cpsid	i
 8002d6c:	e7fe      	b.n	8002d6c <main+0x2a8>
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	40021000 	.word	0x40021000
 8002d74:	50000800 	.word	0x50000800
 8002d78:	50000400 	.word	0x50000400
 8002d7c:	2000037c 	.word	0x2000037c
 8002d80:	40012400 	.word	0x40012400
 8002d84:	04000002 	.word	0x04000002
 8002d88:	08000004 	.word	0x08000004
 8002d8c:	0c000008 	.word	0x0c000008
 8002d90:	10000010 	.word	0x10000010
 8002d94:	14000020 	.word	0x14000020
 8002d98:	18000040 	.word	0x18000040
 8002d9c:	200002cc 	.word	0x200002cc
 8002da0:	40005800 	.word	0x40005800
 8002da4:	00c12166 	.word	0x00c12166
 8002da8:	200001c8 	.word	0x200001c8
 8002dac:	40002000 	.word	0x40002000
 8002db0:	0000afc8 	.word	0x0000afc8
 8002db4:	200005fc 	.word	0x200005fc
 8002db8:	20000134 	.word	0x20000134
 8002dbc:	200000d8 	.word	0x200000d8
 8002dc0:	8f5c28f6 	.word	0x8f5c28f6
 8002dc4:	3fe0f5c2 	.word	0x3fe0f5c2
 8002dc8:	41200000 	.word	0x41200000
 8002dcc:	200004dc 	.word	0x200004dc
 8002dd0:	200003e0 	.word	0x200003e0
 8002dd4:	20000644 	.word	0x20000644

08002dd8 <MA_Update>:
 {
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	0004      	movs	r4, r0
     filter->sum -= filter->buffer[filter->index];
 8002ddc:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8002dde:	2268      	movs	r2, #104	@ 0x68
 8002de0:	5c83      	ldrb	r3, [r0, r2]
 8002de2:	0058      	lsls	r0, r3, #1
 8002de4:	5a25      	ldrh	r5, [r4, r0]
     filter->buffer[filter->index] = new_value;
 8002de6:	5221      	strh	r1, [r4, r0]
     filter->sum += new_value;
 8002de8:	1989      	adds	r1, r1, r6
 8002dea:	1b48      	subs	r0, r1, r5
 8002dec:	6660      	str	r0, [r4, #100]	@ 0x64
     filter->index++;
 8002dee:	3301      	adds	r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	54a3      	strb	r3, [r4, r2]
     if (filter->index >= MA_WINDOW_SIZE)
 8002df4:	2b31      	cmp	r3, #49	@ 0x31
 8002df6:	d90c      	bls.n	8002e12 <MA_Update+0x3a>
         filter->index = 0;
 8002df8:	2368      	movs	r3, #104	@ 0x68
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	54e2      	strb	r2, [r4, r3]
         filter->filled = 1;
 8002dfe:	3301      	adds	r3, #1
 8002e00:	3201      	adds	r2, #1
 8002e02:	54e2      	strb	r2, [r4, r3]
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002e04:	3b37      	subs	r3, #55	@ 0x37
     filter->result = filter->sum / (size ? size : 1);
 8002e06:	0019      	movs	r1, r3
 8002e08:	f7fd f97a 	bl	8000100 <__udivsi3>
 8002e0c:	236a      	movs	r3, #106	@ 0x6a
 8002e0e:	52e0      	strh	r0, [r4, r3]
 }
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002e12:	2269      	movs	r2, #105	@ 0x69
 8002e14:	5ca2      	ldrb	r2, [r4, r2]
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	d103      	bne.n	8002e22 <MA_Update+0x4a>
     filter->result = filter->sum / (size ? size : 1);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f3      	beq.n	8002e08 <MA_Update+0x30>
 8002e20:	e7f1      	b.n	8002e06 <MA_Update+0x2e>
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002e22:	2332      	movs	r3, #50	@ 0x32
 8002e24:	e7ef      	b.n	8002e06 <MA_Update+0x2e>
	...

08002e28 <HAL_ADC_ConvCpltCallback>:
{
 8002e28:	b570      	push	{r4, r5, r6, lr}
    if (hadc->Instance == ADC1)
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <HAL_ADC_ConvCpltCallback+0x38>)
 8002e2c:	6802      	ldr	r2, [r0, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d000      	beq.n	8002e34 <HAL_ADC_ConvCpltCallback+0xc>
}
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
    	MA_Update(&ma_filters[0], adc_values[0]);
 8002e34:	4d0b      	ldr	r5, [pc, #44]	@ (8002e64 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002e36:	8829      	ldrh	r1, [r5, #0]
 8002e38:	4c0b      	ldr	r4, [pc, #44]	@ (8002e68 <HAL_ADC_ConvCpltCallback+0x40>)
 8002e3a:	0020      	movs	r0, r4
 8002e3c:	f7ff ffcc 	bl	8002dd8 <MA_Update>
    	MA_Update(&ma_filters[1], adc_values[1]);
 8002e40:	8869      	ldrh	r1, [r5, #2]
 8002e42:	0020      	movs	r0, r4
 8002e44:	306c      	adds	r0, #108	@ 0x6c
 8002e46:	f7ff ffc7 	bl	8002dd8 <MA_Update>
    	LED_2_OFF;
 8002e4a:	20a0      	movs	r0, #160	@ 0xa0
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	05c0      	lsls	r0, r0, #23
 8002e52:	f001 fda5 	bl	80049a0 <HAL_GPIO_WritePin>
        adc_ready = 1;
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_ADC_ConvCpltCallback+0x44>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
}
 8002e5c:	e7e9      	b.n	8002e32 <HAL_ADC_ConvCpltCallback+0xa>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	40012400 	.word	0x40012400
 8002e64:	20000644 	.word	0x20000644
 8002e68:	200003e0 	.word	0x200003e0
 8002e6c:	20000640 	.word	0x20000640

08002e70 <Error_Handler>:
 8002e70:	b672      	cpsid	i
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <Error_Handler+0x2>

08002e74 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	0007      	movs	r7, r0
 8002e78:	1e08      	subs	r0, r1, #0
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < u8length; i++) {
 8002e7a:	d016      	beq.n	8002eaa <calcCRC16ModBus+0x36>
 8002e7c:	2600      	movs	r6, #0
	temp = 0xFFFF;
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb8 <calcCRC16ModBus+0x44>)
		temp = temp ^ buffer[i];
		for (unsigned char j = 1; j <= 8; j++) {
			flag = temp & 0x0001;
 8002e80:	2501      	movs	r5, #1
			temp >>= 1;
			if (flag)
 8002e82:	4c0e      	ldr	r4, [pc, #56]	@ (8002ebc <calcCRC16ModBus+0x48>)
 8002e84:	e003      	b.n	8002e8e <calcCRC16ModBus+0x1a>
	for (unsigned char i = 0; i < u8length; i++) {
 8002e86:	3601      	adds	r6, #1
 8002e88:	b2f3      	uxtb	r3, r6
 8002e8a:	4298      	cmp	r0, r3
 8002e8c:	d90e      	bls.n	8002eac <calcCRC16ModBus+0x38>
		temp = temp ^ buffer[i];
 8002e8e:	5dbb      	ldrb	r3, [r7, r6]
 8002e90:	405a      	eors	r2, r3
 8002e92:	2108      	movs	r1, #8
			flag = temp & 0x0001;
 8002e94:	002b      	movs	r3, r5
 8002e96:	4013      	ands	r3, r2
			if (flag)
 8002e98:	425b      	negs	r3, r3
 8002e9a:	4023      	ands	r3, r4
			temp >>= 1;
 8002e9c:	0852      	lsrs	r2, r2, #1
			if (flag)
 8002e9e:	405a      	eors	r2, r3
		for (unsigned char j = 1; j <= 8; j++) {
 8002ea0:	3901      	subs	r1, #1
 8002ea2:	b2c9      	uxtb	r1, r1
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d1f5      	bne.n	8002e94 <calcCRC16ModBus+0x20>
 8002ea8:	e7ed      	b.n	8002e86 <calcCRC16ModBus+0x12>
	temp = 0xFFFF;
 8002eaa:	4a03      	ldr	r2, [pc, #12]	@ (8002eb8 <calcCRC16ModBus+0x44>)
				temp ^= 0xA001;
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8002eac:	0a13      	lsrs	r3, r2, #8
	temp = (temp << 8) | temp2;
 8002eae:	0210      	lsls	r0, r2, #8
 8002eb0:	4318      	orrs	r0, r3
	temp &= 0xFFFF;
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8002eb2:	b280      	uxth	r0, r0

}
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	0000ffff 	.word	0x0000ffff
 8002ebc:	0000a001 	.word	0x0000a001

08002ec0 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	0006      	movs	r6, r0
 8002ec4:	000d      	movs	r5, r1
 8002ec6:	0014      	movs	r4, r2

    uint16_t crc = calcCRC16ModBus(frame, len);
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0028      	movs	r0, r5
 8002ecc:	f7ff ffd2 	bl	8002e74 <calcCRC16ModBus>
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8002ed0:	192b      	adds	r3, r5, r4
 8002ed2:	7058      	strb	r0, [r3, #1]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8002ed4:	0a00      	lsrs	r0, r0, #8
 8002ed6:	5528      	strb	r0, [r5, r4]

    TX_2;
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	2201      	movs	r2, #1
 8002edc:	01c9      	lsls	r1, r1, #7
 8002ede:	4807      	ldr	r0, [pc, #28]	@ (8002efc <sendModBusRequest+0x3c>)
 8002ee0:	f001 fd5e 	bl	80049a0 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8002ee4:	1ca2      	adds	r2, r4, #2
 8002ee6:	0029      	movs	r1, r5
 8002ee8:	0030      	movs	r0, r6
 8002eea:	f002 fceb 	bl	80058c4 <HAL_UART_Transmit_DMA>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d101      	bne.n	8002ef6 <sendModBusRequest+0x36>
	 else{
		// RX_2;

	  }
return 1;
}
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
	        Error_Handler();
 8002ef6:	f7ff ffbb 	bl	8002e70 <Error_Handler>
 8002efa:	e7fa      	b.n	8002ef2 <sendModBusRequest+0x32>
 8002efc:	50000800 	.word	0x50000800

08002f00 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8002f00:	b510      	push	{r4, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	0004      	movs	r4, r0
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8002f06:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <sendError+0x34>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4668      	mov	r0, sp
 8002f0c:	7003      	strb	r3, [r0, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	425b      	negs	r3, r3
 8002f12:	430b      	orrs	r3, r1
 8002f14:	7043      	strb	r3, [r0, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 8002f16:	7082      	strb	r2, [r0, #2]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8002f18:	2103      	movs	r1, #3
 8002f1a:	f7ff ffab 	bl	8002e74 <calcCRC16ModBus>
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8002f1e:	466b      	mov	r3, sp
 8002f20:	70d8      	strb	r0, [r3, #3]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 8002f22:	0a00      	lsrs	r0, r0, #8
 8002f24:	7118      	strb	r0, [r3, #4]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8002f26:	2205      	movs	r2, #5
 8002f28:	4669      	mov	r1, sp
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	f7ff ffc8 	bl	8002ec0 <sendModBusRequest>

}
 8002f30:	b002      	add	sp, #8
 8002f32:	bd10      	pop	{r4, pc}
 8002f34:	20000000 	.word	0x20000000

08002f38 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	000c      	movs	r4, r1

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <sendModbusException+0x24>)
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <sendModbusException+0x28>)
 8002f40:	7815      	ldrb	r5, [r2, #0]
 8002f42:	0019      	movs	r1, r3
 8002f44:	701d      	strb	r5, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8002f46:	7852      	ldrb	r2, [r2, #1]
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	425b      	negs	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	704b      	strb	r3, [r1, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8002f50:	708c      	strb	r4, [r1, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8002f52:	2203      	movs	r2, #3
 8002f54:	f7ff ffb4 	bl	8002ec0 <sendModBusRequest>
}
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	200004fc 	.word	0x200004fc
 8002f60:	200005fc 	.word	0x200005fc

08002f64 <handleReadHoldingRegs>:
modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8002f66:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <handleReadHoldingRegs+0x78>)
 8002f68:	7894      	ldrb	r4, [r2, #2]
 8002f6a:	0224      	lsls	r4, r4, #8
 8002f6c:	78d3      	ldrb	r3, [r2, #3]
 8002f6e:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8002f70:	7914      	ldrb	r4, [r2, #4]
 8002f72:	0224      	lsls	r4, r4, #8
 8002f74:	7956      	ldrb	r6, [r2, #5]
 8002f76:	4326      	orrs	r6, r4
 8002f78:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs;
 8002f7a:	199f      	adds	r7, r3, r6
 8002f7c:	b2bf      	uxth	r7, r7
	if((numOfregs<0)|(numOfregs >125)){
 8002f7e:	2e7d      	cmp	r6, #125	@ 0x7d
 8002f80:	d820      	bhi.n	8002fc4 <handleReadHoldingRegs+0x60>
	if(endAddr > NUM_OF_HOLDING_REGS){
 8002f82:	2f3c      	cmp	r7, #60	@ 0x3c
 8002f84:	d823      	bhi.n	8002fce <handleReadHoldingRegs+0x6a>
	txFrame[0] = SLAVE_ID;
 8002f86:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <handleReadHoldingRegs+0x7c>)
 8002f88:	4d16      	ldr	r5, [pc, #88]	@ (8002fe4 <handleReadHoldingRegs+0x80>)
 8002f8a:	782d      	ldrb	r5, [r5, #0]
 8002f8c:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 8002f8e:	4d13      	ldr	r5, [pc, #76]	@ (8002fdc <handleReadHoldingRegs+0x78>)
 8002f90:	786d      	ldrb	r5, [r5, #1]
 8002f92:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 8002f94:	0064      	lsls	r4, r4, #1
 8002f96:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 8002f98:	2e00      	cmp	r6, #0
 8002f9a:	d01d      	beq.n	8002fd8 <handleReadHoldingRegs+0x74>
 8002f9c:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <handleReadHoldingRegs+0x84>)
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002f9e:	005d      	lsls	r5, r3, #1
 8002fa0:	5b4c      	ldrh	r4, [r1, r5]
 8002fa2:	0a24      	lsrs	r4, r4, #8
 8002fa4:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8002fa6:	5b4c      	ldrh	r4, [r1, r5]
 8002fa8:	7054      	strb	r4, [r2, #1]
		startingReg++;
 8002faa:	3301      	adds	r3, #1
 8002fac:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 8002fae:	3202      	adds	r2, #2
 8002fb0:	429f      	cmp	r7, r3
 8002fb2:	d1f4      	bne.n	8002f9e <handleReadHoldingRegs+0x3a>
 8002fb4:	0072      	lsls	r2, r6, #1
 8002fb6:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4909      	ldr	r1, [pc, #36]	@ (8002fe0 <handleReadHoldingRegs+0x7c>)
 8002fbc:	f7ff ff80 	bl	8002ec0 <sendModBusRequest>
	return 1;
 8002fc0:	2001      	movs	r0, #1
}
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	f7ff ffb7 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e7f9      	b.n	8002fc2 <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	f7ff ffb2 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e7f4      	b.n	8002fc2 <handleReadHoldingRegs+0x5e>
	int byteCursor=3;
 8002fd8:	2203      	movs	r2, #3
 8002fda:	e7ed      	b.n	8002fb8 <handleReadHoldingRegs+0x54>
 8002fdc:	200005fc 	.word	0x200005fc
 8002fe0:	200004fc 	.word	0x200004fc
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	200004ff 	.word	0x200004ff

08002fec <handleReadInputRegs>:
modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <handleReadInputRegs+0x7c>)
 8002ff0:	7894      	ldrb	r4, [r2, #2]
 8002ff2:	0224      	lsls	r4, r4, #8
 8002ff4:	78d3      	ldrb	r3, [r2, #3]
 8002ff6:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8002ff8:	7914      	ldrb	r4, [r2, #4]
 8002ffa:	0224      	lsls	r4, r4, #8
 8002ffc:	7956      	ldrb	r6, [r2, #5]
 8002ffe:	4326      	orrs	r6, r4
 8003000:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs-1;
 8003002:	199f      	adds	r7, r3, r6
 8003004:	b2bf      	uxth	r7, r7
 8003006:	1e7a      	subs	r2, r7, #1
 8003008:	b292      	uxth	r2, r2
	if((numOfregs<0)|(numOfregs >125)){
 800300a:	2e7d      	cmp	r6, #125	@ 0x7d
 800300c:	d820      	bhi.n	8003050 <handleReadInputRegs+0x64>
	if(endAddr > NUM_OF_HOLDING_REGS){
 800300e:	2a3c      	cmp	r2, #60	@ 0x3c
 8003010:	d823      	bhi.n	800305a <handleReadInputRegs+0x6e>
	txFrame[0] = SLAVE_ID;
 8003012:	4a16      	ldr	r2, [pc, #88]	@ (800306c <handleReadInputRegs+0x80>)
 8003014:	4d16      	ldr	r5, [pc, #88]	@ (8003070 <handleReadInputRegs+0x84>)
 8003016:	782d      	ldrb	r5, [r5, #0]
 8003018:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 800301a:	4d13      	ldr	r5, [pc, #76]	@ (8003068 <handleReadInputRegs+0x7c>)
 800301c:	786d      	ldrb	r5, [r5, #1]
 800301e:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 8003020:	0064      	lsls	r4, r4, #1
 8003022:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 8003024:	2e00      	cmp	r6, #0
 8003026:	d01d      	beq.n	8003064 <handleReadInputRegs+0x78>
 8003028:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <handleReadInputRegs+0x88>)
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800302a:	005d      	lsls	r5, r3, #1
 800302c:	5b4c      	ldrh	r4, [r1, r5]
 800302e:	0a24      	lsrs	r4, r4, #8
 8003030:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8003032:	5b4c      	ldrh	r4, [r1, r5]
 8003034:	7054      	strb	r4, [r2, #1]
		startingReg++;
 8003036:	3301      	adds	r3, #1
 8003038:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 800303a:	3202      	adds	r2, #2
 800303c:	429f      	cmp	r7, r3
 800303e:	d1f4      	bne.n	800302a <handleReadInputRegs+0x3e>
 8003040:	0072      	lsls	r2, r6, #1
 8003042:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4909      	ldr	r1, [pc, #36]	@ (800306c <handleReadInputRegs+0x80>)
 8003048:	f7ff ff3a 	bl	8002ec0 <sendModBusRequest>
	return 1;
 800304c:	2001      	movs	r0, #1
}
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8003050:	2103      	movs	r1, #3
 8003052:	f7ff ff71 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8003056:	2000      	movs	r0, #0
 8003058:	e7f9      	b.n	800304e <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800305a:	2102      	movs	r1, #2
 800305c:	f7ff ff6c 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8003060:	2000      	movs	r0, #0
 8003062:	e7f4      	b.n	800304e <handleReadInputRegs+0x62>
	int byteCursor=3;
 8003064:	2203      	movs	r2, #3
 8003066:	e7ed      	b.n	8003044 <handleReadInputRegs+0x58>
 8003068:	200005fc 	.word	0x200005fc
 800306c:	200004fc 	.word	0x200004fc
 8003070:	20000000 	.word	0x20000000
 8003074:	200004ff 	.word	0x200004ff

08003078 <handleReadCoils>:
modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800307c:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <handleReadCoils+0x7c>)
 800307e:	7891      	ldrb	r1, [r2, #2]
 8003080:	0209      	lsls	r1, r1, #8
 8003082:	78d3      	ldrb	r3, [r2, #3]
 8003084:	430b      	orrs	r3, r1
	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8003086:	7911      	ldrb	r1, [r2, #4]
 8003088:	0209      	lsls	r1, r1, #8
 800308a:	7954      	ldrb	r4, [r2, #5]
 800308c:	430c      	orrs	r4, r1
 800308e:	b226      	sxth	r6, r4
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8003090:	1e62      	subs	r2, r4, #1
 8003092:	21fa      	movs	r1, #250	@ 0xfa
 8003094:	00c9      	lsls	r1, r1, #3
 8003096:	b292      	uxth	r2, r2
 8003098:	428a      	cmp	r2, r1
 800309a:	d220      	bcs.n	80030de <handleReadCoils+0x66>
	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 800309c:	191b      	adds	r3, r3, r4
 800309e:	3b01      	subs	r3, #1
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80030a4:	d820      	bhi.n	80030e8 <handleReadCoils+0x70>
	memset (txFrame, '\0', 256);
 80030a6:	4f14      	ldr	r7, [pc, #80]	@ (80030f8 <handleReadCoils+0x80>)
 80030a8:	22fd      	movs	r2, #253	@ 0xfd
 80030aa:	2100      	movs	r1, #0
 80030ac:	0038      	movs	r0, r7
 80030ae:	f003 fbd9 	bl	8006864 <memset>
	txFrame[0] = SLAVE_ID;  							// Slave ID
 80030b2:	1ef9      	subs	r1, r7, #3
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <handleReadCoils+0x84>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <handleReadCoils+0x7c>)
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80030c0:	2207      	movs	r2, #7
 80030c2:	4032      	ands	r2, r6
 80030c4:	1e53      	subs	r3, r2, #1
 80030c6:	419a      	sbcs	r2, r3
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	1912      	adds	r2, r2, r4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	708a      	strb	r2, [r1, #2]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80030d0:	3203      	adds	r2, #3
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	0028      	movs	r0, r5
 80030d6:	f7ff fef3 	bl	8002ec0 <sendModBusRequest>
	return 1;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 80030de:	2103      	movs	r1, #3
 80030e0:	f7ff ff2a 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 80030e4:	2000      	movs	r0, #0
 80030e6:	e7f9      	b.n	80030dc <handleReadCoils+0x64>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80030e8:	2102      	movs	r1, #2
 80030ea:	f7ff ff25 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 80030ee:	2000      	movs	r0, #0
 80030f0:	e7f4      	b.n	80030dc <handleReadCoils+0x64>
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	200005fc 	.word	0x200005fc
 80030f8:	200004ff 	.word	0x200004ff
 80030fc:	20000000 	.word	0x20000000

08003100 <handleReadDiscreteInputs>:
modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8003104:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <handleReadDiscreteInputs+0x80>)
 8003106:	7891      	ldrb	r1, [r2, #2]
 8003108:	0209      	lsls	r1, r1, #8
 800310a:	78d3      	ldrb	r3, [r2, #3]
 800310c:	430b      	orrs	r3, r1
	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 800310e:	7911      	ldrb	r1, [r2, #4]
 8003110:	0209      	lsls	r1, r1, #8
 8003112:	7954      	ldrb	r4, [r2, #5]
 8003114:	430c      	orrs	r4, r1
 8003116:	b226      	sxth	r6, r4
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8003118:	1e62      	subs	r2, r4, #1
 800311a:	21fa      	movs	r1, #250	@ 0xfa
 800311c:	00c9      	lsls	r1, r1, #3
 800311e:	b292      	uxth	r2, r2
 8003120:	428a      	cmp	r2, r1
 8003122:	d222      	bcs.n	800316a <handleReadDiscreteInputs+0x6a>
	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8003124:	191b      	adds	r3, r3, r4
 8003126:	3b01      	subs	r3, #1
	if (endingAddr>199)  										 // end coil can not be more than 199
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bc7      	cmp	r3, #199	@ 0xc7
 800312c:	d822      	bhi.n	8003174 <handleReadDiscreteInputs+0x74>
	memset (txFrame, '\0', 256);
 800312e:	4f15      	ldr	r7, [pc, #84]	@ (8003184 <handleReadDiscreteInputs+0x84>)
 8003130:	22fc      	movs	r2, #252	@ 0xfc
 8003132:	2100      	movs	r1, #0
 8003134:	0038      	movs	r0, r7
 8003136:	f003 fb95 	bl	8006864 <memset>
	txFrame[0] = SLAVE_ID;  							// slave ID
 800313a:	1f39      	subs	r1, r7, #4
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <handleReadDiscreteInputs+0x88>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <handleReadDiscreteInputs+0x80>)
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8003148:	2207      	movs	r2, #7
 800314a:	4032      	ands	r2, r6
 800314c:	1e53      	subs	r3, r2, #1
 800314e:	419a      	sbcs	r2, r3
 8003150:	08e4      	lsrs	r4, r4, #3
 8003152:	1912      	adds	r2, r2, r4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	708a      	strb	r2, [r1, #2]
     txFrame[3]=1;
 8003158:	2301      	movs	r3, #1
 800315a:	70cb      	strb	r3, [r1, #3]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 800315c:	3203      	adds	r2, #3
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	0028      	movs	r0, r5
 8003162:	f7ff fead 	bl	8002ec0 <sendModBusRequest>
	return 1;
 8003166:	2001      	movs	r0, #1
}
 8003168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 800316a:	2103      	movs	r1, #3
 800316c:	f7ff fee4 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8003170:	2000      	movs	r0, #0
 8003172:	e7f9      	b.n	8003168 <handleReadDiscreteInputs+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8003174:	2102      	movs	r1, #2
 8003176:	f7ff fedf 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 800317a:	2000      	movs	r0, #0
 800317c:	e7f4      	b.n	8003168 <handleReadDiscreteInputs+0x68>
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	200005fc 	.word	0x200005fc
 8003184:	20000500 	.word	0x20000500
 8003188:	20000000 	.word	0x20000000

0800318c <handleWriteMulyipleHandlingRegister>:
modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800318e:	4a1f      	ldr	r2, [pc, #124]	@ (800320c <handleWriteMulyipleHandlingRegister+0x80>)
 8003190:	7894      	ldrb	r4, [r2, #2]
 8003192:	0224      	lsls	r4, r4, #8
 8003194:	78d3      	ldrb	r3, [r2, #3]
 8003196:	4323      	orrs	r3, r4
	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8003198:	7914      	ldrb	r4, [r2, #4]
 800319a:	0224      	lsls	r4, r4, #8
 800319c:	7957      	ldrb	r7, [r2, #5]
 800319e:	4327      	orrs	r7, r4
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80031a0:	1e7a      	subs	r2, r7, #1
 80031a2:	b292      	uxth	r2, r2
 80031a4:	2a7a      	cmp	r2, #122	@ 0x7a
 80031a6:	d826      	bhi.n	80031f6 <handleWriteMulyipleHandlingRegister+0x6a>
	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80031a8:	19df      	adds	r7, r3, r7
 80031aa:	b2bf      	uxth	r7, r7
 80031ac:	1e7a      	subs	r2, r7, #1
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80031ae:	b292      	uxth	r2, r2
 80031b0:	2a3c      	cmp	r2, #60	@ 0x3c
 80031b2:	d825      	bhi.n	8003200 <handleWriteMulyipleHandlingRegister+0x74>
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80031b4:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <handleWriteMulyipleHandlingRegister+0x84>)
		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80031b6:	001c      	movs	r4, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	0064      	lsls	r4, r4, #1
 80031be:	7816      	ldrb	r6, [r2, #0]
 80031c0:	0236      	lsls	r6, r6, #8
 80031c2:	7855      	ldrb	r5, [r2, #1]
 80031c4:	4335      	orrs	r5, r6
 80031c6:	5265      	strh	r5, [r4, r1]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80031c8:	3202      	adds	r2, #2
 80031ca:	429f      	cmp	r7, r3
 80031cc:	d1f3      	bne.n	80031b6 <handleWriteMulyipleHandlingRegister+0x2a>
	txFrame[0] = SLAVE_ID;     // Slave ID
 80031ce:	4911      	ldr	r1, [pc, #68]	@ (8003214 <handleWriteMulyipleHandlingRegister+0x88>)
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <handleWriteMulyipleHandlingRegister+0x8c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <handleWriteMulyipleHandlingRegister+0x80>)
 80031d8:	785a      	ldrb	r2, [r3, #1]
 80031da:	704a      	strb	r2, [r1, #1]
	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80031dc:	789a      	ldrb	r2, [r3, #2]
 80031de:	708a      	strb	r2, [r1, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80031e0:	78da      	ldrb	r2, [r3, #3]
 80031e2:	70ca      	strb	r2, [r1, #3]
	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 80031e4:	791a      	ldrb	r2, [r3, #4]
 80031e6:	710a      	strb	r2, [r1, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 80031e8:	795b      	ldrb	r3, [r3, #5]
 80031ea:	714b      	strb	r3, [r1, #5]
	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 80031ec:	2206      	movs	r2, #6
 80031ee:	f7ff fe67 	bl	8002ec0 <sendModBusRequest>
	return 1;   // success
 80031f2:	2001      	movs	r0, #1
}
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80031f6:	2103      	movs	r1, #3
 80031f8:	f7ff fe9e 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 80031fc:	2000      	movs	r0, #0
 80031fe:	e7f9      	b.n	80031f4 <handleWriteMulyipleHandlingRegister+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8003200:	2102      	movs	r1, #2
 8003202:	f7ff fe99 	bl	8002f38 <sendModbusException>
		return MODBUS_ERROR;
 8003206:	2000      	movs	r0, #0
 8003208:	e7f4      	b.n	80031f4 <handleWriteMulyipleHandlingRegister+0x68>
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	200005fc 	.word	0x200005fc
 8003210:	20000603 	.word	0x20000603
 8003214:	200004fc 	.word	0x200004fc
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b500      	push	{lr}
 800321e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <HAL_MspInit+0x3c>)
 8003222:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003224:	2201      	movs	r2, #1
 8003226:	4311      	orrs	r1, r2
 8003228:	6419      	str	r1, [r3, #64]	@ 0x40
 800322a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800322c:	400a      	ands	r2, r1
 800322e:	9200      	str	r2, [sp, #0]
 8003230:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	0549      	lsls	r1, r1, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800323c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323e:	400b      	ands	r3, r1
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2100      	movs	r1, #0
 8003248:	2004      	movs	r0, #4
 800324a:	f000 ffa5 	bl	8004198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800324e:	2004      	movs	r0, #4
 8003250:	f000 ffd4 	bl	80041fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003254:	b003      	add	sp, #12
 8003256:	bd00      	pop	{pc}
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800325c:	b510      	push	{r4, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003262:	2214      	movs	r2, #20
 8003264:	2100      	movs	r1, #0
 8003266:	a803      	add	r0, sp, #12
 8003268:	f003 fafc 	bl	8006864 <memset>
  if(hadc->Instance==ADC1)
 800326c:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <HAL_ADC_MspInit+0x9c>)
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003274:	b008      	add	sp, #32
 8003276:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_ADC_MspInit+0xa0>)
 800327a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327c:	2180      	movs	r1, #128	@ 0x80
 800327e:	0349      	lsls	r1, r1, #13
 8003280:	430a      	orrs	r2, r1
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40
 8003284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003286:	400a      	ands	r2, r1
 8003288:	9201      	str	r2, [sp, #4]
 800328a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800328e:	2201      	movs	r2, #1
 8003290:	4311      	orrs	r1, r2
 8003292:	6359      	str	r1, [r3, #52]	@ 0x34
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	401a      	ands	r2, r3
 8003298:	9202      	str	r2, [sp, #8]
 800329a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800329c:	237f      	movs	r3, #127	@ 0x7f
 800329e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a0:	3b7c      	subs	r3, #124	@ 0x7c
 80032a2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	20a0      	movs	r0, #160	@ 0xa0
 80032a6:	a903      	add	r1, sp, #12
 80032a8:	05c0      	lsls	r0, r0, #23
 80032aa:	f001 fa07 	bl	80046bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel3;
 80032ae:	4814      	ldr	r0, [pc, #80]	@ (8003300 <HAL_ADC_MspInit+0xa4>)
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <HAL_ADC_MspInit+0xa8>)
 80032b2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80032b4:	2305      	movs	r3, #5
 80032b6:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b8:	2300      	movs	r3, #0
 80032ba:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032bc:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032be:	2280      	movs	r2, #128	@ 0x80
 80032c0:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032c2:	3280      	adds	r2, #128	@ 0x80
 80032c4:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	00d2      	lsls	r2, r2, #3
 80032ca:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80032cc:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032ce:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032d0:	f001 f80a 	bl	80042e8 <HAL_DMA_Init>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_ADC_MspInit+0x94>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_ADC_MspInit+0xa4>)
 80032da:	6523      	str	r3, [r4, #80]	@ 0x50
 80032dc:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	200c      	movs	r0, #12
 80032e4:	f000 ff58 	bl	8004198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80032e8:	200c      	movs	r0, #12
 80032ea:	f000 ff87 	bl	80041fc <HAL_NVIC_EnableIRQ>
}
 80032ee:	e7c1      	b.n	8003274 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80032f0:	f7ff fdbe 	bl	8002e70 <Error_Handler>
 80032f4:	e7f0      	b.n	80032d8 <HAL_ADC_MspInit+0x7c>
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	40012400 	.word	0x40012400
 80032fc:	40021000 	.word	0x40021000
 8003300:	20000320 	.word	0x20000320
 8003304:	40020030 	.word	0x40020030

08003308 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003308:	b530      	push	{r4, r5, lr}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330e:	2214      	movs	r2, #20
 8003310:	2100      	movs	r1, #0
 8003312:	a803      	add	r0, sp, #12
 8003314:	f003 faa6 	bl	8006864 <memset>
  if(hi2c->Instance==I2C2)
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <HAL_I2C_MspInit+0xbc>)
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003320:	b009      	add	sp, #36	@ 0x24
 8003322:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4d28      	ldr	r5, [pc, #160]	@ (80033c8 <HAL_I2C_MspInit+0xc0>)
 8003326:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003328:	2301      	movs	r3, #1
 800332a:	431a      	orrs	r2, r3
 800332c:	636a      	str	r2, [r5, #52]	@ 0x34
 800332e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003330:	4013      	ands	r3, r2
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003336:	23c0      	movs	r3, #192	@ 0xc0
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333c:	2312      	movs	r3, #18
 800333e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003340:	3b0c      	subs	r3, #12
 8003342:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	20a0      	movs	r0, #160	@ 0xa0
 8003346:	a903      	add	r1, sp, #12
 8003348:	05c0      	lsls	r0, r0, #23
 800334a:	f001 f9b7 	bl	80046bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800334e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003350:	2280      	movs	r2, #128	@ 0x80
 8003352:	03d2      	lsls	r2, r2, #15
 8003354:	4313      	orrs	r3, r2
 8003356:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8003358:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800335a:	4013      	ands	r3, r2
 800335c:	9302      	str	r3, [sp, #8]
 800335e:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c2_rx.Instance = DMA1_Channel4;
 8003360:	481a      	ldr	r0, [pc, #104]	@ (80033cc <HAL_I2C_MspInit+0xc4>)
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_I2C_MspInit+0xc8>)
 8003364:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8003366:	230c      	movs	r3, #12
 8003368:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800336a:	2300      	movs	r3, #0
 800336c:	6083      	str	r3, [r0, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	6102      	str	r2, [r0, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003374:	6143      	str	r3, [r0, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003376:	6183      	str	r3, [r0, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003378:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800337a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800337c:	f000 ffb4 	bl	80042e8 <HAL_DMA_Init>
 8003380:	2800      	cmp	r0, #0
 8003382:	d119      	bne.n	80033b8 <HAL_I2C_MspInit+0xb0>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_I2C_MspInit+0xc4>)
 8003386:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003388:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_i2c2_tx.Instance = DMA1_Channel5;
 800338a:	4812      	ldr	r0, [pc, #72]	@ (80033d4 <HAL_I2C_MspInit+0xcc>)
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_I2C_MspInit+0xd0>)
 800338e:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8003390:	230d      	movs	r3, #13
 8003392:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	3303      	adds	r3, #3
 8003396:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	6102      	str	r2, [r0, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a0:	6143      	str	r3, [r0, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a2:	6183      	str	r3, [r0, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80033a4:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033a6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80033a8:	f000 ff9e 	bl	80042e8 <HAL_DMA_Init>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d106      	bne.n	80033be <HAL_I2C_MspInit+0xb6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_I2C_MspInit+0xcc>)
 80033b2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80033b4:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80033b6:	e7b3      	b.n	8003320 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 80033b8:	f7ff fd5a 	bl	8002e70 <Error_Handler>
 80033bc:	e7e2      	b.n	8003384 <HAL_I2C_MspInit+0x7c>
      Error_Handler();
 80033be:	f7ff fd57 	bl	8002e70 <Error_Handler>
 80033c2:	e7f5      	b.n	80033b0 <HAL_I2C_MspInit+0xa8>
 80033c4:	40005800 	.word	0x40005800
 80033c8:	40021000 	.word	0x40021000
 80033cc:	20000270 	.word	0x20000270
 80033d0:	40020044 	.word	0x40020044
 80033d4:	20000214 	.word	0x20000214
 80033d8:	40020058 	.word	0x40020058

080033dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033dc:	b500      	push	{lr}
 80033de:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_TIM_Base_MspInit+0x38>)
 80033e2:	6802      	ldr	r2, [r0, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_TIM_Base_MspInit+0x10>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 80033e8:	b003      	add	sp, #12
 80033ea:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_TIM_Base_MspInit+0x3c>)
 80033ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	0209      	lsls	r1, r1, #8
 80033f4:	430a      	orrs	r2, r1
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	400b      	ands	r3, r1
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	2013      	movs	r0, #19
 8003406:	f000 fec7 	bl	8004198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800340a:	2013      	movs	r0, #19
 800340c:	f000 fef6 	bl	80041fc <HAL_NVIC_EnableIRQ>
}
 8003410:	e7ea      	b.n	80033e8 <HAL_TIM_Base_MspInit+0xc>
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	40002000 	.word	0x40002000
 8003418:	40021000 	.word	0x40021000

0800341c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800341c:	b530      	push	{r4, r5, lr}
 800341e:	b08f      	sub	sp, #60	@ 0x3c
 8003420:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003422:	2214      	movs	r2, #20
 8003424:	2100      	movs	r1, #0
 8003426:	a809      	add	r0, sp, #36	@ 0x24
 8003428:	f003 fa1c 	bl	8006864 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800342c:	2218      	movs	r2, #24
 800342e:	2100      	movs	r1, #0
 8003430:	a803      	add	r0, sp, #12
 8003432:	f003 fa17 	bl	8006864 <memset>
  if(huart->Instance==USART1)
 8003436:	4b35      	ldr	r3, [pc, #212]	@ (800350c <HAL_UART_MspInit+0xf0>)
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_UART_MspInit+0x26>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800343e:	b00f      	add	sp, #60	@ 0x3c
 8003440:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003442:	2301      	movs	r3, #1
 8003444:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003446:	a803      	add	r0, sp, #12
 8003448:	f001 ff74 	bl	8005334 <HAL_RCCEx_PeriphCLKConfig>
 800344c:	2800      	cmp	r0, #0
 800344e:	d153      	bne.n	80034f8 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003450:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <HAL_UART_MspInit+0xf4>)
 8003452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	01c9      	lsls	r1, r1, #7
 8003458:	430a      	orrs	r2, r1
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40
 800345c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345e:	400a      	ands	r2, r1
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003464:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003466:	2202      	movs	r2, #2
 8003468:	4311      	orrs	r1, r2
 800346a:	6359      	str	r1, [r3, #52]	@ 0x34
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	4013      	ands	r3, r2
 8003470:	9302      	str	r3, [sp, #8]
 8003472:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003474:	23c0      	movs	r3, #192	@ 0xc0
 8003476:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2500      	movs	r5, #0
 800347c:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003480:	950d      	str	r5, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	a909      	add	r1, sp, #36	@ 0x24
 8003484:	4823      	ldr	r0, [pc, #140]	@ (8003514 <HAL_UART_MspInit+0xf8>)
 8003486:	f001 f919 	bl	80046bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800348a:	4823      	ldr	r0, [pc, #140]	@ (8003518 <HAL_UART_MspInit+0xfc>)
 800348c:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_UART_MspInit+0x100>)
 800348e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003490:	2332      	movs	r3, #50	@ 0x32
 8003492:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003494:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003498:	334e      	adds	r3, #78	@ 0x4e
 800349a:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800349c:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349e:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034a0:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034a2:	23c0      	movs	r3, #192	@ 0xc0
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034a8:	f000 ff1e 	bl	80042e8 <HAL_DMA_Init>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d126      	bne.n	80034fe <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_UART_MspInit+0xfc>)
 80034b4:	50a3      	str	r3, [r4, r2]
 80034b6:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034b8:	4819      	ldr	r0, [pc, #100]	@ (8003520 <HAL_UART_MspInit+0x104>)
 80034ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <HAL_UART_MspInit+0x108>)
 80034bc:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80034be:	2333      	movs	r3, #51	@ 0x33
 80034c0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c2:	3b23      	subs	r3, #35	@ 0x23
 80034c4:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034cc:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ce:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034d0:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034d8:	f000 ff06 	bl	80042e8 <HAL_DMA_Init>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d111      	bne.n	8003504 <HAL_UART_MspInit+0xe8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <HAL_UART_MspInit+0x104>)
 80034e2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80034e4:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	201b      	movs	r0, #27
 80034ec:	f000 fe54 	bl	8004198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034f0:	201b      	movs	r0, #27
 80034f2:	f000 fe83 	bl	80041fc <HAL_NVIC_EnableIRQ>
}
 80034f6:	e7a2      	b.n	800343e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80034f8:	f7ff fcba 	bl	8002e70 <Error_Handler>
 80034fc:	e7a8      	b.n	8003450 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80034fe:	f7ff fcb7 	bl	8002e70 <Error_Handler>
 8003502:	e7d5      	b.n	80034b0 <HAL_UART_MspInit+0x94>
      Error_Handler();
 8003504:	f7ff fcb4 	bl	8002e70 <Error_Handler>
 8003508:	e7ea      	b.n	80034e0 <HAL_UART_MspInit+0xc4>
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	40013800 	.word	0x40013800
 8003510:	40021000 	.word	0x40021000
 8003514:	50000400 	.word	0x50000400
 8003518:	200000d8 	.word	0x200000d8
 800351c:	40020008 	.word	0x40020008
 8003520:	2000007c 	.word	0x2000007c
 8003524:	4002001c 	.word	0x4002001c

08003528 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003528:	b510      	push	{r4, lr}
 800352a:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <HAL_UART_MspDeInit+0x38>)
 800352e:	6802      	ldr	r2, [r0, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d000      	beq.n	8003536 <HAL_UART_MspDeInit+0xe>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003534:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8003536:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <HAL_UART_MspDeInit+0x3c>)
 8003538:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800353a:	490b      	ldr	r1, [pc, #44]	@ (8003568 <HAL_UART_MspDeInit+0x40>)
 800353c:	400b      	ands	r3, r1
 800353e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8003540:	21c0      	movs	r1, #192	@ 0xc0
 8003542:	480a      	ldr	r0, [pc, #40]	@ (800356c <HAL_UART_MspDeInit+0x44>)
 8003544:	f001 f9a6 	bl	8004894 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	58e0      	ldr	r0, [r4, r3]
 800354c:	f000 ff30 	bl	80043b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8003550:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003552:	f000 ff2d 	bl	80043b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003556:	201b      	movs	r0, #27
 8003558:	f000 fe5c 	bl	8004214 <HAL_NVIC_DisableIRQ>
}
 800355c:	e7ea      	b.n	8003534 <HAL_UART_MspDeInit+0xc>
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	40013800 	.word	0x40013800
 8003564:	40021000 	.word	0x40021000
 8003568:	ffffbfff 	.word	0xffffbfff
 800356c:	50000400 	.word	0x50000400

08003570 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003570:	e7fe      	b.n	8003570 <NMI_Handler>

08003572 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler>

08003574 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003574:	4770      	bx	lr

08003576 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003576:	4770      	bx	lr

08003578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003578:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800357a:	f000 f8a3 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357e:	bd10      	pop	{r4, pc}

08003580 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003580:	4770      	bx	lr
	...

08003584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003584:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003586:	4802      	ldr	r0, [pc, #8]	@ (8003590 <DMA1_Channel1_IRQHandler+0xc>)
 8003588:	f001 f830 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800358c:	bd10      	pop	{r4, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	200000d8 	.word	0x200000d8

08003594 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003594:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003596:	4803      	ldr	r0, [pc, #12]	@ (80035a4 <DMA1_Channel2_3_IRQHandler+0x10>)
 8003598:	f001 f828 	bl	80045ec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 800359c:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <DMA1_Channel2_3_IRQHandler+0x14>)
 800359e:	f001 f825 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	2000007c 	.word	0x2000007c
 80035a8:	20000320 	.word	0x20000320

080035ac <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 80035ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80035ae:	4803      	ldr	r0, [pc, #12]	@ (80035bc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x10>)
 80035b0:	f001 f81c 	bl	80045ec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x14>)
 80035b6:	f001 f819 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 80035ba:	bd10      	pop	{r4, pc}
 80035bc:	20000270 	.word	0x20000270
 80035c0:	20000214 	.word	0x20000214

080035c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80035c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035c6:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <ADC1_IRQHandler+0xc>)
 80035c8:	f000 fa10 	bl	80039ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	2000037c 	.word	0x2000037c

080035d4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80035d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80035d6:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <TIM14_IRQHandler+0xc>)
 80035d8:	f001 ffac 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	200001c8 	.word	0x200001c8

080035e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035e6:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <USART1_IRQHandler+0xc>)
 80035e8:	f002 fa84 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	20000134 	.word	0x20000134

080035f4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f4:	4770      	bx	lr
	...

080035f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035f8:	480d      	ldr	r0, [pc, #52]	@ (8003630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035fc:	f7ff fffa 	bl	80035f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003600:	480c      	ldr	r0, [pc, #48]	@ (8003634 <LoopForever+0x6>)
  ldr r1, =_edata
 8003602:	490d      	ldr	r1, [pc, #52]	@ (8003638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <LoopForever+0xe>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003618:	4c0a      	ldr	r4, [pc, #40]	@ (8003644 <LoopForever+0x16>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003626:	f003 f92b 	bl	8006880 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800362a:	f7ff fa4b 	bl	8002ac4 <main>

0800362e <LoopForever>:

LoopForever:
  b LoopForever
 800362e:	e7fe      	b.n	800362e <LoopForever>
  ldr   r0, =_estack
 8003630:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003638:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800363c:	08006a34 	.word	0x08006a34
  ldr r2, =_sbss
 8003640:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003644:	20000790 	.word	0x20000790

08003648 <EXTI0_1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <EXTI0_1_IRQHandler>
	...

0800364c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <HAL_InitTick+0x44>)
 8003652:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003654:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8003656:	2900      	cmp	r1, #0
 8003658:	d100      	bne.n	800365c <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 800365a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800365c:	4d0d      	ldr	r5, [pc, #52]	@ (8003694 <HAL_InitTick+0x48>)
 800365e:	20fa      	movs	r0, #250	@ 0xfa
 8003660:	0080      	lsls	r0, r0, #2
 8003662:	f7fc fd4d 	bl	8000100 <__udivsi3>
 8003666:	0001      	movs	r1, r0
 8003668:	6828      	ldr	r0, [r5, #0]
 800366a:	f7fc fd49 	bl	8000100 <__udivsi3>
 800366e:	f000 fde1 	bl	8004234 <HAL_SYSTICK_Config>
 8003672:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8003674:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367a:	2c03      	cmp	r4, #3
 800367c:	d8ed      	bhi.n	800365a <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800367e:	2200      	movs	r2, #0
 8003680:	0021      	movs	r1, r4
 8003682:	4240      	negs	r0, r0
 8003684:	f000 fd88 	bl	8004198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <HAL_InitTick+0x4c>)
 800368a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800368c:	2000      	movs	r0, #0
 800368e:	e7e4      	b.n	800365a <HAL_InitTick+0xe>
 8003690:	20000008 	.word	0x20000008
 8003694:	20000004 	.word	0x20000004
 8003698:	2000000c 	.word	0x2000000c

0800369c <HAL_Init>:
{
 800369c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_Init+0x24>)
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036aa:	2003      	movs	r0, #3
 80036ac:	f7ff ffce 	bl	800364c <HAL_InitTick>
 80036b0:	1e04      	subs	r4, r0, #0
 80036b2:	d002      	beq.n	80036ba <HAL_Init+0x1e>
    status = HAL_ERROR;
 80036b4:	2401      	movs	r4, #1
}
 80036b6:	0020      	movs	r0, r4
 80036b8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80036ba:	f7ff fdaf 	bl	800321c <HAL_MspInit>
 80036be:	e7fa      	b.n	80036b6 <HAL_Init+0x1a>
 80036c0:	40022000 	.word	0x40022000

080036c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80036c4:	4a03      	ldr	r2, [pc, #12]	@ (80036d4 <HAL_IncTick+0x10>)
 80036c6:	6811      	ldr	r1, [r2, #0]
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_IncTick+0x14>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	185b      	adds	r3, r3, r1
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	4770      	bx	lr
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	20000654 	.word	0x20000654
 80036d8:	20000008 	.word	0x20000008

080036dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036dc:	4b01      	ldr	r3, [pc, #4]	@ (80036e4 <HAL_GetTick+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
}
 80036e0:	4770      	bx	lr
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	20000654 	.word	0x20000654

080036e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fff6 	bl	80036dc <HAL_GetTick>
 80036f0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f2:	1c63      	adds	r3, r4, #1
 80036f4:	d002      	beq.n	80036fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_Delay+0x20>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036fc:	f7ff ffee 	bl	80036dc <HAL_GetTick>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	42a0      	cmp	r0, r4
 8003704:	d3fa      	bcc.n	80036fc <HAL_Delay+0x14>
  {
  }
}
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	20000008 	.word	0x20000008

0800370c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b083      	sub	sp, #12
 8003710:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003712:	2300      	movs	r3, #0
 8003714:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003716:	2800      	cmp	r0, #0
 8003718:	d100      	bne.n	800371c <HAL_ADC_Init+0x10>
 800371a:	e0ff      	b.n	800391c <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800371c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <HAL_ADC_Init+0x18>
 8003722:	e0b6      	b.n	8003892 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003724:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	00d2      	lsls	r2, r2, #3
 800372a:	d417      	bmi.n	800375c <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	4a7c      	ldr	r2, [pc, #496]	@ (8003920 <HAL_ADC_Init+0x214>)
 8003730:	4011      	ands	r1, r2
 8003732:	2280      	movs	r2, #128	@ 0x80
 8003734:	0552      	lsls	r2, r2, #21
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373a:	4b7a      	ldr	r3, [pc, #488]	@ (8003924 <HAL_ADC_Init+0x218>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	497a      	ldr	r1, [pc, #488]	@ (8003928 <HAL_ADC_Init+0x21c>)
 8003740:	f7fc fcde 	bl	8000100 <__udivsi3>
 8003744:	3001      	adds	r0, #1
 8003746:	0040      	lsls	r0, r0, #1
 8003748:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800374a:	9b01      	ldr	r3, [sp, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8003750:	9b01      	ldr	r3, [sp, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003756:	9b01      	ldr	r3, [sp, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800375c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800375e:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003760:	2000      	movs	r0, #0
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	d408      	bmi.n	8003778 <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003766:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003768:	2210      	movs	r2, #16
 800376a:	4313      	orrs	r3, r2
 800376c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003770:	3a0f      	subs	r2, #15
 8003772:	4313      	orrs	r3, r2
 8003774:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003776:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003778:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800377a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800377c:	2310      	movs	r3, #16
 800377e:	4013      	ands	r3, r2
 8003780:	2204      	movs	r2, #4
 8003782:	402a      	ands	r2, r5
 8003784:	4313      	orrs	r3, r2
 8003786:	d000      	beq.n	800378a <HAL_ADC_Init+0x7e>
 8003788:	e0c1      	b.n	800390e <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800378a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800378c:	4a67      	ldr	r2, [pc, #412]	@ (800392c <HAL_ADC_Init+0x220>)
 800378e:	4013      	ands	r3, r2
 8003790:	3206      	adds	r2, #6
 8003792:	32ff      	adds	r2, #255	@ 0xff
 8003794:	4313      	orrs	r3, r2
 8003796:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003798:	688b      	ldr	r3, [r1, #8]
 800379a:	07db      	lsls	r3, r3, #31
 800379c:	d44f      	bmi.n	800383e <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800379e:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80037a0:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80037a2:	1e73      	subs	r3, r6, #1
 80037a4:	419e      	sbcs	r6, r3
 80037a6:	0336      	lsls	r6, r6, #12
 80037a8:	68a2      	ldr	r2, [r4, #8]
 80037aa:	68e3      	ldr	r3, [r4, #12]
 80037ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80037ae:	7e23      	ldrb	r3, [r4, #24]
 80037b0:	039b      	lsls	r3, r3, #14
 80037b2:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80037b4:	7e63      	ldrb	r3, [r4, #25]
 80037b6:	03db      	lsls	r3, r3, #15
 80037b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80037ba:	036b      	lsls	r3, r5, #13
 80037bc:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db6d      	blt.n	80038a0 <HAL_ADC_Init+0x194>
 80037c4:	2780      	movs	r7, #128	@ 0x80
 80037c6:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037c8:	232c      	movs	r3, #44	@ 0x2c
 80037ca:	5ce3      	ldrb	r3, [r4, r3]
 80037cc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80037ce:	4313      	orrs	r3, r2
 80037d0:	4333      	orrs	r3, r6
 80037d2:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037d4:	2220      	movs	r2, #32
 80037d6:	5ca2      	ldrb	r2, [r4, r2]
 80037d8:	2a01      	cmp	r2, #1
 80037da:	d064      	beq.n	80038a6 <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037de:	2a00      	cmp	r2, #0
 80037e0:	d005      	beq.n	80037ee <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037e2:	25e0      	movs	r5, #224	@ 0xe0
 80037e4:	006d      	lsls	r5, r5, #1
 80037e6:	402a      	ands	r2, r5
 80037e8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80037ea:	432a      	orrs	r2, r5
 80037ec:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037ee:	68ca      	ldr	r2, [r1, #12]
 80037f0:	4d4f      	ldr	r5, [pc, #316]	@ (8003930 <HAL_ADC_Init+0x224>)
 80037f2:	402a      	ands	r2, r5
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	0f9b      	lsrs	r3, r3, #30
 80037fc:	079b      	lsls	r3, r3, #30
 80037fe:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003800:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003802:	213c      	movs	r1, #60	@ 0x3c
 8003804:	5c61      	ldrb	r1, [r4, r1]
 8003806:	2901      	cmp	r1, #1
 8003808:	d05c      	beq.n	80038c4 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800380a:	6821      	ldr	r1, [r4, #0]
 800380c:	690b      	ldr	r3, [r1, #16]
 800380e:	4d49      	ldr	r5, [pc, #292]	@ (8003934 <HAL_ADC_Init+0x228>)
 8003810:	402b      	ands	r3, r5
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	0053      	lsls	r3, r2, #1
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	2180      	movs	r1, #128	@ 0x80
 800381e:	05c9      	lsls	r1, r1, #23
 8003820:	428b      	cmp	r3, r1
 8003822:	d00c      	beq.n	800383e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	429a      	cmp	r2, r3
 800382a:	d008      	beq.n	800383e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800382c:	4942      	ldr	r1, [pc, #264]	@ (8003938 <HAL_ADC_Init+0x22c>)
 800382e:	680b      	ldr	r3, [r1, #0]
 8003830:	4d42      	ldr	r5, [pc, #264]	@ (800393c <HAL_ADC_Init+0x230>)
 8003832:	402b      	ands	r3, r5
 8003834:	25f0      	movs	r5, #240	@ 0xf0
 8003836:	03ad      	lsls	r5, r5, #14
 8003838:	402a      	ands	r2, r5
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800383e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003840:	6953      	ldr	r3, [r2, #20]
 8003842:	2107      	movs	r1, #7
 8003844:	438b      	bics	r3, r1
 8003846:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003848:	430b      	orrs	r3, r1
 800384a:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800384c:	6821      	ldr	r1, [r4, #0]
 800384e:	694a      	ldr	r2, [r1, #20]
 8003850:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	2570      	movs	r5, #112	@ 0x70
 8003856:	43aa      	bics	r2, r5
 8003858:	4313      	orrs	r3, r2
 800385a:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13a      	bne.n	80038d8 <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003866:	3b10      	subs	r3, #16
 8003868:	430b      	orrs	r3, r1
 800386a:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800386c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	2307      	movs	r3, #7
 8003872:	4013      	ands	r3, r2
 8003874:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003876:	429a      	cmp	r2, r3
 8003878:	d040      	beq.n	80038fc <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800387a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800387c:	2212      	movs	r2, #18
 800387e:	4393      	bics	r3, r2
 8003880:	3a02      	subs	r2, #2
 8003882:	4313      	orrs	r3, r2
 8003884:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003886:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003888:	3a0f      	subs	r2, #15
 800388a:	4313      	orrs	r3, r2
 800388c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800388e:	2001      	movs	r0, #1
 8003890:	e042      	b.n	8003918 <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 8003892:	f7ff fce3 	bl	800325c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003896:	2300      	movs	r3, #0
 8003898:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800389a:	2254      	movs	r2, #84	@ 0x54
 800389c:	54a3      	strb	r3, [r4, r2]
 800389e:	e741      	b.n	8003724 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	085f      	lsrs	r7, r3, #1
 80038a4:	e790      	b.n	80037c8 <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80038aa:	2280      	movs	r2, #128	@ 0x80
 80038ac:	0252      	lsls	r2, r2, #9
 80038ae:	4313      	orrs	r3, r2
 80038b0:	e794      	b.n	80037dc <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80038b4:	2520      	movs	r5, #32
 80038b6:	432a      	orrs	r2, r5
 80038b8:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80038bc:	3d1f      	subs	r5, #31
 80038be:	432a      	orrs	r2, r5
 80038c0:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80038c2:	e78b      	b.n	80037dc <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80038c4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80038c6:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80038c8:	4329      	orrs	r1, r5
 80038ca:	430a      	orrs	r2, r1
 80038cc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80038ce:	430a      	orrs	r2, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	2201      	movs	r2, #1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	e798      	b.n	800380a <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	0392      	lsls	r2, r2, #14
 80038dc:	4293      	cmp	r3, r2
 80038de:	d1c5      	bne.n	800386c <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 80038e0:	6821      	ldr	r1, [r4, #0]
 80038e2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80038e4:	69e3      	ldr	r3, [r4, #28]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	221c      	movs	r2, #28
 80038ec:	401a      	ands	r2, r3
 80038ee:	2310      	movs	r3, #16
 80038f0:	425b      	negs	r3, r3
 80038f2:	4093      	lsls	r3, r2
 80038f4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80038f6:	4313      	orrs	r3, r2
 80038f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80038fa:	e7b7      	b.n	800386c <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 80038fc:	2300      	movs	r3, #0
 80038fe:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003900:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003902:	2203      	movs	r2, #3
 8003904:	4393      	bics	r3, r2
 8003906:	3a02      	subs	r2, #2
 8003908:	4313      	orrs	r3, r2
 800390a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800390c:	e004      	b.n	8003918 <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003910:	2210      	movs	r2, #16
 8003912:	4313      	orrs	r3, r2
 8003914:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003916:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003918:	b003      	add	sp, #12
 800391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800391c:	2001      	movs	r0, #1
 800391e:	e7fb      	b.n	8003918 <HAL_ADC_Init+0x20c>
 8003920:	6fffffe8 	.word	0x6fffffe8
 8003924:	20000004 	.word	0x20000004
 8003928:	00030d40 	.word	0x00030d40
 800392c:	fffffefd 	.word	0xfffffefd
 8003930:	ffde0201 	.word	0xffde0201
 8003934:	1ffffc02 	.word	0x1ffffc02
 8003938:	40012708 	.word	0x40012708
 800393c:	ffc3ffff 	.word	0xffc3ffff

08003940 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003940:	4770      	bx	lr

08003942 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003942:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003944:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003946:	f7ff fffb 	bl	8003940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800394a:	bd10      	pop	{r4, pc}

0800394c <HAL_ADC_LevelOutOfWindowCallback>:
}
 800394c:	4770      	bx	lr

0800394e <HAL_ADC_ErrorCallback>:
}
 800394e:	4770      	bx	lr

08003950 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003950:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003952:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003954:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003956:	2240      	movs	r2, #64	@ 0x40
 8003958:	4313      	orrs	r3, r2
 800395a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800395c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800395e:	3a3c      	subs	r2, #60	@ 0x3c
 8003960:	4313      	orrs	r3, r2
 8003962:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003964:	f7ff fff3 	bl	800394e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003968:	bd10      	pop	{r4, pc}
	...

0800396c <ADC_DMAConvCplt>:
{
 800396c:	b510      	push	{r4, lr}
 800396e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003970:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003972:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003974:	2150      	movs	r1, #80	@ 0x50
 8003976:	4211      	tst	r1, r2
 8003978:	d12a      	bne.n	80039d0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4313      	orrs	r3, r2
 8003982:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003984:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	22c0      	movs	r2, #192	@ 0xc0
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	4211      	tst	r1, r2
 800398e:	d113      	bne.n	80039b8 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003990:	7e82      	ldrb	r2, [r0, #26]
 8003992:	2a00      	cmp	r2, #0
 8003994:	d110      	bne.n	80039b8 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	0712      	lsls	r2, r2, #28
 800399a:	d50d      	bpl.n	80039b8 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	0752      	lsls	r2, r2, #29
 80039a0:	d40d      	bmi.n	80039be <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	210c      	movs	r1, #12
 80039a6:	438a      	bics	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80039aa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80039ac:	4a0e      	ldr	r2, [pc, #56]	@ (80039e8 <ADC_DMAConvCplt+0x7c>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	3204      	adds	r2, #4
 80039b2:	32ff      	adds	r2, #255	@ 0xff
 80039b4:	4313      	orrs	r3, r2
 80039b6:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80039b8:	f7ff fa36 	bl	8002e28 <HAL_ADC_ConvCpltCallback>
}
 80039bc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80039c0:	2220      	movs	r2, #32
 80039c2:	4313      	orrs	r3, r2
 80039c4:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80039c8:	3a1f      	subs	r2, #31
 80039ca:	4313      	orrs	r3, r2
 80039cc:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80039ce:	e7f3      	b.n	80039b8 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	d404      	bmi.n	80039e0 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039d6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80039d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039da:	0018      	movs	r0, r3
 80039dc:	4790      	blx	r2
}
 80039de:	e7ed      	b.n	80039bc <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 80039e0:	f7ff ffb5 	bl	800394e <HAL_ADC_ErrorCallback>
 80039e4:	e7ea      	b.n	80039bc <ADC_DMAConvCplt+0x50>
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	fffffefe 	.word	0xfffffefe

080039ec <HAL_ADC_IRQHandler>:
{
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039f4:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80039f6:	07ab      	lsls	r3, r5, #30
 80039f8:	d50f      	bpl.n	8003a1a <HAL_ADC_IRQHandler+0x2e>
 80039fa:	07b3      	lsls	r3, r6, #30
 80039fc:	d50d      	bpl.n	8003a1a <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039fe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003a00:	06db      	lsls	r3, r3, #27
 8003a02:	d404      	bmi.n	8003a0e <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a04:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f000 fbc0 	bl	8004194 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a1a:	076b      	lsls	r3, r5, #29
 8003a1c:	d501      	bpl.n	8003a22 <HAL_ADC_IRQHandler+0x36>
 8003a1e:	0773      	lsls	r3, r6, #29
 8003a20:	d403      	bmi.n	8003a2a <HAL_ADC_IRQHandler+0x3e>
 8003a22:	072b      	lsls	r3, r5, #28
 8003a24:	d529      	bpl.n	8003a7a <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a26:	0733      	lsls	r3, r6, #28
 8003a28:	d527      	bpl.n	8003a7a <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a2c:	06db      	lsls	r3, r3, #27
 8003a2e:	d404      	bmi.n	8003a3a <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a30:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4313      	orrs	r3, r2
 8003a38:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a3a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a3c:	68d9      	ldr	r1, [r3, #12]
 8003a3e:	22c0      	movs	r2, #192	@ 0xc0
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	4211      	tst	r1, r2
 8003a44:	d113      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a46:	7ea2      	ldrb	r2, [r4, #26]
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d110      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	0712      	lsls	r2, r2, #28
 8003a50:	d50d      	bpl.n	8003a6e <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	0752      	lsls	r2, r2, #29
 8003a56:	d43b      	bmi.n	8003ad0 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	210c      	movs	r1, #12
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003a60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a62:	4a37      	ldr	r2, [pc, #220]	@ (8003b40 <HAL_ADC_IRQHandler+0x154>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	3204      	adds	r2, #4
 8003a68:	32ff      	adds	r2, #255	@ 0xff
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f7ff f9da 	bl	8002e28 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	220c      	movs	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a7a:	062b      	lsls	r3, r5, #24
 8003a7c:	d501      	bpl.n	8003a82 <HAL_ADC_IRQHandler+0x96>
 8003a7e:	0633      	lsls	r3, r6, #24
 8003a80:	d42f      	bmi.n	8003ae2 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a82:	05eb      	lsls	r3, r5, #23
 8003a84:	d501      	bpl.n	8003a8a <HAL_ADC_IRQHandler+0x9e>
 8003a86:	05f3      	lsls	r3, r6, #23
 8003a88:	d437      	bmi.n	8003afa <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a8a:	05ab      	lsls	r3, r5, #22
 8003a8c:	d501      	bpl.n	8003a92 <HAL_ADC_IRQHandler+0xa6>
 8003a8e:	05b3      	lsls	r3, r6, #22
 8003a90:	d440      	bmi.n	8003b14 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a92:	06eb      	lsls	r3, r5, #27
 8003a94:	d517      	bpl.n	8003ac6 <HAL_ADC_IRQHandler+0xda>
 8003a96:	06f3      	lsls	r3, r6, #27
 8003a98:	d515      	bpl.n	8003ac6 <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003aa0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003aa8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003aaa:	2380      	movs	r3, #128	@ 0x80
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ab2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8003aba:	0020      	movs	r0, r4
 8003abc:	f7ff ff47 	bl	800394e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003ac6:	04ad      	lsls	r5, r5, #18
 8003ac8:	d501      	bpl.n	8003ace <HAL_ADC_IRQHandler+0xe2>
 8003aca:	04b6      	lsls	r6, r6, #18
 8003acc:	d42f      	bmi.n	8003b2e <HAL_ADC_IRQHandler+0x142>
}
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ada:	3a1f      	subs	r2, #31
 8003adc:	4313      	orrs	r3, r2
 8003ade:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003ae0:	e7c5      	b.n	8003a6e <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ae2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	025b      	lsls	r3, r3, #9
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aec:	0020      	movs	r0, r4
 8003aee:	f7ff ff2d 	bl	800394c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e7c3      	b.n	8003a82 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003afa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	4313      	orrs	r3, r2
 8003b02:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b04:	0020      	movs	r0, r4
 8003b06:	f000 fb43 	bl	8004190 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e7ba      	b.n	8003a8a <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b14:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	02db      	lsls	r3, r3, #11
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b1e:	0020      	movs	r0, r4
 8003b20:	f000 fb37 	bl	8004192 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e7b1      	b.n	8003a92 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003b2e:	0020      	movs	r0, r4
 8003b30:	f000 fb31 	bl	8004196 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	0192      	lsls	r2, r2, #6
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	e7c7      	b.n	8003ace <HAL_ADC_IRQHandler+0xe2>
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	fffffefe 	.word	0xfffffefe

08003b44 <HAL_ADC_ConfigChannel>:
{
 8003b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b46:	b083      	sub	sp, #12
 8003b48:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b4e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003b50:	3354      	adds	r3, #84	@ 0x54
 8003b52:	5cc3      	ldrb	r3, [r0, r3]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d100      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x16>
 8003b58:	e11e      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x254>
 8003b5a:	2354      	movs	r3, #84	@ 0x54
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b60:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b62:	6883      	ldr	r3, [r0, #8]
 8003b64:	3203      	adds	r2, #3
 8003b66:	0017      	movs	r7, r2
 8003b68:	401f      	ands	r7, r3
 8003b6a:	421a      	tst	r2, r3
 8003b6c:	d009      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b70:	321c      	adds	r2, #28
 8003b72:	4313      	orrs	r3, r2
 8003b74:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003b78:	2354      	movs	r3, #84	@ 0x54
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	54e2      	strb	r2, [r4, r3]
}
 8003b7e:	b003      	add	sp, #12
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b82:	684a      	ldr	r2, [r1, #4]
 8003b84:	2a02      	cmp	r2, #2
 8003b86:	d100      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x46>
 8003b88:	e0c4      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	439d      	bics	r5, r3
 8003b8e:	2680      	movs	r6, #128	@ 0x80
 8003b90:	0636      	lsls	r6, r6, #24
 8003b92:	42b5      	cmp	r5, r6
 8003b94:	d021      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b96:	231f      	movs	r3, #31
 8003b98:	401a      	ands	r2, r3
 8003b9a:	3b10      	subs	r3, #16
 8003b9c:	4093      	lsls	r3, r2
 8003b9e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8003ba0:	439e      	bics	r6, r3
 8003ba2:	680b      	ldr	r3, [r1, #0]
 8003ba4:	035d      	lsls	r5, r3, #13
 8003ba6:	d148      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0xf6>
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	0edf      	lsrs	r7, r3, #27
 8003bac:	003b      	movs	r3, r7
 8003bae:	4093      	lsls	r3, r2
 8003bb0:	4333      	orrs	r3, r6
 8003bb2:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003bb4:	684a      	ldr	r2, [r1, #4]
 8003bb6:	0893      	lsrs	r3, r2, #2
 8003bb8:	3301      	adds	r3, #1
 8003bba:	69e5      	ldr	r5, [r4, #28]
 8003bbc:	42ab      	cmp	r3, r5
 8003bbe:	d812      	bhi.n	8003be6 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 8003bc0:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 8003bc2:	251f      	movs	r5, #31
 8003bc4:	4015      	ands	r5, r2
 8003bc6:	680b      	ldr	r3, [r1, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	220f      	movs	r2, #15
 8003bcc:	4013      	ands	r3, r2
 8003bce:	40ab      	lsls	r3, r5
 8003bd0:	40aa      	lsls	r2, r5
 8003bd2:	4396      	bics	r6, r2
 8003bd4:	4333      	orrs	r3, r6
 8003bd6:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8003bd8:	e005      	b.n	8003be6 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bda:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003bdc:	680b      	ldr	r3, [r1, #0]
 8003bde:	035b      	lsls	r3, r3, #13
 8003be0:	0b5b      	lsrs	r3, r3, #13
 8003be2:	4313      	orrs	r3, r2
 8003be4:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003be6:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003be8:	6968      	ldr	r0, [r5, #20]
 8003bea:	680a      	ldr	r2, [r1, #0]
 8003bec:	0212      	lsls	r2, r2, #8
 8003bee:	688b      	ldr	r3, [r1, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	4e6a      	ldr	r6, [pc, #424]	@ (8003d9c <HAL_ADC_ConfigChannel+0x258>)
 8003bf4:	4033      	ands	r3, r6
 8003bf6:	4390      	bics	r0, r2
 8003bf8:	4303      	orrs	r3, r0
 8003bfa:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bfc:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfe:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dab9      	bge.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c04:	4a66      	ldr	r2, [pc, #408]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	25e0      	movs	r5, #224	@ 0xe0
 8003c0a:	046d      	lsls	r5, r5, #17
 8003c0c:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c0e:	4965      	ldr	r1, [pc, #404]	@ (8003da4 <HAL_ADC_ConfigChannel+0x260>)
 8003c10:	428b      	cmp	r3, r1
 8003c12:	d050      	beq.n	8003cb6 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c14:	4864      	ldr	r0, [pc, #400]	@ (8003da8 <HAL_ADC_ConfigChannel+0x264>)
 8003c16:	4283      	cmp	r3, r0
 8003c18:	d06e      	beq.n	8003cf8 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c1a:	4964      	ldr	r1, [pc, #400]	@ (8003dac <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1c:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c1e:	428b      	cmp	r3, r1
 8003c20:	d1aa      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
 8003c22:	0252      	lsls	r2, r2, #9
 8003c24:	d4a8      	bmi.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c26:	495e      	ldr	r1, [pc, #376]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	4a61      	ldr	r2, [pc, #388]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	432b      	orrs	r3, r5
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	03d2      	lsls	r2, r2, #15
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
}
 8003c38:	e79e      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c3a:	07dd      	lsls	r5, r3, #31
 8003c3c:	d4b6      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c3e:	2701      	movs	r7, #1
 8003c40:	079d      	lsls	r5, r3, #30
 8003c42:	d4b3      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c44:	3701      	adds	r7, #1
 8003c46:	075d      	lsls	r5, r3, #29
 8003c48:	d4b0      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c4a:	3701      	adds	r7, #1
 8003c4c:	071d      	lsls	r5, r3, #28
 8003c4e:	d4ad      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c50:	3701      	adds	r7, #1
 8003c52:	06dd      	lsls	r5, r3, #27
 8003c54:	d4aa      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c56:	3701      	adds	r7, #1
 8003c58:	069d      	lsls	r5, r3, #26
 8003c5a:	d4a7      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c5c:	3701      	adds	r7, #1
 8003c5e:	065d      	lsls	r5, r3, #25
 8003c60:	d4a4      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c62:	3701      	adds	r7, #1
 8003c64:	061d      	lsls	r5, r3, #24
 8003c66:	d4a1      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c68:	3701      	adds	r7, #1
 8003c6a:	05dd      	lsls	r5, r3, #23
 8003c6c:	d49e      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c6e:	3701      	adds	r7, #1
 8003c70:	059d      	lsls	r5, r3, #22
 8003c72:	d49b      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c74:	3701      	adds	r7, #1
 8003c76:	055d      	lsls	r5, r3, #21
 8003c78:	d498      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c7a:	3701      	adds	r7, #1
 8003c7c:	051d      	lsls	r5, r3, #20
 8003c7e:	d495      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c80:	3701      	adds	r7, #1
 8003c82:	04dd      	lsls	r5, r3, #19
 8003c84:	d492      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c86:	3701      	adds	r7, #1
 8003c88:	049d      	lsls	r5, r3, #18
 8003c8a:	d48f      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c8c:	3701      	adds	r7, #1
 8003c8e:	045d      	lsls	r5, r3, #17
 8003c90:	d48c      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c92:	3701      	adds	r7, #1
 8003c94:	041d      	lsls	r5, r3, #16
 8003c96:	d489      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c98:	3701      	adds	r7, #1
 8003c9a:	03dd      	lsls	r5, r3, #15
 8003c9c:	d486      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003c9e:	3701      	adds	r7, #1
 8003ca0:	039d      	lsls	r5, r3, #14
 8003ca2:	d483      	bmi.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003ca4:	2580      	movs	r5, #128	@ 0x80
 8003ca6:	02ed      	lsls	r5, r5, #11
 8003ca8:	001f      	movs	r7, r3
 8003caa:	402f      	ands	r7, r5
 8003cac:	422b      	tst	r3, r5
 8003cae:	d100      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x16e>
 8003cb0:	e77c      	b.n	8003bac <HAL_ADC_ConfigChannel+0x68>
 8003cb2:	2712      	movs	r7, #18
 8003cb4:	e77a      	b.n	8003bac <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cb6:	0212      	lsls	r2, r2, #8
 8003cb8:	d500      	bpl.n	8003cbc <HAL_ADC_ConfigChannel+0x178>
 8003cba:	e75d      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cbc:	4938      	ldr	r1, [pc, #224]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003cbe:	680b      	ldr	r3, [r1, #0]
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	432b      	orrs	r3, r5
 8003cc6:	2280      	movs	r2, #128	@ 0x80
 8003cc8:	0412      	lsls	r2, r2, #16
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <HAL_ADC_ConfigChannel+0x270>)
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	4939      	ldr	r1, [pc, #228]	@ (8003db8 <HAL_ADC_ConfigChannel+0x274>)
 8003cd4:	f7fc fa14 	bl	8000100 <__udivsi3>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	0043      	lsls	r3, r0, #1
 8003cdc:	181b      	adds	r3, r3, r0
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003ce2:	9b01      	ldr	r3, [sp, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d055      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8003ce8:	9b01      	ldr	r3, [sp, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f9      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e73f      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
 8003cf8:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cfa:	01d2      	lsls	r2, r2, #7
 8003cfc:	d500      	bpl.n	8003d00 <HAL_ADC_ConfigChannel+0x1bc>
 8003cfe:	e73b      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
 8003d00:	4927      	ldr	r1, [pc, #156]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d02:	680b      	ldr	r3, [r1, #0]
 8003d04:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	432b      	orrs	r3, r5
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	0452      	lsls	r2, r2, #17
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
}
 8003d12:	e731      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d14:	2304      	movs	r3, #4
 8003d16:	439d      	bics	r5, r3
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	429d      	cmp	r5, r3
 8003d1e:	d01c      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d20:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d22:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db00      	blt.n	8003d2a <HAL_ADC_ConfigChannel+0x1e6>
 8003d28:	e726      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d2c:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d2e:	491d      	ldr	r1, [pc, #116]	@ (8003da4 <HAL_ADC_ConfigChannel+0x260>)
 8003d30:	428b      	cmp	r3, r1
 8003d32:	d019      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d34:	491c      	ldr	r1, [pc, #112]	@ (8003da8 <HAL_ADC_ConfigChannel+0x264>)
 8003d36:	428b      	cmp	r3, r1
 8003d38:	d021      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d3a:	491c      	ldr	r1, [pc, #112]	@ (8003dac <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3c:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	d000      	beq.n	8003d44 <HAL_ADC_ConfigChannel+0x200>
 8003d42:	e719      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d44:	4816      	ldr	r0, [pc, #88]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d46:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d48:	23c0      	movs	r3, #192	@ 0xc0
 8003d4a:	045b      	lsls	r3, r3, #17
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d56:	2000      	movs	r0, #0
}
 8003d58:	e70e      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d5a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	035b      	lsls	r3, r3, #13
 8003d60:	0b5b      	lsrs	r3, r3, #13
 8003d62:	439a      	bics	r2, r3
 8003d64:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8003d66:	e7db      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d68:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d6a:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d6c:	23a0      	movs	r3, #160	@ 0xa0
 8003d6e:	045b      	lsls	r3, r3, #17
 8003d70:	4013      	ands	r3, r2
 8003d72:	4a0f      	ldr	r2, [pc, #60]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d7a:	2000      	movs	r0, #0
}
 8003d7c:	e6fc      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d7e:	4808      	ldr	r0, [pc, #32]	@ (8003da0 <HAL_ADC_ConfigChannel+0x25c>)
 8003d80:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d82:	23c0      	movs	r3, #192	@ 0xc0
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	4013      	ands	r3, r2
 8003d88:	4a09      	ldr	r2, [pc, #36]	@ (8003db0 <HAL_ADC_ConfigChannel+0x26c>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d90:	2000      	movs	r0, #0
}
 8003d92:	e6f1      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
 8003d94:	2000      	movs	r0, #0
 8003d96:	e6ef      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8003d98:	2002      	movs	r0, #2
 8003d9a:	e6f0      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x3a>
 8003d9c:	07ffff00 	.word	0x07ffff00
 8003da0:	40012708 	.word	0x40012708
 8003da4:	b0001000 	.word	0xb0001000
 8003da8:	b8004000 	.word	0xb8004000
 8003dac:	b4002000 	.word	0xb4002000
 8003db0:	fe3fffff 	.word	0xfe3fffff
 8003db4:	20000004 	.word	0x20000004
 8003db8:	00030d40 	.word	0x00030d40

08003dbc <ADC_Enable>:
{
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc8:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003dca:	2000      	movs	r0, #0
 8003dcc:	07d2      	lsls	r2, r2, #31
 8003dce:	d434      	bmi.n	8003e3a <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <ADC_Enable+0xc8>)
 8003dd4:	4211      	tst	r1, r2
 8003dd6:	d127      	bne.n	8003e28 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	492b      	ldr	r1, [pc, #172]	@ (8003e88 <ADC_Enable+0xcc>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	2101      	movs	r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003de4:	4b29      	ldr	r3, [pc, #164]	@ (8003e8c <ADC_Enable+0xd0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	d50f      	bpl.n	8003e0c <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dec:	4b28      	ldr	r3, [pc, #160]	@ (8003e90 <ADC_Enable+0xd4>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4928      	ldr	r1, [pc, #160]	@ (8003e94 <ADC_Enable+0xd8>)
 8003df2:	f7fc f985 	bl	8000100 <__udivsi3>
 8003df6:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003df8:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <ADC_Enable+0x50>
        wait_loop_index--;
 8003e00:	9b01      	ldr	r3, [sp, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003e06:	9b01      	ldr	r3, [sp, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f9      	bne.n	8003e00 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e0c:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8003e0e:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d012      	beq.n	8003e3a <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8003e14:	f7ff fc62 	bl	80036dc <HAL_GetTick>
 8003e18:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	07d2      	lsls	r2, r2, #31
 8003e20:	d42d      	bmi.n	8003e7e <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e22:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8003e24:	4f18      	ldr	r7, [pc, #96]	@ (8003e88 <ADC_Enable+0xcc>)
 8003e26:	e00e      	b.n	8003e46 <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e32:	3a0f      	subs	r2, #15
 8003e34:	4313      	orrs	r3, r2
 8003e36:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003e38:	3001      	adds	r0, #1
}
 8003e3a:	b003      	add	sp, #12
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4215      	tst	r5, r2
 8003e44:	d119      	bne.n	8003e7a <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4215      	tst	r5, r2
 8003e4a:	d103      	bne.n	8003e54 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	403a      	ands	r2, r7
 8003e50:	432a      	orrs	r2, r5
 8003e52:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e54:	f7ff fc42 	bl	80036dc <HAL_GetTick>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	2802      	cmp	r0, #2
 8003e5c:	d9ef      	bls.n	8003e3e <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	421d      	tst	r5, r3
 8003e64:	d1eb      	bne.n	8003e3e <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e68:	2210      	movs	r2, #16
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e70:	3a0f      	subs	r2, #15
 8003e72:	4313      	orrs	r3, r2
 8003e74:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003e76:	2001      	movs	r0, #1
 8003e78:	e7df      	b.n	8003e3a <ADC_Enable+0x7e>
  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7dd      	b.n	8003e3a <ADC_Enable+0x7e>
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e7db      	b.n	8003e3a <ADC_Enable+0x7e>
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	80000017 	.word	0x80000017
 8003e88:	7fffffe8 	.word	0x7fffffe8
 8003e8c:	40012708 	.word	0x40012708
 8003e90:	20000004 	.word	0x20000004
 8003e94:	00030d40 	.word	0x00030d40

08003e98 <HAL_ADC_Start_DMA>:
{
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	0004      	movs	r4, r0
 8003e9c:	000d      	movs	r5, r1
 8003e9e:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ea2:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	075b      	lsls	r3, r3, #29
 8003ea8:	d41c      	bmi.n	8003ee4 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8003eaa:	2354      	movs	r3, #84	@ 0x54
 8003eac:	5ce3      	ldrb	r3, [r4, r3]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d044      	beq.n	8003f3c <HAL_ADC_Start_DMA+0xa4>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	2154      	movs	r1, #84	@ 0x54
 8003eb6:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003eb8:	68d1      	ldr	r1, [r2, #12]
 8003eba:	420b      	tst	r3, r1
 8003ebc:	d10d      	bne.n	8003eda <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ebe:	6893      	ldr	r3, [r2, #8]
 8003ec0:	07db      	lsls	r3, r3, #31
 8003ec2:	d505      	bpl.n	8003ed0 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8003ec4:	6893      	ldr	r3, [r2, #8]
 8003ec6:	491e      	ldr	r1, [pc, #120]	@ (8003f40 <HAL_ADC_Start_DMA+0xa8>)
 8003ec8:	400b      	ands	r3, r1
 8003eca:	2102      	movs	r1, #2
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	68d3      	ldr	r3, [r2, #12]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7ff ff6e 	bl	8003dbc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d000      	beq.n	8003ee6 <HAL_ADC_Start_DMA+0x4e>
}
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003ee6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ee8:	4b16      	ldr	r3, [pc, #88]	@ (8003f44 <HAL_ADC_Start_DMA+0xac>)
 8003eea:	401a      	ands	r2, r3
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ef8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003efa:	4913      	ldr	r1, [pc, #76]	@ (8003f48 <HAL_ADC_Start_DMA+0xb0>)
 8003efc:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003efe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003f00:	4912      	ldr	r1, [pc, #72]	@ (8003f4c <HAL_ADC_Start_DMA+0xb4>)
 8003f02:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f04:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003f06:	4912      	ldr	r1, [pc, #72]	@ (8003f50 <HAL_ADC_Start_DMA+0xb8>)
 8003f08:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	211c      	movs	r1, #28
 8003f0e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003f10:	2254      	movs	r2, #84	@ 0x54
 8003f12:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	6853      	ldr	r3, [r2, #4]
 8003f18:	390c      	subs	r1, #12
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	3140      	adds	r1, #64	@ 0x40
 8003f22:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003f24:	0033      	movs	r3, r6
 8003f26:	002a      	movs	r2, r5
 8003f28:	f000 fa92 	bl	8004450 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f2c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f2e:	6893      	ldr	r3, [r2, #8]
 8003f30:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <HAL_ADC_Start_DMA+0xa8>)
 8003f32:	400b      	ands	r3, r1
 8003f34:	2104      	movs	r1, #4
 8003f36:	430b      	orrs	r3, r1
 8003f38:	6093      	str	r3, [r2, #8]
}
 8003f3a:	e7d3      	b.n	8003ee4 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	e7d1      	b.n	8003ee4 <HAL_ADC_Start_DMA+0x4c>
 8003f40:	7fffffe8 	.word	0x7fffffe8
 8003f44:	fffff0fe 	.word	0xfffff0fe
 8003f48:	0800396d 	.word	0x0800396d
 8003f4c:	08003943 	.word	0x08003943
 8003f50:	08003951 	.word	0x08003951

08003f54 <ADC_Disable>:
{
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f58:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f5a:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f5c:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003f5e:	2000      	movs	r0, #0
 8003f60:	07d2      	lsls	r2, r2, #31
 8003f62:	d50f      	bpl.n	8003f84 <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f64:	0789      	lsls	r1, r1, #30
 8003f66:	d40d      	bmi.n	8003f84 <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	2a01      	cmp	r2, #1
 8003f70:	d009      	beq.n	8003f86 <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f74:	2210      	movs	r2, #16
 8003f76:	4313      	orrs	r3, r2
 8003f78:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003f7c:	3a0f      	subs	r2, #15
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003f82:	2001      	movs	r0, #1
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4915      	ldr	r1, [pc, #84]	@ (8003fe0 <ADC_Disable+0x8c>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	2203      	movs	r2, #3
 8003f96:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f98:	f7ff fba0 	bl	80036dc <HAL_GetTick>
 8003f9c:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa2:	2501      	movs	r5, #1
  return HAL_OK;
 8003fa4:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa6:	07db      	lsls	r3, r3, #31
 8003fa8:	d404      	bmi.n	8003fb4 <ADC_Disable+0x60>
 8003faa:	e7eb      	b.n	8003f84 <ADC_Disable+0x30>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	421d      	tst	r5, r3
 8003fb2:	d012      	beq.n	8003fda <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fb4:	f7ff fb92 	bl	80036dc <HAL_GetTick>
 8003fb8:	1b80      	subs	r0, r0, r6
 8003fba:	2802      	cmp	r0, #2
 8003fbc:	d9f6      	bls.n	8003fac <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	421d      	tst	r5, r3
 8003fc4:	d0f2      	beq.n	8003fac <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fc8:	2210      	movs	r2, #16
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003fd0:	3a0f      	subs	r2, #15
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	e7d4      	b.n	8003f84 <ADC_Disable+0x30>
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e7d2      	b.n	8003f84 <ADC_Disable+0x30>
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	7fffffe8 	.word	0x7fffffe8

08003fe4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	46de      	mov	lr, fp
 8003fe8:	4657      	mov	r7, sl
 8003fea:	464e      	mov	r6, r9
 8003fec:	4645      	mov	r5, r8
 8003fee:	b5e0      	push	{r5, r6, r7, lr}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ff8:	3354      	adds	r3, #84	@ 0x54
 8003ffa:	5cc3      	ldrb	r3, [r0, r3]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d100      	bne.n	8004002 <HAL_ADCEx_Calibration_Start+0x1e>
 8004000:	e0b7      	b.n	8004172 <HAL_ADCEx_Calibration_Start+0x18e>
 8004002:	2501      	movs	r5, #1
 8004004:	2354      	movs	r3, #84	@ 0x54
 8004006:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004008:	f7ff ffa4 	bl	8003f54 <ADC_Disable>
 800400c:	4683      	mov	fp, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	002a      	movs	r2, r5
 8004014:	400a      	ands	r2, r1
 8004016:	420d      	tst	r5, r1
 8004018:	d00e      	beq.n	8004038 <HAL_ADCEx_Calibration_Start+0x54>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800401c:	2210      	movs	r2, #16
 800401e:	4313      	orrs	r3, r2
 8004020:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004022:	2354      	movs	r3, #84	@ 0x54
 8004024:	2200      	movs	r2, #0
 8004026:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8004028:	4658      	mov	r0, fp
 800402a:	b003      	add	sp, #12
 800402c:	bcf0      	pop	{r4, r5, r6, r7}
 800402e:	46bb      	mov	fp, r7
 8004030:	46b2      	mov	sl, r6
 8004032:	46a9      	mov	r9, r5
 8004034:	46a0      	mov	r8, r4
 8004036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004038:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800403a:	484f      	ldr	r0, [pc, #316]	@ (8004178 <HAL_ADCEx_Calibration_Start+0x194>)
 800403c:	4001      	ands	r1, r0
 800403e:	3006      	adds	r0, #6
 8004040:	30ff      	adds	r0, #255	@ 0xff
 8004042:	4301      	orrs	r1, r0
 8004044:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004046:	68d9      	ldr	r1, [r3, #12]
 8004048:	4689      	mov	r9, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	484b      	ldr	r0, [pc, #300]	@ (800417c <HAL_ADCEx_Calibration_Start+0x198>)
 800404e:	4001      	ands	r1, r0
 8004050:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004052:	0015      	movs	r5, r2
  MODIFY_REG(ADCx->CR,
 8004054:	4b4a      	ldr	r3, [pc, #296]	@ (8004180 <HAL_ADCEx_Calibration_Start+0x19c>)
 8004056:	469c      	mov	ip, r3
 8004058:	2080      	movs	r0, #128	@ 0x80
 800405a:	0600      	lsls	r0, r0, #24
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800405c:	4b49      	ldr	r3, [pc, #292]	@ (8004184 <HAL_ADCEx_Calibration_Start+0x1a0>)
 800405e:	469a      	mov	sl, r3
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004060:	23b4      	movs	r3, #180	@ 0xb4
 8004062:	4698      	mov	r8, r3
 8004064:	277f      	movs	r7, #127	@ 0x7f
      LL_ADC_StartCalibration(hadc->Instance);
 8004066:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004068:	688b      	ldr	r3, [r1, #8]
 800406a:	4666      	mov	r6, ip
 800406c:	4033      	ands	r3, r6
 800406e:	4303      	orrs	r3, r0
 8004070:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004072:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004074:	688b      	ldr	r3, [r1, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db5a      	blt.n	8004130 <HAL_ADCEx_Calibration_Start+0x14c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800407a:	4643      	mov	r3, r8
 800407c:	58cb      	ldr	r3, [r1, r3]
 800407e:	403b      	ands	r3, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004080:	18ed      	adds	r5, r5, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004082:	3201      	adds	r2, #1
 8004084:	2a08      	cmp	r2, #8
 8004086:	d1ee      	bne.n	8004066 <HAL_ADCEx_Calibration_Start+0x82>
    calibration_factor_accumulated /= calibration_index;
 8004088:	08ea      	lsrs	r2, r5, #3
  MODIFY_REG(ADCx->CR,
 800408a:	688b      	ldr	r3, [r1, #8]
 800408c:	483c      	ldr	r0, [pc, #240]	@ (8004180 <HAL_ADCEx_Calibration_Start+0x19c>)
 800408e:	4003      	ands	r3, r0
 8004090:	2001      	movs	r0, #1
 8004092:	4303      	orrs	r3, r0
 8004094:	608b      	str	r3, [r1, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8004096:	6821      	ldr	r1, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004098:	6908      	ldr	r0, [r1, #16]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	4298      	cmp	r0, r3
 80040a0:	d219      	bcs.n	80040d6 <HAL_ADCEx_Calibration_Start+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80040a2:	4b39      	ldr	r3, [pc, #228]	@ (8004188 <HAL_ADCEx_Calibration_Start+0x1a4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	20f0      	movs	r0, #240	@ 0xf0
 80040a8:	0380      	lsls	r0, r0, #14
 80040aa:	4003      	ands	r3, r0
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80040ac:	20e0      	movs	r0, #224	@ 0xe0
 80040ae:	0340      	lsls	r0, r0, #13
 80040b0:	4283      	cmp	r3, r0
 80040b2:	d310      	bcc.n	80040d6 <HAL_ADCEx_Calibration_Start+0xf2>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80040b4:	0c9b      	lsrs	r3, r3, #18
 80040b6:	3b03      	subs	r3, #3
 80040b8:	2001      	movs	r0, #1
 80040ba:	4098      	lsls	r0, r3
 80040bc:	9000      	str	r0, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 80040be:	9b00      	ldr	r3, [sp, #0]
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80040c4:	9b00      	ldr	r3, [sp, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 80040ca:	9b00      	ldr	r3, [sp, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80040d0:	9b00      	ldr	r3, [sp, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f9      	bne.n	80040ca <HAL_ADCEx_Calibration_Start+0xe6>
  MODIFY_REG(ADCx->CALFACT,
 80040d6:	23b4      	movs	r3, #180	@ 0xb4
 80040d8:	58cd      	ldr	r5, [r1, r3]
 80040da:	207f      	movs	r0, #127	@ 0x7f
 80040dc:	4385      	bics	r5, r0
 80040de:	4315      	orrs	r5, r2
 80040e0:	50cd      	str	r5, [r1, r3]
    LL_ADC_Disable(hadc->Instance);
 80040e2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80040e4:	6893      	ldr	r3, [r2, #8]
 80040e6:	4926      	ldr	r1, [pc, #152]	@ (8004180 <HAL_ADCEx_Calibration_Start+0x19c>)
 80040e8:	400b      	ands	r3, r1
 80040ea:	2102      	movs	r1, #2
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80040f0:	f7ff faf4 	bl	80036dc <HAL_GetTick>
 80040f4:	0005      	movs	r5, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040f6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	07d2      	lsls	r2, r2, #31
 80040fc:	d50b      	bpl.n	8004116 <HAL_ADCEx_Calibration_Start+0x132>
 80040fe:	2301      	movs	r3, #1
 8004100:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004102:	f7ff faeb 	bl	80036dc <HAL_GetTick>
 8004106:	1b40      	subs	r0, r0, r5
 8004108:	2802      	cmp	r0, #2
 800410a:	d823      	bhi.n	8004154 <HAL_ADCEx_Calibration_Start+0x170>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	4641      	mov	r1, r8
 8004112:	4211      	tst	r1, r2
 8004114:	d1f5      	bne.n	8004102 <HAL_ADCEx_Calibration_Start+0x11e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004116:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004118:	491c      	ldr	r1, [pc, #112]	@ (800418c <HAL_ADCEx_Calibration_Start+0x1a8>)
 800411a:	464f      	mov	r7, r9
 800411c:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800411e:	4317      	orrs	r7, r2
 8004120:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004124:	2203      	movs	r2, #3
 8004126:	4393      	bics	r3, r2
 8004128:	3a02      	subs	r2, #2
 800412a:	4313      	orrs	r3, r2
 800412c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800412e:	e778      	b.n	8004022 <HAL_ADCEx_Calibration_Start+0x3e>
        wait_loop_index++;
 8004130:	9b01      	ldr	r3, [sp, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004136:	9b01      	ldr	r3, [sp, #4]
 8004138:	4553      	cmp	r3, sl
 800413a:	d99b      	bls.n	8004074 <HAL_ADCEx_Calibration_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State,
 800413c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800413e:	2212      	movs	r2, #18
 8004140:	4393      	bics	r3, r2
 8004142:	3a02      	subs	r2, #2
 8004144:	4313      	orrs	r3, r2
 8004146:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8004148:	2354      	movs	r3, #84	@ 0x54
 800414a:	2200      	movs	r2, #0
 800414c:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 800414e:	3b53      	subs	r3, #83	@ 0x53
 8004150:	469b      	mov	fp, r3
 8004152:	e769      	b.n	8004028 <HAL_ADCEx_Calibration_Start+0x44>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	07db      	lsls	r3, r3, #31
 800415a:	d5d7      	bpl.n	800410c <HAL_ADCEx_Calibration_Start+0x128>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800415e:	2210      	movs	r2, #16
 8004160:	4313      	orrs	r3, r2
 8004162:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004164:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004166:	3a0f      	subs	r2, #15
 8004168:	4313      	orrs	r3, r2
 800416a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	469b      	mov	fp, r3
 8004170:	e75a      	b.n	8004028 <HAL_ADCEx_Calibration_Start+0x44>
  __HAL_LOCK(hadc);
 8004172:	2302      	movs	r3, #2
 8004174:	469b      	mov	fp, r3
 8004176:	e757      	b.n	8004028 <HAL_ADCEx_Calibration_Start+0x44>
 8004178:	fffffefd 	.word	0xfffffefd
 800417c:	ffff7ffc 	.word	0xffff7ffc
 8004180:	7fffffe8 	.word	0x7fffffe8
 8004184:	0002f1ff 	.word	0x0002f1ff
 8004188:	40012708 	.word	0x40012708
 800418c:	00008003 	.word	0x00008003

08004190 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004190:	4770      	bx	lr

08004192 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004192:	4770      	bx	lr

08004194 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004194:	4770      	bx	lr

08004196 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004196:	4770      	bx	lr

08004198 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004198:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800419a:	2800      	cmp	r0, #0
 800419c:	db14      	blt.n	80041c8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800419e:	0884      	lsrs	r4, r0, #2
 80041a0:	00a4      	lsls	r4, r4, #2
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <HAL_NVIC_SetPriority+0x5c>)
 80041a4:	469c      	mov	ip, r3
 80041a6:	4464      	add	r4, ip
 80041a8:	26c0      	movs	r6, #192	@ 0xc0
 80041aa:	00b6      	lsls	r6, r6, #2
 80041ac:	59a5      	ldr	r5, [r4, r6]
 80041ae:	2203      	movs	r2, #3
 80041b0:	4002      	ands	r2, r0
 80041b2:	00d2      	lsls	r2, r2, #3
 80041b4:	23ff      	movs	r3, #255	@ 0xff
 80041b6:	0018      	movs	r0, r3
 80041b8:	4090      	lsls	r0, r2
 80041ba:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041bc:	0189      	lsls	r1, r1, #6
 80041be:	400b      	ands	r3, r1
 80041c0:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041c2:	432b      	orrs	r3, r5
 80041c4:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041c8:	230f      	movs	r3, #15
 80041ca:	4003      	ands	r3, r0
 80041cc:	3b08      	subs	r3, #8
 80041ce:	089b      	lsrs	r3, r3, #2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <HAL_NVIC_SetPriority+0x60>)
 80041d4:	4694      	mov	ip, r2
 80041d6:	4463      	add	r3, ip
 80041d8:	69dc      	ldr	r4, [r3, #28]
 80041da:	2203      	movs	r2, #3
 80041dc:	4010      	ands	r0, r2
 80041de:	00c0      	lsls	r0, r0, #3
 80041e0:	32fc      	adds	r2, #252	@ 0xfc
 80041e2:	0015      	movs	r5, r2
 80041e4:	4085      	lsls	r5, r0
 80041e6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041e8:	0189      	lsls	r1, r1, #6
 80041ea:	400a      	ands	r2, r1
 80041ec:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041ee:	4322      	orrs	r2, r4
 80041f0:	61da      	str	r2, [r3, #28]
 80041f2:	e7e8      	b.n	80041c6 <HAL_NVIC_SetPriority+0x2e>
 80041f4:	e000e100 	.word	0xe000e100
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041fc:	2800      	cmp	r0, #0
 80041fe:	db05      	blt.n	800420c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004200:	221f      	movs	r2, #31
 8004202:	4002      	ands	r2, r0
 8004204:	2301      	movs	r3, #1
 8004206:	4093      	lsls	r3, r2
 8004208:	4a01      	ldr	r2, [pc, #4]	@ (8004210 <HAL_NVIC_EnableIRQ+0x14>)
 800420a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800420c:	4770      	bx	lr
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	e000e100 	.word	0xe000e100

08004214 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004214:	2800      	cmp	r0, #0
 8004216:	db0a      	blt.n	800422e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004218:	221f      	movs	r2, #31
 800421a:	4002      	ands	r2, r0
 800421c:	2301      	movs	r3, #1
 800421e:	4093      	lsls	r3, r2
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_NVIC_DisableIRQ+0x1c>)
 8004222:	2280      	movs	r2, #128	@ 0x80
 8004224:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800422a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100

08004234 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004234:	3801      	subs	r0, #1
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	045b      	lsls	r3, r3, #17
 800423a:	4298      	cmp	r0, r3
 800423c:	d20f      	bcs.n	800425e <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <HAL_SYSTICK_Config+0x30>)
 8004240:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004242:	4809      	ldr	r0, [pc, #36]	@ (8004268 <HAL_SYSTICK_Config+0x34>)
 8004244:	6a03      	ldr	r3, [r0, #32]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	21c0      	movs	r1, #192	@ 0xc0
 800424c:	0609      	lsls	r1, r1, #24
 800424e:	430b      	orrs	r3, r1
 8004250:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004252:	2300      	movs	r3, #0
 8004254:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004256:	3307      	adds	r3, #7
 8004258:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800425a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800425c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800425e:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8004260:	e7fc      	b.n	800425c <HAL_SYSTICK_Config+0x28>
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	e000e010 	.word	0xe000e010
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426e:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004270:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8004272:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004274:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8004276:	2c00      	cmp	r4, #0
 8004278:	d002      	beq.n	8004280 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800427c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800427e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004280:	4e0b      	ldr	r6, [pc, #44]	@ (80042b0 <DMA_SetConfig+0x44>)
 8004282:	6877      	ldr	r7, [r6, #4]
 8004284:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004286:	241c      	movs	r4, #28
 8004288:	4025      	ands	r5, r4
 800428a:	3c1b      	subs	r4, #27
 800428c:	40ac      	lsls	r4, r5
 800428e:	433c      	orrs	r4, r7
 8004290:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004292:	6804      	ldr	r4, [r0, #0]
 8004294:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004296:	6883      	ldr	r3, [r0, #8]
 8004298:	2b10      	cmp	r3, #16
 800429a:	d004      	beq.n	80042a6 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800429c:	6803      	ldr	r3, [r0, #0]
 800429e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80042a0:	6803      	ldr	r3, [r0, #0]
 80042a2:	60da      	str	r2, [r3, #12]
  }
}
 80042a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80042a6:	6803      	ldr	r3, [r0, #0]
 80042a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80042aa:	6803      	ldr	r3, [r0, #0]
 80042ac:	60d9      	str	r1, [r3, #12]
 80042ae:	e7f9      	b.n	80042a4 <DMA_SetConfig+0x38>
 80042b0:	40020000 	.word	0x40020000

080042b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b4:	b510      	push	{r4, lr}
 80042b6:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80042be:	4694      	mov	ip, r2
 80042c0:	4463      	add	r3, ip
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042c6:	7800      	ldrb	r0, [r0, #0]
 80042c8:	3808      	subs	r0, #8
 80042ca:	2114      	movs	r1, #20
 80042cc:	f7fb ff18 	bl	8000100 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80042d2:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042d4:	231f      	movs	r3, #31
 80042d6:	4018      	ands	r0, r3
 80042d8:	3b1e      	subs	r3, #30
 80042da:	4083      	lsls	r3, r0
 80042dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80042de:	bd10      	pop	{r4, pc}
 80042e0:	10008200 	.word	0x10008200
 80042e4:	40020880 	.word	0x40020880

080042e8 <HAL_DMA_Init>:
{
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80042ec:	d055      	beq.n	800439a <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042ee:	6805      	ldr	r5, [r0, #0]
 80042f0:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <HAL_DMA_Init+0xb8>)
 80042f2:	18e8      	adds	r0, r5, r3
 80042f4:	2114      	movs	r1, #20
 80042f6:	f7fb ff03 	bl	8000100 <__udivsi3>
 80042fa:	0080      	lsls	r0, r0, #2
 80042fc:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80042fe:	2325      	movs	r3, #37	@ 0x25
 8004300:	2202      	movs	r2, #2
 8004302:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	4a27      	ldr	r2, [pc, #156]	@ (80043a4 <HAL_DMA_Init+0xbc>)
 8004308:	4013      	ands	r3, r2
 800430a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	6811      	ldr	r1, [r2, #0]
 8004310:	68a3      	ldr	r3, [r4, #8]
 8004312:	68e0      	ldr	r0, [r4, #12]
 8004314:	4303      	orrs	r3, r0
 8004316:	6920      	ldr	r0, [r4, #16]
 8004318:	4303      	orrs	r3, r0
 800431a:	6960      	ldr	r0, [r4, #20]
 800431c:	4303      	orrs	r3, r0
 800431e:	69a0      	ldr	r0, [r4, #24]
 8004320:	4303      	orrs	r3, r0
 8004322:	69e0      	ldr	r0, [r4, #28]
 8004324:	4303      	orrs	r3, r0
 8004326:	6a20      	ldr	r0, [r4, #32]
 8004328:	4303      	orrs	r3, r0
 800432a:	430b      	orrs	r3, r1
 800432c:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800432e:	0020      	movs	r0, r4
 8004330:	f7ff ffc0 	bl	80042b4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	01db      	lsls	r3, r3, #7
 8004338:	68a2      	ldr	r2, [r4, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d018      	beq.n	8004370 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800433e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	213f      	movs	r1, #63	@ 0x3f
 8004344:	400b      	ands	r3, r1
 8004346:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004348:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800434a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800434c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	2a03      	cmp	r2, #3
 8004354:	d90f      	bls.n	8004376 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800435a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800435c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	2300      	movs	r3, #0
 8004360:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004362:	2225      	movs	r2, #37	@ 0x25
 8004364:	2101      	movs	r1, #1
 8004366:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004368:	3a01      	subs	r2, #1
 800436a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800436c:	2000      	movs	r0, #0
}
 800436e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004370:	2300      	movs	r3, #0
 8004372:	6063      	str	r3, [r4, #4]
 8004374:	e7e3      	b.n	800433e <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004376:	223f      	movs	r2, #63	@ 0x3f
 8004378:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800437a:	4a0b      	ldr	r2, [pc, #44]	@ (80043a8 <HAL_DMA_Init+0xc0>)
 800437c:	189a      	adds	r2, r3, r2
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004382:	490a      	ldr	r1, [pc, #40]	@ (80043ac <HAL_DMA_Init+0xc4>)
 8004384:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004386:	3b01      	subs	r3, #1
 8004388:	2101      	movs	r1, #1
 800438a:	4099      	lsls	r1, r3
 800438c:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004392:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004394:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	e7e1      	b.n	800435e <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800439a:	2001      	movs	r0, #1
 800439c:	e7e7      	b.n	800436e <HAL_DMA_Init+0x86>
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	bffdfff8 	.word	0xbffdfff8
 80043a4:	ffff800f 	.word	0xffff800f
 80043a8:	1000823f 	.word	0x1000823f
 80043ac:	40020940 	.word	0x40020940

080043b0 <HAL_DMA_DeInit>:
{
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 80043b4:	d042      	beq.n	800443c <HAL_DMA_DeInit+0x8c>
  __HAL_DMA_DISABLE(hdma);
 80043b6:	6802      	ldr	r2, [r0, #0]
 80043b8:	6813      	ldr	r3, [r2, #0]
 80043ba:	2501      	movs	r5, #1
 80043bc:	43ab      	bics	r3, r5
 80043be:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043c0:	6807      	ldr	r7, [r0, #0]
 80043c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <HAL_DMA_DeInit+0x90>)
 80043c4:	18f8      	adds	r0, r7, r3
 80043c6:	2114      	movs	r1, #20
 80043c8:	f7fb fe9a 	bl	8000100 <__udivsi3>
 80043cc:	0080      	lsls	r0, r0, #2
 80043ce:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 80043d0:	2600      	movs	r6, #0
 80043d2:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80043d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <HAL_DMA_DeInit+0x94>)
 80043d6:	6851      	ldr	r1, [r2, #4]
 80043d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043da:	201c      	movs	r0, #28
 80043dc:	4003      	ands	r3, r0
 80043de:	409d      	lsls	r5, r3
 80043e0:	430d      	orrs	r5, r1
 80043e2:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043e4:	0020      	movs	r0, r4
 80043e6:	f7ff ff65 	bl	80042b4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80043ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80043ec:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80043f0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80043f2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	1e5a      	subs	r2, r3, #1
 80043f8:	2a03      	cmp	r2, #3
 80043fa:	d90e      	bls.n	800441a <HAL_DMA_DeInit+0x6a>
  hdma->DMAmuxRequestGen = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004400:	6563      	str	r3, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004402:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->XferCpltCallback = NULL;
 8004404:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004406:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004408:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800440a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800440e:	2225      	movs	r2, #37	@ 0x25
 8004410:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004412:	3a01      	subs	r2, #1
 8004414:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004416:	2000      	movs	r0, #0
}
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800441a:	223f      	movs	r2, #63	@ 0x3f
 800441c:	4013      	ands	r3, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800441e:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <HAL_DMA_DeInit+0x98>)
 8004420:	189a      	adds	r2, r3, r2
 8004422:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004424:	4909      	ldr	r1, [pc, #36]	@ (800444c <HAL_DMA_DeInit+0x9c>)
 8004426:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004428:	3b01      	subs	r3, #1
 800442a:	2101      	movs	r1, #1
 800442c:	4099      	lsls	r1, r3
 800442e:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004434:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004436:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	e7df      	b.n	80043fc <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 800443c:	2001      	movs	r0, #1
 800443e:	e7eb      	b.n	8004418 <HAL_DMA_DeInit+0x68>
 8004440:	bffdfff8 	.word	0xbffdfff8
 8004444:	40020000 	.word	0x40020000
 8004448:	1000823f 	.word	0x1000823f
 800444c:	40020940 	.word	0x40020940

08004450 <HAL_DMA_Start_IT>:
{
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004454:	2024      	movs	r0, #36	@ 0x24
 8004456:	5c20      	ldrb	r0, [r4, r0]
 8004458:	2801      	cmp	r0, #1
 800445a:	d045      	beq.n	80044e8 <HAL_DMA_Start_IT+0x98>
 800445c:	2024      	movs	r0, #36	@ 0x24
 800445e:	2501      	movs	r5, #1
 8004460:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004462:	3001      	adds	r0, #1
 8004464:	5c20      	ldrb	r0, [r4, r0]
 8004466:	2801      	cmp	r0, #1
 8004468:	d006      	beq.n	8004478 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800446e:	3b5c      	subs	r3, #92	@ 0x5c
 8004470:	2200      	movs	r2, #0
 8004472:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8004474:	2001      	movs	r0, #1
}
 8004476:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004478:	3024      	adds	r0, #36	@ 0x24
 800447a:	3501      	adds	r5, #1
 800447c:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447e:	2000      	movs	r0, #0
 8004480:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004482:	6825      	ldr	r5, [r4, #0]
 8004484:	6828      	ldr	r0, [r5, #0]
 8004486:	2601      	movs	r6, #1
 8004488:	43b0      	bics	r0, r6
 800448a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800448c:	0020      	movs	r0, r4
 800448e:	f7ff feed 	bl	800426c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004492:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	210e      	movs	r1, #14
 800449e:	430b      	orrs	r3, r1
 80044a0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044a2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	03db      	lsls	r3, r3, #15
 80044a8:	d504      	bpl.n	80044b4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044aa:	6811      	ldr	r1, [r2, #0]
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80044b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	2280      	movs	r2, #128	@ 0x80
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2000      	movs	r0, #0
 80044d0:	e7d1      	b.n	8004476 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	2104      	movs	r1, #4
 80044d8:	438b      	bics	r3, r1
 80044da:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044dc:	6822      	ldr	r2, [r4, #0]
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	3106      	adds	r1, #6
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e7dc      	b.n	80044a2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80044e8:	2002      	movs	r0, #2
 80044ea:	e7c4      	b.n	8004476 <HAL_DMA_Start_IT+0x26>

080044ec <HAL_DMA_Abort>:
{
 80044ec:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d036      	beq.n	8004560 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044f2:	2325      	movs	r3, #37	@ 0x25
 80044f4:	5cc3      	ldrb	r3, [r0, r3]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d006      	beq.n	8004508 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044fa:	2304      	movs	r3, #4
 80044fc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80044fe:	3320      	adds	r3, #32
 8004500:	2200      	movs	r2, #0
 8004502:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8004504:	2001      	movs	r0, #1
}
 8004506:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004508:	6802      	ldr	r2, [r0, #0]
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	210e      	movs	r1, #14
 800450e:	438b      	bics	r3, r1
 8004510:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004512:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	4913      	ldr	r1, [pc, #76]	@ (8004564 <HAL_DMA_Abort+0x78>)
 8004518:	400b      	ands	r3, r1
 800451a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800451c:	6801      	ldr	r1, [r0, #0]
 800451e:	680a      	ldr	r2, [r1, #0]
 8004520:	2301      	movs	r3, #1
 8004522:	439a      	bics	r2, r3
 8004524:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004526:	4910      	ldr	r1, [pc, #64]	@ (8004568 <HAL_DMA_Abort+0x7c>)
 8004528:	684c      	ldr	r4, [r1, #4]
 800452a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800452c:	251c      	movs	r5, #28
 800452e:	402a      	ands	r2, r5
 8004530:	4093      	lsls	r3, r2
 8004532:	4323      	orrs	r3, r4
 8004534:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004536:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8004538:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800453a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800453c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4907      	ldr	r1, [pc, #28]	@ (8004564 <HAL_DMA_Abort+0x78>)
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800454a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800454c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800454e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004550:	2325      	movs	r3, #37	@ 0x25
 8004552:	2201      	movs	r2, #1
 8004554:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004556:	3b01      	subs	r3, #1
 8004558:	2200      	movs	r2, #0
 800455a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800455c:	2000      	movs	r0, #0
 800455e:	e7d2      	b.n	8004506 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8004560:	2001      	movs	r0, #1
 8004562:	e7d0      	b.n	8004506 <HAL_DMA_Abort+0x1a>
 8004564:	fffffeff 	.word	0xfffffeff
 8004568:	40020000 	.word	0x40020000

0800456c <HAL_DMA_Abort_IT>:
{
 800456c:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800456e:	2325      	movs	r3, #37	@ 0x25
 8004570:	5cc3      	ldrb	r3, [r0, r3]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d003      	beq.n	800457e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004576:	2304      	movs	r3, #4
 8004578:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800457a:	2001      	movs	r0, #1
}
 800457c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800457e:	6802      	ldr	r2, [r0, #0]
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	210e      	movs	r1, #14
 8004584:	438b      	bics	r3, r1
 8004586:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004588:	6801      	ldr	r1, [r0, #0]
 800458a:	680a      	ldr	r2, [r1, #0]
 800458c:	2301      	movs	r3, #1
 800458e:	439a      	bics	r2, r3
 8004590:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004592:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8004594:	680a      	ldr	r2, [r1, #0]
 8004596:	4c13      	ldr	r4, [pc, #76]	@ (80045e4 <HAL_DMA_Abort_IT+0x78>)
 8004598:	4022      	ands	r2, r4
 800459a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800459c:	4912      	ldr	r1, [pc, #72]	@ (80045e8 <HAL_DMA_Abort_IT+0x7c>)
 800459e:	684c      	ldr	r4, [r1, #4]
 80045a0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80045a2:	251c      	movs	r5, #28
 80045a4:	402a      	ands	r2, r5
 80045a6:	4093      	lsls	r3, r2
 80045a8:	4323      	orrs	r3, r4
 80045aa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ac:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80045ae:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80045b0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80045b2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	490a      	ldr	r1, [pc, #40]	@ (80045e4 <HAL_DMA_Abort_IT+0x78>)
 80045bc:	400a      	ands	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80045c2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80045c4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80045c6:	2325      	movs	r3, #37	@ 0x25
 80045c8:	2201      	movs	r2, #1
 80045ca:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80045cc:	3b01      	subs	r3, #1
 80045ce:	2200      	movs	r2, #0
 80045d0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80045d2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80045d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2000      	movs	r0, #0
 80045dc:	e7ce      	b.n	800457c <HAL_DMA_Abort_IT+0x10>
 80045de:	2000      	movs	r0, #0
 80045e0:	e7cc      	b.n	800457c <HAL_DMA_Abort_IT+0x10>
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	fffffeff 	.word	0xfffffeff
 80045e8:	40020000 	.word	0x40020000

080045ec <HAL_DMA_IRQHandler>:
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80045ee:	4b31      	ldr	r3, [pc, #196]	@ (80046b4 <HAL_DMA_IRQHandler+0xc8>)
 80045f0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80045f2:	6804      	ldr	r4, [r0, #0]
 80045f4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80045f8:	221c      	movs	r2, #28
 80045fa:	4013      	ands	r3, r2
 80045fc:	3a18      	subs	r2, #24
 80045fe:	409a      	lsls	r2, r3
 8004600:	4211      	tst	r1, r2
 8004602:	d016      	beq.n	8004632 <HAL_DMA_IRQHandler+0x46>
 8004604:	076a      	lsls	r2, r5, #29
 8004606:	d514      	bpl.n	8004632 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	069b      	lsls	r3, r3, #26
 800460c:	d403      	bmi.n	8004616 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	2204      	movs	r2, #4
 8004612:	4393      	bics	r3, r2
 8004614:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004616:	4927      	ldr	r1, [pc, #156]	@ (80046b4 <HAL_DMA_IRQHandler+0xc8>)
 8004618:	684c      	ldr	r4, [r1, #4]
 800461a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800461c:	231c      	movs	r3, #28
 800461e:	401a      	ands	r2, r3
 8004620:	3b18      	subs	r3, #24
 8004622:	4093      	lsls	r3, r2
 8004624:	4323      	orrs	r3, r4
 8004626:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004628:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	d000      	beq.n	8004630 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 800462e:	4798      	blx	r3
}
 8004630:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004632:	2202      	movs	r2, #2
 8004634:	409a      	lsls	r2, r3
 8004636:	4211      	tst	r1, r2
 8004638:	d01c      	beq.n	8004674 <HAL_DMA_IRQHandler+0x88>
 800463a:	07aa      	lsls	r2, r5, #30
 800463c:	d51a      	bpl.n	8004674 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	069b      	lsls	r3, r3, #26
 8004642:	d406      	bmi.n	8004652 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	220a      	movs	r2, #10
 8004648:	4393      	bics	r3, r2
 800464a:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800464c:	2325      	movs	r3, #37	@ 0x25
 800464e:	3a09      	subs	r2, #9
 8004650:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004652:	4918      	ldr	r1, [pc, #96]	@ (80046b4 <HAL_DMA_IRQHandler+0xc8>)
 8004654:	684c      	ldr	r4, [r1, #4]
 8004656:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004658:	231c      	movs	r3, #28
 800465a:	401a      	ands	r2, r3
 800465c:	3b1a      	subs	r3, #26
 800465e:	4093      	lsls	r3, r2
 8004660:	4323      	orrs	r3, r4
 8004662:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8004664:	2324      	movs	r3, #36	@ 0x24
 8004666:	2200      	movs	r2, #0
 8004668:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800466a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0df      	beq.n	8004630 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8004670:	4798      	blx	r3
 8004672:	e7dd      	b.n	8004630 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	4211      	tst	r1, r2
 800467a:	d0d9      	beq.n	8004630 <HAL_DMA_IRQHandler+0x44>
 800467c:	072d      	lsls	r5, r5, #28
 800467e:	d5d7      	bpl.n	8004630 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	220e      	movs	r2, #14
 8004684:	4393      	bics	r3, r2
 8004686:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004688:	490a      	ldr	r1, [pc, #40]	@ (80046b4 <HAL_DMA_IRQHandler+0xc8>)
 800468a:	684c      	ldr	r4, [r1, #4]
 800468c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800468e:	231c      	movs	r3, #28
 8004690:	401a      	ands	r2, r3
 8004692:	3b1b      	subs	r3, #27
 8004694:	001d      	movs	r5, r3
 8004696:	4095      	lsls	r5, r2
 8004698:	002a      	movs	r2, r5
 800469a:	4322      	orrs	r2, r4
 800469c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800469e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80046a0:	2225      	movs	r2, #37	@ 0x25
 80046a2:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80046a4:	3323      	adds	r3, #35	@ 0x23
 80046a6:	2200      	movs	r2, #0
 80046a8:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80046aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0bf      	beq.n	8004630 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80046b0:	4798      	blx	r3
  return;
 80046b2:	e7bd      	b.n	8004630 <HAL_DMA_IRQHandler+0x44>
 80046b4:	40020000 	.word	0x40020000

080046b8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80046b8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 80046ba:	4770      	bx	lr

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046be:	46de      	mov	lr, fp
 80046c0:	4657      	mov	r7, sl
 80046c2:	464e      	mov	r6, r9
 80046c4:	4645      	mov	r5, r8
 80046c6:	b5e0      	push	{r5, r6, r7, lr}
 80046c8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ca:	680f      	ldr	r7, [r1, #0]
 80046cc:	2f00      	cmp	r7, #0
 80046ce:	d100      	bne.n	80046d2 <HAL_GPIO_Init+0x16>
 80046d0:	e0d1      	b.n	8004876 <HAL_GPIO_Init+0x1ba>
 80046d2:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80046d4:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046d6:	2401      	movs	r4, #1
 80046d8:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046da:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046dc:	4d69      	ldr	r5, [pc, #420]	@ (8004884 <HAL_GPIO_Init+0x1c8>)
 80046de:	46ab      	mov	fp, r5
 80046e0:	e052      	b.n	8004788 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 80046e2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046e4:	0025      	movs	r5, r4
 80046e6:	4095      	lsls	r5, r2
 80046e8:	43af      	bics	r7, r5
 80046ea:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046ec:	68cf      	ldr	r7, [r1, #12]
 80046ee:	4097      	lsls	r7, r2
 80046f0:	464d      	mov	r5, r9
 80046f2:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80046f4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80046f6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f8:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fa:	684e      	ldr	r6, [r1, #4]
 80046fc:	0936      	lsrs	r6, r6, #4
 80046fe:	4645      	mov	r5, r8
 8004700:	402e      	ands	r6, r5
 8004702:	409e      	lsls	r6, r3
 8004704:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8004706:	6046      	str	r6, [r0, #4]
 8004708:	e04a      	b.n	80047a0 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800470a:	2600      	movs	r6, #0
 800470c:	4655      	mov	r5, sl
 800470e:	40ae      	lsls	r6, r5
 8004710:	464d      	mov	r5, r9
 8004712:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 8004714:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8004716:	465d      	mov	r5, fp
 8004718:	682d      	ldr	r5, [r5, #0]
 800471a:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 800471c:	4665      	mov	r5, ip
 800471e:	43ed      	mvns	r5, r5
 8004720:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004722:	684d      	ldr	r5, [r1, #4]
 8004724:	2680      	movs	r6, #128	@ 0x80
 8004726:	0376      	lsls	r6, r6, #13
 8004728:	4235      	tst	r5, r6
 800472a:	d000      	beq.n	800472e <HAL_GPIO_Init+0x72>
 800472c:	e094      	b.n	8004858 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 800472e:	4656      	mov	r6, sl
 8004730:	9d01      	ldr	r5, [sp, #4]
 8004732:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004734:	465d      	mov	r5, fp
 8004736:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004738:	686d      	ldr	r5, [r5, #4]
 800473a:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800473c:	684d      	ldr	r5, [r1, #4]
 800473e:	2680      	movs	r6, #128	@ 0x80
 8004740:	03b6      	lsls	r6, r6, #14
 8004742:	4235      	tst	r5, r6
 8004744:	d000      	beq.n	8004748 <HAL_GPIO_Init+0x8c>
 8004746:	e08b      	b.n	8004860 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8004748:	4656      	mov	r6, sl
 800474a:	9d01      	ldr	r5, [sp, #4]
 800474c:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800474e:	465d      	mov	r5, fp
 8004750:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004752:	2684      	movs	r6, #132	@ 0x84
 8004754:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004756:	684d      	ldr	r5, [r1, #4]
 8004758:	03ad      	lsls	r5, r5, #14
 800475a:	d500      	bpl.n	800475e <HAL_GPIO_Init+0xa2>
 800475c:	e084      	b.n	8004868 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 800475e:	9d01      	ldr	r5, [sp, #4]
 8004760:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004762:	2584      	movs	r5, #132	@ 0x84
 8004764:	465f      	mov	r7, fp
 8004766:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 8004768:	2680      	movs	r6, #128	@ 0x80
 800476a:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800476c:	684d      	ldr	r5, [r1, #4]
 800476e:	03ed      	lsls	r5, r5, #15
 8004770:	d47d      	bmi.n	800486e <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8004772:	9d01      	ldr	r5, [sp, #4]
 8004774:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004776:	2780      	movs	r7, #128	@ 0x80
 8004778:	465d      	mov	r5, fp
 800477a:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 800477c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800477e:	680f      	ldr	r7, [r1, #0]
 8004780:	3202      	adds	r2, #2
 8004782:	003e      	movs	r6, r7
 8004784:	40de      	lsrs	r6, r3
 8004786:	d076      	beq.n	8004876 <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004788:	4646      	mov	r6, r8
 800478a:	409e      	lsls	r6, r3
 800478c:	003d      	movs	r5, r7
 800478e:	4035      	ands	r5, r6
 8004790:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 8004792:	4237      	tst	r7, r6
 8004794:	d0f2      	beq.n	800477c <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004796:	684f      	ldr	r7, [r1, #4]
 8004798:	4027      	ands	r7, r4
 800479a:	3f01      	subs	r7, #1
 800479c:	2f01      	cmp	r7, #1
 800479e:	d9a0      	bls.n	80046e2 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a0:	684e      	ldr	r6, [r1, #4]
 80047a2:	4026      	ands	r6, r4
 80047a4:	2e03      	cmp	r6, #3
 80047a6:	d022      	beq.n	80047ee <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 80047a8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047aa:	0026      	movs	r6, r4
 80047ac:	4096      	lsls	r6, r2
 80047ae:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047b0:	688e      	ldr	r6, [r1, #8]
 80047b2:	4096      	lsls	r6, r2
 80047b4:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80047b6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b8:	684e      	ldr	r6, [r1, #4]
 80047ba:	4026      	ands	r6, r4
 80047bc:	2e02      	cmp	r6, #2
 80047be:	d116      	bne.n	80047ee <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 80047c0:	08de      	lsrs	r6, r3, #3
 80047c2:	00b6      	lsls	r6, r6, #2
 80047c4:	1985      	adds	r5, r0, r6
 80047c6:	9501      	str	r5, [sp, #4]
 80047c8:	6a2d      	ldr	r5, [r5, #32]
 80047ca:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047cc:	2707      	movs	r7, #7
 80047ce:	401f      	ands	r7, r3
 80047d0:	00bf      	lsls	r7, r7, #2
 80047d2:	250f      	movs	r5, #15
 80047d4:	40bd      	lsls	r5, r7
 80047d6:	46a9      	mov	r9, r5
 80047d8:	4655      	mov	r5, sl
 80047da:	464e      	mov	r6, r9
 80047dc:	43b5      	bics	r5, r6
 80047de:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047e0:	690d      	ldr	r5, [r1, #16]
 80047e2:	40bd      	lsls	r5, r7
 80047e4:	002f      	movs	r7, r5
 80047e6:	4655      	mov	r5, sl
 80047e8:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80047ea:	9d01      	ldr	r5, [sp, #4]
 80047ec:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 80047ee:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047f0:	0026      	movs	r6, r4
 80047f2:	4096      	lsls	r6, r2
 80047f4:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f6:	684e      	ldr	r6, [r1, #4]
 80047f8:	4026      	ands	r6, r4
 80047fa:	4096      	lsls	r6, r2
 80047fc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80047fe:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004800:	684e      	ldr	r6, [r1, #4]
 8004802:	25c0      	movs	r5, #192	@ 0xc0
 8004804:	02ad      	lsls	r5, r5, #10
 8004806:	422e      	tst	r6, r5
 8004808:	d0b8      	beq.n	800477c <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 800480a:	089f      	lsrs	r7, r3, #2
 800480c:	00bf      	lsls	r7, r7, #2
 800480e:	4d1d      	ldr	r5, [pc, #116]	@ (8004884 <HAL_GPIO_Init+0x1c8>)
 8004810:	46a9      	mov	r9, r5
 8004812:	444f      	add	r7, r9
 8004814:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8004816:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004818:	0025      	movs	r5, r4
 800481a:	401d      	ands	r5, r3
 800481c:	00ed      	lsls	r5, r5, #3
 800481e:	46aa      	mov	sl, r5
 8004820:	250f      	movs	r5, #15
 8004822:	4656      	mov	r6, sl
 8004824:	40b5      	lsls	r5, r6
 8004826:	9e01      	ldr	r6, [sp, #4]
 8004828:	43ae      	bics	r6, r5
 800482a:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800482c:	25a0      	movs	r5, #160	@ 0xa0
 800482e:	05ed      	lsls	r5, r5, #23
 8004830:	42a8      	cmp	r0, r5
 8004832:	d100      	bne.n	8004836 <HAL_GPIO_Init+0x17a>
 8004834:	e769      	b.n	800470a <HAL_GPIO_Init+0x4e>
 8004836:	4e14      	ldr	r6, [pc, #80]	@ (8004888 <HAL_GPIO_Init+0x1cc>)
 8004838:	42b0      	cmp	r0, r6
 800483a:	d009      	beq.n	8004850 <HAL_GPIO_Init+0x194>
 800483c:	4e13      	ldr	r6, [pc, #76]	@ (800488c <HAL_GPIO_Init+0x1d0>)
 800483e:	42b0      	cmp	r0, r6
 8004840:	d008      	beq.n	8004854 <HAL_GPIO_Init+0x198>
 8004842:	4d13      	ldr	r5, [pc, #76]	@ (8004890 <HAL_GPIO_Init+0x1d4>)
 8004844:	1946      	adds	r6, r0, r5
 8004846:	1e75      	subs	r5, r6, #1
 8004848:	41ae      	sbcs	r6, r5
 800484a:	0076      	lsls	r6, r6, #1
 800484c:	3603      	adds	r6, #3
 800484e:	e75d      	b.n	800470c <HAL_GPIO_Init+0x50>
 8004850:	2601      	movs	r6, #1
 8004852:	e75b      	b.n	800470c <HAL_GPIO_Init+0x50>
 8004854:	2602      	movs	r6, #2
 8004856:	e759      	b.n	800470c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8004858:	4665      	mov	r5, ip
 800485a:	4656      	mov	r6, sl
 800485c:	432e      	orrs	r6, r5
 800485e:	e769      	b.n	8004734 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8004860:	4665      	mov	r5, ip
 8004862:	4656      	mov	r6, sl
 8004864:	432e      	orrs	r6, r5
 8004866:	e772      	b.n	800474e <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 8004868:	4665      	mov	r5, ip
 800486a:	432e      	orrs	r6, r5
 800486c:	e779      	b.n	8004762 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 800486e:	4665      	mov	r5, ip
 8004870:	4335      	orrs	r5, r6
 8004872:	002e      	movs	r6, r5
 8004874:	e77f      	b.n	8004776 <HAL_GPIO_Init+0xba>
  }
}
 8004876:	b003      	add	sp, #12
 8004878:	bcf0      	pop	{r4, r5, r6, r7}
 800487a:	46bb      	mov	fp, r7
 800487c:	46b2      	mov	sl, r6
 800487e:	46a9      	mov	r9, r5
 8004880:	46a0      	mov	r8, r4
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	40021800 	.word	0x40021800
 8004888:	50000400 	.word	0x50000400
 800488c:	50000800 	.word	0x50000800
 8004890:	affff400 	.word	0xaffff400

08004894 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004896:	46de      	mov	lr, fp
 8004898:	4657      	mov	r7, sl
 800489a:	464e      	mov	r6, r9
 800489c:	4645      	mov	r5, r8
 800489e:	b5e0      	push	{r5, r6, r7, lr}
 80048a0:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d06d      	beq.n	8004982 <HAL_GPIO_DeInit+0xee>
  uint32_t position = 0x00u;
 80048a6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048a8:	2201      	movs	r2, #1
 80048aa:	4693      	mov	fp, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80048ac:	3202      	adds	r2, #2
 80048ae:	4692      	mov	sl, r2
 80048b0:	320c      	adds	r2, #12
 80048b2:	4691      	mov	r9, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80048b4:	4a36      	ldr	r2, [pc, #216]	@ (8004990 <HAL_GPIO_DeInit+0xfc>)
 80048b6:	1882      	adds	r2, r0, r2
 80048b8:	1e54      	subs	r4, r2, #1
 80048ba:	41a2      	sbcs	r2, r4
 80048bc:	4252      	negs	r2, r2
 80048be:	9201      	str	r2, [sp, #4]
 80048c0:	9100      	str	r1, [sp, #0]
 80048c2:	e022      	b.n	800490a <HAL_GPIO_DeInit+0x76>
 80048c4:	2500      	movs	r5, #0
 80048c6:	4641      	mov	r1, r8
 80048c8:	408d      	lsls	r5, r1
 80048ca:	42b5      	cmp	r5, r6
 80048cc:	d045      	beq.n	800495a <HAL_GPIO_DeInit+0xc6>
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80048ce:	6804      	ldr	r4, [r0, #0]
 80048d0:	005d      	lsls	r5, r3, #1
 80048d2:	4656      	mov	r6, sl
 80048d4:	40ae      	lsls	r6, r5
 80048d6:	4334      	orrs	r4, r6
 80048d8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80048da:	08dc      	lsrs	r4, r3, #3
 80048dc:	00a4      	lsls	r4, r4, #2
 80048de:	1904      	adds	r4, r0, r4
 80048e0:	6a27      	ldr	r7, [r4, #32]
 80048e2:	2507      	movs	r5, #7
 80048e4:	401d      	ands	r5, r3
 80048e6:	00ad      	lsls	r5, r5, #2
 80048e8:	4649      	mov	r1, r9
 80048ea:	40a9      	lsls	r1, r5
 80048ec:	438f      	bics	r7, r1
 80048ee:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048f0:	6884      	ldr	r4, [r0, #8]
 80048f2:	43b4      	bics	r4, r6
 80048f4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048f6:	6844      	ldr	r4, [r0, #4]
 80048f8:	4394      	bics	r4, r2
 80048fa:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048fc:	68c2      	ldr	r2, [r0, #12]
 80048fe:	43b2      	bics	r2, r6
 8004900:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004902:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004904:	9a00      	ldr	r2, [sp, #0]
 8004906:	40da      	lsrs	r2, r3
 8004908:	d03b      	beq.n	8004982 <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800490a:	465a      	mov	r2, fp
 800490c:	409a      	lsls	r2, r3
 800490e:	9900      	ldr	r1, [sp, #0]
 8004910:	000f      	movs	r7, r1
 8004912:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 8004914:	4211      	tst	r1, r2
 8004916:	d0f4      	beq.n	8004902 <HAL_GPIO_DeInit+0x6e>
      tmp = EXTI->EXTICR[position >> 2u];
 8004918:	089c      	lsrs	r4, r3, #2
 800491a:	00a4      	lsls	r4, r4, #2
 800491c:	491d      	ldr	r1, [pc, #116]	@ (8004994 <HAL_GPIO_DeInit+0x100>)
 800491e:	468c      	mov	ip, r1
 8004920:	4464      	add	r4, ip
 8004922:	6e26      	ldr	r6, [r4, #96]	@ 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004924:	4655      	mov	r5, sl
 8004926:	401d      	ands	r5, r3
 8004928:	00e9      	lsls	r1, r5, #3
 800492a:	4688      	mov	r8, r1
 800492c:	464d      	mov	r5, r9
 800492e:	408d      	lsls	r5, r1
 8004930:	46ac      	mov	ip, r5
 8004932:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004934:	21a0      	movs	r1, #160	@ 0xa0
 8004936:	05c9      	lsls	r1, r1, #23
 8004938:	4288      	cmp	r0, r1
 800493a:	d0c3      	beq.n	80048c4 <HAL_GPIO_DeInit+0x30>
 800493c:	4d16      	ldr	r5, [pc, #88]	@ (8004998 <HAL_GPIO_DeInit+0x104>)
 800493e:	42a8      	cmp	r0, r5
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_DeInit+0xbe>
 8004942:	4d16      	ldr	r5, [pc, #88]	@ (800499c <HAL_GPIO_DeInit+0x108>)
 8004944:	42a8      	cmp	r0, r5
 8004946:	d006      	beq.n	8004956 <HAL_GPIO_DeInit+0xc2>
 8004948:	2502      	movs	r5, #2
 800494a:	9901      	ldr	r1, [sp, #4]
 800494c:	400d      	ands	r5, r1
 800494e:	3503      	adds	r5, #3
 8004950:	e7b9      	b.n	80048c6 <HAL_GPIO_DeInit+0x32>
 8004952:	2501      	movs	r5, #1
 8004954:	e7b7      	b.n	80048c6 <HAL_GPIO_DeInit+0x32>
 8004956:	2502      	movs	r5, #2
 8004958:	e7b5      	b.n	80048c6 <HAL_GPIO_DeInit+0x32>
        EXTI->IMR1 &= ~(iocurrent);
 800495a:	4d0e      	ldr	r5, [pc, #56]	@ (8004994 <HAL_GPIO_DeInit+0x100>)
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	586e      	ldr	r6, [r5, r1]
 8004960:	43be      	bics	r6, r7
 8004962:	506e      	str	r6, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8004964:	3104      	adds	r1, #4
 8004966:	586e      	ldr	r6, [r5, r1]
 8004968:	43be      	bics	r6, r7
 800496a:	506e      	str	r6, [r5, r1]
        EXTI->FTSR1 &= ~(iocurrent);
 800496c:	686e      	ldr	r6, [r5, #4]
 800496e:	43be      	bics	r6, r7
 8004970:	606e      	str	r6, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004972:	682e      	ldr	r6, [r5, #0]
 8004974:	43be      	bics	r6, r7
 8004976:	602e      	str	r6, [r5, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004978:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800497a:	4661      	mov	r1, ip
 800497c:	438d      	bics	r5, r1
 800497e:	6625      	str	r5, [r4, #96]	@ 0x60
 8004980:	e7a5      	b.n	80048ce <HAL_GPIO_DeInit+0x3a>
  }
}
 8004982:	b003      	add	sp, #12
 8004984:	bcf0      	pop	{r4, r5, r6, r7}
 8004986:	46bb      	mov	fp, r7
 8004988:	46b2      	mov	sl, r6
 800498a:	46a9      	mov	r9, r5
 800498c:	46a0      	mov	r8, r4
 800498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004990:	affff400 	.word	0xaffff400
 8004994:	40021800 	.word	0x40021800
 8004998:	50000400 	.word	0x50000400
 800499c:	50000800 	.word	0x50000800

080049a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049a4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049a6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049a8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80049aa:	e7fc      	b.n	80049a6 <HAL_GPIO_WritePin+0x6>

080049ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b510      	push	{r4, lr}
 80049ae:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b0:	d060      	beq.n	8004a74 <HAL_I2C_Init+0xc8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	2341      	movs	r3, #65	@ 0x41
 80049b4:	5cc3      	ldrb	r3, [r0, r3]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d048      	beq.n	8004a4c <HAL_I2C_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ba:	2341      	movs	r3, #65	@ 0x41
 80049bc:	2224      	movs	r2, #36	@ 0x24
 80049be:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	2101      	movs	r1, #1
 80049c6:	438b      	bics	r3, r1
 80049c8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	492a      	ldr	r1, [pc, #168]	@ (8004a78 <HAL_I2C_Init+0xcc>)
 80049d0:	400b      	ands	r3, r1
 80049d2:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	6893      	ldr	r3, [r2, #8]
 80049d8:	4928      	ldr	r1, [pc, #160]	@ (8004a7c <HAL_I2C_Init+0xd0>)
 80049da:	400b      	ands	r3, r1
 80049dc:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d039      	beq.n	8004a58 <HAL_I2C_Init+0xac>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	68a1      	ldr	r1, [r4, #8]
 80049e8:	2384      	movs	r3, #132	@ 0x84
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049f0:	68e3      	ldr	r3, [r4, #12]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d037      	beq.n	8004a66 <HAL_I2C_Init+0xba>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	6853      	ldr	r3, [r2, #4]
 80049fa:	4921      	ldr	r1, [pc, #132]	@ (8004a80 <HAL_I2C_Init+0xd4>)
 80049fc:	400b      	ands	r3, r1
 80049fe:	6053      	str	r3, [r2, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	6851      	ldr	r1, [r2, #4]
 8004a04:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <HAL_I2C_Init+0xd8>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	68d3      	ldr	r3, [r2, #12]
 8004a0e:	491b      	ldr	r1, [pc, #108]	@ (8004a7c <HAL_I2C_Init+0xd0>)
 8004a10:	400b      	ands	r3, r1
 8004a12:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6962      	ldr	r2, [r4, #20]
 8004a1a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a1c:	69a2      	ldr	r2, [r4, #24]
 8004a1e:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	69e3      	ldr	r3, [r4, #28]
 8004a28:	6a21      	ldr	r1, [r4, #32]
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	6813      	ldr	r3, [r2, #0]
 8004a32:	2101      	movs	r1, #1
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	2241      	movs	r2, #65	@ 0x41
 8004a3e:	311f      	adds	r1, #31
 8004a40:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a42:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a44:	3201      	adds	r2, #1
 8004a46:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8004a48:	2000      	movs	r0, #0
}
 8004a4a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004a4c:	3340      	adds	r3, #64	@ 0x40
 8004a4e:	2200      	movs	r2, #0
 8004a50:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8004a52:	f7fe fc59 	bl	8003308 <HAL_I2C_MspInit>
 8004a56:	e7b0      	b.n	80049ba <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	68a1      	ldr	r1, [r4, #8]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	e7c4      	b.n	80049f0 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	6851      	ldr	r1, [r2, #4]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	e7c5      	b.n	8004a00 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8004a74:	2001      	movs	r0, #1
 8004a76:	e7e8      	b.n	8004a4a <HAL_I2C_Init+0x9e>
 8004a78:	f0ffffff 	.word	0xf0ffffff
 8004a7c:	ffff7fff 	.word	0xffff7fff
 8004a80:	fffff7ff 	.word	0xfffff7ff
 8004a84:	02008000 	.word	0x02008000

08004a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8a:	2341      	movs	r3, #65	@ 0x41
 8004a8c:	5cc3      	ldrb	r3, [r0, r3]
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d120      	bne.n	8004ad4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	3320      	adds	r3, #32
 8004a94:	5cc3      	ldrb	r3, [r0, r3]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d01e      	beq.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004a9a:	2440      	movs	r4, #64	@ 0x40
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa0:	2541      	movs	r5, #65	@ 0x41
 8004aa2:	2324      	movs	r3, #36	@ 0x24
 8004aa4:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa6:	6806      	ldr	r6, [r0, #0]
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	4393      	bics	r3, r2
 8004aac:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aae:	6806      	ldr	r6, [r0, #0]
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	4f0a      	ldr	r7, [pc, #40]	@ (8004adc <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8004ab4:	403b      	ands	r3, r7
 8004ab6:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab8:	6806      	ldr	r6, [r0, #0]
 8004aba:	6833      	ldr	r3, [r6, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac0:	6801      	ldr	r1, [r0, #0]
 8004ac2:	680b      	ldr	r3, [r1, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004acc:	2300      	movs	r3, #0
 8004ace:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8004ad0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004ad4:	2002      	movs	r0, #2
 8004ad6:	e7fc      	b.n	8004ad2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8004ad8:	2002      	movs	r0, #2
 8004ada:	e7fa      	b.n	8004ad2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8004adc:	ffffefff 	.word	0xffffefff

08004ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae2:	2341      	movs	r3, #65	@ 0x41
 8004ae4:	5cc3      	ldrb	r3, [r0, r3]
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d11e      	bne.n	8004b28 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aea:	3320      	adds	r3, #32
 8004aec:	5cc3      	ldrb	r3, [r0, r3]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d01c      	beq.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8004af2:	2440      	movs	r4, #64	@ 0x40
 8004af4:	2201      	movs	r2, #1
 8004af6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	2541      	movs	r5, #65	@ 0x41
 8004afa:	2324      	movs	r3, #36	@ 0x24
 8004afc:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004afe:	6806      	ldr	r6, [r0, #0]
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	4393      	bics	r3, r2
 8004b04:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b06:	6806      	ldr	r6, [r0, #0]
 8004b08:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b0a:	4f09      	ldr	r7, [pc, #36]	@ (8004b30 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8004b0c:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b0e:	0209      	lsls	r1, r1, #8
 8004b10:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b12:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b14:	6801      	ldr	r1, [r0, #0]
 8004b16:	680b      	ldr	r3, [r1, #0]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	2300      	movs	r3, #0
 8004b22:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8004b24:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004b28:	2002      	movs	r0, #2
 8004b2a:	e7fc      	b.n	8004b26 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	e7fa      	b.n	8004b26 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8004b30:	fffff0ff 	.word	0xfffff0ff

08004b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b38:	4913      	ldr	r1, [pc, #76]	@ (8004b88 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004b3a:	680b      	ldr	r3, [r1, #0]
 8004b3c:	4813      	ldr	r0, [pc, #76]	@ (8004b8c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8004b3e:	4003      	ands	r3, r0
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004b48:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d000      	beq.n	8004b50 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8004b4e:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004b50:	4b0f      	ldr	r3, [pc, #60]	@ (8004b90 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0058      	lsls	r0, r3, #1
 8004b56:	18c0      	adds	r0, r0, r3
 8004b58:	0040      	lsls	r0, r0, #1
 8004b5a:	490e      	ldr	r1, [pc, #56]	@ (8004b94 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8004b5c:	f7fb fad0 	bl	8000100 <__udivsi3>
 8004b60:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	055b      	lsls	r3, r3, #21
 8004b68:	d50a      	bpl.n	8004b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8004b6a:	4907      	ldr	r1, [pc, #28]	@ (8004b88 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004b6c:	2280      	movs	r2, #128	@ 0x80
 8004b6e:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8004b70:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b72:	694b      	ldr	r3, [r1, #20]
 8004b74:	4213      	tst	r3, r2
 8004b76:	d005      	beq.n	8004b84 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1f9      	bne.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	e7e6      	b.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8004b80:	2000      	movs	r0, #0
 8004b82:	e7e4      	b.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x1a>
 8004b84:	2000      	movs	r0, #0
 8004b86:	e7e2      	b.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x1a>
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	fffff9ff 	.word	0xfffff9ff
 8004b90:	20000004 	.word	0x20000004
 8004b94:	000f4240 	.word	0x000f4240

08004b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	46ce      	mov	lr, r9
 8004b9c:	4647      	mov	r7, r8
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba4:	d100      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x10>
 8004ba6:	e23e      	b.n	8005026 <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba8:	6803      	ldr	r3, [r0, #0]
 8004baa:	07db      	lsls	r3, r3, #31
 8004bac:	d538      	bpl.n	8004c20 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4ac7      	ldr	r2, [pc, #796]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004bb0:	6891      	ldr	r1, [r2, #8]
 8004bb2:	2338      	movs	r3, #56	@ 0x38
 8004bb4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb6:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d026      	beq.n	8004c0a <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d027      	beq.n	8004c10 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	2280      	movs	r2, #128	@ 0x80
 8004bc4:	0252      	lsls	r2, r2, #9
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d07a      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x128>
 8004bca:	22a0      	movs	r2, #160	@ 0xa0
 8004bcc:	02d2      	lsls	r2, r2, #11
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d07d      	beq.n	8004cce <HAL_RCC_OscConfig+0x136>
 8004bd2:	4bbe      	ldr	r3, [pc, #760]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	49be      	ldr	r1, [pc, #760]	@ (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	49bd      	ldr	r1, [pc, #756]	@ (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d07d      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fe fd77 	bl	80036dc <HAL_GetTick>
 8004bee:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf0:	4fb6      	ldr	r7, [pc, #728]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004bf2:	2680      	movs	r6, #128	@ 0x80
 8004bf4:	02b6      	lsls	r6, r6, #10
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	4233      	tst	r3, r6
 8004bfa:	d111      	bne.n	8004c20 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7fe fd6e 	bl	80036dc <HAL_GetTick>
 8004c00:	1b40      	subs	r0, r0, r5
 8004c02:	2864      	cmp	r0, #100	@ 0x64
 8004c04:	d9f7      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
 8004c08:	e20e      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c0c:	0792      	lsls	r2, r2, #30
 8004c0e:	d1d7      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c10:	4bae      	ldr	r3, [pc, #696]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	039b      	lsls	r3, r3, #14
 8004c16:	d503      	bpl.n	8004c20 <HAL_RCC_OscConfig+0x88>
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d100      	bne.n	8004c20 <HAL_RCC_OscConfig+0x88>
 8004c1e:	e208      	b.n	8005032 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d52a      	bpl.n	8004c7c <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c26:	4aa9      	ldr	r2, [pc, #676]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c28:	6891      	ldr	r1, [r2, #8]
 8004c2a:	2338      	movs	r3, #56	@ 0x38
 8004c2c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2e:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d068      	beq.n	8004d06 <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d16b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c38:	4ba4      	ldr	r3, [pc, #656]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	d500      	bpl.n	8004c42 <HAL_RCC_OscConfig+0xaa>
 8004c40:	e21a      	b.n	8005078 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	49a2      	ldr	r1, [pc, #648]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c44:	684a      	ldr	r2, [r1, #4]
 8004c46:	6963      	ldr	r3, [r4, #20]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	48a3      	ldr	r0, [pc, #652]	@ (8004ed8 <HAL_RCC_OscConfig+0x340>)
 8004c4c:	4002      	ands	r2, r0
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c52:	4a9e      	ldr	r2, [pc, #632]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	49a1      	ldr	r1, [pc, #644]	@ (8004edc <HAL_RCC_OscConfig+0x344>)
 8004c58:	400b      	ands	r3, r1
 8004c5a:	6921      	ldr	r1, [r4, #16]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c60:	6813      	ldr	r3, [r2, #0]
 8004c62:	499f      	ldr	r1, [pc, #636]	@ (8004ee0 <HAL_RCC_OscConfig+0x348>)
 8004c64:	049b      	lsls	r3, r3, #18
 8004c66:	0f5b      	lsrs	r3, r3, #29
 8004c68:	4a9e      	ldr	r2, [pc, #632]	@ (8004ee4 <HAL_RCC_OscConfig+0x34c>)
 8004c6a:	40da      	lsrs	r2, r3
 8004c6c:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c6e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ee8 <HAL_RCC_OscConfig+0x350>)
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f7fe fceb 	bl	800364c <HAL_InitTick>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d000      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe4>
 8004c7a:	e1dc      	b.n	8005036 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	d400      	bmi.n	8004c84 <HAL_RCC_OscConfig+0xec>
 8004c82:	e08b      	b.n	8004d9c <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c84:	4b91      	ldr	r3, [pc, #580]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	2338      	movs	r3, #56	@ 0x38
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b18      	cmp	r3, #24
 8004c8e:	d07d      	beq.n	8004d8c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c90:	69a3      	ldr	r3, [r4, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d100      	bne.n	8004c98 <HAL_RCC_OscConfig+0x100>
 8004c96:	e0c4      	b.n	8004e22 <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c98:	4a8c      	ldr	r2, [pc, #560]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004c9a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fe fd1b 	bl	80036dc <HAL_GetTick>
 8004ca6:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	4f88      	ldr	r7, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004caa:	2602      	movs	r6, #2
 8004cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cae:	421e      	tst	r6, r3
 8004cb0:	d174      	bne.n	8004d9c <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fe fd13 	bl	80036dc <HAL_GetTick>
 8004cb6:	1b40      	subs	r0, r0, r5
 8004cb8:	2802      	cmp	r0, #2
 8004cba:	d9f7      	bls.n	8004cac <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	e1b3      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc0:	4a82      	ldr	r2, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004cc2:	6811      	ldr	r1, [r2, #0]
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e78a      	b.n	8004be4 <HAL_RCC_OscConfig+0x4c>
 8004cce:	4b7f      	ldr	r3, [pc, #508]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	2280      	movs	r2, #128	@ 0x80
 8004cd4:	02d2      	lsls	r2, r2, #11
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	0252      	lsls	r2, r2, #9
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e77e      	b.n	8004be4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004ce6:	f7fe fcf9 	bl	80036dc <HAL_GetTick>
 8004cea:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cec:	4f77      	ldr	r7, [pc, #476]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004cee:	2680      	movs	r6, #128	@ 0x80
 8004cf0:	02b6      	lsls	r6, r6, #10
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	4233      	tst	r3, r6
 8004cf6:	d093      	beq.n	8004c20 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fe fcf0 	bl	80036dc <HAL_GetTick>
 8004cfc:	1b40      	subs	r0, r0, r5
 8004cfe:	2864      	cmp	r0, #100	@ 0x64
 8004d00:	d9f7      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8004d02:	2003      	movs	r0, #3
 8004d04:	e190      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d06:	3b0d      	subs	r3, #13
 8004d08:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d100      	bne.n	8004d10 <HAL_RCC_OscConfig+0x178>
 8004d0e:	e1a3      	b.n	8005058 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d10:	68e3      	ldr	r3, [r4, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d16:	4a6d      	ldr	r2, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	4970      	ldr	r1, [pc, #448]	@ (8004edc <HAL_RCC_OscConfig+0x344>)
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	6921      	ldr	r1, [r4, #16]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004d24:	6811      	ldr	r1, [r2, #0]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d2e:	f7fe fcd5 	bl	80036dc <HAL_GetTick>
 8004d32:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d34:	4f65      	ldr	r7, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d36:	2680      	movs	r6, #128	@ 0x80
 8004d38:	00f6      	lsls	r6, r6, #3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	4233      	tst	r3, r6
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fe fccc 	bl	80036dc <HAL_GetTick>
 8004d44:	1b40      	subs	r0, r0, r5
 8004d46:	2802      	cmp	r0, #2
 8004d48:	d9f7      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8004d4a:	2003      	movs	r0, #3
 8004d4c:	e16c      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4e:	495f      	ldr	r1, [pc, #380]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d50:	684a      	ldr	r2, [r1, #4]
 8004d52:	6963      	ldr	r3, [r4, #20]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	4860      	ldr	r0, [pc, #384]	@ (8004ed8 <HAL_RCC_OscConfig+0x340>)
 8004d58:	4002      	ands	r2, r0
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
 8004d5e:	e78d      	b.n	8004c7c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8004d60:	4a5a      	ldr	r2, [pc, #360]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	4961      	ldr	r1, [pc, #388]	@ (8004eec <HAL_RCC_OscConfig+0x354>)
 8004d66:	400b      	ands	r3, r1
 8004d68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fcb7 	bl	80036dc <HAL_GetTick>
 8004d6e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d70:	4f56      	ldr	r7, [pc, #344]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d72:	2680      	movs	r6, #128	@ 0x80
 8004d74:	00f6      	lsls	r6, r6, #3
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	4233      	tst	r3, r6
 8004d7a:	d100      	bne.n	8004d7e <HAL_RCC_OscConfig+0x1e6>
 8004d7c:	e77e      	b.n	8004c7c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fe fcad 	bl	80036dc <HAL_GetTick>
 8004d82:	1b40      	subs	r0, r0, r5
 8004d84:	2802      	cmp	r0, #2
 8004d86:	d9f6      	bls.n	8004d76 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 8004d88:	2003      	movs	r0, #3
 8004d8a:	e14d      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d90:	079b      	lsls	r3, r3, #30
 8004d92:	d503      	bpl.n	8004d9c <HAL_RCC_OscConfig+0x204>
 8004d94:	69a3      	ldr	r3, [r4, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d100      	bne.n	8004d9c <HAL_RCC_OscConfig+0x204>
 8004d9a:	e14e      	b.n	800503a <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	075b      	lsls	r3, r3, #29
 8004da0:	d400      	bmi.n	8004da4 <HAL_RCC_OscConfig+0x20c>
 8004da2:	e0ac      	b.n	8004efe <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004da4:	4b49      	ldr	r3, [pc, #292]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	2338      	movs	r3, #56	@ 0x38
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d04c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db0:	4b46      	ldr	r3, [pc, #280]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004db4:	2200      	movs	r2, #0
 8004db6:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	d40b      	bmi.n	8004dd4 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004dbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc0:	2180      	movs	r1, #128	@ 0x80
 8004dc2:	0549      	lsls	r1, r1, #21
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dca:	400b      	ands	r3, r1
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd4:	4b46      	ldr	r3, [pc, #280]	@ (8004ef0 <HAL_RCC_OscConfig+0x358>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	05db      	lsls	r3, r3, #23
 8004dda:	d53f      	bpl.n	8004e5c <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d052      	beq.n	8004e88 <HAL_RCC_OscConfig+0x2f0>
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d056      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2fc>
 8004de6:	4b39      	ldr	r3, [pc, #228]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004de8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dea:	2101      	movs	r1, #1
 8004dec:	438a      	bics	r2, r1
 8004dee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004df0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004df2:	3103      	adds	r1, #3
 8004df4:	438a      	bics	r2, r1
 8004df6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004df8:	68a3      	ldr	r3, [r4, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d054      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fc6d 	bl	80036dc <HAL_GetTick>
 8004e02:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e06:	4698      	mov	r8, r3
 8004e08:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	4d3a      	ldr	r5, [pc, #232]	@ (8004ef4 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0c:	4643      	mov	r3, r8
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e10:	421f      	tst	r7, r3
 8004e12:	d171      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fe fc62 	bl	80036dc <HAL_GetTick>
 8004e18:	1b80      	subs	r0, r0, r6
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d9f6      	bls.n	8004e0c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004e1e:	2003      	movs	r0, #3
 8004e20:	e102      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8004e22:	4a2a      	ldr	r2, [pc, #168]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e24:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004e26:	2101      	movs	r1, #1
 8004e28:	438b      	bics	r3, r1
 8004e2a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fc56 	bl	80036dc <HAL_GetTick>
 8004e30:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e32:	4f26      	ldr	r7, [pc, #152]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e34:	2602      	movs	r6, #2
 8004e36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e38:	421e      	tst	r6, r3
 8004e3a:	d0af      	beq.n	8004d9c <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fe fc4e 	bl	80036dc <HAL_GetTick>
 8004e40:	1b40      	subs	r0, r0, r5
 8004e42:	2802      	cmp	r0, #2
 8004e44:	d9f7      	bls.n	8004e36 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8004e46:	2003      	movs	r0, #3
 8004e48:	e0ee      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	079b      	lsls	r3, r3, #30
 8004e50:	d555      	bpl.n	8004efe <HAL_RCC_OscConfig+0x366>
 8004e52:	68a3      	ldr	r3, [r4, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d152      	bne.n	8004efe <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e0e5      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ef0 <HAL_RCC_OscConfig+0x358>)
 8004e5e:	6811      	ldr	r1, [r2, #0]
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e68:	f7fe fc38 	bl	80036dc <HAL_GetTick>
 8004e6c:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6e:	4d20      	ldr	r5, [pc, #128]	@ (8004ef0 <HAL_RCC_OscConfig+0x358>)
 8004e70:	2780      	movs	r7, #128	@ 0x80
 8004e72:	007f      	lsls	r7, r7, #1
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	423b      	tst	r3, r7
 8004e78:	d1b0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fe fc2f 	bl	80036dc <HAL_GetTick>
 8004e7e:	1b80      	subs	r0, r0, r6
 8004e80:	2802      	cmp	r0, #2
 8004e82:	d9f7      	bls.n	8004e74 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004e84:	2003      	movs	r0, #3
 8004e86:	e0cf      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e88:	4a10      	ldr	r2, [pc, #64]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e8a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004e92:	e7b1      	b.n	8004df8 <HAL_RCC_OscConfig+0x260>
 8004e94:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004e96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e98:	2104      	movs	r1, #4
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ea0:	3903      	subs	r1, #3
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ea6:	e7a7      	b.n	8004df8 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fe fc18 	bl	80036dc <HAL_GetTick>
 8004eac:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eae:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <HAL_RCC_OscConfig+0x334>)
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	4d0f      	ldr	r5, [pc, #60]	@ (8004ef4 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb6:	4643      	mov	r3, r8
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	421f      	tst	r7, r3
 8004ebc:	d01c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fe fc0d 	bl	80036dc <HAL_GetTick>
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	42a8      	cmp	r0, r5
 8004ec6:	d9f6      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004ec8:	2003      	movs	r0, #3
 8004eca:	e0ad      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	fffeffff 	.word	0xfffeffff
 8004ed4:	fffbffff 	.word	0xfffbffff
 8004ed8:	ffff80ff 	.word	0xffff80ff
 8004edc:	ffffc7ff 	.word	0xffffc7ff
 8004ee0:	20000004 	.word	0x20000004
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	2000000c 	.word	0x2000000c
 8004eec:	fffffeff 	.word	0xfffffeff
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ef8:	464b      	mov	r3, r9
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d021      	beq.n	8004f42 <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004efe:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d100      	bne.n	8004f08 <HAL_RCC_OscConfig+0x370>
 8004f06:	e08f      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f08:	4a62      	ldr	r2, [pc, #392]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f0a:	6891      	ldr	r1, [r2, #8]
 8004f0c:	2238      	movs	r2, #56	@ 0x38
 8004f0e:	400a      	ands	r2, r1
 8004f10:	2a10      	cmp	r2, #16
 8004f12:	d064      	beq.n	8004fde <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d01a      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8004f18:	4a5e      	ldr	r2, [pc, #376]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	495e      	ldr	r1, [pc, #376]	@ (8005098 <HAL_RCC_OscConfig+0x500>)
 8004f1e:	400b      	ands	r3, r1
 8004f20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f22:	f7fe fbdb 	bl	80036dc <HAL_GetTick>
 8004f26:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	4e5a      	ldr	r6, [pc, #360]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f2a:	2580      	movs	r5, #128	@ 0x80
 8004f2c:	04ad      	lsls	r5, r5, #18
 8004f2e:	6833      	ldr	r3, [r6, #0]
 8004f30:	422b      	tst	r3, r5
 8004f32:	d04d      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fe fbd2 	bl	80036dc <HAL_GetTick>
 8004f38:	1b00      	subs	r0, r0, r4
 8004f3a:	2802      	cmp	r0, #2
 8004f3c:	d9f7      	bls.n	8004f2e <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8004f3e:	2003      	movs	r0, #3
 8004f40:	e072      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f42:	4a54      	ldr	r2, [pc, #336]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f44:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004f46:	4955      	ldr	r1, [pc, #340]	@ (800509c <HAL_RCC_OscConfig+0x504>)
 8004f48:	400b      	ands	r3, r1
 8004f4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004f4c:	e7d7      	b.n	8004efe <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4a51      	ldr	r2, [pc, #324]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	4951      	ldr	r1, [pc, #324]	@ (8005098 <HAL_RCC_OscConfig+0x500>)
 8004f54:	400b      	ands	r3, r1
 8004f56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f58:	f7fe fbc0 	bl	80036dc <HAL_GetTick>
 8004f5c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	4f4d      	ldr	r7, [pc, #308]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f60:	2680      	movs	r6, #128	@ 0x80
 8004f62:	04b6      	lsls	r6, r6, #18
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4233      	tst	r3, r6
 8004f68:	d006      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fe fbb7 	bl	80036dc <HAL_GetTick>
 8004f6e:	1b40      	subs	r0, r0, r5
 8004f70:	2802      	cmp	r0, #2
 8004f72:	d9f7      	bls.n	8004f64 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8004f74:	2003      	movs	r0, #3
 8004f76:	e057      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f78:	4a46      	ldr	r2, [pc, #280]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004f7a:	68d1      	ldr	r1, [r2, #12]
 8004f7c:	6a23      	ldr	r3, [r4, #32]
 8004f7e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004f80:	4303      	orrs	r3, r0
 8004f82:	4847      	ldr	r0, [pc, #284]	@ (80050a0 <HAL_RCC_OscConfig+0x508>)
 8004f84:	4001      	ands	r1, r0
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004f92:	0209      	lsls	r1, r1, #8
 8004f94:	430b      	orrs	r3, r1
 8004f96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	045b      	lsls	r3, r3, #17
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fa2:	68d1      	ldr	r1, [r2, #12]
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	055b      	lsls	r3, r3, #21
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004fac:	f7fe fb96 	bl	80036dc <HAL_GetTick>
 8004fb0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	4e38      	ldr	r6, [pc, #224]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004fb4:	2580      	movs	r5, #128	@ 0x80
 8004fb6:	04ad      	lsls	r5, r5, #18
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	422b      	tst	r3, r5
 8004fbc:	d106      	bne.n	8004fcc <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fe fb8d 	bl	80036dc <HAL_GetTick>
 8004fc2:	1b00      	subs	r0, r0, r4
 8004fc4:	2802      	cmp	r0, #2
 8004fc6:	d9f7      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8004fc8:	2003      	movs	r0, #3
 8004fca:	e02d      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e02b      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004fd0:	4a30      	ldr	r2, [pc, #192]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004fd2:	68d3      	ldr	r3, [r2, #12]
 8004fd4:	4933      	ldr	r1, [pc, #204]	@ (80050a4 <HAL_RCC_OscConfig+0x50c>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e024      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d02d      	beq.n	800503e <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8004fe4:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	428b      	cmp	r3, r1
 8004ff0:	d11a      	bne.n	8005028 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff2:	2370      	movs	r3, #112	@ 0x70
 8004ff4:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	d115      	bne.n	8005028 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffc:	21fe      	movs	r1, #254	@ 0xfe
 8004ffe:	01c9      	lsls	r1, r1, #7
 8005000:	4011      	ands	r1, r2
 8005002:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005004:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005006:	4299      	cmp	r1, r3
 8005008:	d10e      	bne.n	8005028 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800500a:	23f8      	movs	r3, #248	@ 0xf8
 800500c:	039b      	lsls	r3, r3, #14
 800500e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005010:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005012:	428b      	cmp	r3, r1
 8005014:	d108      	bne.n	8005028 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005016:	0f53      	lsrs	r3, r2, #29
 8005018:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800501a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	4193      	sbcs	r3, r2
 8005022:	b2d8      	uxtb	r0, r3
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8005026:	2001      	movs	r0, #1
}
 8005028:	b003      	add	sp, #12
 800502a:	bcc0      	pop	{r6, r7}
 800502c:	46b9      	mov	r9, r7
 800502e:	46b0      	mov	r8, r6
 8005030:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8005032:	2001      	movs	r0, #1
 8005034:	e7f8      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
 8005038:	e7f6      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 800503a:	2001      	movs	r0, #1
 800503c:	e7f4      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 800503e:	2001      	movs	r0, #1
 8005040:	e7f2      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8005042:	2001      	movs	r0, #1
 8005044:	e7f0      	b.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005046:	4913      	ldr	r1, [pc, #76]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8005048:	684a      	ldr	r2, [r1, #4]
 800504a:	6963      	ldr	r3, [r4, #20]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4816      	ldr	r0, [pc, #88]	@ (80050a8 <HAL_RCC_OscConfig+0x510>)
 8005050:	4002      	ands	r2, r0
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005056:	e60a      	b.n	8004c6e <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	055b      	lsls	r3, r3, #21
 800505e:	d5f2      	bpl.n	8005046 <HAL_RCC_OscConfig+0x4ae>
 8005060:	68e3      	ldr	r3, [r4, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ed      	beq.n	8005042 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	490b      	ldr	r1, [pc, #44]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8005068:	684a      	ldr	r2, [r1, #4]
 800506a:	6963      	ldr	r3, [r4, #20]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	480e      	ldr	r0, [pc, #56]	@ (80050a8 <HAL_RCC_OscConfig+0x510>)
 8005070:	4002      	ands	r2, r0
 8005072:	4313      	orrs	r3, r2
 8005074:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005076:	e5fa      	b.n	8004c6e <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005078:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 800507a:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0d3      	beq.n	8005028 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005080:	4904      	ldr	r1, [pc, #16]	@ (8005094 <HAL_RCC_OscConfig+0x4fc>)
 8005082:	684a      	ldr	r2, [r1, #4]
 8005084:	6963      	ldr	r3, [r4, #20]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	4807      	ldr	r0, [pc, #28]	@ (80050a8 <HAL_RCC_OscConfig+0x510>)
 800508a:	4002      	ands	r2, r0
 800508c:	4313      	orrs	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005090:	e5df      	b.n	8004c52 <HAL_RCC_OscConfig+0xba>
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	40021000 	.word	0x40021000
 8005098:	feffffff 	.word	0xfeffffff
 800509c:	efffffff 	.word	0xefffffff
 80050a0:	1fc1808c 	.word	0x1fc1808c
 80050a4:	effefffc 	.word	0xeffefffc
 80050a8:	ffff80ff 	.word	0xffff80ff

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ae:	4b29      	ldr	r3, [pc, #164]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2238      	movs	r2, #56	@ 0x38
 80050b4:	421a      	tst	r2, r3
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80050b8:	4b26      	ldr	r3, [pc, #152]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	049b      	lsls	r3, r3, #18
 80050be:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80050c0:	4825      	ldr	r0, [pc, #148]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xac>)
 80050c2:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80050c4:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c6:	4b23      	ldr	r3, [pc, #140]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	2338      	movs	r3, #56	@ 0x38
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d03a      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d2:	4b20      	ldr	r3, [pc, #128]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	2338      	movs	r3, #56	@ 0x38
 80050d8:	4013      	ands	r3, r2
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d014      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050de:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	2338      	movs	r3, #56	@ 0x38
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d030      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2038      	movs	r0, #56	@ 0x38
 80050f0:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80050f2:	3818      	subs	r0, #24
 80050f4:	1e43      	subs	r3, r0, #1
 80050f6:	4198      	sbcs	r0, r3
 80050f8:	4240      	negs	r0, r0
 80050fa:	4b18      	ldr	r3, [pc, #96]	@ (800515c <HAL_RCC_GetSysClockFreq+0xb0>)
 80050fc:	4018      	ands	r0, r3
 80050fe:	23fa      	movs	r3, #250	@ 0xfa
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	469c      	mov	ip, r3
 8005104:	4460      	add	r0, ip
 8005106:	e7dd      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005108:	4a12      	ldr	r2, [pc, #72]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 800510a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800510c:	68d1      	ldr	r1, [r2, #12]
 800510e:	0649      	lsls	r1, r1, #25
 8005110:	0f49      	lsrs	r1, r1, #29
 8005112:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005114:	43db      	mvns	r3, r3
    switch (pllsource)
 8005116:	079b      	lsls	r3, r3, #30
 8005118:	d00e      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800511a:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 800511c:	68dc      	ldr	r4, [r3, #12]
 800511e:	0464      	lsls	r4, r4, #17
 8005120:	0e64      	lsrs	r4, r4, #25
 8005122:	480d      	ldr	r0, [pc, #52]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xac>)
 8005124:	f7fa ffec 	bl	8000100 <__udivsi3>
 8005128:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800512a:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xa8>)
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	0f49      	lsrs	r1, r1, #29
 8005130:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005132:	f7fa ffe5 	bl	8000100 <__udivsi3>
 8005136:	e7c5      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005138:	68d4      	ldr	r4, [r2, #12]
 800513a:	0464      	lsls	r4, r4, #17
 800513c:	0e64      	lsrs	r4, r4, #25
 800513e:	4808      	ldr	r0, [pc, #32]	@ (8005160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005140:	f7fa ffde 	bl	8000100 <__udivsi3>
 8005144:	4360      	muls	r0, r4
        break;
 8005146:	e7f0      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 8005148:	4805      	ldr	r0, [pc, #20]	@ (8005160 <HAL_RCC_GetSysClockFreq+0xb4>)
 800514a:	e7bb      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 800514c:	2080      	movs	r0, #128	@ 0x80
 800514e:	0200      	lsls	r0, r0, #8
 8005150:	e7b8      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x18>
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	40021000 	.word	0x40021000
 8005158:	00f42400 	.word	0x00f42400
 800515c:	ffff8300 	.word	0xffff8300
 8005160:	007a1200 	.word	0x007a1200

08005164 <HAL_RCC_ClockConfig>:
{
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	46ce      	mov	lr, r9
 8005168:	4647      	mov	r7, r8
 800516a:	b580      	push	{r7, lr}
 800516c:	0004      	movs	r4, r0
 800516e:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005170:	2800      	cmp	r0, #0
 8005172:	d100      	bne.n	8005176 <HAL_RCC_ClockConfig+0x12>
 8005174:	e0b6      	b.n	80052e4 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005176:	4b5d      	ldr	r3, [pc, #372]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	2307      	movs	r3, #7
 800517c:	4013      	ands	r3, r2
 800517e:	428b      	cmp	r3, r1
 8005180:	d321      	bcc.n	80051c6 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	079a      	lsls	r2, r3, #30
 8005186:	d50e      	bpl.n	80051a6 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	075b      	lsls	r3, r3, #29
 800518a:	d505      	bpl.n	8005198 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800518c:	4a58      	ldr	r2, [pc, #352]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800518e:	6891      	ldr	r1, [r2, #8]
 8005190:	23e0      	movs	r3, #224	@ 0xe0
 8005192:	01db      	lsls	r3, r3, #7
 8005194:	430b      	orrs	r3, r1
 8005196:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005198:	4a55      	ldr	r2, [pc, #340]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800519a:	6893      	ldr	r3, [r2, #8]
 800519c:	4955      	ldr	r1, [pc, #340]	@ (80052f4 <HAL_RCC_ClockConfig+0x190>)
 800519e:	400b      	ands	r3, r1
 80051a0:	68a1      	ldr	r1, [r4, #8]
 80051a2:	430b      	orrs	r3, r1
 80051a4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	07db      	lsls	r3, r3, #31
 80051aa:	d55b      	bpl.n	8005264 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d023      	beq.n	80051fa <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d042      	beq.n	800523c <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d146      	bne.n	8005248 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ba:	4a4d      	ldr	r2, [pc, #308]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	0552      	lsls	r2, r2, #21
 80051c0:	d420      	bmi.n	8005204 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80051c2:	2001      	movs	r0, #1
 80051c4:	e070      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4a49      	ldr	r2, [pc, #292]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	2107      	movs	r1, #7
 80051cc:	438b      	bics	r3, r1
 80051ce:	432b      	orrs	r3, r5
 80051d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80051d2:	f7fe fa83 	bl	80036dc <HAL_GetTick>
 80051d6:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051d8:	4b44      	ldr	r3, [pc, #272]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 80051da:	4698      	mov	r8, r3
 80051dc:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051de:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCC_ClockConfig+0x194>)
 80051e0:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e2:	4643      	mov	r3, r8
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	403b      	ands	r3, r7
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	d0ca      	beq.n	8005182 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fe fa76 	bl	80036dc <HAL_GetTick>
 80051f0:	1b80      	subs	r0, r0, r6
 80051f2:	4548      	cmp	r0, r9
 80051f4:	d9f5      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80051f6:	2003      	movs	r0, #3
 80051f8:	e056      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	4a3d      	ldr	r2, [pc, #244]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	0392      	lsls	r2, r2, #14
 8005200:	d400      	bmi.n	8005204 <HAL_RCC_ClockConfig+0xa0>
 8005202:	e071      	b.n	80052e8 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005204:	493a      	ldr	r1, [pc, #232]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 8005206:	688a      	ldr	r2, [r1, #8]
 8005208:	2007      	movs	r0, #7
 800520a:	4382      	bics	r2, r0
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005210:	f7fe fa64 	bl	80036dc <HAL_GetTick>
 8005214:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 8005218:	4698      	mov	r8, r3
 800521a:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521c:	4b36      	ldr	r3, [pc, #216]	@ (80052f8 <HAL_RCC_ClockConfig+0x194>)
 800521e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005220:	4643      	mov	r3, r8
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	403a      	ands	r2, r7
 8005226:	6863      	ldr	r3, [r4, #4]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	429a      	cmp	r2, r3
 800522c:	d01a      	beq.n	8005264 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522e:	f7fe fa55 	bl	80036dc <HAL_GetTick>
 8005232:	1b80      	subs	r0, r0, r6
 8005234:	4548      	cmp	r0, r9
 8005236:	d9f3      	bls.n	8005220 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8005238:	2003      	movs	r0, #3
 800523a:	e035      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523c:	4a2c      	ldr	r2, [pc, #176]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	0192      	lsls	r2, r2, #6
 8005242:	d4df      	bmi.n	8005204 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8005244:	2001      	movs	r0, #1
 8005246:	e02f      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005248:	2b03      	cmp	r3, #3
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524c:	4a28      	ldr	r2, [pc, #160]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800524e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005250:	0792      	lsls	r2, r2, #30
 8005252:	d4d7      	bmi.n	8005204 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8005254:	2001      	movs	r0, #1
 8005256:	e027      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005258:	4a25      	ldr	r2, [pc, #148]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800525a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800525c:	0792      	lsls	r2, r2, #30
 800525e:	d4d1      	bmi.n	8005204 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8005260:	2001      	movs	r0, #1
 8005262:	e021      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b21      	ldr	r3, [pc, #132]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	2307      	movs	r3, #7
 800526a:	4013      	ands	r3, r2
 800526c:	42ab      	cmp	r3, r5
 800526e:	d81f      	bhi.n	80052b0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	075b      	lsls	r3, r3, #29
 8005274:	d506      	bpl.n	8005284 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 8005278:	6893      	ldr	r3, [r2, #8]
 800527a:	4920      	ldr	r1, [pc, #128]	@ (80052fc <HAL_RCC_ClockConfig+0x198>)
 800527c:	400b      	ands	r3, r1
 800527e:	68e1      	ldr	r1, [r4, #12]
 8005280:	430b      	orrs	r3, r1
 8005282:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005284:	f7ff ff12 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_RCC_ClockConfig+0x18c>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	491c      	ldr	r1, [pc, #112]	@ (8005300 <HAL_RCC_ClockConfig+0x19c>)
 800528e:	4a1d      	ldr	r2, [pc, #116]	@ (8005304 <HAL_RCC_ClockConfig+0x1a0>)
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	0f1b      	lsrs	r3, r3, #28
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	589b      	ldr	r3, [r3, r2]
 8005298:	221f      	movs	r2, #31
 800529a:	4013      	ands	r3, r2
 800529c:	40d8      	lsrs	r0, r3
 800529e:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80052a0:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <HAL_RCC_ClockConfig+0x1a4>)
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	f7fe f9d2 	bl	800364c <HAL_InitTick>
}
 80052a8:	bcc0      	pop	{r6, r7}
 80052aa:	46b9      	mov	r9, r7
 80052ac:	46b0      	mov	r8, r6
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b0:	4a0e      	ldr	r2, [pc, #56]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	2107      	movs	r1, #7
 80052b6:	438b      	bics	r3, r1
 80052b8:	432b      	orrs	r3, r5
 80052ba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052bc:	f7fe fa0e 	bl	80036dc <HAL_GetTick>
 80052c0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052c2:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_RCC_ClockConfig+0x188>)
 80052c4:	4698      	mov	r8, r3
 80052c6:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_ClockConfig+0x194>)
 80052ca:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052cc:	4643      	mov	r3, r8
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	403b      	ands	r3, r7
 80052d2:	42ab      	cmp	r3, r5
 80052d4:	d0cc      	beq.n	8005270 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d6:	f7fe fa01 	bl	80036dc <HAL_GetTick>
 80052da:	1b80      	subs	r0, r0, r6
 80052dc:	4548      	cmp	r0, r9
 80052de:	d9f5      	bls.n	80052cc <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 80052e0:	2003      	movs	r0, #3
 80052e2:	e7e1      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80052e4:	2001      	movs	r0, #1
 80052e6:	e7df      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80052e8:	2001      	movs	r0, #1
 80052ea:	e7dd      	b.n	80052a8 <HAL_RCC_ClockConfig+0x144>
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40021000 	.word	0x40021000
 80052f4:	fffff0ff 	.word	0xfffff0ff
 80052f8:	00001388 	.word	0x00001388
 80052fc:	ffff8fff 	.word	0xffff8fff
 8005300:	20000004 	.word	0x20000004
 8005304:	080069c0 	.word	0x080069c0
 8005308:	2000000c 	.word	0x2000000c

0800530c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800530e:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005310:	4a06      	ldr	r2, [pc, #24]	@ (800532c <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005312:	4907      	ldr	r1, [pc, #28]	@ (8005330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005314:	045b      	lsls	r3, r3, #17
 8005316:	0f5b      	lsrs	r3, r3, #29
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	585b      	ldr	r3, [r3, r1]
 800531c:	211f      	movs	r1, #31
 800531e:	400b      	ands	r3, r1
 8005320:	6810      	ldr	r0, [r2, #0]
 8005322:	40d8      	lsrs	r0, r3
}
 8005324:	4770      	bx	lr
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	40021000 	.word	0x40021000
 800532c:	20000004 	.word	0x20000004
 8005330:	080069a0 	.word	0x080069a0

08005334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005336:	46d6      	mov	lr, sl
 8005338:	464f      	mov	r7, r9
 800533a:	4646      	mov	r6, r8
 800533c:	b5c0      	push	{r6, r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005342:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005344:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005346:	039b      	lsls	r3, r3, #14
 8005348:	d52a      	bpl.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534a:	4b57      	ldr	r3, [pc, #348]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800534c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800534e:	2200      	movs	r2, #0
 8005350:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	d40b      	bmi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b54      	ldr	r3, [pc, #336]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	0549      	lsls	r1, r1, #21
 800535e:	430a      	orrs	r2, r1
 8005360:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	400b      	ands	r3, r1
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536e:	4a4f      	ldr	r2, [pc, #316]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	2380      	movs	r3, #128	@ 0x80
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	430b      	orrs	r3, r1
 8005378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537a:	f7fe f9af 	bl	80036dc <HAL_GetTick>
 800537e:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005380:	4f4a      	ldr	r7, [pc, #296]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8005382:	2680      	movs	r6, #128	@ 0x80
 8005384:	0076      	lsls	r6, r6, #1
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	4233      	tst	r3, r6
 800538a:	d000      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800538c:	e07a      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538e:	f7fe f9a5 	bl	80036dc <HAL_GetTick>
 8005392:	1b40      	subs	r0, r0, r5
 8005394:	2802      	cmp	r0, #2
 8005396:	d9f6      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8005398:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800539a:	4653      	mov	r3, sl
 800539c:	2b01      	cmp	r3, #1
 800539e:	d05d      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	d506      	bpl.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a6:	4a40      	ldr	r2, [pc, #256]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053a8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053aa:	2103      	movs	r1, #3
 80053ac:	438b      	bics	r3, r1
 80053ae:	6861      	ldr	r1, [r4, #4]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	069b      	lsls	r3, r3, #26
 80053b8:	d506      	bpl.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ba:	4a3b      	ldr	r2, [pc, #236]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053be:	493c      	ldr	r1, [pc, #240]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80053c0:	400b      	ands	r3, r1
 80053c2:	68a1      	ldr	r1, [r4, #8]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	045b      	lsls	r3, r3, #17
 80053cc:	d50b      	bpl.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ce:	4a36      	ldr	r2, [pc, #216]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	089b      	lsrs	r3, r3, #2
 80053d6:	6921      	ldr	r1, [r4, #16]
 80053d8:	430b      	orrs	r3, r1
 80053da:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80053dc:	2380      	movs	r3, #128	@ 0x80
 80053de:	05db      	lsls	r3, r3, #23
 80053e0:	6922      	ldr	r2, [r4, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d040      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	051b      	lsls	r3, r3, #20
 80053ea:	d50b      	bpl.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80053ec:	4a2e      	ldr	r2, [pc, #184]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053ee:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053f0:	4930      	ldr	r1, [pc, #192]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80053f2:	400b      	ands	r3, r1
 80053f4:	68e1      	ldr	r1, [r4, #12]
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	01db      	lsls	r3, r3, #7
 80053fe:	68e2      	ldr	r2, [r4, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d038      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8005404:	b002      	add	sp, #8
 8005406:	bce0      	pop	{r5, r6, r7}
 8005408:	46ba      	mov	sl, r7
 800540a:	46b1      	mov	r9, r6
 800540c:	46a8      	mov	r8, r5
 800540e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005410:	6963      	ldr	r3, [r4, #20]
 8005412:	428b      	cmp	r3, r1
 8005414:	d03e      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005416:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005418:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800541a:	4927      	ldr	r1, [pc, #156]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800541c:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 800541e:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8005420:	2080      	movs	r0, #128	@ 0x80
 8005422:	0240      	lsls	r0, r0, #9
 8005424:	4328      	orrs	r0, r5
 8005426:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005428:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800542a:	4d24      	ldr	r5, [pc, #144]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800542c:	4028      	ands	r0, r5
 800542e:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 8005430:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005432:	07d2      	lsls	r2, r2, #31
 8005434:	d52e      	bpl.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 8005436:	f7fe f951 	bl	80036dc <HAL_GetTick>
 800543a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800543c:	4b1a      	ldr	r3, [pc, #104]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800543e:	4698      	mov	r8, r3
 8005440:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005444:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005446:	4643      	mov	r3, r8
 8005448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544a:	421e      	tst	r6, r3
 800544c:	d122      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7fe f945 	bl	80036dc <HAL_GetTick>
 8005452:	1b40      	subs	r0, r0, r5
 8005454:	4548      	cmp	r0, r9
 8005456:	d9f6      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 8005458:	2003      	movs	r0, #3
 800545a:	e79e      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 800545c:	4a12      	ldr	r2, [pc, #72]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800545e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8005460:	4918      	ldr	r1, [pc, #96]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005462:	400b      	ands	r3, r1
 8005464:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005466:	e79b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005468:	4a0f      	ldr	r2, [pc, #60]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800546a:	68d1      	ldr	r1, [r2, #12]
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	025b      	lsls	r3, r3, #9
 8005470:	430b      	orrs	r3, r1
 8005472:	60d3      	str	r3, [r2, #12]
 8005474:	e7b7      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005476:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005478:	68d1      	ldr	r1, [r2, #12]
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	430b      	orrs	r3, r1
 8005480:	60d3      	str	r3, [r2, #12]
  return status;
 8005482:	e7bf      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005484:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005486:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005488:	23c0      	movs	r3, #192	@ 0xc0
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	0011      	movs	r1, r2
 800548e:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005490:	421a      	tst	r2, r3
 8005492:	d1bd      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005496:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005498:	4907      	ldr	r1, [pc, #28]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800549a:	400b      	ands	r3, r1
 800549c:	6961      	ldr	r1, [r4, #20]
 800549e:	430b      	orrs	r3, r1
 80054a0:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054a2:	2000      	movs	r0, #0
 80054a4:	e779      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x66>
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40007000 	.word	0x40007000
 80054b0:	ffffcfff 	.word	0xffffcfff
 80054b4:	ffff3fff 	.word	0xffff3fff
 80054b8:	fffffcff 	.word	0xfffffcff
 80054bc:	fffeffff 	.word	0xfffeffff
 80054c0:	00001388 	.word	0x00001388
 80054c4:	efffffff 	.word	0xefffffff

080054c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c8:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ca:	223d      	movs	r2, #61	@ 0x3d
 80054cc:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 80054ce:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80054d0:	2a01      	cmp	r2, #1
 80054d2:	d112      	bne.n	80054fa <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	323c      	adds	r2, #60	@ 0x3c
 80054d6:	2102      	movs	r1, #2
 80054d8:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	68ca      	ldr	r2, [r1, #12]
 80054de:	4302      	orrs	r2, r0
 80054e0:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005520 <HAL_TIM_Base_Start_IT+0x58>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d008      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0x34>
 80054ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005524 <HAL_TIM_Base_Start_IT+0x5c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d005      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2101      	movs	r1, #1
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f8:	2000      	movs	r0, #0
}
 80054fa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	490a      	ldr	r1, [pc, #40]	@ (8005528 <HAL_TIM_Base_Start_IT+0x60>)
 8005500:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	2a06      	cmp	r2, #6
 8005504:	d008      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x50>
 8005506:	3907      	subs	r1, #7
 8005508:	428a      	cmp	r2, r1
 800550a:	d007      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005514:	2000      	movs	r0, #0
 8005516:	e7f0      	b.n	80054fa <HAL_TIM_Base_Start_IT+0x32>
 8005518:	2000      	movs	r0, #0
 800551a:	e7ee      	b.n	80054fa <HAL_TIM_Base_Start_IT+0x32>
 800551c:	2000      	movs	r0, #0
 800551e:	e7ec      	b.n	80054fa <HAL_TIM_Base_Start_IT+0x32>
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	00010007 	.word	0x00010007

0800552c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_IRQHandler>:
{
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005538:	6803      	ldr	r3, [r0, #0]
 800553a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800553c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800553e:	07aa      	lsls	r2, r5, #30
 8005540:	d50e      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005542:	07b2      	lsls	r2, r6, #30
 8005544:	d50c      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005546:	2203      	movs	r2, #3
 8005548:	4252      	negs	r2, r2
 800554a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800554c:	2301      	movs	r3, #1
 800554e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005550:	6803      	ldr	r3, [r0, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	079b      	lsls	r3, r3, #30
 8005556:	d053      	beq.n	8005600 <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 8005558:	f7ff ffe9 	bl	800552e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555c:	2300      	movs	r3, #0
 800555e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005560:	076b      	lsls	r3, r5, #29
 8005562:	d512      	bpl.n	800558a <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005564:	0773      	lsls	r3, r6, #29
 8005566:	d510      	bpl.n	800558a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	2205      	movs	r2, #5
 800556c:	4252      	negs	r2, r2
 800556e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005570:	2302      	movs	r3, #2
 8005572:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	23c0      	movs	r3, #192	@ 0xc0
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	421a      	tst	r2, r3
 800557e:	d045      	beq.n	800560c <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8005580:	0020      	movs	r0, r4
 8005582:	f7ff ffd4 	bl	800552e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	2300      	movs	r3, #0
 8005588:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800558a:	072b      	lsls	r3, r5, #28
 800558c:	d510      	bpl.n	80055b0 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800558e:	0733      	lsls	r3, r6, #28
 8005590:	d50e      	bpl.n	80055b0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	2209      	movs	r2, #9
 8005596:	4252      	negs	r2, r2
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800559a:	2304      	movs	r3, #4
 800559c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	079b      	lsls	r3, r3, #30
 80055a4:	d039      	beq.n	800561a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	0020      	movs	r0, r4
 80055a8:	f7ff ffc1 	bl	800552e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	2300      	movs	r3, #0
 80055ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055b0:	06eb      	lsls	r3, r5, #27
 80055b2:	d512      	bpl.n	80055da <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b4:	06f3      	lsls	r3, r6, #27
 80055b6:	d510      	bpl.n	80055da <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	2211      	movs	r2, #17
 80055bc:	4252      	negs	r2, r2
 80055be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c0:	2308      	movs	r3, #8
 80055c2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	23c0      	movs	r3, #192	@ 0xc0
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	421a      	tst	r2, r3
 80055ce:	d02b      	beq.n	8005628 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80055d0:	0020      	movs	r0, r4
 80055d2:	f7ff ffac 	bl	800552e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	2300      	movs	r3, #0
 80055d8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055da:	07eb      	lsls	r3, r5, #31
 80055dc:	d501      	bpl.n	80055e2 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055de:	07f3      	lsls	r3, r6, #31
 80055e0:	d429      	bmi.n	8005636 <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055e2:	2382      	movs	r3, #130	@ 0x82
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	421d      	tst	r5, r3
 80055e8:	d03c      	beq.n	8005664 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ea:	0633      	lsls	r3, r6, #24
 80055ec:	d42b      	bmi.n	8005646 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ee:	066b      	lsls	r3, r5, #25
 80055f0:	d501      	bpl.n	80055f6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f2:	0673      	lsls	r3, r6, #25
 80055f4:	d43b      	bmi.n	800566e <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055f6:	06ad      	lsls	r5, r5, #26
 80055f8:	d501      	bpl.n	80055fe <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055fa:	06b6      	lsls	r6, r6, #26
 80055fc:	d43f      	bmi.n	800567e <HAL_TIM_IRQHandler+0x14a>
}
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005600:	f7ff ff94 	bl	800552c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	0020      	movs	r0, r4
 8005606:	f7ff ff93 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
 800560a:	e7a7      	b.n	800555c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560c:	0020      	movs	r0, r4
 800560e:	f7ff ff8d 	bl	800552c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005612:	0020      	movs	r0, r4
 8005614:	f7ff ff8c 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
 8005618:	e7b5      	b.n	8005586 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	0020      	movs	r0, r4
 800561c:	f7ff ff86 	bl	800552c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	0020      	movs	r0, r4
 8005622:	f7ff ff85 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
 8005626:	e7c1      	b.n	80055ac <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005628:	0020      	movs	r0, r4
 800562a:	f7ff ff7f 	bl	800552c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562e:	0020      	movs	r0, r4
 8005630:	f7ff ff7e 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
 8005634:	e7cf      	b.n	80055d6 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	2202      	movs	r2, #2
 800563a:	4252      	negs	r2, r2
 800563c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800563e:	0020      	movs	r0, r4
 8005640:	f7fd f96a 	bl	8002918 <HAL_TIM_PeriodElapsedCallback>
 8005644:	e7cd      	b.n	80055e2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <HAL_TIM_IRQHandler+0x15c>)
 800564a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800564c:	0020      	movs	r0, r4
 800564e:	f000 f8c4 	bl	80057da <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005652:	05eb      	lsls	r3, r5, #23
 8005654:	d5cb      	bpl.n	80055ee <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	4a0e      	ldr	r2, [pc, #56]	@ (8005694 <HAL_TIM_IRQHandler+0x160>)
 800565a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800565c:	0020      	movs	r0, r4
 800565e:	f000 f8bd 	bl	80057dc <HAL_TIMEx_Break2Callback>
 8005662:	e7c4      	b.n	80055ee <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005664:	05eb      	lsls	r3, r5, #23
 8005666:	d5c2      	bpl.n	80055ee <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005668:	0633      	lsls	r3, r6, #24
 800566a:	d5c0      	bpl.n	80055ee <HAL_TIM_IRQHandler+0xba>
 800566c:	e7f3      	b.n	8005656 <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	2241      	movs	r2, #65	@ 0x41
 8005672:	4252      	negs	r2, r2
 8005674:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005676:	0020      	movs	r0, r4
 8005678:	f7ff ff5b 	bl	8005532 <HAL_TIM_TriggerCallback>
 800567c:	e7bb      	b.n	80055f6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	4252      	negs	r2, r2
 8005684:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005686:	0020      	movs	r0, r4
 8005688:	f000 f8a6 	bl	80057d8 <HAL_TIMEx_CommutCallback>
}
 800568c:	e7b7      	b.n	80055fe <HAL_TIM_IRQHandler+0xca>
 800568e:	46c0      	nop			@ (mov r8, r8)
 8005690:	ffffdf7f 	.word	0xffffdf7f
 8005694:	fffffeff 	.word	0xfffffeff

08005698 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005698:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569a:	4a31      	ldr	r2, [pc, #196]	@ (8005760 <TIM_Base_SetConfig+0xc8>)
 800569c:	4290      	cmp	r0, r2
 800569e:	d015      	beq.n	80056cc <TIM_Base_SetConfig+0x34>
 80056a0:	4a30      	ldr	r2, [pc, #192]	@ (8005764 <TIM_Base_SetConfig+0xcc>)
 80056a2:	4290      	cmp	r0, r2
 80056a4:	d012      	beq.n	80056cc <TIM_Base_SetConfig+0x34>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	4a30      	ldr	r2, [pc, #192]	@ (8005768 <TIM_Base_SetConfig+0xd0>)
 80056a8:	4290      	cmp	r0, r2
 80056aa:	d03d      	beq.n	8005728 <TIM_Base_SetConfig+0x90>
 80056ac:	4a2f      	ldr	r2, [pc, #188]	@ (800576c <TIM_Base_SetConfig+0xd4>)
 80056ae:	4290      	cmp	r0, r2
 80056b0:	d048      	beq.n	8005744 <TIM_Base_SetConfig+0xac>
 80056b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005770 <TIM_Base_SetConfig+0xd8>)
 80056b4:	4290      	cmp	r0, r2
 80056b6:	d029      	beq.n	800570c <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	2280      	movs	r2, #128	@ 0x80
 80056ba:	4393      	bics	r3, r2
 80056bc:	694a      	ldr	r2, [r1, #20]
 80056be:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80056c0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c2:	688b      	ldr	r3, [r1, #8]
 80056c4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c6:	680b      	ldr	r3, [r1, #0]
 80056c8:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ca:	e015      	b.n	80056f8 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	2270      	movs	r2, #112	@ 0x70
 80056ce:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80056d0:	684a      	ldr	r2, [r1, #4]
 80056d2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d4:	4a27      	ldr	r2, [pc, #156]	@ (8005774 <TIM_Base_SetConfig+0xdc>)
 80056d6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d8:	68ca      	ldr	r2, [r1, #12]
 80056da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	2280      	movs	r2, #128	@ 0x80
 80056de:	4393      	bics	r3, r2
 80056e0:	694a      	ldr	r2, [r1, #20]
 80056e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e6:	688b      	ldr	r3, [r1, #8]
 80056e8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005760 <TIM_Base_SetConfig+0xc8>)
 80056f0:	4298      	cmp	r0, r3
 80056f2:	d101      	bne.n	80056f8 <TIM_Base_SetConfig+0x60>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f4:	690b      	ldr	r3, [r1, #16]
 80056f6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f8:	2301      	movs	r3, #1
 80056fa:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056fc:	6902      	ldr	r2, [r0, #16]
 80056fe:	4213      	tst	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_Base_SetConfig+0x72>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005702:	6903      	ldr	r3, [r0, #16]
 8005704:	2201      	movs	r2, #1
 8005706:	4393      	bics	r3, r2
 8005708:	6103      	str	r3, [r0, #16]
  }
}
 800570a:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 800570c:	4a19      	ldr	r2, [pc, #100]	@ (8005774 <TIM_Base_SetConfig+0xdc>)
 800570e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005710:	68ca      	ldr	r2, [r1, #12]
 8005712:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005714:	2280      	movs	r2, #128	@ 0x80
 8005716:	4393      	bics	r3, r2
 8005718:	694a      	ldr	r2, [r1, #20]
 800571a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800571c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571e:	688b      	ldr	r3, [r1, #8]
 8005720:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005722:	680b      	ldr	r3, [r1, #0]
 8005724:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005726:	e7e5      	b.n	80056f4 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005728:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <TIM_Base_SetConfig+0xdc>)
 800572a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572c:	68ca      	ldr	r2, [r1, #12]
 800572e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005730:	2280      	movs	r2, #128	@ 0x80
 8005732:	4393      	bics	r3, r2
 8005734:	694a      	ldr	r2, [r1, #20]
 8005736:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005738:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573a:	688b      	ldr	r3, [r1, #8]
 800573c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800573e:	680b      	ldr	r3, [r1, #0]
 8005740:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005742:	e7d9      	b.n	80056f8 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005744:	4a0b      	ldr	r2, [pc, #44]	@ (8005774 <TIM_Base_SetConfig+0xdc>)
 8005746:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005748:	68ca      	ldr	r2, [r1, #12]
 800574a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	2280      	movs	r2, #128	@ 0x80
 800574e:	4393      	bics	r3, r2
 8005750:	694a      	ldr	r2, [r1, #20]
 8005752:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005754:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005756:	688b      	ldr	r3, [r1, #8]
 8005758:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800575a:	680b      	ldr	r3, [r1, #0]
 800575c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575e:	e7c9      	b.n	80056f4 <TIM_Base_SetConfig+0x5c>
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40000400 	.word	0x40000400
 8005768:	40002000 	.word	0x40002000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800
 8005774:	fffffcff 	.word	0xfffffcff

08005778 <HAL_TIM_Base_Init>:
{
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800577c:	d02a      	beq.n	80057d4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800577e:	233d      	movs	r3, #61	@ 0x3d
 8005780:	5cc3      	ldrb	r3, [r0, r3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d020      	beq.n	80057c8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8005786:	253d      	movs	r5, #61	@ 0x3d
 8005788:	2302      	movs	r3, #2
 800578a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	0021      	movs	r1, r4
 800578e:	c901      	ldmia	r1!, {r0}
 8005790:	f7ff ff82 	bl	8005698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	2301      	movs	r3, #1
 8005796:	2248      	movs	r2, #72	@ 0x48
 8005798:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579a:	3a0a      	subs	r2, #10
 800579c:	54a3      	strb	r3, [r4, r2]
 800579e:	3201      	adds	r2, #1
 80057a0:	54a3      	strb	r3, [r4, r2]
 80057a2:	3201      	adds	r2, #1
 80057a4:	54a3      	strb	r3, [r4, r2]
 80057a6:	3201      	adds	r2, #1
 80057a8:	54a3      	strb	r3, [r4, r2]
 80057aa:	3201      	adds	r2, #1
 80057ac:	54a3      	strb	r3, [r4, r2]
 80057ae:	3201      	adds	r2, #1
 80057b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	3201      	adds	r2, #1
 80057b4:	54a3      	strb	r3, [r4, r2]
 80057b6:	3201      	adds	r2, #1
 80057b8:	54a3      	strb	r3, [r4, r2]
 80057ba:	3201      	adds	r2, #1
 80057bc:	54a3      	strb	r3, [r4, r2]
 80057be:	3201      	adds	r2, #1
 80057c0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80057c4:	2000      	movs	r0, #0
}
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80057c8:	333c      	adds	r3, #60	@ 0x3c
 80057ca:	2200      	movs	r2, #0
 80057cc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80057ce:	f7fd fe05 	bl	80033dc <HAL_TIM_Base_MspInit>
 80057d2:	e7d8      	b.n	8005786 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
 80057d6:	e7f6      	b.n	80057c6 <HAL_TIM_Base_Init+0x4e>

080057d8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d8:	4770      	bx	lr

080057da <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057dc:	4770      	bx	lr
	...

080057e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057e0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e6:	2201      	movs	r2, #1
 80057e8:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80057ec:	6801      	ldr	r1, [r0, #0]
 80057ee:	680b      	ldr	r3, [r1, #0]
 80057f0:	25c0      	movs	r5, #192	@ 0xc0
 80057f2:	43ab      	bics	r3, r5
 80057f4:	600b      	str	r3, [r1, #0]
 80057f6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005802:	6802      	ldr	r2, [r0, #0]
 8005804:	6893      	ldr	r3, [r2, #8]
 8005806:	4c04      	ldr	r4, [pc, #16]	@ (8005818 <UART_EndTxTransfer+0x38>)
 8005808:	4023      	ands	r3, r4
 800580a:	6093      	str	r3, [r2, #8]
 800580c:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005810:	2388      	movs	r3, #136	@ 0x88
 8005812:	2220      	movs	r2, #32
 8005814:	50c2      	str	r2, [r0, r3]
}
 8005816:	bd30      	pop	{r4, r5, pc}
 8005818:	ff7fffff 	.word	0xff7fffff

0800581c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800581c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	2201      	movs	r2, #1
 8005824:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005828:	6801      	ldr	r1, [r0, #0]
 800582a:	680b      	ldr	r3, [r1, #0]
 800582c:	4d12      	ldr	r5, [pc, #72]	@ (8005878 <UART_EndRxTransfer+0x5c>)
 800582e:	402b      	ands	r3, r5
 8005830:	600b      	str	r3, [r1, #0]
 8005832:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005836:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800583e:	6802      	ldr	r2, [r0, #0]
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	4c0e      	ldr	r4, [pc, #56]	@ (800587c <UART_EndRxTransfer+0x60>)
 8005844:	4023      	ands	r3, r4
 8005846:	6093      	str	r3, [r2, #8]
 8005848:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d006      	beq.n	8005860 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005852:	238c      	movs	r3, #140	@ 0x8c
 8005854:	2220      	movs	r2, #32
 8005856:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	2300      	movs	r3, #0
 800585a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800585c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800585e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005860:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	6802      	ldr	r2, [r0, #0]
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	2410      	movs	r4, #16
 800586e:	43a3      	bics	r3, r4
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	f381 8810 	msr	PRIMASK, r1
}
 8005876:	e7ec      	b.n	8005852 <UART_EndRxTransfer+0x36>
 8005878:	fffffedf 	.word	0xfffffedf
 800587c:	effffffe 	.word	0xeffffffe

08005880 <HAL_UART_DeInit>:
{
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005884:	d01b      	beq.n	80058be <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 8005886:	2688      	movs	r6, #136	@ 0x88
 8005888:	2324      	movs	r3, #36	@ 0x24
 800588a:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 800588c:	6802      	ldr	r2, [r0, #0]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	2101      	movs	r1, #1
 8005892:	438b      	bics	r3, r1
 8005894:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8005896:	6803      	ldr	r3, [r0, #0]
 8005898:	2500      	movs	r5, #0
 800589a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800589c:	6803      	ldr	r3, [r0, #0]
 800589e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80058a0:	6803      	ldr	r3, [r0, #0]
 80058a2:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80058a4:	f7fd fe40 	bl	8003528 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	2390      	movs	r3, #144	@ 0x90
 80058aa:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 80058ac:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 80058ae:	3b04      	subs	r3, #4
 80058b0:	50e5      	str	r5, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b4:	6725      	str	r5, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80058b6:	3b08      	subs	r3, #8
 80058b8:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80058ba:	2000      	movs	r0, #0
}
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80058be:	2001      	movs	r0, #1
 80058c0:	e7fc      	b.n	80058bc <HAL_UART_DeInit+0x3c>
	...

080058c4 <HAL_UART_Transmit_DMA>:
{
 80058c4:	b510      	push	{r4, lr}
 80058c6:	0004      	movs	r4, r0
 80058c8:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80058ca:	2288      	movs	r2, #136	@ 0x88
 80058cc:	5882      	ldr	r2, [r0, r2]
 80058ce:	2a20      	cmp	r2, #32
 80058d0:	d149      	bne.n	8005966 <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d049      	beq.n	800596a <HAL_UART_Transmit_DMA+0xa6>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d049      	beq.n	800596e <HAL_UART_Transmit_DMA+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058da:	2280      	movs	r2, #128	@ 0x80
 80058dc:	0152      	lsls	r2, r2, #5
 80058de:	6880      	ldr	r0, [r0, #8]
 80058e0:	4290      	cmp	r0, r2
 80058e2:	d028      	beq.n	8005936 <HAL_UART_Transmit_DMA+0x72>
    huart->pTxBuffPtr  = pData;
 80058e4:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80058e6:	2254      	movs	r2, #84	@ 0x54
 80058e8:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80058ea:	3202      	adds	r2, #2
 80058ec:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ee:	323a      	adds	r2, #58	@ 0x3a
 80058f0:	2100      	movs	r1, #0
 80058f2:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f4:	3a08      	subs	r2, #8
 80058f6:	3121      	adds	r1, #33	@ 0x21
 80058f8:	50a1      	str	r1, [r4, r2]
    if (huart->hdmatx != NULL)
 80058fa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	d021      	beq.n	8005944 <HAL_UART_Transmit_DMA+0x80>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005900:	491c      	ldr	r1, [pc, #112]	@ (8005974 <HAL_UART_Transmit_DMA+0xb0>)
 8005902:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005904:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005906:	491c      	ldr	r1, [pc, #112]	@ (8005978 <HAL_UART_Transmit_DMA+0xb4>)
 8005908:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800590a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800590c:	491b      	ldr	r1, [pc, #108]	@ (800597c <HAL_UART_Transmit_DMA+0xb8>)
 800590e:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005910:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005912:	2100      	movs	r1, #0
 8005914:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	3228      	adds	r2, #40	@ 0x28
 800591a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800591c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800591e:	f7fe fd97 	bl	8004450 <HAL_DMA_Start_IT>
 8005922:	2800      	cmp	r0, #0
 8005924:	d00e      	beq.n	8005944 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005926:	2390      	movs	r3, #144	@ 0x90
 8005928:	2210      	movs	r2, #16
 800592a:	50e2      	str	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 800592c:	3b08      	subs	r3, #8
 800592e:	3210      	adds	r2, #16
 8005930:	50e2      	str	r2, [r4, r3]
        return HAL_ERROR;
 8005932:	2001      	movs	r0, #1
 8005934:	e018      	b.n	8005968 <HAL_UART_Transmit_DMA+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	2a00      	cmp	r2, #0
 800593a:	d1d3      	bne.n	80058e4 <HAL_UART_Transmit_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 800593c:	07ca      	lsls	r2, r1, #31
 800593e:	d5d1      	bpl.n	80058e4 <HAL_UART_Transmit_DMA+0x20>
        return  HAL_ERROR;
 8005940:	2001      	movs	r0, #1
 8005942:	e011      	b.n	8005968 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594e:	2301      	movs	r3, #1
 8005950:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	6893      	ldr	r3, [r2, #8]
 8005958:	2080      	movs	r0, #128	@ 0x80
 800595a:	4303      	orrs	r3, r0
 800595c:	6093      	str	r3, [r2, #8]
 800595e:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8005962:	2000      	movs	r0, #0
 8005964:	e000      	b.n	8005968 <HAL_UART_Transmit_DMA+0xa4>
    return HAL_BUSY;
 8005966:	2002      	movs	r0, #2
}
 8005968:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800596a:	2001      	movs	r0, #1
 800596c:	e7fc      	b.n	8005968 <HAL_UART_Transmit_DMA+0xa4>
 800596e:	2001      	movs	r0, #1
 8005970:	e7fa      	b.n	8005968 <HAL_UART_Transmit_DMA+0xa4>
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	08005a33 	.word	0x08005a33
 8005978:	08005a7f 	.word	0x08005a7f
 800597c:	08005a8f 	.word	0x08005a8f

08005980 <HAL_UART_DMAStop>:
{
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	0004      	movs	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005984:	2388      	movs	r3, #136	@ 0x88
 8005986:	58c2      	ldr	r2, [r0, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005988:	3304      	adds	r3, #4
 800598a:	58c5      	ldr	r5, [r0, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800598c:	6803      	ldr	r3, [r0, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	d501      	bpl.n	8005998 <HAL_UART_DMAStop+0x18>
 8005994:	2a21      	cmp	r2, #33	@ 0x21
 8005996:	d007      	beq.n	80059a8 <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 800599c:	2000      	movs	r0, #0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800599e:	065b      	lsls	r3, r3, #25
 80059a0:	d501      	bpl.n	80059a6 <HAL_UART_DMAStop+0x26>
 80059a2:	2d22      	cmp	r5, #34	@ 0x22
 80059a4:	d021      	beq.n	80059ea <HAL_UART_DMAStop+0x6a>
}
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	2301      	movs	r3, #1
 80059ae:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059b2:	6802      	ldr	r2, [r0, #0]
 80059b4:	6893      	ldr	r3, [r2, #8]
 80059b6:	2080      	movs	r0, #128	@ 0x80
 80059b8:	4383      	bics	r3, r0
 80059ba:	6093      	str	r3, [r2, #8]
 80059bc:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmatx != NULL)
 80059c0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80059c6:	f7fe fd91 	bl	80044ec <HAL_DMA_Abort>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d103      	bne.n	80059d6 <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 80059ce:	0020      	movs	r0, r4
 80059d0:	f7ff ff06 	bl	80057e0 <UART_EndTxTransfer>
 80059d4:	e7e0      	b.n	8005998 <HAL_UART_DMAStop+0x18>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80059d6:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80059d8:	f7fe fe6e 	bl	80046b8 <HAL_DMA_GetError>
 80059dc:	2820      	cmp	r0, #32
 80059de:	d1f6      	bne.n	80059ce <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059e0:	2390      	movs	r3, #144	@ 0x90
 80059e2:	2210      	movs	r2, #16
 80059e4:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 80059e6:	381d      	subs	r0, #29
 80059e8:	e7dd      	b.n	80059a6 <HAL_UART_DMAStop+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	2301      	movs	r3, #1
 80059f0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	6893      	ldr	r3, [r2, #8]
 80059f8:	3040      	adds	r0, #64	@ 0x40
 80059fa:	4383      	bics	r3, r0
 80059fc:	6093      	str	r3, [r2, #8]
 80059fe:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	58e0      	ldr	r0, [r4, r3]
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_DMAStop+0x92>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a0a:	f7fe fd6f 	bl	80044ec <HAL_DMA_Abort>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_UART_DMAStop+0x9c>
    UART_EndRxTransfer(huart);
 8005a12:	0020      	movs	r0, r4
 8005a14:	f7ff ff02 	bl	800581c <UART_EndRxTransfer>
  return HAL_OK;
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e7c4      	b.n	80059a6 <HAL_UART_DMAStop+0x26>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	58e0      	ldr	r0, [r4, r3]
 8005a20:	f7fe fe4a 	bl	80046b8 <HAL_DMA_GetError>
 8005a24:	2820      	cmp	r0, #32
 8005a26:	d1f4      	bne.n	8005a12 <HAL_UART_DMAStop+0x92>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a28:	2390      	movs	r3, #144	@ 0x90
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 8005a2e:	381d      	subs	r0, #29
 8005a30:	e7b9      	b.n	80059a6 <HAL_UART_DMAStop+0x26>

08005a32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a32:	b510      	push	{r4, lr}
 8005a34:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a36:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	069b      	lsls	r3, r3, #26
 8005a3e:	d41a      	bmi.n	8005a76 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8005a40:	2356      	movs	r3, #86	@ 0x56
 8005a42:	2200      	movs	r2, #0
 8005a44:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a50:	6801      	ldr	r1, [r0, #0]
 8005a52:	688b      	ldr	r3, [r1, #8]
 8005a54:	2480      	movs	r4, #128	@ 0x80
 8005a56:	43a3      	bics	r3, r4
 8005a58:	608b      	str	r3, [r1, #8]
 8005a5a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a66:	6802      	ldr	r2, [r0, #0]
 8005a68:	6813      	ldr	r3, [r2, #0]
 8005a6a:	2040      	movs	r0, #64	@ 0x40
 8005a6c:	4303      	orrs	r3, r0
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a74:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005a76:	f7fc fefd 	bl	8002874 <HAL_UART_TxCpltCallback>
}
 8005a7a:	e7fb      	b.n	8005a74 <UART_DMATransmitCplt+0x42>

08005a7c <HAL_UART_TxHalfCpltCallback>:
}
 8005a7c:	4770      	bx	lr

08005a7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a80:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005a82:	f7ff fffb 	bl	8005a7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a86:	bd10      	pop	{r4, pc}

08005a88 <HAL_UART_RxCpltCallback>:
}
 8005a88:	4770      	bx	lr

08005a8a <HAL_UART_RxHalfCpltCallback>:
}
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_ErrorCallback>:
}
 8005a8c:	4770      	bx	lr

08005a8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a8e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a90:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a92:	2388      	movs	r3, #136	@ 0x88
 8005a94:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a96:	3304      	adds	r3, #4
 8005a98:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	d501      	bpl.n	8005aa6 <UART_DMAError+0x18>
 8005aa2:	2a21      	cmp	r2, #33	@ 0x21
 8005aa4:	d00e      	beq.n	8005ac4 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	065b      	lsls	r3, r3, #25
 8005aac:	d501      	bpl.n	8005ab2 <UART_DMAError+0x24>
 8005aae:	2d22      	cmp	r5, #34	@ 0x22
 8005ab0:	d00f      	beq.n	8005ad2 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ab2:	2290      	movs	r2, #144	@ 0x90
 8005ab4:	58a3      	ldr	r3, [r4, r2]
 8005ab6:	2110      	movs	r1, #16
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005abc:	0020      	movs	r0, r4
 8005abe:	f7ff ffe5 	bl	8005a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8005ac4:	2356      	movs	r3, #86	@ 0x56
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8005aca:	0020      	movs	r0, r4
 8005acc:	f7ff fe88 	bl	80057e0 <UART_EndTxTransfer>
 8005ad0:	e7e9      	b.n	8005aa6 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8005ad2:	235e      	movs	r3, #94	@ 0x5e
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f7ff fe9f 	bl	800581c <UART_EndRxTransfer>
 8005ade:	e7e8      	b.n	8005ab2 <UART_DMAError+0x24>

08005ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	225e      	movs	r2, #94	@ 0x5e
 8005ae8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8005aea:	3a08      	subs	r2, #8
 8005aec:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aee:	f7ff ffcd 	bl	8005a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005af2:	bd10      	pop	{r4, pc}

08005af4 <HAL_UART_IRQHandler>:
{
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005af8:	6802      	ldr	r2, [r0, #0]
 8005afa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005afc:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005afe:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b00:	4dbb      	ldr	r5, [pc, #748]	@ (8005df0 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 8005b02:	422b      	tst	r3, r5
 8005b04:	d10e      	bne.n	8005b24 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b06:	069d      	lsls	r5, r3, #26
 8005b08:	d512      	bpl.n	8005b30 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b0a:	2520      	movs	r5, #32
 8005b0c:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b0e:	2680      	movs	r6, #128	@ 0x80
 8005b10:	0576      	lsls	r6, r6, #21
 8005b12:	4006      	ands	r6, r0
 8005b14:	4335      	orrs	r5, r6
 8005b16:	d00b      	beq.n	8005b30 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 8005b18:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02a      	beq.n	8005b74 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 8005b1e:	0020      	movs	r0, r4
 8005b20:	4798      	blx	r3
 8005b22:	e027      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b24:	4eb3      	ldr	r6, [pc, #716]	@ (8005df4 <HAL_UART_IRQHandler+0x300>)
 8005b26:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b28:	4db3      	ldr	r5, [pc, #716]	@ (8005df8 <HAL_UART_IRQHandler+0x304>)
 8005b2a:	400d      	ands	r5, r1
 8005b2c:	4335      	orrs	r5, r6
 8005b2e:	d122      	bne.n	8005b76 <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8005b32:	2d01      	cmp	r5, #1
 8005b34:	d100      	bne.n	8005b38 <HAL_UART_IRQHandler+0x44>
 8005b36:	e0ad      	b.n	8005c94 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b38:	02dd      	lsls	r5, r3, #11
 8005b3a:	d502      	bpl.n	8005b42 <HAL_UART_IRQHandler+0x4e>
 8005b3c:	0245      	lsls	r5, r0, #9
 8005b3e:	d500      	bpl.n	8005b42 <HAL_UART_IRQHandler+0x4e>
 8005b40:	e147      	b.n	8005dd2 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b42:	061a      	lsls	r2, r3, #24
 8005b44:	d507      	bpl.n	8005b56 <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b4a:	2580      	movs	r5, #128	@ 0x80
 8005b4c:	042d      	lsls	r5, r5, #16
 8005b4e:	4028      	ands	r0, r5
 8005b50:	4302      	orrs	r2, r0
 8005b52:	d000      	beq.n	8005b56 <HAL_UART_IRQHandler+0x62>
 8005b54:	e144      	b.n	8005de0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b56:	065a      	lsls	r2, r3, #25
 8005b58:	d502      	bpl.n	8005b60 <HAL_UART_IRQHandler+0x6c>
 8005b5a:	064a      	lsls	r2, r1, #25
 8005b5c:	d500      	bpl.n	8005b60 <HAL_UART_IRQHandler+0x6c>
 8005b5e:	e155      	b.n	8005e0c <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	d502      	bpl.n	8005b6a <HAL_UART_IRQHandler+0x76>
 8005b64:	004a      	lsls	r2, r1, #1
 8005b66:	d500      	bpl.n	8005b6a <HAL_UART_IRQHandler+0x76>
 8005b68:	e165      	b.n	8005e36 <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	d502      	bpl.n	8005b74 <HAL_UART_IRQHandler+0x80>
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	da00      	bge.n	8005b74 <HAL_UART_IRQHandler+0x80>
 8005b72:	e164      	b.n	8005e3e <HAL_UART_IRQHandler+0x34a>
}
 8005b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b76:	07dd      	lsls	r5, r3, #31
 8005b78:	d507      	bpl.n	8005b8a <HAL_UART_IRQHandler+0x96>
 8005b7a:	05cd      	lsls	r5, r1, #23
 8005b7c:	d505      	bpl.n	8005b8a <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b7e:	2701      	movs	r7, #1
 8005b80:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b82:	2590      	movs	r5, #144	@ 0x90
 8005b84:	5962      	ldr	r2, [r4, r5]
 8005b86:	433a      	orrs	r2, r7
 8005b88:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b8a:	079a      	lsls	r2, r3, #30
 8005b8c:	d56e      	bpl.n	8005c6c <HAL_UART_IRQHandler+0x178>
 8005b8e:	07c2      	lsls	r2, r0, #31
 8005b90:	d511      	bpl.n	8005bb6 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	2502      	movs	r5, #2
 8005b96:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b98:	2790      	movs	r7, #144	@ 0x90
 8005b9a:	59e2      	ldr	r2, [r4, r7]
 8005b9c:	3502      	adds	r5, #2
 8005b9e:	432a      	orrs	r2, r5
 8005ba0:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba2:	421d      	tst	r5, r3
 8005ba4:	d007      	beq.n	8005bb6 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	2504      	movs	r5, #4
 8005baa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bac:	358c      	adds	r5, #140	@ 0x8c
 8005bae:	5962      	ldr	r2, [r4, r5]
 8005bb0:	2702      	movs	r7, #2
 8005bb2:	433a      	orrs	r2, r7
 8005bb4:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bb6:	071a      	lsls	r2, r3, #28
 8005bb8:	d50a      	bpl.n	8005bd0 <HAL_UART_IRQHandler+0xdc>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bba:	2220      	movs	r2, #32
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	4332      	orrs	r2, r6
 8005bc0:	d006      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	2608      	movs	r6, #8
 8005bc6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bc8:	2590      	movs	r5, #144	@ 0x90
 8005bca:	5962      	ldr	r2, [r4, r5]
 8005bcc:	4332      	orrs	r2, r6
 8005bce:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bd0:	051a      	lsls	r2, r3, #20
 8005bd2:	d50a      	bpl.n	8005bea <HAL_UART_IRQHandler+0xf6>
 8005bd4:	014a      	lsls	r2, r1, #5
 8005bd6:	d508      	bpl.n	8005bea <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	2580      	movs	r5, #128	@ 0x80
 8005bdc:	012d      	lsls	r5, r5, #4
 8005bde:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005be0:	2590      	movs	r5, #144	@ 0x90
 8005be2:	5962      	ldr	r2, [r4, r5]
 8005be4:	2620      	movs	r6, #32
 8005be6:	4332      	orrs	r2, r6
 8005be8:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bea:	2290      	movs	r2, #144	@ 0x90
 8005bec:	58a2      	ldr	r2, [r4, r2]
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	d0c0      	beq.n	8005b74 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bf2:	069b      	lsls	r3, r3, #26
 8005bf4:	d50b      	bpl.n	8005c0e <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bfa:	2280      	movs	r2, #128	@ 0x80
 8005bfc:	0552      	lsls	r2, r2, #21
 8005bfe:	4002      	ands	r2, r0
 8005c00:	4313      	orrs	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8005c04:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 8005c0a:	0020      	movs	r0, r4
 8005c0c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005c0e:	2390      	movs	r3, #144	@ 0x90
 8005c10:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	2340      	movs	r3, #64	@ 0x40
 8005c18:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c1a:	2228      	movs	r2, #40	@ 0x28
 8005c1c:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8005c22:	0020      	movs	r0, r4
 8005c24:	f7ff fdfa 	bl	800581c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	065b      	lsls	r3, r3, #25
 8005c2e:	d526      	bpl.n	8005c7e <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c30:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	2301      	movs	r3, #1
 8005c36:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	6893      	ldr	r3, [r2, #8]
 8005c3e:	2040      	movs	r0, #64	@ 0x40
 8005c40:	4383      	bics	r3, r0
 8005c42:	6093      	str	r3, [r2, #8]
 8005c44:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	58e3      	ldr	r3, [r4, r3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c50:	4a6a      	ldr	r2, [pc, #424]	@ (8005dfc <HAL_UART_IRQHandler+0x308>)
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c54:	2380      	movs	r3, #128	@ 0x80
 8005c56:	58e0      	ldr	r0, [r4, r3]
 8005c58:	f7fe fc88 	bl	800456c <HAL_DMA_Abort_IT>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d100      	bne.n	8005c62 <HAL_UART_IRQHandler+0x16e>
 8005c60:	e788      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c62:	2380      	movs	r3, #128	@ 0x80
 8005c64:	58e0      	ldr	r0, [r4, r3]
 8005c66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005c68:	4798      	blx	r3
 8005c6a:	e783      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c6c:	075a      	lsls	r2, r3, #29
 8005c6e:	d5a2      	bpl.n	8005bb6 <HAL_UART_IRQHandler+0xc2>
 8005c70:	07c2      	lsls	r2, r0, #31
 8005c72:	d5a0      	bpl.n	8005bb6 <HAL_UART_IRQHandler+0xc2>
 8005c74:	e797      	b.n	8005ba6 <HAL_UART_IRQHandler+0xb2>
            HAL_UART_ErrorCallback(huart);
 8005c76:	0020      	movs	r0, r4
 8005c78:	f7ff ff08 	bl	8005a8c <HAL_UART_ErrorCallback>
 8005c7c:	e77a      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8005c7e:	0020      	movs	r0, r4
 8005c80:	f7ff ff04 	bl	8005a8c <HAL_UART_ErrorCallback>
 8005c84:	e776      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 8005c86:	0020      	movs	r0, r4
 8005c88:	f7ff ff00 	bl	8005a8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	2390      	movs	r3, #144	@ 0x90
 8005c8e:	2200      	movs	r2, #0
 8005c90:	50e2      	str	r2, [r4, r3]
 8005c92:	e76f      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c94:	06dd      	lsls	r5, r3, #27
 8005c96:	d400      	bmi.n	8005c9a <HAL_UART_IRQHandler+0x1a6>
 8005c98:	e74e      	b.n	8005b38 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c9a:	06cd      	lsls	r5, r1, #27
 8005c9c:	d400      	bmi.n	8005ca0 <HAL_UART_IRQHandler+0x1ac>
 8005c9e:	e74b      	b.n	8005b38 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	065b      	lsls	r3, r3, #25
 8005caa:	d555      	bpl.n	8005d58 <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cac:	2380      	movs	r3, #128	@ 0x80
 8005cae:	58e2      	ldr	r2, [r4, r3]
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <HAL_UART_IRQHandler+0x1c8>
 8005cba:	e75b      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cbc:	215c      	movs	r1, #92	@ 0x5c
 8005cbe:	5a61      	ldrh	r1, [r4, r1]
 8005cc0:	4299      	cmp	r1, r3
 8005cc2:	d800      	bhi.n	8005cc6 <HAL_UART_IRQHandler+0x1d2>
 8005cc4:	e756      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc6:	215e      	movs	r1, #94	@ 0x5e
 8005cc8:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	069b      	lsls	r3, r3, #26
 8005cd0:	d50b      	bpl.n	8005cea <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd6:	335c      	adds	r3, #92	@ 0x5c
 8005cd8:	5ae3      	ldrh	r3, [r4, r3]
 8005cda:	225c      	movs	r2, #92	@ 0x5c
 8005cdc:	5aa1      	ldrh	r1, [r4, r2]
 8005cde:	1ac9      	subs	r1, r1, r3
 8005ce0:	b289      	uxth	r1, r1
 8005ce2:	0020      	movs	r0, r4
 8005ce4:	f7fc fdee 	bl	80028c4 <HAL_UARTEx_RxEventCallback>
 8005ce8:	e744      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf4:	6821      	ldr	r1, [r4, #0]
 8005cf6:	680a      	ldr	r2, [r1, #0]
 8005cf8:	4d41      	ldr	r5, [pc, #260]	@ (8005e00 <HAL_UART_IRQHandler+0x30c>)
 8005cfa:	402a      	ands	r2, r5
 8005cfc:	600a      	str	r2, [r1, #0]
 8005cfe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d02:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d06:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	6821      	ldr	r1, [r4, #0]
 8005d0c:	688a      	ldr	r2, [r1, #8]
 8005d0e:	439a      	bics	r2, r3
 8005d10:	608a      	str	r2, [r1, #8]
 8005d12:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d16:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	688a      	ldr	r2, [r1, #8]
 8005d22:	3542      	adds	r5, #66	@ 0x42
 8005d24:	35ff      	adds	r5, #255	@ 0xff
 8005d26:	43aa      	bics	r2, r5
 8005d28:	608a      	str	r2, [r1, #8]
 8005d2a:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	228c      	movs	r2, #140	@ 0x8c
 8005d30:	2120      	movs	r1, #32
 8005d32:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	2200      	movs	r2, #0
 8005d36:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	2010      	movs	r0, #16
 8005d46:	4383      	bics	r3, r0
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d4e:	2380      	movs	r3, #128	@ 0x80
 8005d50:	58e0      	ldr	r0, [r4, r3]
 8005d52:	f7fe fbcb 	bl	80044ec <HAL_DMA_Abort>
 8005d56:	e7bc      	b.n	8005cd2 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d58:	215e      	movs	r1, #94	@ 0x5e
 8005d5a:	5a62      	ldrh	r2, [r4, r1]
 8005d5c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8005d5e:	5a63      	ldrh	r3, [r4, r1]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d100      	bne.n	8005d68 <HAL_UART_IRQHandler+0x274>
 8005d66:	e705      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d68:	235c      	movs	r3, #92	@ 0x5c
 8005d6a:	5ae1      	ldrh	r1, [r4, r3]
 8005d6c:	1a89      	subs	r1, r1, r2
 8005d6e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d100      	bne.n	8005d76 <HAL_UART_IRQHandler+0x282>
 8005d74:	e6fe      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d76:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	3b5b      	subs	r3, #91	@ 0x5b
 8005d7c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	6802      	ldr	r2, [r0, #0]
 8005d84:	4e1f      	ldr	r6, [pc, #124]	@ (8005e04 <HAL_UART_IRQHandler+0x310>)
 8005d86:	4032      	ands	r2, r6
 8005d88:	6002      	str	r2, [r0, #0]
 8005d8a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	6882      	ldr	r2, [r0, #8]
 8005d9a:	4e1b      	ldr	r6, [pc, #108]	@ (8005e08 <HAL_UART_IRQHandler+0x314>)
 8005d9c:	4032      	ands	r2, r6
 8005d9e:	6082      	str	r2, [r0, #8]
 8005da0:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8005da4:	228c      	movs	r2, #140	@ 0x8c
 8005da6:	2020      	movs	r0, #32
 8005da8:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	2200      	movs	r2, #0
 8005dac:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8005dae:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	2510      	movs	r5, #16
 8005dbe:	43ab      	bics	r3, r5
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f7fc fd7a 	bl	80028c4 <HAL_UARTEx_RxEventCallback>
 8005dd0:	e6d0      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dd2:	2380      	movs	r3, #128	@ 0x80
 8005dd4:	035b      	lsls	r3, r3, #13
 8005dd6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f000 fb37 	bl	800644c <HAL_UARTEx_WakeupCallback>
    return;
 8005dde:	e6c9      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8005de0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d100      	bne.n	8005de8 <HAL_UART_IRQHandler+0x2f4>
 8005de6:	e6c5      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 8005de8:	0020      	movs	r0, r4
 8005dea:	4798      	blx	r3
 8005dec:	e6c2      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	0000080f 	.word	0x0000080f
 8005df4:	10000001 	.word	0x10000001
 8005df8:	04000120 	.word	0x04000120
 8005dfc:	08005ae1 	.word	0x08005ae1
 8005e00:	fffffeff 	.word	0xfffffeff
 8005e04:	fffffedf 	.word	0xfffffedf
 8005e08:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e10:	2301      	movs	r3, #1
 8005e12:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	2040      	movs	r0, #64	@ 0x40
 8005e1c:	4383      	bics	r3, r0
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e24:	2388      	movs	r3, #136	@ 0x88
 8005e26:	2220      	movs	r2, #32
 8005e28:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e2e:	0020      	movs	r0, r4
 8005e30:	f7fc fd20 	bl	8002874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e34:	e69e      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e36:	0020      	movs	r0, r4
 8005e38:	f000 fb0a 	bl	8006450 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005e3c:	e69a      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e3e:	0020      	movs	r0, r4
 8005e40:	f000 fb05 	bl	800644e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005e44:	e696      	b.n	8005b74 <HAL_UART_IRQHandler+0x80>
 8005e46:	46c0      	nop			@ (mov r8, r8)

08005e48 <UART_DMARxHalfCplt>:
{
 8005e48:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e4a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e50:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d002      	beq.n	8005e5c <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e56:	f7ff fe18 	bl	8005a8a <HAL_UART_RxHalfCpltCallback>
}
 8005e5a:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e5c:	335b      	adds	r3, #91	@ 0x5b
 8005e5e:	5ac1      	ldrh	r1, [r0, r3]
 8005e60:	0849      	lsrs	r1, r1, #1
 8005e62:	f7fc fd2f 	bl	80028c4 <HAL_UARTEx_RxEventCallback>
 8005e66:	e7f8      	b.n	8005e5a <UART_DMARxHalfCplt+0x12>

08005e68 <UART_DMAReceiveCplt>:
{
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e6c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	069b      	lsls	r3, r3, #26
 8005e74:	d429      	bmi.n	8005eca <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8005e76:	235e      	movs	r3, #94	@ 0x5e
 8005e78:	2200      	movs	r2, #0
 8005e7a:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	3b5d      	subs	r3, #93	@ 0x5d
 8005e82:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e86:	6801      	ldr	r1, [r0, #0]
 8005e88:	680a      	ldr	r2, [r1, #0]
 8005e8a:	4d1c      	ldr	r5, [pc, #112]	@ (8005efc <UART_DMAReceiveCplt+0x94>)
 8005e8c:	402a      	ands	r2, r5
 8005e8e:	600a      	str	r2, [r1, #0]
 8005e90:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e98:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	6801      	ldr	r1, [r0, #0]
 8005e9e:	688a      	ldr	r2, [r1, #8]
 8005ea0:	439a      	bics	r2, r3
 8005ea2:	608a      	str	r2, [r1, #8]
 8005ea4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eac:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	6802      	ldr	r2, [r0, #0]
 8005eb2:	6893      	ldr	r3, [r2, #8]
 8005eb4:	2440      	movs	r4, #64	@ 0x40
 8005eb6:	43a3      	bics	r3, r4
 8005eb8:	6093      	str	r3, [r2, #8]
 8005eba:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	238c      	movs	r3, #140	@ 0x8c
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d007      	beq.n	8005eda <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ece:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d00e      	beq.n	8005ef2 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8005ed4:	f7ff fdd8 	bl	8005a88 <HAL_UART_RxCpltCallback>
}
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eda:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ede:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	6802      	ldr	r2, [r0, #0]
 8005ee4:	6813      	ldr	r3, [r2, #0]
 8005ee6:	3c30      	subs	r4, #48	@ 0x30
 8005ee8:	43a3      	bics	r3, r4
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f381 8810 	msr	PRIMASK, r1
}
 8005ef0:	e7eb      	b.n	8005eca <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef2:	335b      	adds	r3, #91	@ 0x5b
 8005ef4:	5ac1      	ldrh	r1, [r0, r3]
 8005ef6:	f7fc fce5 	bl	80028c4 <HAL_UARTEx_RxEventCallback>
 8005efa:	e7ed      	b.n	8005ed8 <UART_DMAReceiveCplt+0x70>
 8005efc:	fffffeff 	.word	0xfffffeff

08005f00 <UART_SetConfig>:
{
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	6801      	ldr	r1, [r0, #0]
 8005f06:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f08:	6883      	ldr	r3, [r0, #8]
 8005f0a:	6900      	ldr	r0, [r0, #16]
 8005f0c:	4303      	orrs	r3, r0
 8005f0e:	6960      	ldr	r0, [r4, #20]
 8005f10:	4303      	orrs	r3, r0
 8005f12:	69e0      	ldr	r0, [r4, #28]
 8005f14:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f16:	4853      	ldr	r0, [pc, #332]	@ (8006064 <UART_SetConfig+0x164>)
 8005f18:	4002      	ands	r2, r0
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	6853      	ldr	r3, [r2, #4]
 8005f22:	4951      	ldr	r1, [pc, #324]	@ (8006068 <UART_SetConfig+0x168>)
 8005f24:	400b      	ands	r3, r1
 8005f26:	68e1      	ldr	r1, [r4, #12]
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f2e:	6821      	ldr	r1, [r4, #0]
 8005f30:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005f32:	6a20      	ldr	r0, [r4, #32]
 8005f34:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f36:	484d      	ldr	r0, [pc, #308]	@ (800606c <UART_SetConfig+0x16c>)
 8005f38:	4002      	ands	r2, r0
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005f42:	210f      	movs	r1, #15
 8005f44:	438b      	bics	r3, r1
 8005f46:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	4a48      	ldr	r2, [pc, #288]	@ (8006070 <UART_SetConfig+0x170>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d016      	beq.n	8005f82 <UART_SetConfig+0x82>
 8005f54:	4a47      	ldr	r2, [pc, #284]	@ (8006074 <UART_SetConfig+0x174>)
 8005f56:	4694      	mov	ip, r2
 8005f58:	4463      	add	r3, ip
 8005f5a:	1e5a      	subs	r2, r3, #1
 8005f5c:	4193      	sbcs	r3, r2
 8005f5e:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f60:	2280      	movs	r2, #128	@ 0x80
 8005f62:	0212      	lsls	r2, r2, #8
 8005f64:	69e1      	ldr	r1, [r4, #28]
 8005f66:	4291      	cmp	r1, r2
 8005f68:	d051      	beq.n	800600e <UART_SetConfig+0x10e>
    switch (clocksource)
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d91e      	bls.n	8005fae <UART_SetConfig+0xae>
  huart->NbTxDataToProcess = 1;
 8005f70:	2301      	movs	r3, #1
 8005f72:	226a      	movs	r2, #106	@ 0x6a
 8005f74:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8005f76:	3a02      	subs	r2, #2
 8005f78:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f7e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f82:	4b3d      	ldr	r3, [pc, #244]	@ (8006078 <UART_SetConfig+0x178>)
 8005f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f86:	2303      	movs	r3, #3
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d038      	beq.n	8006000 <UART_SetConfig+0x100>
 8005f8e:	d830      	bhi.n	8005ff2 <UART_SetConfig+0xf2>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <UART_SetConfig+0xa6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	69e2      	ldr	r2, [r4, #28]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d05e      	beq.n	800605c <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9e:	f7ff f885 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8005fa2:	0006      	movs	r6, r0
        break;
 8005fa4:	e006      	b.n	8005fb4 <UART_SetConfig+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e7da      	b.n	8005f60 <UART_SetConfig+0x60>
        pclk = (uint32_t) HSI_VALUE;
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <UART_SetConfig+0x17c>)
 8005fac:	e037      	b.n	800601e <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fae:	f7ff f9ad 	bl	800530c <HAL_RCC_GetPCLK1Freq>
 8005fb2:	0006      	movs	r6, r0
    if (pclk != 0U)
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	d0da      	beq.n	8005f70 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fba:	6865      	ldr	r5, [r4, #4]
 8005fbc:	4b30      	ldr	r3, [pc, #192]	@ (8006080 <UART_SetConfig+0x180>)
 8005fbe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005fc0:	0052      	lsls	r2, r2, #1
 8005fc2:	5ad1      	ldrh	r1, [r2, r3]
 8005fc4:	0030      	movs	r0, r6
 8005fc6:	f7fa f89b 	bl	8000100 <__udivsi3>
 8005fca:	086b      	lsrs	r3, r5, #1
 8005fcc:	18c0      	adds	r0, r0, r3
 8005fce:	0029      	movs	r1, r5
 8005fd0:	f7fa f896 	bl	8000100 <__udivsi3>
 8005fd4:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd6:	0001      	movs	r1, r0
 8005fd8:	3910      	subs	r1, #16
 8005fda:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 8005fdc:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	d8c6      	bhi.n	8005f70 <UART_SetConfig+0x70>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	60d3      	str	r3, [r2, #12]
 8005fea:	2000      	movs	r0, #0
 8005fec:	e7c0      	b.n	8005f70 <UART_SetConfig+0x70>
    switch (clocksource)
 8005fee:	2001      	movs	r0, #1
 8005ff0:	e7be      	b.n	8005f70 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff2:	69e3      	ldr	r3, [r4, #28]
 8005ff4:	2280      	movs	r2, #128	@ 0x80
 8005ff6:	0212      	lsls	r2, r2, #8
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d010      	beq.n	800601e <UART_SetConfig+0x11e>
 8005ffc:	0016      	movs	r6, r2
 8005ffe:	e7dc      	b.n	8005fba <UART_SetConfig+0xba>
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	69e2      	ldr	r2, [r4, #28]
 8006006:	429a      	cmp	r2, r3
 8006008:	d0cf      	beq.n	8005faa <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 800600a:	4e1c      	ldr	r6, [pc, #112]	@ (800607c <UART_SetConfig+0x17c>)
 800600c:	e7d5      	b.n	8005fba <UART_SetConfig+0xba>
    switch (clocksource)
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ed      	bne.n	8005fee <UART_SetConfig+0xee>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7ff f97b 	bl	800530c <HAL_RCC_GetPCLK1Freq>
 8006016:	0003      	movs	r3, r0
    if (pclk != 0U)
 8006018:	2000      	movs	r0, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0a8      	beq.n	8005f70 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	6865      	ldr	r5, [r4, #4]
 8006020:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <UART_SetConfig+0x180>)
 8006022:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006024:	0049      	lsls	r1, r1, #1
 8006026:	5a89      	ldrh	r1, [r1, r2]
 8006028:	0018      	movs	r0, r3
 800602a:	f7fa f869 	bl	8000100 <__udivsi3>
 800602e:	0040      	lsls	r0, r0, #1
 8006030:	086b      	lsrs	r3, r5, #1
 8006032:	18c0      	adds	r0, r0, r3
 8006034:	0029      	movs	r1, r5
 8006036:	f7fa f863 	bl	8000100 <__udivsi3>
 800603a:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603c:	0001      	movs	r1, r0
 800603e:	3910      	subs	r1, #16
 8006040:	4a10      	ldr	r2, [pc, #64]	@ (8006084 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 8006042:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006044:	4291      	cmp	r1, r2
 8006046:	d900      	bls.n	800604a <UART_SetConfig+0x14a>
 8006048:	e792      	b.n	8005f70 <UART_SetConfig+0x70>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604a:	4a0f      	ldr	r2, [pc, #60]	@ (8006088 <UART_SetConfig+0x188>)
 800604c:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 800604e:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006050:	071b      	lsls	r3, r3, #28
 8006052:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8006054:	4313      	orrs	r3, r2
 8006056:	60cb      	str	r3, [r1, #12]
 8006058:	2000      	movs	r0, #0
 800605a:	e789      	b.n	8005f70 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 800605c:	f7ff f826 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8006060:	0003      	movs	r3, r0
        break;
 8006062:	e7d9      	b.n	8006018 <UART_SetConfig+0x118>
 8006064:	cfff69f3 	.word	0xcfff69f3
 8006068:	ffffcfff 	.word	0xffffcfff
 800606c:	11fff4ff 	.word	0x11fff4ff
 8006070:	40013800 	.word	0x40013800
 8006074:	bfffbc00 	.word	0xbfffbc00
 8006078:	40021000 	.word	0x40021000
 800607c:	00f42400 	.word	0x00f42400
 8006080:	08006a00 	.word	0x08006a00
 8006084:	0000ffef 	.word	0x0000ffef
 8006088:	0000fff0 	.word	0x0000fff0

0800608c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800608c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800608e:	071b      	lsls	r3, r3, #28
 8006090:	d506      	bpl.n	80060a0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006092:	6802      	ldr	r2, [r0, #0]
 8006094:	6853      	ldr	r3, [r2, #4]
 8006096:	492c      	ldr	r1, [pc, #176]	@ (8006148 <UART_AdvFeatureConfig+0xbc>)
 8006098:	400b      	ands	r3, r1
 800609a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800609c:	430b      	orrs	r3, r1
 800609e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d506      	bpl.n	80060b4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a6:	6802      	ldr	r2, [r0, #0]
 80060a8:	6853      	ldr	r3, [r2, #4]
 80060aa:	4928      	ldr	r1, [pc, #160]	@ (800614c <UART_AdvFeatureConfig+0xc0>)
 80060ac:	400b      	ands	r3, r1
 80060ae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060b6:	079b      	lsls	r3, r3, #30
 80060b8:	d506      	bpl.n	80060c8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ba:	6802      	ldr	r2, [r0, #0]
 80060bc:	6853      	ldr	r3, [r2, #4]
 80060be:	4924      	ldr	r1, [pc, #144]	@ (8006150 <UART_AdvFeatureConfig+0xc4>)
 80060c0:	400b      	ands	r3, r1
 80060c2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060ca:	075b      	lsls	r3, r3, #29
 80060cc:	d506      	bpl.n	80060dc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ce:	6802      	ldr	r2, [r0, #0]
 80060d0:	6853      	ldr	r3, [r2, #4]
 80060d2:	4920      	ldr	r1, [pc, #128]	@ (8006154 <UART_AdvFeatureConfig+0xc8>)
 80060d4:	400b      	ands	r3, r1
 80060d6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80060d8:	430b      	orrs	r3, r1
 80060da:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060de:	06db      	lsls	r3, r3, #27
 80060e0:	d506      	bpl.n	80060f0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060e2:	6802      	ldr	r2, [r0, #0]
 80060e4:	6893      	ldr	r3, [r2, #8]
 80060e6:	491c      	ldr	r1, [pc, #112]	@ (8006158 <UART_AdvFeatureConfig+0xcc>)
 80060e8:	400b      	ands	r3, r1
 80060ea:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80060f2:	069b      	lsls	r3, r3, #26
 80060f4:	d506      	bpl.n	8006104 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f6:	6802      	ldr	r2, [r0, #0]
 80060f8:	6893      	ldr	r3, [r2, #8]
 80060fa:	4918      	ldr	r1, [pc, #96]	@ (800615c <UART_AdvFeatureConfig+0xd0>)
 80060fc:	400b      	ands	r3, r1
 80060fe:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006100:	430b      	orrs	r3, r1
 8006102:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006104:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006106:	065b      	lsls	r3, r3, #25
 8006108:	d50b      	bpl.n	8006122 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800610a:	6802      	ldr	r2, [r0, #0]
 800610c:	6853      	ldr	r3, [r2, #4]
 800610e:	4914      	ldr	r1, [pc, #80]	@ (8006160 <UART_AdvFeatureConfig+0xd4>)
 8006110:	400b      	ands	r3, r1
 8006112:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006114:	430b      	orrs	r3, r1
 8006116:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006118:	2380      	movs	r3, #128	@ 0x80
 800611a:	035b      	lsls	r3, r3, #13
 800611c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800611e:	429a      	cmp	r2, r3
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006122:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	d506      	bpl.n	8006136 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006128:	6802      	ldr	r2, [r0, #0]
 800612a:	6853      	ldr	r3, [r2, #4]
 800612c:	490d      	ldr	r1, [pc, #52]	@ (8006164 <UART_AdvFeatureConfig+0xd8>)
 800612e:	400b      	ands	r3, r1
 8006130:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006132:	430b      	orrs	r3, r1
 8006134:	6053      	str	r3, [r2, #4]
}
 8006136:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006138:	6802      	ldr	r2, [r0, #0]
 800613a:	6853      	ldr	r3, [r2, #4]
 800613c:	490a      	ldr	r1, [pc, #40]	@ (8006168 <UART_AdvFeatureConfig+0xdc>)
 800613e:	400b      	ands	r3, r1
 8006140:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006142:	430b      	orrs	r3, r1
 8006144:	6053      	str	r3, [r2, #4]
 8006146:	e7ec      	b.n	8006122 <UART_AdvFeatureConfig+0x96>
 8006148:	ffff7fff 	.word	0xffff7fff
 800614c:	fffdffff 	.word	0xfffdffff
 8006150:	fffeffff 	.word	0xfffeffff
 8006154:	fffbffff 	.word	0xfffbffff
 8006158:	ffffefff 	.word	0xffffefff
 800615c:	ffffdfff 	.word	0xffffdfff
 8006160:	ffefffff 	.word	0xffefffff
 8006164:	fff7ffff 	.word	0xfff7ffff
 8006168:	ff9fffff 	.word	0xff9fffff

0800616c <UART_WaitOnFlagUntilTimeout>:
{
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	46ce      	mov	lr, r9
 8006170:	4647      	mov	r7, r8
 8006172:	b580      	push	{r7, lr}
 8006174:	4680      	mov	r8, r0
 8006176:	000d      	movs	r5, r1
 8006178:	0016      	movs	r6, r2
 800617a:	4699      	mov	r9, r3
 800617c:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	4643      	mov	r3, r8
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69dc      	ldr	r4, [r3, #28]
 8006184:	402c      	ands	r4, r5
 8006186:	1b64      	subs	r4, r4, r5
 8006188:	4262      	negs	r2, r4
 800618a:	4154      	adcs	r4, r2
 800618c:	42b4      	cmp	r4, r6
 800618e:	d136      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006190:	1c7a      	adds	r2, r7, #1
 8006192:	d0f6      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006194:	f7fd faa2 	bl	80036dc <HAL_GetTick>
 8006198:	464b      	mov	r3, r9
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	42b8      	cmp	r0, r7
 800619e:	d833      	bhi.n	8006208 <UART_WaitOnFlagUntilTimeout+0x9c>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	d033      	beq.n	800620c <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061a4:	4643      	mov	r3, r8
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	6813      	ldr	r3, [r2, #0]
 80061aa:	075b      	lsls	r3, r3, #29
 80061ac:	d5e7      	bpl.n	800617e <UART_WaitOnFlagUntilTimeout+0x12>
 80061ae:	002b      	movs	r3, r5
 80061b0:	3b40      	subs	r3, #64	@ 0x40
 80061b2:	2140      	movs	r1, #64	@ 0x40
 80061b4:	438b      	bics	r3, r1
 80061b6:	d0e2      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061b8:	69d3      	ldr	r3, [r2, #28]
 80061ba:	071b      	lsls	r3, r3, #28
 80061bc:	d411      	bmi.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061be:	69d3      	ldr	r3, [r2, #28]
 80061c0:	051b      	lsls	r3, r3, #20
 80061c2:	d5dc      	bpl.n	800617e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c4:	2380      	movs	r3, #128	@ 0x80
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff fb26 	bl	800581c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d0:	2390      	movs	r3, #144	@ 0x90
 80061d2:	2220      	movs	r2, #32
 80061d4:	4641      	mov	r1, r8
 80061d6:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 80061d8:	3b0c      	subs	r3, #12
 80061da:	2200      	movs	r2, #0
 80061dc:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80061de:	2003      	movs	r0, #3
 80061e0:	e00e      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e2:	2408      	movs	r4, #8
 80061e4:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fb18 	bl	800581c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ec:	2390      	movs	r3, #144	@ 0x90
 80061ee:	4642      	mov	r2, r8
 80061f0:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 80061f2:	3b0c      	subs	r3, #12
 80061f4:	2200      	movs	r2, #0
 80061f6:	4641      	mov	r1, r8
 80061f8:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 80061fa:	2001      	movs	r0, #1
 80061fc:	e000      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 80061fe:	2000      	movs	r0, #0
}
 8006200:	bcc0      	pop	{r6, r7}
 8006202:	46b9      	mov	r9, r7
 8006204:	46b0      	mov	r8, r6
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006208:	2003      	movs	r0, #3
 800620a:	e7f9      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0x94>
 800620c:	2003      	movs	r0, #3
 800620e:	e7f7      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0x94>

08006210 <UART_CheckIdleState>:
{
 8006210:	b530      	push	{r4, r5, lr}
 8006212:	b083      	sub	sp, #12
 8006214:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006216:	2390      	movs	r3, #144	@ 0x90
 8006218:	2200      	movs	r2, #0
 800621a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800621c:	f7fd fa5e 	bl	80036dc <HAL_GetTick>
 8006220:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	071b      	lsls	r3, r3, #28
 8006228:	d411      	bmi.n	800624e <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	075b      	lsls	r3, r3, #29
 8006230:	d429      	bmi.n	8006286 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8006232:	2320      	movs	r3, #32
 8006234:	2288      	movs	r2, #136	@ 0x88
 8006236:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006238:	3204      	adds	r2, #4
 800623a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623c:	2300      	movs	r3, #0
 800623e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006240:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 8006242:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 8006244:	2384      	movs	r3, #132	@ 0x84
 8006246:	2200      	movs	r2, #0
 8006248:	54e2      	strb	r2, [r4, r3]
}
 800624a:	b003      	add	sp, #12
 800624c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624e:	2180      	movs	r1, #128	@ 0x80
 8006250:	4b20      	ldr	r3, [pc, #128]	@ (80062d4 <UART_CheckIdleState+0xc4>)
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	0003      	movs	r3, r0
 8006256:	2200      	movs	r2, #0
 8006258:	0389      	lsls	r1, r1, #14
 800625a:	0020      	movs	r0, r4
 800625c:	f7ff ff86 	bl	800616c <UART_WaitOnFlagUntilTimeout>
 8006260:	2800      	cmp	r0, #0
 8006262:	d0e2      	beq.n	800622a <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006268:	2301      	movs	r3, #1
 800626a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	2080      	movs	r0, #128	@ 0x80
 8006274:	4383      	bics	r3, r0
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800627c:	2388      	movs	r3, #136	@ 0x88
 800627e:	2220      	movs	r2, #32
 8006280:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8006282:	387d      	subs	r0, #125	@ 0x7d
 8006284:	e7de      	b.n	8006244 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <UART_CheckIdleState+0xc4>)
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	002b      	movs	r3, r5
 800628e:	2200      	movs	r2, #0
 8006290:	03c9      	lsls	r1, r1, #15
 8006292:	0020      	movs	r0, r4
 8006294:	f7ff ff6a 	bl	800616c <UART_WaitOnFlagUntilTimeout>
 8006298:	2800      	cmp	r0, #0
 800629a:	d0ca      	beq.n	8006232 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a0:	2201      	movs	r2, #1
 80062a2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	680b      	ldr	r3, [r1, #0]
 80062aa:	4d0b      	ldr	r5, [pc, #44]	@ (80062d8 <UART_CheckIdleState+0xc8>)
 80062ac:	402b      	ands	r3, r5
 80062ae:	600b      	str	r3, [r1, #0]
 80062b0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062bc:	6821      	ldr	r1, [r4, #0]
 80062be:	688b      	ldr	r3, [r1, #8]
 80062c0:	4393      	bics	r3, r2
 80062c2:	608b      	str	r3, [r1, #8]
 80062c4:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80062c8:	238c      	movs	r3, #140	@ 0x8c
 80062ca:	321f      	adds	r2, #31
 80062cc:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80062ce:	2003      	movs	r0, #3
 80062d0:	e7b8      	b.n	8006244 <UART_CheckIdleState+0x34>
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	01ffffff 	.word	0x01ffffff
 80062d8:	fffffedf 	.word	0xfffffedf

080062dc <HAL_UART_Init>:
{
 80062dc:	b510      	push	{r4, lr}
 80062de:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80062e0:	d030      	beq.n	8006344 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80062e2:	2388      	movs	r3, #136	@ 0x88
 80062e4:	58c3      	ldr	r3, [r0, r3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80062ea:	2388      	movs	r3, #136	@ 0x88
 80062ec:	2224      	movs	r2, #36	@ 0x24
 80062ee:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	2101      	movs	r1, #1
 80062f6:	438b      	bics	r3, r1
 80062f8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11d      	bne.n	800633c <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006300:	0020      	movs	r0, r4
 8006302:	f7ff fdfd 	bl	8005f00 <UART_SetConfig>
 8006306:	2801      	cmp	r0, #1
 8006308:	d011      	beq.n	800632e <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	6853      	ldr	r3, [r2, #4]
 800630e:	490e      	ldr	r1, [pc, #56]	@ (8006348 <HAL_UART_Init+0x6c>)
 8006310:	400b      	ands	r3, r1
 8006312:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	6893      	ldr	r3, [r2, #8]
 8006318:	212a      	movs	r1, #42	@ 0x2a
 800631a:	438b      	bics	r3, r1
 800631c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	6813      	ldr	r3, [r2, #0]
 8006322:	3929      	subs	r1, #41	@ 0x29
 8006324:	430b      	orrs	r3, r1
 8006326:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006328:	0020      	movs	r0, r4
 800632a:	f7ff ff71 	bl	8006210 <UART_CheckIdleState>
}
 800632e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006330:	3384      	adds	r3, #132	@ 0x84
 8006332:	2200      	movs	r2, #0
 8006334:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8006336:	f7fd f871 	bl	800341c <HAL_UART_MspInit>
 800633a:	e7d6      	b.n	80062ea <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800633c:	0020      	movs	r0, r4
 800633e:	f7ff fea5 	bl	800608c <UART_AdvFeatureConfig>
 8006342:	e7dd      	b.n	8006300 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8006344:	2001      	movs	r0, #1
 8006346:	e7f2      	b.n	800632e <HAL_UART_Init+0x52>
 8006348:	ffffb7ff 	.word	0xffffb7ff

0800634c <UART_Start_Receive_DMA>:
{
 800634c:	b510      	push	{r4, lr}
 800634e:	0004      	movs	r4, r0
 8006350:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8006352:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006354:	225c      	movs	r2, #92	@ 0x5c
 8006356:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	3234      	adds	r2, #52	@ 0x34
 800635a:	2100      	movs	r1, #0
 800635c:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800635e:	3a04      	subs	r2, #4
 8006360:	3122      	adds	r1, #34	@ 0x22
 8006362:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8006364:	3a0c      	subs	r2, #12
 8006366:	5882      	ldr	r2, [r0, r2]
 8006368:	2a00      	cmp	r2, #0
 800636a:	d013      	beq.n	8006394 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800636c:	4921      	ldr	r1, [pc, #132]	@ (80063f4 <UART_Start_Receive_DMA+0xa8>)
 800636e:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006370:	2080      	movs	r0, #128	@ 0x80
 8006372:	5822      	ldr	r2, [r4, r0]
 8006374:	4920      	ldr	r1, [pc, #128]	@ (80063f8 <UART_Start_Receive_DMA+0xac>)
 8006376:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006378:	5822      	ldr	r2, [r4, r0]
 800637a:	4920      	ldr	r1, [pc, #128]	@ (80063fc <UART_Start_Receive_DMA+0xb0>)
 800637c:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 800637e:	5822      	ldr	r2, [r4, r0]
 8006380:	2100      	movs	r1, #0
 8006382:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006384:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	3124      	adds	r1, #36	@ 0x24
 800638a:	5820      	ldr	r0, [r4, r0]
 800638c:	f7fe f860 	bl	8004450 <HAL_DMA_Start_IT>
 8006390:	2800      	cmp	r0, #0
 8006392:	d126      	bne.n	80063e2 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	2301      	movs	r3, #1
 80063a0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	6810      	ldr	r0, [r2, #0]
 80063a8:	33ff      	adds	r3, #255	@ 0xff
 80063aa:	4303      	orrs	r3, r0
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b6:	2301      	movs	r3, #1
 80063b8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	6821      	ldr	r1, [r4, #0]
 80063be:	688a      	ldr	r2, [r1, #8]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	608a      	str	r2, [r1, #8]
 80063c4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063cc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	6893      	ldr	r3, [r2, #8]
 80063d4:	2040      	movs	r0, #64	@ 0x40
 80063d6:	4303      	orrs	r3, r0
 80063d8:	6093      	str	r3, [r2, #8]
 80063da:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80063de:	2000      	movs	r0, #0
}
 80063e0:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063e2:	2390      	movs	r3, #144	@ 0x90
 80063e4:	2210      	movs	r2, #16
 80063e6:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 80063e8:	3b04      	subs	r3, #4
 80063ea:	3210      	adds	r2, #16
 80063ec:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 80063ee:	2001      	movs	r0, #1
 80063f0:	e7f6      	b.n	80063e0 <UART_Start_Receive_DMA+0x94>
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	08005e69 	.word	0x08005e69
 80063f8:	08005e49 	.word	0x08005e49
 80063fc:	08005a8f 	.word	0x08005a8f

08006400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006404:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 800640a:	336a      	adds	r3, #106	@ 0x6a
 800640c:	2201      	movs	r2, #1
 800640e:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8006410:	2001      	movs	r0, #1
 8006412:	2368      	movs	r3, #104	@ 0x68
 8006414:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006418:	6803      	ldr	r3, [r0, #0]
 800641a:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006420:	4f08      	ldr	r7, [pc, #32]	@ (8006444 <UARTEx_SetNbDataToProcess+0x44>)
 8006422:	5cf8      	ldrb	r0, [r7, r3]
 8006424:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006426:	4e08      	ldr	r6, [pc, #32]	@ (8006448 <UARTEx_SetNbDataToProcess+0x48>)
 8006428:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800642a:	f7f9 fef3 	bl	8000214 <__divsi3>
 800642e:	236a      	movs	r3, #106	@ 0x6a
 8006430:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006432:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006434:	0f5b      	lsrs	r3, r3, #29
 8006436:	5cf8      	ldrb	r0, [r7, r3]
 8006438:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800643a:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643c:	f7f9 feea 	bl	8000214 <__divsi3>
 8006440:	b280      	uxth	r0, r0
 8006442:	e7e6      	b.n	8006412 <UARTEx_SetNbDataToProcess+0x12>
 8006444:	08006a20 	.word	0x08006a20
 8006448:	08006a18 	.word	0x08006a18

0800644c <HAL_UARTEx_WakeupCallback>:
}
 800644c:	4770      	bx	lr

0800644e <HAL_UARTEx_RxFifoFullCallback>:
}
 800644e:	4770      	bx	lr

08006450 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006450:	4770      	bx	lr
	...

08006454 <HAL_UARTEx_DisableFifoMode>:
{
 8006454:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006456:	2384      	movs	r3, #132	@ 0x84
 8006458:	5cc3      	ldrb	r3, [r0, r3]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d015      	beq.n	800648a <HAL_UARTEx_DisableFifoMode+0x36>
 800645e:	2484      	movs	r4, #132	@ 0x84
 8006460:	2601      	movs	r6, #1
 8006462:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8006464:	2588      	movs	r5, #136	@ 0x88
 8006466:	2324      	movs	r3, #36	@ 0x24
 8006468:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800646a:	6802      	ldr	r2, [r0, #0]
 800646c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800646e:	6811      	ldr	r1, [r2, #0]
 8006470:	43b1      	bics	r1, r6
 8006472:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006474:	4a06      	ldr	r2, [pc, #24]	@ (8006490 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8006476:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006478:	2200      	movs	r2, #0
 800647a:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647c:	6801      	ldr	r1, [r0, #0]
 800647e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006480:	2320      	movs	r3, #32
 8006482:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8006484:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8006486:	2000      	movs	r0, #0
}
 8006488:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800648a:	2002      	movs	r0, #2
 800648c:	e7fc      	b.n	8006488 <HAL_UARTEx_DisableFifoMode+0x34>
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	dfffffff 	.word	0xdfffffff

08006494 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	0004      	movs	r4, r0
 8006498:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800649a:	2384      	movs	r3, #132	@ 0x84
 800649c:	5cc3      	ldrb	r3, [r0, r3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d01b      	beq.n	80064da <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80064a2:	2584      	movs	r5, #132	@ 0x84
 80064a4:	2001      	movs	r0, #1
 80064a6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80064a8:	2688      	movs	r6, #136	@ 0x88
 80064aa:	2324      	movs	r3, #36	@ 0x24
 80064ac:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	4381      	bics	r1, r0
 80064b6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	6883      	ldr	r3, [r0, #8]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	08d9      	lsrs	r1, r3, #3
 80064c0:	4311      	orrs	r1, r2
 80064c2:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 80064c4:	0020      	movs	r0, r4
 80064c6:	f7ff ff9b 	bl	8006400 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80064ce:	2320      	movs	r3, #32
 80064d0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80064d2:	2300      	movs	r3, #0
 80064d4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80064d6:	2000      	movs	r0, #0
}
 80064d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80064da:	2002      	movs	r0, #2
 80064dc:	e7fc      	b.n	80064d8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080064e0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	0004      	movs	r4, r0
 80064e4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80064e6:	2284      	movs	r2, #132	@ 0x84
 80064e8:	5c82      	ldrb	r2, [r0, r2]
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	d01b      	beq.n	8006526 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80064ee:	2584      	movs	r5, #132	@ 0x84
 80064f0:	2001      	movs	r0, #1
 80064f2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80064f4:	2688      	movs	r6, #136	@ 0x88
 80064f6:	2224      	movs	r2, #36	@ 0x24
 80064f8:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80064fe:	6811      	ldr	r1, [r2, #0]
 8006500:	4381      	bics	r1, r0
 8006502:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	6891      	ldr	r1, [r2, #8]
 8006508:	4808      	ldr	r0, [pc, #32]	@ (800652c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800650a:	4001      	ands	r1, r0
 800650c:	4319      	orrs	r1, r3
 800650e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006510:	0020      	movs	r0, r4
 8006512:	f7ff ff75 	bl	8006400 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800651a:	2320      	movs	r3, #32
 800651c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800651e:	2300      	movs	r3, #0
 8006520:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006522:	2000      	movs	r0, #0
}
 8006524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8006526:	2002      	movs	r0, #2
 8006528:	e7fc      	b.n	8006524 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800652a:	46c0      	nop			@ (mov r8, r8)
 800652c:	f1ffffff 	.word	0xf1ffffff

08006530 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8006530:	b510      	push	{r4, lr}
 8006532:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006534:	238c      	movs	r3, #140	@ 0x8c
 8006536:	58c3      	ldr	r3, [r0, r3]
 8006538:	2b20      	cmp	r3, #32
 800653a:	d12b      	bne.n	8006594 <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 800653c:	2900      	cmp	r1, #0
 800653e:	d02b      	beq.n	8006598 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
 8006540:	2a00      	cmp	r2, #0
 8006542:	d02b      	beq.n	800659c <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	015b      	lsls	r3, r3, #5
 8006548:	6880      	ldr	r0, [r0, #8]
 800654a:	4298      	cmp	r0, r3
 800654c:	d105      	bne.n	800655a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
        return  HAL_ERROR;
 8006554:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8006556:	07cb      	lsls	r3, r1, #31
 8006558:	d41d      	bmi.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800655a:	2301      	movs	r3, #1
 800655c:	66e3      	str	r3, [r4, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655e:	2300      	movs	r3, #0
 8006560:	6723      	str	r3, [r4, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006562:	0020      	movs	r0, r4
 8006564:	f7ff fef2 	bl	800634c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8006568:	2800      	cmp	r0, #0
 800656a:	d114      	bne.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d001      	beq.n	8006576 <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
        status = HAL_ERROR;
 8006572:	2001      	movs	r0, #1
 8006574:	e00f      	b.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	2110      	movs	r1, #16
 800657a:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	2301      	movs	r3, #1
 8006582:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	430b      	orrs	r3, r1
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	f38c 8810 	msr	PRIMASK, ip
}
 8006592:	e000      	b.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    return HAL_BUSY;
 8006594:	2002      	movs	r0, #2
}
 8006596:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8006598:	2001      	movs	r0, #1
 800659a:	e7fc      	b.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800659c:	2001      	movs	r0, #1
 800659e:	e7fa      	b.n	8006596 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>

080065a0 <logf>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	1c05      	adds	r5, r0, #0
 80065a4:	f000 f82c 	bl	8006600 <__ieee754_logf>
 80065a8:	1c29      	adds	r1, r5, #0
 80065aa:	1c04      	adds	r4, r0, #0
 80065ac:	1c28      	adds	r0, r5, #0
 80065ae:	f7fa fef3 	bl	8001398 <__aeabi_fcmpun>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d110      	bne.n	80065d8 <logf+0x38>
 80065b6:	2100      	movs	r1, #0
 80065b8:	1c28      	adds	r0, r5, #0
 80065ba:	f7f9 ff3d 	bl	8000438 <__aeabi_fcmpgt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d10a      	bne.n	80065d8 <logf+0x38>
 80065c2:	2100      	movs	r1, #0
 80065c4:	1c28      	adds	r0, r5, #0
 80065c6:	f7f9 ff1d 	bl	8000404 <__aeabi_fcmpeq>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d006      	beq.n	80065dc <logf+0x3c>
 80065ce:	f000 f951 	bl	8006874 <__errno>
 80065d2:	2322      	movs	r3, #34	@ 0x22
 80065d4:	4c06      	ldr	r4, [pc, #24]	@ (80065f0 <logf+0x50>)
 80065d6:	6003      	str	r3, [r0, #0]
 80065d8:	1c20      	adds	r0, r4, #0
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	f000 f94a 	bl	8006874 <__errno>
 80065e0:	2321      	movs	r3, #33	@ 0x21
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	4803      	ldr	r0, [pc, #12]	@ (80065f4 <logf+0x54>)
 80065e6:	f000 f807 	bl	80065f8 <nanf>
 80065ea:	1c04      	adds	r4, r0, #0
 80065ec:	e7f4      	b.n	80065d8 <logf+0x38>
 80065ee:	46c0      	nop			@ (mov r8, r8)
 80065f0:	ff800000 	.word	0xff800000
 80065f4:	08006a28 	.word	0x08006a28

080065f8 <nanf>:
 80065f8:	4800      	ldr	r0, [pc, #0]	@ (80065fc <nanf+0x4>)
 80065fa:	4770      	bx	lr
 80065fc:	7fc00000 	.word	0x7fc00000

08006600 <__ieee754_logf>:
 8006600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006602:	0043      	lsls	r3, r0, #1
 8006604:	b085      	sub	sp, #20
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <__ieee754_logf+0x18>
 800660a:	20cc      	movs	r0, #204	@ 0xcc
 800660c:	2100      	movs	r1, #0
 800660e:	0600      	lsls	r0, r0, #24
 8006610:	f7fa f936 	bl	8000880 <__aeabi_fdiv>
 8006614:	b005      	add	sp, #20
 8006616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006618:	1e03      	subs	r3, r0, #0
 800661a:	da04      	bge.n	8006626 <__ieee754_logf+0x26>
 800661c:	1c01      	adds	r1, r0, #0
 800661e:	f7fa fc57 	bl	8000ed0 <__aeabi_fsub>
 8006622:	2100      	movs	r1, #0
 8006624:	e7f4      	b.n	8006610 <__ieee754_logf+0x10>
 8006626:	21ff      	movs	r1, #255	@ 0xff
 8006628:	05c9      	lsls	r1, r1, #23
 800662a:	4288      	cmp	r0, r1
 800662c:	db03      	blt.n	8006636 <__ieee754_logf+0x36>
 800662e:	1c01      	adds	r1, r0, #0
 8006630:	f7f9 ff34 	bl	800049c <__aeabi_fadd>
 8006634:	e7ee      	b.n	8006614 <__ieee754_logf+0x14>
 8006636:	2280      	movs	r2, #128	@ 0x80
 8006638:	2100      	movs	r1, #0
 800663a:	0412      	lsls	r2, r2, #16
 800663c:	4290      	cmp	r0, r2
 800663e:	da06      	bge.n	800664e <__ieee754_logf+0x4e>
 8006640:	2198      	movs	r1, #152	@ 0x98
 8006642:	05c9      	lsls	r1, r1, #23
 8006644:	f7fa faea 	bl	8000c1c <__aeabi_fmul>
 8006648:	2119      	movs	r1, #25
 800664a:	0003      	movs	r3, r0
 800664c:	4249      	negs	r1, r1
 800664e:	15da      	asrs	r2, r3, #23
 8006650:	3a7f      	subs	r2, #127	@ 0x7f
 8006652:	1852      	adds	r2, r2, r1
 8006654:	2180      	movs	r1, #128	@ 0x80
 8006656:	025b      	lsls	r3, r3, #9
 8006658:	0a5e      	lsrs	r6, r3, #9
 800665a:	4b74      	ldr	r3, [pc, #464]	@ (800682c <__ieee754_logf+0x22c>)
 800665c:	20fe      	movs	r0, #254	@ 0xfe
 800665e:	0409      	lsls	r1, r1, #16
 8006660:	18f3      	adds	r3, r6, r3
 8006662:	400b      	ands	r3, r1
 8006664:	21fe      	movs	r1, #254	@ 0xfe
 8006666:	0580      	lsls	r0, r0, #22
 8006668:	4058      	eors	r0, r3
 800666a:	15dd      	asrs	r5, r3, #23
 800666c:	4330      	orrs	r0, r6
 800666e:	0589      	lsls	r1, r1, #22
 8006670:	18ad      	adds	r5, r5, r2
 8006672:	f7fa fc2d 	bl	8000ed0 <__aeabi_fsub>
 8006676:	0032      	movs	r2, r6
 8006678:	4b6d      	ldr	r3, [pc, #436]	@ (8006830 <__ieee754_logf+0x230>)
 800667a:	320f      	adds	r2, #15
 800667c:	1c04      	adds	r4, r0, #0
 800667e:	421a      	tst	r2, r3
 8006680:	d145      	bne.n	800670e <__ieee754_logf+0x10e>
 8006682:	2100      	movs	r1, #0
 8006684:	f7f9 febe 	bl	8000404 <__aeabi_fcmpeq>
 8006688:	2800      	cmp	r0, #0
 800668a:	d011      	beq.n	80066b0 <__ieee754_logf+0xb0>
 800668c:	2000      	movs	r0, #0
 800668e:	2d00      	cmp	r5, #0
 8006690:	d0c0      	beq.n	8006614 <__ieee754_logf+0x14>
 8006692:	0028      	movs	r0, r5
 8006694:	f7fa feb6 	bl	8001404 <__aeabi_i2f>
 8006698:	4966      	ldr	r1, [pc, #408]	@ (8006834 <__ieee754_logf+0x234>)
 800669a:	1c04      	adds	r4, r0, #0
 800669c:	f7fa fabe 	bl	8000c1c <__aeabi_fmul>
 80066a0:	4965      	ldr	r1, [pc, #404]	@ (8006838 <__ieee754_logf+0x238>)
 80066a2:	1c05      	adds	r5, r0, #0
 80066a4:	1c20      	adds	r0, r4, #0
 80066a6:	f7fa fab9 	bl	8000c1c <__aeabi_fmul>
 80066aa:	1c01      	adds	r1, r0, #0
 80066ac:	1c28      	adds	r0, r5, #0
 80066ae:	e7bf      	b.n	8006630 <__ieee754_logf+0x30>
 80066b0:	4962      	ldr	r1, [pc, #392]	@ (800683c <__ieee754_logf+0x23c>)
 80066b2:	1c20      	adds	r0, r4, #0
 80066b4:	f7fa fab2 	bl	8000c1c <__aeabi_fmul>
 80066b8:	1c01      	adds	r1, r0, #0
 80066ba:	20fc      	movs	r0, #252	@ 0xfc
 80066bc:	0580      	lsls	r0, r0, #22
 80066be:	f7fa fc07 	bl	8000ed0 <__aeabi_fsub>
 80066c2:	1c21      	adds	r1, r4, #0
 80066c4:	1c06      	adds	r6, r0, #0
 80066c6:	1c20      	adds	r0, r4, #0
 80066c8:	f7fa faa8 	bl	8000c1c <__aeabi_fmul>
 80066cc:	1c01      	adds	r1, r0, #0
 80066ce:	1c30      	adds	r0, r6, #0
 80066d0:	f7fa faa4 	bl	8000c1c <__aeabi_fmul>
 80066d4:	1c06      	adds	r6, r0, #0
 80066d6:	2d00      	cmp	r5, #0
 80066d8:	d101      	bne.n	80066de <__ieee754_logf+0xde>
 80066da:	1c31      	adds	r1, r6, #0
 80066dc:	e079      	b.n	80067d2 <__ieee754_logf+0x1d2>
 80066de:	0028      	movs	r0, r5
 80066e0:	f7fa fe90 	bl	8001404 <__aeabi_i2f>
 80066e4:	4953      	ldr	r1, [pc, #332]	@ (8006834 <__ieee754_logf+0x234>)
 80066e6:	1c05      	adds	r5, r0, #0
 80066e8:	f7fa fa98 	bl	8000c1c <__aeabi_fmul>
 80066ec:	4952      	ldr	r1, [pc, #328]	@ (8006838 <__ieee754_logf+0x238>)
 80066ee:	1c07      	adds	r7, r0, #0
 80066f0:	1c28      	adds	r0, r5, #0
 80066f2:	f7fa fa93 	bl	8000c1c <__aeabi_fmul>
 80066f6:	1c01      	adds	r1, r0, #0
 80066f8:	1c30      	adds	r0, r6, #0
 80066fa:	f7fa fbe9 	bl	8000ed0 <__aeabi_fsub>
 80066fe:	1c21      	adds	r1, r4, #0
 8006700:	f7fa fbe6 	bl	8000ed0 <__aeabi_fsub>
 8006704:	1c01      	adds	r1, r0, #0
 8006706:	1c38      	adds	r0, r7, #0
 8006708:	f7fa fbe2 	bl	8000ed0 <__aeabi_fsub>
 800670c:	e782      	b.n	8006614 <__ieee754_logf+0x14>
 800670e:	2180      	movs	r1, #128	@ 0x80
 8006710:	05c9      	lsls	r1, r1, #23
 8006712:	f7f9 fec3 	bl	800049c <__aeabi_fadd>
 8006716:	1c01      	adds	r1, r0, #0
 8006718:	1c20      	adds	r0, r4, #0
 800671a:	f7fa f8b1 	bl	8000880 <__aeabi_fdiv>
 800671e:	9000      	str	r0, [sp, #0]
 8006720:	0028      	movs	r0, r5
 8006722:	f7fa fe6f 	bl	8001404 <__aeabi_i2f>
 8006726:	9900      	ldr	r1, [sp, #0]
 8006728:	9001      	str	r0, [sp, #4]
 800672a:	1c08      	adds	r0, r1, #0
 800672c:	f7fa fa76 	bl	8000c1c <__aeabi_fmul>
 8006730:	4b43      	ldr	r3, [pc, #268]	@ (8006840 <__ieee754_logf+0x240>)
 8006732:	1c01      	adds	r1, r0, #0
 8006734:	18f3      	adds	r3, r6, r3
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	9002      	str	r0, [sp, #8]
 800673a:	f7fa fa6f 	bl	8000c1c <__aeabi_fmul>
 800673e:	4941      	ldr	r1, [pc, #260]	@ (8006844 <__ieee754_logf+0x244>)
 8006740:	1c07      	adds	r7, r0, #0
 8006742:	f7fa fa6b 	bl	8000c1c <__aeabi_fmul>
 8006746:	4940      	ldr	r1, [pc, #256]	@ (8006848 <__ieee754_logf+0x248>)
 8006748:	f7f9 fea8 	bl	800049c <__aeabi_fadd>
 800674c:	1c39      	adds	r1, r7, #0
 800674e:	f7fa fa65 	bl	8000c1c <__aeabi_fmul>
 8006752:	493e      	ldr	r1, [pc, #248]	@ (800684c <__ieee754_logf+0x24c>)
 8006754:	f7f9 fea2 	bl	800049c <__aeabi_fadd>
 8006758:	1c39      	adds	r1, r7, #0
 800675a:	f7fa fa5f 	bl	8000c1c <__aeabi_fmul>
 800675e:	493c      	ldr	r1, [pc, #240]	@ (8006850 <__ieee754_logf+0x250>)
 8006760:	f7f9 fe9c 	bl	800049c <__aeabi_fadd>
 8006764:	9902      	ldr	r1, [sp, #8]
 8006766:	f7fa fa59 	bl	8000c1c <__aeabi_fmul>
 800676a:	493a      	ldr	r1, [pc, #232]	@ (8006854 <__ieee754_logf+0x254>)
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	1c38      	adds	r0, r7, #0
 8006770:	f7fa fa54 	bl	8000c1c <__aeabi_fmul>
 8006774:	4938      	ldr	r1, [pc, #224]	@ (8006858 <__ieee754_logf+0x258>)
 8006776:	f7f9 fe91 	bl	800049c <__aeabi_fadd>
 800677a:	1c39      	adds	r1, r7, #0
 800677c:	f7fa fa4e 	bl	8000c1c <__aeabi_fmul>
 8006780:	4936      	ldr	r1, [pc, #216]	@ (800685c <__ieee754_logf+0x25c>)
 8006782:	f7f9 fe8b 	bl	800049c <__aeabi_fadd>
 8006786:	1c39      	adds	r1, r7, #0
 8006788:	f7fa fa48 	bl	8000c1c <__aeabi_fmul>
 800678c:	1c01      	adds	r1, r0, #0
 800678e:	9802      	ldr	r0, [sp, #8]
 8006790:	f7f9 fe84 	bl	800049c <__aeabi_fadd>
 8006794:	4b32      	ldr	r3, [pc, #200]	@ (8006860 <__ieee754_logf+0x260>)
 8006796:	9a03      	ldr	r2, [sp, #12]
 8006798:	1b9b      	subs	r3, r3, r6
 800679a:	1c07      	adds	r7, r0, #0
 800679c:	4313      	orrs	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd2f      	ble.n	8006802 <__ieee754_logf+0x202>
 80067a2:	21fc      	movs	r1, #252	@ 0xfc
 80067a4:	1c20      	adds	r0, r4, #0
 80067a6:	0589      	lsls	r1, r1, #22
 80067a8:	f7fa fa38 	bl	8000c1c <__aeabi_fmul>
 80067ac:	1c21      	adds	r1, r4, #0
 80067ae:	f7fa fa35 	bl	8000c1c <__aeabi_fmul>
 80067b2:	1c01      	adds	r1, r0, #0
 80067b4:	1c06      	adds	r6, r0, #0
 80067b6:	1c38      	adds	r0, r7, #0
 80067b8:	f7f9 fe70 	bl	800049c <__aeabi_fadd>
 80067bc:	9900      	ldr	r1, [sp, #0]
 80067be:	f7fa fa2d 	bl	8000c1c <__aeabi_fmul>
 80067c2:	1c07      	adds	r7, r0, #0
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	d106      	bne.n	80067d6 <__ieee754_logf+0x1d6>
 80067c8:	1c01      	adds	r1, r0, #0
 80067ca:	1c30      	adds	r0, r6, #0
 80067cc:	f7fa fb80 	bl	8000ed0 <__aeabi_fsub>
 80067d0:	1c01      	adds	r1, r0, #0
 80067d2:	1c20      	adds	r0, r4, #0
 80067d4:	e798      	b.n	8006708 <__ieee754_logf+0x108>
 80067d6:	4917      	ldr	r1, [pc, #92]	@ (8006834 <__ieee754_logf+0x234>)
 80067d8:	9801      	ldr	r0, [sp, #4]
 80067da:	f7fa fa1f 	bl	8000c1c <__aeabi_fmul>
 80067de:	4916      	ldr	r1, [pc, #88]	@ (8006838 <__ieee754_logf+0x238>)
 80067e0:	1c05      	adds	r5, r0, #0
 80067e2:	9801      	ldr	r0, [sp, #4]
 80067e4:	f7fa fa1a 	bl	8000c1c <__aeabi_fmul>
 80067e8:	1c39      	adds	r1, r7, #0
 80067ea:	f7f9 fe57 	bl	800049c <__aeabi_fadd>
 80067ee:	1c01      	adds	r1, r0, #0
 80067f0:	1c30      	adds	r0, r6, #0
 80067f2:	f7fa fb6d 	bl	8000ed0 <__aeabi_fsub>
 80067f6:	1c21      	adds	r1, r4, #0
 80067f8:	f7fa fb6a 	bl	8000ed0 <__aeabi_fsub>
 80067fc:	1c01      	adds	r1, r0, #0
 80067fe:	1c28      	adds	r0, r5, #0
 8006800:	e782      	b.n	8006708 <__ieee754_logf+0x108>
 8006802:	1c01      	adds	r1, r0, #0
 8006804:	1c20      	adds	r0, r4, #0
 8006806:	f7fa fb63 	bl	8000ed0 <__aeabi_fsub>
 800680a:	9900      	ldr	r1, [sp, #0]
 800680c:	f7fa fa06 	bl	8000c1c <__aeabi_fmul>
 8006810:	1c06      	adds	r6, r0, #0
 8006812:	2d00      	cmp	r5, #0
 8006814:	d100      	bne.n	8006818 <__ieee754_logf+0x218>
 8006816:	e760      	b.n	80066da <__ieee754_logf+0xda>
 8006818:	4906      	ldr	r1, [pc, #24]	@ (8006834 <__ieee754_logf+0x234>)
 800681a:	9801      	ldr	r0, [sp, #4]
 800681c:	f7fa f9fe 	bl	8000c1c <__aeabi_fmul>
 8006820:	4905      	ldr	r1, [pc, #20]	@ (8006838 <__ieee754_logf+0x238>)
 8006822:	1c05      	adds	r5, r0, #0
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	f7fa f9f9 	bl	8000c1c <__aeabi_fmul>
 800682a:	e7e0      	b.n	80067ee <__ieee754_logf+0x1ee>
 800682c:	004afb20 	.word	0x004afb20
 8006830:	007ffff0 	.word	0x007ffff0
 8006834:	3f317180 	.word	0x3f317180
 8006838:	3717f7d1 	.word	0x3717f7d1
 800683c:	3eaaaaab 	.word	0x3eaaaaab
 8006840:	ffcf5c30 	.word	0xffcf5c30
 8006844:	3e178897 	.word	0x3e178897
 8006848:	3e3a3325 	.word	0x3e3a3325
 800684c:	3e924925 	.word	0x3e924925
 8006850:	3f2aaaab 	.word	0x3f2aaaab
 8006854:	3e1cd04f 	.word	0x3e1cd04f
 8006858:	3e638e29 	.word	0x3e638e29
 800685c:	3ecccccd 	.word	0x3ecccccd
 8006860:	0035c288 	.word	0x0035c288

08006864 <memset>:
 8006864:	0003      	movs	r3, r0
 8006866:	1882      	adds	r2, r0, r2
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	7019      	strb	r1, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <__errno>:
 8006874:	4b01      	ldr	r3, [pc, #4]	@ (800687c <__errno+0x8>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	4770      	bx	lr
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	20000010 	.word	0x20000010

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	2600      	movs	r6, #0
 8006884:	4c0c      	ldr	r4, [pc, #48]	@ (80068b8 <__libc_init_array+0x38>)
 8006886:	4d0d      	ldr	r5, [pc, #52]	@ (80068bc <__libc_init_array+0x3c>)
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	2600      	movs	r6, #0
 8006892:	f000 f819 	bl	80068c8 <_init>
 8006896:	4c0a      	ldr	r4, [pc, #40]	@ (80068c0 <__libc_init_array+0x40>)
 8006898:	4d0a      	ldr	r5, [pc, #40]	@ (80068c4 <__libc_init_array+0x44>)
 800689a:	1b64      	subs	r4, r4, r5
 800689c:	10a4      	asrs	r4, r4, #2
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	00b3      	lsls	r3, r6, #2
 80068a6:	58eb      	ldr	r3, [r5, r3]
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	00b3      	lsls	r3, r6, #2
 80068b0:	58eb      	ldr	r3, [r5, r3]
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	08006a2c 	.word	0x08006a2c
 80068bc:	08006a2c 	.word	0x08006a2c
 80068c0:	08006a30 	.word	0x08006a30
 80068c4:	08006a2c 	.word	0x08006a2c

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
